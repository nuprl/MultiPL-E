name: HumanEval_57_monotonic
language: rust
results:
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i <= j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkrl6myja.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpovxr5mcg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpntstzknh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    let mut min_value = l.iter().min().unwrap();\n    let mut max_value\
    \ = l.iter().max().unwrap();\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    l == l.iter().cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ubty2p0.rs:14:19\n   |\n\
    14 |         if l[i] < min_value {\n   |                   ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |         if l[i] < *min_value {\n   |                   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ubty2p0.rs:15:25\n   |\n11 |     let mut min_value\
    \ = l.iter().min().unwrap();\n   |                         -----------------------\
    \ expected due to this value\n...\n15 |             min_value = l[i];\n   |  \
    \                       ^^^^\n   |                         |\n   |           \
    \              expected `&isize`, found `isize`\n   |                        \
    \ help: consider borrowing here: `&l[i]`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp0ubty2p0.rs:17:19\n   |\n17 |         if l[i] > max_value {\n  \
    \ |                   ^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n17 |         if l[i] > *max_value {\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ubty2p0.rs:18:25\n\
    \   |\n12 |     let mut max_value = l.iter().max().unwrap();\n   |           \
    \              ----------------------- expected due to this value\n...\n18 | \
    \            max_value = l[i];\n   |                         ^^^^\n   |      \
    \                   |\n   |                         expected `&isize`, found `isize`\n\
    \   |                         help: consider borrowing here: `&l[i]`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if *i < min_value {\n            min_value\
    \ = *i;\n        }\n        if *i > max_value {\n            max_value = *i;\n\
    \        }\n    }\n    min_value < max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy522q7jx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpghi4jvj3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplymlu_71.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if *i < min_value {\n            min_value\
    \ = *i;\n        }\n        if *i > max_value {\n            max_value = *i;\n\
    \        }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptybjgjzn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    while\
    \ i < l.len() {\n        if l[i] < min_value {\n            min_value = l[i];\n\
    \        }\n        if l[i] > max_value {\n            max_value = l[i];\n   \
    \     }\n        i += 1;\n    }\n    if min_value > max_value {\n        return\
    \ false;\n    }\n    while i < l.len() {\n        if l[i] < min_value {\n    \
    \        min_value = l[i];\n        }\n        if l[i] > max_value {\n       \
    \     max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value >\
    \ max_value {\n        return false;\n    }\n    while j < l.len() {\n       \
    \ if l[j] > max_value {\n            max_value = l[j];\n        }\n        j +=\
    \ 1;\n    }\n    if min_value > max_value {\n        return false;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpebkhrotm.rs:69:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] > l[j] {\n            return false;\n\
    \        }\n        if l[i] < l[k] {\n            return true;\n        }\n  \
    \      if l[i] > l[k] {\n            i += 1;\n        } else {\n            j\
    \ += 1;\n        }\n        k -= 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9nh4h91c.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    while\
    \ i < l.len() {\n        if l[i] < min_value {\n            min_value = l[i];\n\
    \        }\n        if l[i] > max_value {\n            max_value = l[i];\n   \
    \     }\n        i += 1;\n    }\n    if min_value > max_value {\n        return\
    \ false;\n    }\n    while i < l.len() {\n        if l[i] < min_value {\n    \
    \        min_value = l[i];\n        }\n        if l[i] > max_value {\n       \
    \     max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value >\
    \ max_value {\n        return false;\n    }\n    while j < l.len() {\n       \
    \ if l[j] < min_value {\n            min_value = l[j];\n        }\n        if\
    \ l[j] > max_value {\n            max_value = l[j];\n        }\n        j += 1;\n\
    \    }\n    if min_value > max_value {\n        return false;\n    }\n    while\
    \ j < l.len() {\n        if l[j] < min_value {\n            min_value = l[j];\n\
    \        }\n        if l[j] > max_value {\n            max_value = l[j];\n   \
    \     }\n        j += 1;\n    }\n    if min_value > max_value {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxnq6cscd.rs:84:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzlsq330f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    let mut min_i = i;\n    let mut max_i = i;\n\
    \    while i < l.len() {\n        if l[i] < min_value {\n            min_value\
    \ = l[i];\n            min_i = i;\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n            max_i = i;\n        }\n        i +=\
    \ 1;\n    }\n    if min_i == max_i {\n        return false;\n    }\n    if min_value\
    \ < max_value {\n        for j in min_i .. max_i {\n            if l[j] < min_value\
    \ {\n                return false;\n            }\n        }\n    } else {\n \
    \       for j in min_i .. max_i {\n            if l[j] > max_value {\n       \
    \         return false;\n            }\n        }\n    }\n    return true;\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxeumnh_j.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_i = l.len()\
    \ - 1;\n    let mut min_j = 0;\n    let mut max_j = l.len() - 1;\n    while i\
    \ < max_i && j < max_j {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    if i == max_i && j == max_j {\n     \
    \   return false;\n    }\n    if i == max_i {\n        return true;\n    }\n \
    \   if j == max_j {\n        return false;\n    }\n    if l[i] < l[j] {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1n3a9at1.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbs66g149.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l.len() {\n        if l[i] < min_value {\n           \
    \ i += 1;\n        }\n        if l[i] > max_value {\n            j += 1;\n   \
    \     }\n        if j == i {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnek73zht.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpaomif97x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppaf7arjb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if j == i {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1xb4efd8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i <=\
    \ j {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] <\
    \ l[j] {\n            j -= 1;\n        } else {\n            return true;\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7bffr5y7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp91iniysv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            return false;\n        }\n        if\
    \ l[i] < l[j] {\n            i += 1;\n        } else {\n            j -= 1;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptp_wyrd1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_decreasing = false;\n        }\n        if l[i] < l[j]\
    \ {\n            is_increasing = false;\n        }\n        if l[i] > l[j] {\n\
    \            is_decreasing = false;\n        }\n        if l[i] < l[j] {\n   \
    \         is_increasing = false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    !is_increasing && !is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppcumy23u.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[j] > l[k] {\n            return false;\n\
    \        }\n        if l[j] < l[k] {\n            return true;\n        }\n  \
    \      if l[j] == l[k] {\n            i += 1;\n            j += 1;\n         \
    \   k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy3hpq29k.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    while\
    \ i < l.len() {\n        if l[i] < min_value {\n            min_value = l[i];\n\
    \        }\n        if l[i] > max_value {\n            max_value = l[i];\n   \
    \     }\n        i += 1;\n    }\n    if min_value > max_value {\n        return\
    \ false;\n    }\n    while i < l.len() {\n        if l[i] < min_value {\n    \
    \        min_value = l[i];\n        }\n        if l[i] > max_value {\n       \
    \     max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value >\
    \ max_value {\n        return false;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyycq8914.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_vec();\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] < l[j] {\n \
    \           i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    i == j\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnkdw16wg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        }\n        if\
    \ l[j] > l[i] {\n            is_increasing = false;\n        }\n        if l[j]\
    \ == l[i] {\n            i += 1;\n            j += 1;\n        }\n        if i\
    \ == l.len() - 1 {\n            if j == l.len() - 1 {\n                return\
    \ is_increasing || is_decreasing;\n            }\n            i += 1;\n      \
    \  }\n        if j == l.len() - 1 {\n            i += 1;\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0gjzjj6o.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7e4g3sq8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_decreasing = false;\n        } else {\n           \
    \ is_increasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n\
    \            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5ezgxtjv.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.iter().all(|&x| x < l.iter().last().unwrap())\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpimvpl1yx.rs:11:27\n   |\n\
    11 |     l.iter().all(|&x| x < l.iter().last().unwrap())\n   |               \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n11 |     l.iter().all(|&x| x <\
    \ *l.iter().last().unwrap())\n   |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == l.len()\
    \ || is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpoubokeb7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv1om2wrz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            i += 1;\n            j\
    \ -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi7xdayqc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if *i < min_value {\n            min_value\
    \ = *i;\n        }\n        if *i > max_value {\n            max_value = *i;\n\
    \        }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptsqpkapn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let\
    \ mut n = l.len();\n    while i < n {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            i += 1;\n            j += 1;\n        }\n        if i == n ||\
    \ j == n {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu8z1gegj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_increasing = false;\n        }\n        if l[i] < l[j]\
    \ {\n            is_decreasing = false;\n        }\n        i += 1;\n        j\
    \ -= 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp99yd_23y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgjeon3i4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0qpcq45i.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        if l[i] < min_value {\n            return false;\n    \
    \    }\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppxj8wdg6.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxqu5j621.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_monotonic\
    \ = false;\n    let mut last_monotonic_val = l[0];\n    for &x in l {\n      \
    \  if i == j {\n            last_monotonic = true;\n            last_monotonic_val\
    \ = x;\n        }\n        if last_monotonic {\n            if x > last_monotonic_val\
    \ {\n                last_monotonic = false;\n                last_monotonic_val\
    \ = x;\n            }\n        } else {\n            if x < last_monotonic_val\
    \ {\n                last_monotonic = true;\n                last_monotonic_val\
    \ = x;\n            }\n        }\n        i += 1;\n        j += 1;\n    }\n  \
    \  last_monotonic\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw4_5o4mi.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_j = l.iter().max_by_key(|&x| x).unwrap();\n  \
    \  while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            i += 1;\n            j += 1;\n        }\n    }\n    i == l.len()\
    \ || j == l.len()\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb2hp9va4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpicbsz0hq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            return false;\n\
    \        }\n        if l[i] > l[j] {\n            i += 1;\n        }\n       \
    \ if l[i] < l[k] {\n            j += 1;\n        }\n        if l[i] > l[k] {\n\
    \            k -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5jn0nzzh.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm2ddaof9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        }\n        if\
    \ l[j] > l[i] {\n            is_increasing = false;\n        }\n        if l[j]\
    \ == l[i] {\n            i += 1;\n            j += 1;\n        }\n        if i\
    \ == l.len() - 1 {\n            break;\n        }\n    }\n    !is_increasing &&\
    \ !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph54_5_gf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8xznncko.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqgw14m2_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz4vk2339.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] > l[j] {\n            return false;\n\
    \        }\n        if l[i] < l[k] {\n            return true;\n        }\n  \
    \      if l[i] > l[k] {\n            i += 1;\n        } else {\n            j\
    \ += 1;\n        }\n        k -= 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbox9_0f3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk8gtosv3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6nnj3yec.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            return false;\n        }\n        if\
    \ l[i] < l[j] {\n            i += 1;\n        } else {\n            j -= 1;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvotsewcv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n        if i == j {\n            return true;\n    \
    \    }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp545ye96q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk_p9r47r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl1n3q1hm.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n\n    while i < j {\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        } else {\n      \
    \      is_increasing = false;\n        }\n        i += 1;\n        j -= 1;\n \
    \   }\n\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3sb94xz4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    i == l.len() || is_increasing || is_decreasing\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc8t24b37.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_i = l.iter().max_by_key(|&x| x).unwrap();\n  \
    \  while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n            min_i\
    \ = l[i];\n            i += 1;\n        } else {\n            max_i = l[j];\n\
    \            j += 1;\n        }\n    }\n    if i == l.len() {\n        return\
    \ true;\n    }\n    if j == l.len() {\n        return false;\n    }\n    if l[i]\
    \ < min_i {\n        return true;\n    }\n    if l[i] > max_i {\n        return\
    \ false;\n    }\n    monotonic(l.iter().skip(i).take(l.len() - i).collect())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp65hx3ixa.rs:15:21\n   |\n\
    11 |     let mut min_i = l.iter().min_by_key(|&x| x).unwrap();\n   |         \
    \            ------------------------------------ expected due to this value\n\
    ...\n15 |             min_i = l[i];\n   |                     ^^^^\n   |     \
    \                |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&l[i]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp65hx3ixa.rs:18:21\n   |\n12 |     let mut max_i\
    \ = l.iter().max_by_key(|&x| x).unwrap();\n   |                     ------------------------------------\
    \ expected due to this value\n...\n18 |             max_i = l[j];\n   |      \
    \               ^^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&l[j]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp65hx3ixa.rs:28:15\n\
    \   |\n28 |     if l[i] < min_i {\n   |               ^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |  \
    \   if l[i] < *min_i {\n   |               +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp65hx3ixa.rs:31:15\n   |\n31 |     if l[i] > max_i {\n   |     \
    \          ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n31 |     if l[i] > *max_i {\n   |               +\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmp65hx3ixa.rs:34:15\n     |\n34   |     monotonic(l.iter().skip(i).take(l.len()\
    \ - i).collect())\n     |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |     |\n     |     required by a bound introduced by this call\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 5 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] > l[j] {\n            return false;\n\
    \        }\n        if l[i] < l[j] {\n            return true;\n        }\n  \
    \      if l[i] == l[j] {\n            i += 1;\n            j += 1;\n        }\n\
    \        if i == k {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyjjpu0wa.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   i += 1;\n            j += 1;\n        }\n        if i == k {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpot86rprz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] > l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsumhea89.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_i = l.iter().max_by_key(|&x| x).unwrap();\n  \
    \  while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n        if i == min_i\
    \ && j == max_i {\n            return true;\n        }\n        if i == max_i\
    \ {\n            i += 1;\n        }\n        if j == min_i {\n            j +=\
    \ 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphela4wpq.rs:19:17\n   |\n\
    19 |         if i == min_i && j == max_i {\n   |                 ^^^^^ expected\
    \ `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphela4wpq.rs:19:31\n\
    \   |\n19 |         if i == min_i && j == max_i {\n   |                      \
    \         ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphela4wpq.rs:22:17\n   |\n22 |         if i == max_i {\n   |   \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphela4wpq.rs:25:17\n   |\n25 |         if j == min_i {\n\
    \   |                 ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = l.len();\n\
    \    let mut min_i = i;\n    let mut min_j = j;\n    let mut min_n = n;\n    let\
    \ mut min_min_i = min_i;\n    let mut min_min_j = min_j;\n    let mut min_min_n\
    \ = min_n;\n    let mut min_min_min_i = min_min_i;\n    let mut min_min_min_j\
    \ = min_min_j;\n    let mut min_min_min_n = min_min_n;\n    let mut min_min_min_min_i\
    \ = min_min_min_i;\n    let mut min_min_min_min_j = min_min_min_j;\n    let mut\
    \ min_min_min_min_n = min_min_min_n;\n    let mut min_min_min_min_min_i = min_min_min_min_i;\n\
    \    let mut min_min_min_min_min_j = min_min_min_min_j;\n    let mut min_min_min_min_min_n\
    \ = min_min_min_min_n;\n    let mut min_min_min_min_min_min_i = min_min_min_min_min_i;\n\
    \    let mut min_min_min_min_min_min_j = min_min_min_min_min_j;\n    let mut min_min_min_min_min_min_n\
    \ = min_min_min_min_min_min_n;\n    let mut min_min_min_min_min_min_min_i = min_min_min_min_min_min_i;\n\
    \    let mut min_min_min_min_min_min_min_j = min_min_min_min_min_min_j;\n    let\
    \ mut min_min_min_min_min_min_min_n = min_min_min_min_min_min_n;\n    let mut\
    \ min_min_min_min_min_min_min_i = min_min_min_min_min_min_i;\n    let mut min_min_min_min_min_min_min_j\
    \ = min_min_min_min_min_min_j;\n    let mut min_min_min_min_min_min_min_n = min_min_min_min_min_min_n;\n\
    \    let mut min_min_min_min_min_min_min_min_i = min_min_min_min_min_min_i;\n\
    \    let mut min_min_min_min_min_min_min_j = min_min_min_min_min_j;\n    let mut\
    \ min_min_min_min_min_min_min_n = min_min_min_min_min_n;\n    let mut min_min_min_min_min_min_min_i\
    \ = min_min_min_min_i;\n    let mut min_min_min_min_min_min_min_j = min_min_min_j;\n\
    \    let mut min_min_min_min_min_min_min_n = min_min_n;\n    let mut min_min_min_min_min_min_min_min_i\
    \ = min_min_i;\n    let mut min_min_min_min_min_min_min_min_j = min_min_j;\n \
    \   let mut min_min_min_min_min_min_min_n = min_n;\n    let \n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpphdhpkjv.rs:46:1\n  \
    \ |\n46 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `min_min_min_min_min_min_n`\
    \ in this scope\n  --> /tmp/tmpphdhpkjv.rs:29:41\n   |\n29 |     let mut min_min_min_min_min_min_n\
    \ = min_min_min_min_min_min_n;\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `min_min_min_min_min_min_i`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ < l[j] {\n            is_increasing = false;\n        }\n        if l[i] > l[j]\
    \ {\n            is_decreasing = false;\n        }\n        if l[i] == l[j] {\n\
    \            i += 1;\n            j -= 1;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_increasing = false;\n        }\n        if l[i] < l[j]\
    \ {\n            is_decreasing = false;\n        }\n        if l[i] < l[j] &&\
    \ l[i] > l[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq8qc1bwy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == l.len()\
    \ || is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps72b09xq.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcx8hosu9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.iter().all(|&x| x <= l.iter().last().unwrap())\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpznv0i96v.rs:11:28\n   |\n\
    11 |     l.iter().all(|&x| x <= l.iter().last().unwrap())\n   |              \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n11 |     l.iter().all(|&x| x <=\
    \ *l.iter().last().unwrap())\n   |                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3l284l14.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    while\
    \ i < l.len() {\n        if l[i] < min_value {\n            min_value = l[i];\n\
    \        }\n        if l[i] > max_value {\n            max_value = l[i];\n   \
    \     }\n        i += 1;\n    }\n    if min_value > max_value {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value > max_value {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    while i < l.len() {\n        if l[i] < min_value {\n          \
    \  min_value = l[i];\n        }\n        if l[i] > max_value {\n            max_value\
    \ = l[i];\n        }\n        i += 1;\n    }\n    if min_value > max_value {\n\
    \        return false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut min_value = l[0];\n    let mut max_value = l[0];\n    while i < l.len()\
    \ {\n        if l[i] < min_value {\n            min_value = l[i];\n        }\n\
    \        if l[i] > max_value {\n            max_value = l[i];\n        }\n   \
    \     i += 1;\n    }\n    if min_value > max_value {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    while\
    \ i < l.len() {\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8ep0lzot.rs:122:3\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |                   \
    \                  - unclosed delimiter\n...\n109 |     while i < l.len() {\n\
    \    |                       - this delimiter might not be properly closed...\n\
    110 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    122 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8ep0lzot.rs:8:32\n\
    \  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------            \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_decreasing = false;\n        }\n        if l[i] < l[j]\
    \ {\n            is_increasing = false;\n        }\n        if l[i] < l[j] &&\
    \ l[i] > l[j] {\n            return false;\n        }\n        if l[i] > l[j]\
    \ && l[i] < l[j] {\n            i += 1;\n            j -= 1;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7s_2m5r.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.len()\
    \ - 1;\n    let mut min_j = l.len() - 1;\n    while i < min_i && j < min_j {\n\
    \        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j += 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    if i == min_i && j == min_j {\n        return false;\n    }\n\
    \    if i == min_i {\n        return true;\n    }\n    if j == min_j {\n     \
    \   return false;\n    }\n    if l[i] < l[j] {\n        return true;\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3qonk8wu.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt4u34j2c.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if *i < min_value {\n            min_value\
    \ = *i;\n        }\n        if *i > max_value {\n            max_value = *i;\n\
    \        }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmo42olbk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        }\n        if\
    \ l[j] > l[i] {\n            is_increasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmvwbdk3u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcodlowjk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() {\n        if l[j] > l[j + 1] {\n           \
    \ i += 1;\n            j += 1;\n        } else {\n            is_increasing =\
    \ false;\n        }\n    }\n    is_increasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_i = l.len()\
    \ - 1;\n    let mut min_i = 0;\n    let mut max_j = l.len() - 1;\n    let mut\
    \ min_j = 0;\n    let mut max_val = l[0];\n    let mut min_val = l[0];\n    let\
    \ mut min_val_i = i;\n    let mut min_val_j = j;\n    let mut max_val_i = i;\n\
    \    let mut max_val_j = j;\n    let mut max_val_val = l[0];\n    let mut min_val_val\
    \ = l[0];\n    let mut min_val_val_i = i;\n    let mut min_val_val_j = j;\n  \
    \  let mut max_val_val_i = i;\n    let mut max_val_val_j = j;\n    let mut max_val_val_val\
    \ = l[0];\n    let mut min_val_val_val = l[0];\n    let mut min_val_val_val_i\
    \ = i;\n    let mut min_val_val_val_j = j;\n    let mut max_val_val_val_i = i;\n\
    \    let mut max_val_val_val_j = j;\n    let mut max_val_val_val_val = l[0];\n\
    \    let mut min_val_val_val_val = l[0];\n    let mut min_val_val_val_val_i =\
    \ i;\n    let mut min_val_val_val_val_j = j;\n    let mut max_val_val_val_val_i\
    \ = i;\n    let mut max_val_val_val_val_j = j;\n    let mut max_val_val_val_val_val\
    \ = l[0];\n    let mut min_val_val_val_val_val = l[0];\n    let mut min_val_val_val_val_val_i\
    \ = i;\n    let mut min_val_val_val_val_val_j = j;\n    let mut max_val_val_val_val_val_i\
    \ = i;\n    let mut max_val_val_val_val_val_j = j;\n    let mut max_val_val_val_val_val_val\
    \ = l[0];\n    let mut min_val_val_val_val_val_val = l[0];\n    let mut min_val_val_val_val_val_val_i\
    \ = i;\n    let mut min_val_val_val_val_val_val_j = j;\n    let mut max_val_val_val_val_val_val_i\
    \ = i;\n    let mut max_val_val_val_val_val_val_j = j;\n    let mut max_val_val_val_val_val_val_val\
    \ = l[0];\n    let mut min_val_val_val_val_val_val_val = l[0];\n    let mut min_val_val_val_val_val_val_val_i\
    \ = i;\n    let mut min_val_val_val_val_val_val_val_j = j;\n    let mut max_val_val_val_val_val_val_val_i\
    \ = i;\n    let mut max_val_val_val_\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvkigmmtm.rs:56:29\n   |\n\
    56 |     let mut max_val_val_val_\n   |                             ^ help: add\
    \ `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpvkigmmtm.rs:8:32\n  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n\
    \  |    ---------                   ^^^^ expected `bool`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuvu0p5ll.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    for\
    \ i in l.iter().rev() {\n        if *i < min_val {\n            min_val = *i;\n\
    \        }\n        if *i > max_val {\n            max_val = *i;\n        }\n\
    \    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpulvk3isx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx6f0mn47.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bamhetf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ < l[j] {\n            is_increasing = false;\n        } else {\n           \
    \ is_decreasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        if l[i] < min_value {\n            return false;\n    \
    \    }\n        if l[i] > max_value {\n            return false;\n        }\n\
    \        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcjmpz598.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n        if i == j {\n            return false;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8gtzzasv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplr1b73vk.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j -= 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7092i9pd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuf_mc0oo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    i == l.len() || is_increasing || is_decreasing\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp77bzegzk.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfjnxy8la.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l.len() {\n        if l[i] < min_value {\n           \
    \ min_value = l[i];\n        }\n        if l[i] > max_value {\n            max_value\
    \ = l[i];\n        }\n        i += 1;\n    }\n    if min_value > max_value {\n\
    \        return false;\n    }\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5ycg7fng.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_increasing = false;\n        }\n        if l[i] < l[j]\
    \ {\n            is_decreasing = false;\n        }\n        if l[i] < l[j] &&\
    \ is_increasing {\n            i += 1;\n        }\n        if l[i] > l[j] && is_decreasing\
    \ {\n            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut min_j = l.iter().min_by_key(|&x| x).unwrap();\n  \
    \  while i < l.len() {\n        if l[i] < min_i {\n            min_i = l[i];\n\
    \            j = i;\n        }\n        if l[j] > min_j {\n            min_j =\
    \ l[j];\n            i = j;\n        }\n        i += 1;\n        j += 1;\n   \
    \ }\n    min_i == min_j\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdppecpgf.rs:14:19\n   |\n\
    14 |         if l[i] < min_i {\n   |                   ^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \       if l[i] < *min_i {\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdppecpgf.rs:15:21\n   |\n11 |     let mut min_i = l.iter().min_by_key(|&x|\
    \ x).unwrap();\n   |                     ------------------------------------\
    \ expected due to this value\n...\n15 |             min_i = l[i];\n   |      \
    \               ^^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&l[i]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdppecpgf.rs:18:19\n\
    \   |\n18 |         if l[j] > min_j {\n   |                   ^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |  \
    \       if l[j] > *min_j {\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdppecpgf.rs:19:21\n   |\n12 |     let mut min_j = l.iter().min_by_key(|&x|\
    \ x).unwrap();\n   |                     ------------------------------------\
    \ expected due to this value\n...\n19 |             min_j = l[j];\n   |      \
    \               ^^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&l[j]`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j -= 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5tslqg1f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp60kvmsdg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpncxrejs3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < l.len() {\n  \
    \      if l[i] < l[j] {\n            i += 1;\n        }\n        if l[i] > l[j]\
    \ {\n            j += 1;\n        }\n        if l[i] < l[k] {\n            i +=\
    \ 1;\n        }\n        if l[i] > l[k] {\n            k += 1;\n        }\n  \
    \  }\n    i == l.len() || j == l.len() || k == l.len()\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            i += 1;\n            j\
    \ -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxtdhlwz6.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9yt6mh3x.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9jzoqyiw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr_4e39c_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2c6pp5c0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j -= 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwp8o4y3g.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf5iie431.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    for\
    \ i in l.iter().rev() {\n        if *i < min_val {\n            min_val = *i;\n\
    \        }\n        if *i > max_val {\n            max_val = *i;\n        }\n\
    \    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwp2hed__.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.len()\
    \ - 1;\n    let mut min_j = l.len() - 1;\n    let mut min_value = l[0];\n    while\
    \ i < min_i || j < min_j {\n        if i == min_i && j == min_j {\n          \
    \  return min_value < l[i];\n        }\n        if i == min_i {\n            return\
    \ min_value < l[j];\n        }\n        if j == min_j {\n            return min_value\
    \ < l[i];\n        }\n        if l[i] < l[j] {\n            i += 1;\n        }\
    \ else {\n            j += 1;\n        }\n        min_value = l[i];\n        min_i\
    \ = i;\n        min_j = j;\n    }\n    min_value < l[i]\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwjeruot6.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_vec();\n    l.sort();\n    let mut i = 0;\n\
    \    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] > l[j] {\n \
    \           return false;\n        }\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpit2nuubx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzp0z7sau.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprpt1c57n.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0jj47hyx.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa4it4yox.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwo1uq07t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1q63jr4x.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    for\
    \ i in l.iter().rev() {\n        if *i < min_val {\n            min_val = *i;\n\
    \        }\n        if *i > max_val {\n            max_val = *i;\n        }\n\
    \    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpubqv3y9h.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ < max_value {\n        true\n    } else {\n        false\n    }\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjgp484b9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkh2gjlo4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl2eiuxi8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[j] > l[k] {\n            return false;\n\
    \        }\n        if l[j] < l[k] {\n            return true;\n        }\n  \
    \      if l[j] == l[k] {\n            i += 1;\n            j += 1;\n         \
    \   k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdu94gj4f.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n        if i == j {\n            is_increasing = is_increasing &&\
    \ l[i] > l[j];\n            is_decreasing = is_decreasing && l[i] < l[j];\n  \
    \      }\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmp6jnf4gvx.rs:14:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgunnd1sz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if i < min_value {\n            min_value\
    \ = i;\n        }\n        if i > max_value {\n            max_value = i;\n  \
    \      }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvc9vx1yx.rs:12:16\n   |\n\
    12 |         if i < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvc9vx1yx.rs:13:25\n   |\n9  |     let mut min_value = l[0];\n\
    \   |                         ---- expected due to this value\n...\n13 |     \
    \        min_value = i;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     min_value = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvc9vx1yx.rs:15:16\n   |\n15 |         if i > max_value\
    \ {\n   |                ^^^^^^^^^\n   |                |\n   |              \
    \  expected `&isize`, found `isize`\n   |                help: consider borrowing\
    \ here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvc9vx1yx.rs:16:25\n\
    \   |\n10 |     let mut max_value = l[0];\n   |                         ---- expected\
    \ due to this value\n...\n16 |             max_value = i;\n   |              \
    \           ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             max_value = *i;\n   |                   \
    \      +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ == l[j] {\n            i += 1;\n            j += 1;\n        }\n        else\
    \ {\n            i += 1;\n        }\n    }\n    !is_increasing && !is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa2nemvx5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    let mut j = 1;\n    let mut k = l.len() - 1;\n    while i < k {\n\
    \        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp03eq6xz9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_increasing = false;\n        } else {\n           \
    \ is_decreasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3zpgubym.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] > l[j] {\n            i += 1;\n    \
    \    } else if l[i] < l[j] {\n            j += 1;\n        } else {\n        \
    \    return l[i] > l[j];\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph3rb3szt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if *i < min_value {\n            min_value\
    \ = *i;\n        }\n        if *i > max_value {\n            max_value = *i;\n\
    \        }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptae7cg8c.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if !is_increasing && !is_decreasing\
    \ {\n            return false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprqxnljmj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i <= j {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] > l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpth2ut0sy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    let mut min_i = i;\n    let mut max_j = i;\n\
    \    let mut min_j = i;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    let mut min_i = i;\n    let mut max_j = i;\n    let mut min_j =\
    \ i;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    let mut\
    \ min_i = i;\n    let mut max_j = i;\n    let mut min_j = i;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    let mut min_i = i;\n    let mut\
    \ max_j = i;\n    let mut min_j = i;\n    let mut min_value = l[0];\n    let mut\
    \ max_value = l[0];\n    let mut min_i = i;\n    let mut max_j = i;\n    let mut\
    \ min_j = i;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n \
    \   let mut min_i = i;\n    let mut max_j = i;\n    let mut min_j = i;\n    let\
    \ mut min_value = l[0];\n    let mut max_value = l[0];\n    let mut min_i = i;\n\
    \    let mut max_j = i;\n    let mut min_j = i;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    let mut min_i = i;\n    let mut max_j = i;\n\
    \    let mut min_j = i;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    let mut min_i = i;\n    let mut max_j = i;\n    let mut min_j =\
    \ i;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    let mut\
    \ min_i = i;\n    let mut max_j = i;\n    let mut min_j = i;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    let mut min_i = i;\n    let mut\
    \ max_j = i;\n    let mut min_j = i;\n    let mut min_value = l[0];\n    let mut\
    \ max_value = l[0];\n    let mut min_i = i;\n    let mut max_j = i;\n    let mut\
    \ min_j = i;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n \
    \   let mut min_i = i;\n    let mut max_j = i;\n    let mut min_j = i;\n    let\
    \ mut min_value = l[0];\n    let mut max_value = l[0];\n    let mut min_\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnjrybu2d.rs:78:17\n   |\n\
    78 |     let mut min_\n   |                 ^ help: add `;` here\n79 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnjrybu2d.rs:8:32\n\
    \  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------            \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbeuu0pxw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgedi7vks.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0nddc3u7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let\
    \ mut l = l.iter().cloned().collect::<Vec<_>>();\n    while i < l.len() {\n  \
    \      if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j] {\n\
    \            j += 1;\n        } else {\n            i += 1;\n            j +=\
    \ 1;\n        }\n        if i == l.len() {\n            return true;\n       \
    \ }\n        if j == l.len() {\n            return false;\n        }\n       \
    \ if l[i] < l[j] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n        if i == l.len() {\n            return true;\n        }\n \
    \       if j == l.len() {\n            return false;\n        }\n        if l[i]\
    \ > l[j] {\n            i += 1;\n        } else {\n            j += 1;\n     \
    \   }\n        if i == l.len() {\n            return true;\n        }\n      \
    \  if j == l.len() {\n            return false;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3qjof18s.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_val = l[0];\n\
    \    let mut max_val = l[0];\n    while i < l.len() {\n        if l[i] < min_val\
    \ {\n            min_val = l[i];\n        }\n        if l[i] > max_val {\n   \
    \         max_val = l[i];\n        }\n        if l[j] < min_val {\n          \
    \  min_val = l[j];\n        }\n        if l[j] > max_val {\n            max_val\
    \ = l[j];\n        }\n        i += 1;\n        j += 1;\n    }\n    if min_val\
    \ == max_val {\n        return true;\n    }\n    if min_val < max_val {\n    \
    \    return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppld8moo6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp28fffr9q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ < max_value {\n        true\n    } else {\n        false\n    }\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1fagf_2d.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl5feiw61.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j -= 1;\n        } else {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5cvympy_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfos6f37r.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i = l.iter().min().unwrap();\n\
    \    let mut max_j = l.iter().max().unwrap();\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j += 1;\n        } else {\n            if min_i > max_j {\n \
    \               min_i = l.iter().min().unwrap();\n                max_j = l.iter().max().unwrap();\n\
    \            }\n            i += 1;\n            j += 1;\n        }\n    }\n \
    \   min_i <= max_j\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1to5lzsf.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \        if i == l.len() {\n            break;\n        }\n    }\n    !is_increasing\
    \ && !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp13gjx1dr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if i < min_value {\n            min_value\
    \ = i;\n        }\n        if i > max_value {\n            max_value = i;\n  \
    \      }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1y3apuga.rs:12:16\n   |\n\
    12 |         if i < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1y3apuga.rs:13:25\n   |\n9  |     let mut min_value = l[0];\n\
    \   |                         ---- expected due to this value\n...\n13 |     \
    \        min_value = i;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     min_value = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1y3apuga.rs:15:16\n   |\n15 |         if i > max_value\
    \ {\n   |                ^^^^^^^^^\n   |                |\n   |              \
    \  expected `&isize`, found `isize`\n   |                help: consider borrowing\
    \ here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1y3apuga.rs:16:25\n\
    \   |\n10 |     let mut max_value = l[0];\n   |                         ---- expected\
    \ due to this value\n...\n16 |             max_value = i;\n   |              \
    \           ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             max_value = *i;\n   |                   \
    \      +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while i < l.len() &&\
    \ j < l.len() {\n        if l[i] < l[j] {\n            i += 1;\n        } else\
    \ if l[i] > l[j] {\n            j += 1;\n        } else {\n            i += 1;\n\
    \            j += 1;\n        }\n    }\n    i == l.len() || j == l.len()\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd8e2za92.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l.iter().rev() {\n        if *i < min_value {\n            min_value\
    \ = *i;\n        }\n        if *i > max_value {\n            max_value = *i;\n\
    \        }\n    }\n    min_value < max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8480syn5.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ min_val = l.iter().min().unwrap();\n    let mut max_val = l.iter().max().unwrap();\n\
    \    l.sort_unstable();\n    for i in l.iter().cloned().collect::<Vec<_>>() {\n\
    \        if *i < min_val {\n            min_val = *i;\n        }\n        if *i\
    \ > max_val {\n            max_val = *i;\n        }\n    }\n    min_val < max_val\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpeq7jtjm8.rs:14:12\n\
    \   |\n14 |         if *i < min_val {\n   |            ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpeq7jtjm8.rs:15:23\n   |\n15 |\
    \             min_val = *i;\n   |                       ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpeq7jtjm8.rs:17:12\n   |\n17 |\
    \         if *i > max_val {\n   |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpeq7jtjm8.rs:18:23\n   |\n18 |        \
    \     max_val = *i;\n   |                       ^^\n\nerror: aborting due to 4\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    let mut min_pos = 0;\n    let mut max_pos\
    \ = 0;\n    let mut min_pos = 0;\n    let mut max_pos = 0;\n    let mut min_pos\
    \ = 0;\n    let mut max_pos = 0;\n    for i in l.iter().rev() {\n        if i\
    \ < min_value {\n            min_value = i;\n            min_pos = i;\n      \
    \  }\n        if i > max_value {\n            max_value = i;\n            max_pos\
    \ = i;\n        }\n        if i == min_value {\n            if min_pos < i {\n\
    \                min_pos = i;\n            }\n        }\n        if i == max_value\
    \ {\n            if max_pos < i {\n                max_pos = i;\n            }\n\
    \        }\n    }\n    if min_pos == max_pos {\n        return false;\n    }\n\
    \    if min_pos < max_pos {\n        return true;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7imne5hl.rs:20:16\n   |\n\
    20 |         if i < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7imne5hl.rs:21:25\n   |\n11 |     let mut min_value = l[0];\n\
    \   |                         ---- expected due to this value\n...\n21 |     \
    \        min_value = i;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |        \
    \     min_value = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7imne5hl.rs:22:23\n   |\n17 |     let mut min_pos = 0;\n\
    \   |                       - expected due to this value\n...\n22 |          \
    \   min_pos = i;\n   |                       ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n22 |             min_pos\
    \ = *i;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7imne5hl.rs:24:16\n   |\n24 |         if i > max_value {\n   |     \
    \           ^^^^^^^^^\n   |                |\n   |                expected `&isize`,\
    \ found `isize`\n   |                help: consider borrowing here: `&max_value`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7imne5hl.rs:25:25\n   |\n12 |\
    \     let mut max_value = l[0];\n   |                         ---- expected due\
    \ to this value\n...\n25 |             max_value = i;\n   |                  \
    \       ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n25 |             max_value = *i;\n   |                   \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7imne5hl.rs:26:23\n\
    \   |\n18 |     let mut max_pos = 0;\n   |                       - expected due\
    \ to this value\n...\n26 |             max_pos = i;\n   |                    \
    \   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n26 |             max_pos = *i;\n   |                       +\n\
    \nerror[E0277]: can't compare "
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j -= 1;\n        } else {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjftkkqpa.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[j] > l[k] {\n            return false;\n\
    \        }\n        if l[j] < l[k] {\n            return true;\n        }\n  \
    \      i += 1;\n        j += 1;\n        k -= 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu2ht2r4e.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for &x in l {\n        if x < min_value {\n            min_value = x;\n   \
    \     }\n        if x > max_value {\n            max_value = x;\n        }\n \
    \   }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86sdza2o.rs:11:9\n   |\n\
    11 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp28z3hkah.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_decreasing = false;\n        } else {\n           \
    \ is_increasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n\
    \            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6m8odo4b.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgnhvrvn9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp70hlj2h4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpujdi0fdb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.iter().all(|&x| x > l.last().unwrap())\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvjgwc6vd.rs:11:27\n   |\n\
    11 |     l.iter().all(|&x| x > l.last().unwrap())\n   |                      \
    \     ^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |     l.iter().all(|&x| x > *l.last().unwrap())\n\
    \   |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ < l[j] {\n            is_increasing = false;\n        } else {\n           \
    \ is_decreasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for &x in l {\n        if x < min_value {\n            min_value = x;\n   \
    \     }\n        if x > max_value {\n            max_value = x;\n        }\n \
    \   }\n    min_value <= max_value\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vdnze1q.rs:11:9\n   |\n\
    11 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while\
    \ i < l.len() {\n        if l[i] < l[j] {\n            i += 1;\n        } else\
    \ if l[i] > l[j] {\n            j += 1;\n        } else {\n            i += 1;\n\
    \            j += 1;\n        }\n        if j == i {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf_3u8krf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    for\
    \ i in l.iter().rev() {\n        if *i < min_val {\n            min_val = *i;\n\
    \        }\n        if *i > max_val {\n            max_val = *i;\n        }\n\
    \    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6l9ky94d.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_i = -1;\n\
    \    let mut last_j = -1;\n    let mut last_val = l[0];\n    while i < l.len()\
    \ {\n        let val = l[i];\n        if val < last_val {\n            i += 1;\n\
    \        } else {\n            i += 1;\n            last_i = i;\n        }\n \
    \       while j < l.len() {\n            let val = l[j];\n            if val >\
    \ last_val {\n                j += 1;\n            } else {\n                j\
    \ += 1;\n                last_j = j;\n            }\n            if i == j {\n\
    \                return true;\n            }\n        }\n        last_val = val;\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp8tsyxenn.rs:11:22\n\
    \   |\n11 |     let mut last_i = -1;\n   |                      ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmp8tsyxenn.rs:12:22\n   |\n12 |     let mut\
    \ last_j = -1;\n   |                      ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.iter().all(|&x| x < l.last())\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkpygp5b2.rs:11:27\n   |\n\
    11 |     l.iter().all(|&x| x < l.last())\n   |                           ^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzdvw0co4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while i < l.len() {\n\
    \        if l[i] < l[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n        if i == l.len() || j == l.len() {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgtldsbaf.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkk4s6p3u.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprhexvkmz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[j] > l[k] {\n            return false;\n\
    \        }\n        if l[j] < l[k] {\n            return true;\n        }\n  \
    \      if l[j] == l[k] {\n            i += 1;\n            j += 1;\n         \
    \   k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpys_efhde.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while i < l.len() {\n\
    \        if l[i] < l[j] {\n            i += 1;\n        } else {\n           \
    \ j += 1;\n        }\n        if i == l.len() || l[i] < l[j] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5uzrbto6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] > l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] < l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu5edy4_l.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    let mut min_pos = 0;\n    let mut max_pos\
    \ = 0;\n    while i < l.len() {\n        if l[i] < min_value {\n            min_value\
    \ = l[i];\n            min_pos = i;\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n            max_pos = i;\n        }\n        i\
    \ += 1;\n    }\n    if min_pos == max_pos {\n        return false;\n    }\n  \
    \  let mut i = min_pos;\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n            min_pos = i;\n        }\n    \
    \    i += 1;\n    }\n    if min_pos == max_pos {\n        return false;\n    }\n\
    \    let mut i = max_pos;\n    while i < l.len() {\n        if l[i] > max_value\
    \ {\n            max_value = l[i];\n            max_pos = i;\n        }\n    \
    \    i += 1;\n    }\n    if min_pos == max_pos {\n        return false;\n    }\n\
    \    let mut i = min_pos;\n    while i < l.len() {\n        if l[i] > max_value\
    \ {\n            max_value = l[i];\n            max_pos = i;\n        }\n    \
    \    i += 1;\n    }\n    if min_pos == max_pos {\n        return false;\n    }\n\
    \    let mut i = max_pos;\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n            min_pos = i;\n        }\n    \
    \    i += 1;\n    }\n    if min_pos == max_pos {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7t5ui95p.rs:80:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt7a40ozc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[j] > l[k] {\n            return false;\n\
    \        }\n        if l[j] < l[k] {\n            return true;\n        }\n  \
    \      if l[j] == l[k] {\n            i += 1;\n            j += 1;\n        }\n\
    \        k -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxnnt02_2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j -= 1;\n        } else {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpckqdgmnj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ < l[j] {\n            is_increasing = false;\n        } else {\n           \
    \ is_decreasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[i] > l[j] {\n            is_decreasing = false;\n\
    \        } else {\n            is_increasing = false;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    i == l.len() || is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3wlxscvt.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n       \
    \     j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxroem2x7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i += 1;\n    \
    \    } else if l[i] > l[j] {\n            j += 1;\n        } else {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp8o82q7u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return false;\n\
    \        }\n        if l[i] > l[j] {\n            return true;\n        }\n  \
    \      if l[i] < l[k] {\n            i += 1;\n        }\n        if l[i] > l[k]\
    \ {\n            j += 1;\n        }\n        if j == i {\n            return false;\n\
    \        }\n        if j == k {\n            return true;\n        }\n       \
    \ k -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbri0_i0d.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ < l[j] {\n            is_increasing = false;\n        } else {\n           \
    \ is_decreasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        if l[i] > l[j] {\n            i += 1;\n        } else {\n\
    \            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb884d13v.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i <= k {\n        if l[i] > l[j] {\n            return false;\n\
    \        }\n        if l[i] < l[k] {\n            return true;\n        }\n  \
    \      i += 1;\n        j += 1;\n        k -= 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpivytp6gw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = l.len();\n\
    \    while i < n && j < n {\n        if l[i] < l[j] {\n            i += 1;\n \
    \       } else if l[i] > l[j] {\n            j += 1;\n        } else {\n     \
    \       i += 1;\n            j += 1;\n        }\n    }\n    i == n\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzardgp0a.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    while i < j {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        if l[i] > l[j] {\n        \
    \    break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7cwcouvc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    let mut min_value = l[k];\n    let mut max_value = l[k];\n    while\
    \ i < k {\n        if l[i] < min_value {\n            min_value = l[i];\n    \
    \    }\n        if l[i] > max_value {\n            max_value = l[i];\n       \
    \ }\n        i += 1;\n    }\n    while j >= 0 {\n        if l[j] > max_value {\n\
    \            max_value = l[j];\n        }\n        j -= 1;\n    }\n    if min_value\
    \ < max_value {\n        return true;\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpmiwlntrb.rs:27:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if j == i {\n          \
    \  break;\n        }\n        if l[j] > l[i] {\n            is_decreasing = false;\n\
    \        } else {\n            is_increasing = false;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj194ecku.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_monotonic\
    \ = false;\n    let mut last_monotonic_val = l[0];\n    for &x in l {\n      \
    \  if i == j {\n            last_monotonic = true;\n            last_monotonic_val\
    \ = x;\n        }\n        if last_monotonic {\n            if x < last_monotonic_val\
    \ {\n                last_monotonic = false;\n            } else {\n         \
    \       last_monotonic_val = x;\n            }\n        } else {\n           \
    \ if x > last_monotonic_val {\n                last_monotonic = true;\n      \
    \          last_monotonic_val = x;\n            }\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    last_monotonic\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpddtl62v_.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len() -\
    \ 1;\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n     \
    \   } else if l[i] > l[j] {\n            j += 1;\n        } else {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg2gn2mtt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ < l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] >\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n    }\n    i == l.len()\
    \ || j == l.len() || l[i] < l[j]\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_increasing = false;\n        } else {\n           \
    \ is_decreasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    i == j\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgjj6wwgv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjyps2oki.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7cvdth2o.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            is_decreasing = false;\n        } else {\n           \
    \ is_increasing = false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n\
    \            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpad7uxwc5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] > l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4rqzi5ki.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        if l[i] > l[j] {\n            i += 1;\n        } else if l[i] < l[j]\
    \ {\n            j -= 1;\n        } else {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpohppvj5g.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i <=\
    \ j {\n        if l[i] < l[j] {\n            i += 1;\n        } else if l[i] >\
    \ l[j] {\n            j -= 1;\n        } else {\n            return true;\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp41iihq2o.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.iter().all(|&x| x > l.last().unwrap())\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu2udr6fa.rs:11:27\n   |\n\
    11 |     l.iter().all(|&x| x > l.last().unwrap())\n   |                      \
    \     ^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |     l.iter().all(|&x| x > *l.last().unwrap())\n\
    \   |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < j {\n        if l[i]\
    \ < l[j] {\n            is_decreasing = false;\n        }\n        if l[i] > l[j]\
    \ {\n            is_increasing = false;\n        }\n        if l[i] == l[j] {\n\
    \            i += 1;\n            j -= 1;\n        }\n        i += 1;\n      \
    \  j -= 1;\n    }\n    i == j\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl42gt95a.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ < l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] >\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n        if i == l.len()\
    \ || j == l.len() {\n            break;\n        }\n    }\n    is_increasing ||\
    \ is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
