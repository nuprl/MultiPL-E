name: HumanEval_47_median
language: rust
results:
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n               \
    \   |median, elem| median + elem) / l.len()\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmpngr8f5ss.rs:8:41\n\
    \  |\n8 |                   |median, elem| median + elem) / l.len()\n  |     \
    \                                    ^ no implementation for `f64 + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `f64`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n --> /tmp/tmpngr8f5ss.rs:8:49\n  |\n8 |                  \
    \ |median, elem| median + elem) / l.len()\n  |                               \
    \                  ^ no implementation for `f64 / usize`\n  |\n  = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n  = help: the following other types\
    \ implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n           \
    \ <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a\
    \ i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a i64 as\
    \ Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n\
    \          and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n\
    \    s.sort();\n    s.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvy2wo6br.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (s.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    let len = l.len();\n    if len % 2 == 0 {\n     \
    \   l.len() / 2\n    } else {\n        l.len() / 2 + 1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp28lfm5cw.rs:11:9\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n11 |         l.len() / 2\n   |         ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n11 |         (l.len() / 2) as f64\n   |         +           ++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp28lfm5cw.rs:13:9\n   |\n6  | fn\
    \ median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n13 |         l.len() / 2 + 1\n   |      \
    \   ^^^^^^^^^^^^^^^ expected `f64`, found `usize`\n   |\nhelp: you can cast a\
    \ `usize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |         (l.len() / 2 + 1) as f64\n   |    \
    \     +               ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbt15tvqv.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(b).unwrap().sqrt().ok_or(\"\
    nan\")\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmppfn0b4_6.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n --> /tmp/tmppfn0b4_6.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok_or(\"\
    nan\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb32dkjur.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwxyc8c45.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        match\
    \ b {\n            None => a,\n            Some(x) => if x < a { a } else { x\
    \ },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpd7q570ls.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd7q570ls.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd7q570ls.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmpd7q570ls.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd7q570ls.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkvlera1d.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkvlera1d.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkqocqmv4.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if *a < *b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpb9qjpgr3.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb9qjpgr3.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(f64::nan())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp4sp555_c.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4sp555_c.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n  |                \
    \       ^ expected `isize`, found `f64`\n\nerror[E0599]: no function or associated\
    \ item named `nan` found for type `f64` in the current scope\n --> /tmp/tmp4sp555_c.rs:8:41\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n  |                \
    \                         ^^^\n  |                                         |\n\
    \  |                                         function or associated item not found\
    \ in `f64`\n  |                                         help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp4sp555_c.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\
    \ as f64\n  |                                                ++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |sum, el| sum + el);\n\
    \    let mut mid = s.div(2);\n    if s.is_odd() {\n        mid = mid.ceil();\n\
    \    }\n    mid\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `div` found for type `isize` in the current\
    \ scope\n   --> /tmp/tmp2j8pib5k.rs:8:21\n    |\n8   |     let mut mid = s.div(2);\n\
    \    |                     ^^^ method not found in `isize`\n    |\n    = help:\
    \ items from traits can only be used if the trait is in scope\nhelp: the following\
    \ trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n\
    1   | use std::ops::Div;\n    |\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `isize` in the current scope\n --> /tmp/tmp2j8pib5k.rs:9:10\n  |\n\
    9 |     if s.is_odd() {\n  |          ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7mm_bsm8.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let len = l.len();\n    l.len().checked_div(2).unwrap();\n\
    \    let mid = len / 2;\n    l.iter_mut().skip(mid).take(mid).fold(0.0, |acc,\
    \ x| acc + x.into());\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjszdoauo.rs:6:29\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |    ------                   ^^^ expected\
    \ `f64`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n...\n12 |     l.iter_mut().skip(mid).take(mid).fold(0.0,\
    \ |acc, x| acc + x.into());\n   |                                            \
    \                            - help: remove this semicolon\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3ujjehln.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmp9xfozq2r.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |          \
    \                            ^ no implementation for `{float} + &isize`\n  |\n\
    \  = help: the trait `Add<&isize>` is not implemented for `{float}`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n --> /tmp/tmp9xfozq2r.rs:7:44\n  |\n7 |     l.iter().fold(0.0,\
    \ |sum, el| sum + el) / l.len()\n  |                                         \
    \   ^ no implementation for `{float} / usize`\n  |\n  = help: the trait `Div<usize>`\
    \ is not implemented for `{float}`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_uhkf9va.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpapmvsuwr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpapmvsuwr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        match\
    \ b {\n            None => a,\n            Some(x) => if x < a { a } else { x\
    \ },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpcvbt3ae4.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcvbt3ae4.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcvbt3ae4.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmpcvbt3ae4.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcvbt3ae4.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap())\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpo8unte_q.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(f64::from(a) + f64::from(b)).unwrap())\n  |           \
    \                                    ^^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n --> /tmp/tmpo8unte_q.rs:7:74\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap())\n  |                                             \
    \                             ^^^^^^^^^ the trait `From<&isize>` is not implemented\
    \ for `f64`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32\
    \ as From<u16>>\n            <f32 as From<u8>>\n            <f64 as From<f32>>\n\
    \            <f64 as From<i16>>\n            <f64 as From<i32>>\n            <f64\
    \ as From<i8>>\n          and 67 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm2k1aiix.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if *a > *b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpw9lpbza6.rs:8:12\n\
    \  |\n8 |         if *a > *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw9lpbza6.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0hna6y9w.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnp5iim3_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let mut mid = l.len() / 2;\n    l.swap(0, mid);\n    l.iter().cloned().median().unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `median` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpr29stb1b.rs:11:23\n   |\n11 |     l.iter().cloned().median().unwrap()\n\
    \   |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcsw7r9s1.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(b)\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpo5lllwb4.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpo5lllwb4.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpo5lllwb4.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                         \
    \           ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(*b)\n  |           \
    \                         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpo5lllwb4.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b) as f64\n  |                  \
    \                     ++++++\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptlx7ep30.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len().checked_div(2).unwrap();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphf6f_zp7.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n               \
    \   |median, e| median + e / 2)\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpwizm2h_g.rs:8:38\n\
    \  |\n8 |                   |median, e| median + e / 2)\n  |                 \
    \                     ^ no implementation for `f64 + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxnhx7gfv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp15vr3c22.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprnqdg6rw.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpvhibjpdq.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvhibjpdq.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq3kcvwt3.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpq3kcvwt3.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if *a > *b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpqm_ty7sm.rs:8:12\n\
    \  |\n8 |         if *a > *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqm_ty7sm.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let n = l.len();\n    l.iter().skip(n / 2).take(n - n / 2).fold(0.0,\
    \ |a, b| a + b) / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n  --> /tmp/tmp7xje_hmb.rs:10:61\n\
    \   |\n10 |     l.iter().skip(n / 2).take(n - n / 2).fold(0.0, |a, b| a + b) /\
    \ 2.0\n   |                                                             ^ no implementation\
    \ for `{float} + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len().check();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpgjrycefi.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgjrycefi.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| {\n        a.checked_add(b).unwrap().sqrt()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp6som5st1.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n --> /tmp/tmp6som5st1.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphh_yxl8q.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcv683z2t.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcv683z2t.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0usj3oo8.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpocle62ao.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpocle62ao.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwhh179v6.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3c1y_l1.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        match\
    \ b {\n            Some(x) => Some(x.clone()),\n            None => Some(a.clone()),\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpceoutra3.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpceoutra3.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             Some(x) => Some(x.clone()),\n  |             ^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpceoutra3.rs:10:13\n\
    \   |\n8  |         match b {\n   |               - this expression has type `&isize`\n\
    9  |             Some(x) => Some(x.clone()),\n10 |             None => Some(a.clone()),\n\
    \   |             ^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpceoutra3.rs:9:24\n  |\n9 |             Some(x)\
    \ => Some(x.clone()),\n  |                        ^^^^^^^^^^^^^^^ expected `f64`,\
    \ found enum `Option`\n  |\n  = note: expected type `f64`\n             found\
    \ enum `Option<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpmveilnk7.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmveilnk7.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if *a < *b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp2ew_me45.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2ew_me45.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx88usdxg.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if *a < *b {\n\
    \            a\n        } else {\n            b\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpx5acb8gj.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx5acb8gj.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e) / l.len()\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmplh974c4z.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, e| sum + e) / l.len()\n  |            \
    \                         ^ no implementation for `{float} + &isize`\n  |\n  =\
    \ help: the trait `Add<&isize>` is not implemented for `{float}`\n  = help: the\
    \ following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide `{float}`\
    \ by `usize`\n --> /tmp/tmplh974c4z.rs:7:42\n  |\n7 |     l.iter().fold(0.0, |sum,\
    \ e| sum + e) / l.len()\n  |                                          ^ no implementation\
    \ for `{float} / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `{float}`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpbjxn98th.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbjxn98th.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(a)\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpaiaasl6m.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaiaasl6m.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaiaasl6m.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpaiaasl6m.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap_or(l.len() / 2)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjz88qew9.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len().checked_div(2).unwrap_or(l.len()\
    \ / 2)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n  |\n9 |\
    \     l.len().checked_div(2).unwrap_or(l.len() / 2) as f64\n  |              \
    \                                     ++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a + b);\n    s\
    \ /= l.len() as f64;\n    s\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8mv1rpvt.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s\n  |     ^ expected `f64`, found\
    \ `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n  |\n9 |     s as\
    \ f64\n  |       ++++++\n\nerror[E0277]: cannot divide-assign `isize` by `f64`\n\
    \ --> /tmp/tmp8mv1rpvt.rs:8:7\n  |\n8 |     s /= l.len() as f64;\n  |       ^^\
    \ no implementation for `isize /= f64`\n  |\n  = help: the trait `DivAssign<f64>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n            <f32 as DivAssign<&f32>>\n            <f32\
    \ as DivAssign>\n            <f64 as DivAssign<&f64>>\n            <f64 as DivAssign>\n\
    \            <i128 as DivAssign<&i128>>\n            <i128 as DivAssign>\n   \
    \         <i16 as DivAssign<&i16>>\n            <i16 as DivAssign>\n         \
    \ and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() as f64 / 2.0\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.5`,\n right: `3.0`', /tmp/tmp8e8vj302.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptb8bapyy.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplq4q1vdb.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0uvhomls.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let mid = l.len() / 2;\n    l.swap(0, mid);\n    l.iter().cloned().median().unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `median` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp2ysioyfg.rs:11:23\n   |\n11 |     l.iter().cloned().median().unwrap()\n\
    \   |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpv2q2ktfu.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmpv2q2ktfu.rs:10:13\n   |\n10 |     l.len() / 2.0\n\
    \   |             ^ no implementation for `usize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            a if a < b => a,\n            a if a > b => b,\n   \
    \         _ => a + b,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrso2bru.rs:9:27\n  |\n9 |\
    \             a if a < b => a,\n  |                           ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmplrso2bru.rs:11:20\n\
    \   |\n11 |             _ => a + b,\n   |                    ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp1zc6vyvp.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpty3xync7.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3eqk4ddc.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if *a < *b {\n\
    \            a\n        } else {\n            b\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp3gtg5v6u.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3gtg5v6u.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6j7g8d5p.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpsihn6e7n.rs:7:51\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x / 2)\n  |    \
    \                                               ^ no implementation for `f64 +\
    \ isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() as f64 / 2.0\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.5`,\n right: `3.0`', /tmp/tmpsobxg8u9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    let mid = l.len() / 2;\n    l.swap(0, mid);\n   \
    \ l.iter().cloned().fold(0.0, |acc, x| acc + x)\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n  --> /tmp/tmp3gr4f0qe.rs:11:46\n\
    \   |\n11 |     l.iter().cloned().fold(0.0, |acc, x| acc + x)\n   |          \
    \                                    ^ no implementation for `f64 + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |a,\
    \ b| if b < a { b } else { a },\n    )\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpj89n3leo.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpj89n3leo.rs:9:23\n  |\n9 |    \
    \     |a, b| if b < a { b } else { a },\n  |                       ^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpj89n3leo.rs:9:27\n\
    \  |\n9 |         |a, b| if b < a { b } else { a },\n  |                     \
    \      ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0o9pz5rn.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm3y85mdu.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpm3y85mdu.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a > b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7sqjuymo.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7sqjuymo.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp8lr7c7m.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(a)\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpg7i0wcfe.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpg7i0wcfe.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpg7i0wcfe.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpg7i0wcfe.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjmjqal2j.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2,\n        |a,\
    \ b| {\n            if *a > *b {\n                b\n            } else {\n  \
    \              a\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfcqb5erc.rs:8:9\n  |\n8 |\
    \         l.len() / 2,\n  |         ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         (l.len() / 2) as f64,\n\
    \  |         +           ++++++++\n\nerror[E0614]: type `f64` cannot be dereferenced\n\
    \  --> /tmp/tmpfcqb5erc.rs:10:16\n   |\n10 |             if *a > *b {\n   |  \
    \              ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfcqb5erc.rs:11:17\n\
    \   |\n11 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmp74mmb3qz.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp74mmb3qz.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_cv5bffc.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(f64::from(b.next()))\n\
    \    }).unwrap()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp8br_d6p_.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `next` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmp8br_d6p_.rs:8:35\n  |\n8 |         a.checked_add(f64::from(b.next()))\n\
    \  |                                   ^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a > b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4kamqh9.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpu4kamqh9.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(b).unwrap().sqrt().ok_or(\"\
    nan\")\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpo579h0rw.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n --> /tmp/tmpo579h0rw.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok_or(\"\
    nan\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpboj9h3n1.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |c, d| {\n            d if c < a else c\n        })\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmpfmhe0l9a.rs:9:15\n  |\n9 |             d if\
    \ c < a else c\n  |               ^^ expected one of 8 possible tokens\n\nerror[E0599]:\
    \ no method named `iter` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmpfmhe0l9a.rs:8:11\n  |\n8 |         b.iter().fold(a, |c, d| {\n  |  \
    \         ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(b).unwrap().sqrt().ok()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmprwe31iu3.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n --> /tmp/tmprwe31iu3.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppu3rnai6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmppcsv27du.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmppcsv27du.rs:10:13\n   |\n10 |     l.len() / 2.0\n\
    \   |             ^ no implementation for `usize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpft9tgz9w.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppinh71xs.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppinh71xs.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmppinh71xs.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\
    \                                                               ++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            Some(x) => Some(x.checked_div(a as f64).unwrap()),\n\
    \            None => Some(a as f64),\n        }\n    })\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvad771k7.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             Some(x) => Some(x.checked_div(a as f64).unwrap()),\n  |      \
    \       ^^^^^^^ expected `isize`, found enum `Option`\n  |\n  = note: expected\
    \ type `isize`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvad771k7.rs:10:13\n   |\n8  |         match b {\n   | \
    \              - this expression has type `&isize`\n9  |             Some(x) =>\
    \ Some(x.checked_div(a as f64).unwrap()),\n10 |             None => Some(a as\
    \ f64),\n   |             ^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvad771k7.rs:9:24\n  |\n9 |             Some(x)\
    \ => Some(x.checked_div(a as f64).unwrap()),\n  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n  |\n  = note: expected type `f64`\n  \
    \           found enum `Option<_>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap()\n\
    \    }) / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi6njpexf.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap()\n  |                       ^ expected `isize`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi6njpexf.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n --> /tmp/tmpi6njpexf.rs:9:8\n  |\n9 |     }) / l.len()\n\
    \  |        ^ no implementation for `{float} / usize`\n  |\n  = help: the trait\
    \ `Div<usize>` is not implemented for `{float}`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |acc,\
    \ x| if x < acc {\n            x\n        } else {\n            acc\n        }\n\
    \    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpa859zwxm.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpa859zwxm.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa859zwxm.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp499_uj9u.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxw1c2fm.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmptxw1c2fm.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpsbzuwkgp.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsbzuwkgp.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |a,\
    \ b| {\n            if a > b {\n                a\n            } else {\n    \
    \            b\n            }\n        },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpt4ztgth0.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt4ztgth0.rs:10:20\n   |\n10 |\
    \             if a > b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt4ztgth0.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4pep8_h7.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpd8df8gp_.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmpd8df8gp_.rs:10:13\n   |\n10 |     l.len() / 2.0\n\
    \   |             ^ no implementation for `usize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    let mut mid = l.len() / 2;\n    l.swap(0, mid);\n\
    \    let mut low = l[0];\n    let mut high = l[mid];\n    while high - low > 1\
    \ {\n        let mid = l.len() / 2;\n        l.swap(0, mid);\n        low = l[0];\n\
    \        high = l[mid];\n    }\n    low\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5yi9zixz.rs:19:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n19 |     low\n   |     ^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |     low as f64\n   |         ++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmphgo9_986.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmphgo9_986.rs:10:13\n   |\n10 |     l.len() / 2.0\n\
    \   |             ^ no implementation for `usize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphnp165_u.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.is_nan()\
    \ ? a : f64::from(b.partial_cmp(&a).unwrap().unwrap()) + f64::from(b.partial_cmp(&a).unwrap().unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \ --> /tmp/tmpcv83e7gi.rs:8:22\n  |\n8 |         b.is_nan() ? a : f64::from(b.partial_cmp(&a).unwrap().unwrap())\
    \ + f64::from(b.partial_cmp(&a).unwrap().unwrap())\n  |                      ^\
    \ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0599]: no function\
    \ or associated item named `nan` found for type `f64` in the current scope\n -->\
    \ /tmp/tmpcv83e7gi.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(), |a, b| {\n\
    \  |                        ^^^\n  |                        |\n  |           \
    \             function or associated item not found in `f64`\n  |            \
    \            help: there is an associated function with a similar name: `is_nan`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeq12d9sj.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  b.checked_add(a).unwrap_or(a)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5cuhhrev.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5cuhhrev.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp5cuhhrev.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwracdx48.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            Some(x) => a + x,\n            None => a,\n        }\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuy6i96xg.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             Some(x) => a + x,\n  |             ^^^^^^^ expected `isize`, found\
    \ enum `Option`\n  |\n  = note: expected type `isize`\n             found enum\
    \ `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuy6i96xg.rs:10:13\n\
    \   |\n8  |         match b {\n   |               - this expression has type `&isize`\n\
    9  |             Some(x) => a + x,\n10 |             None => a,\n   |        \
    \     ^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected type\
    \ `isize`\n              found enum `Option<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8p8y5ajt.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            a if a < b => a,\n            a if a > b => b,\n   \
    \         _ => a + b,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphz_zn7ws.rs:9:27\n  |\n9 |\
    \             a if a < b => a,\n  |                           ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmphz_zn7ws.rs:11:20\n\
    \   |\n11 |             _ => a + b,\n   |                    ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7qb9p8id.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        match\
    \ b {\n            None => a,\n            Some(b) => b as f64 + a as f64 / 2,\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmplc4_i4fd.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplc4_i4fd.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplc4_i4fd.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(b) => b as f64 + a as f64 /\
    \ 2,\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmplc4_i4fd.rs:10:44\n   |\n\
    10 |             Some(b) => b as f64 + a as f64 / 2,\n   |                   \
    \                         ^ no implementation for `f64 / {integer}`\n   |\n  \
    \ = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n10 |             Some(b)\
    \ => b as f64 + a as f64 / 2.0,\n   |                                        \
    \       ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more info"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmprwv92d4j.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if *a < *b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp15kfw4ws.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp15kfw4ws.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| {\n        sum + el /\
    \ 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `&isize` by `{float}`\n --> /tmp/tmp4vbfagxm.rs:8:18\n\
    \  |\n8 |         sum + el / 2.0\n  |                  ^ no implementation for\
    \ `&isize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw0wga1fg.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a > b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqvsyq2iq.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqvsyq2iq.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpchejcsx5.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n    })\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1jr078b8.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |                 \
    \      ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp1jr078b8.rs:8:36\n  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1jr078b8.rs:8:9\n  |\n\
    8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY) as f64\n  |  \
    \                                                     ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk75orst1.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x)\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmp4bg6q9w3.rs:7:51\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x)\n  |        \
    \                                           ^ no implementation for `f64 + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `f64`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(f64::from(b.floor() as f64)).unwrap()\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp11cjwkxk.rs:8:11\n  |\n8 |         a.checked_add(f64::from(b.floor()\
    \ as f64)).unwrap()\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `floor` found for reference `&isize` in the current scope\n\
    \ --> /tmp/tmp11cjwkxk.rs:8:35\n  |\n8 |         a.checked_add(f64::from(b.floor()\
    \ as f64)).unwrap()\n  |                                   ^^^^^ help: there is\
    \ an associated function with a similar name: `div_floor`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbeao6egz.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmprsjmra_u.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprsjmra_u.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpnwojgpyc.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if b < a {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpajthmg67.rs:8:16\n  |\n8 |\
    \         if b < a {\n  |                ^ expected `&isize`, found `f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpajthmg67.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |m, x| if x < m { x } else\
    \ { m })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpdhq3lugz.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |m, x| if x < m { x } else { m })\n  |                        ^^^\n  |     \
    \                   |\n  |                        function or associated item\
    \ not found in `f64`\n  |                        help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpdhq3lugz.rs:7:45\n  |\n7 |     l.iter().fold(f64::nan(), |m, x| if x\
    \ < m { x } else { m })\n  |                                             ^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdhq3lugz.rs:7:49\n\
    \  |\n7 |     l.iter().fold(f64::nan(), |m, x| if x < m { x } else { m })\n  |\
    \                                                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyyof_iwk.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplgjs32lc.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| {\n        match sum\
    \ {\n            0.0 => el,\n            x => if x < el { x } else { el },\n \
    \       }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx_s3wp0y.rs:9:20\n  |\n9 |\
    \             0.0 => el,\n  |                    ^^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx_s3wp0y.rs:10:25\n   |\n10 |\
    \             x => if x < el { x } else { el },\n   |                        \
    \ ^^ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx_s3wp0y.rs:10:41\n\
    \   |\n10 |             x => if x < el { x } else { el },\n   |              \
    \                           ^^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap())\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp3l_egmzx.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(f64::from(a) + f64::from(b)).unwrap())\n  |           \
    \                                    ^^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n --> /tmp/tmp3l_egmzx.rs:7:74\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap())\n  |                                             \
    \                             ^^^^^^^^^ the trait `From<&isize>` is not implemented\
    \ for `f64`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32\
    \ as From<u16>>\n            <f32 as From<u8>>\n            <f64 as From<f32>>\n\
    \            <f64 as From<i16>>\n            <f64 as From<i32>>\n            <f64\
    \ as From<i8>>\n          and 67 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if *a > *b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpy3ro85fv.rs:8:12\n\
    \  |\n8 |         if *a > *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy3ro85fv.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptd60c008.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5ect8umr.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv9tx6smh.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprlm50j2t.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len().checked_div(2).unwrap();\n    l.len() as\
    \ f64 / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.5`,\n right: `3.0`', /tmp/tmp7thjo50v.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            None => a,\n            Some(x) => if x < a { a } else\
    \ { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuafb3clk.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuafb3clk.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmpuafb3clk.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuafb3clk.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpl_qxer7y.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl_qxer7y.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| {\n    \
    \    match x {\n            x if x < acc.0 => x,\n            x if x > acc.0 =>\
    \ acc,\n            _ => acc,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `f64` is a primitive type and therefore doesn't have fields\n\
    \ --> /tmp/tmp2ywedknf.rs:9:26\n  |\n9 |             x if x < acc.0 => x,\n  |\
    \                          ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2ywedknf.rs:9:31\n\
    \  |\n9 |             x if x < acc.0 => x,\n  |                              \
    \ ^ expected `f64`, found `&isize`\n\nerror[E0610]: `f64` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmp2ywedknf.rs:10:26\n   |\n10\
    \ |             x if x > acc.0 => acc,\n   |                          ^\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0610.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpufslkbty.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |          \
    \                            ^ no implementation for `{float} + &isize`\n  |\n\
    \  = help: the trait `Add<&isize>` is not implemented for `{float}`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n --> /tmp/tmpufslkbty.rs:7:44\n  |\n7 |     l.iter().fold(0.0,\
    \ |sum, el| sum + el) / l.len()\n  |                                         \
    \   ^ no implementation for `{float} / usize`\n  |\n  = help: the trait `Div<usize>`\
    \ is not implemented for `{float}`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  b.checked_add(a).unwrap()\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4jxpg8q3.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap()\n  |                       ^ expected `isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4jxpg8q3.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap() as f64\n  |                      \
    \             ++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        match\
    \ b {\n            None => a,\n            Some(x) => x.partial_cmp(&a).unwrap().unwrap(),\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp24ic3lul.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp24ic3lul.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp24ic3lul.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => x.partial_cmp(&a).unwrap().unwrap(),\n\
    \   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjfwndf1t.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmplfodp_94.rs:7:51\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x / 2)\n  |    \
    \                                               ^ no implementation for `f64 +\
    \ isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkah4w76f.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n               \
    \   |median, item| {\n                      if median == f64::NEG_INFINITY {\n\
    \                          median = item\n                      } else {\n   \
    \                       if item < median {\n                              median\
    \ = item\n                          }\n                      }\n             \
    \         median\n                  })\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6goize3.rs:10:36\n   |\n\
    8  |                   |median, item| {\n   |                    ------ expected\
    \ due to this parameter type\n9  |                       if median == f64::NEG_INFINITY\
    \ {\n10 |                           median = item\n   |                      \
    \              ^^^^ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt6goize3.rs:12:37\n   |\n12 |                         \
    \  if item < median {\n   |                                     ^^^^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt6goize3.rs:13:40\n\
    \   |\n8  |                   |median, item| {\n   |                    ------\
    \ expected due to this parameter type\n...\n13 |                             \
    \  median = item\n   |                                        ^^^^ expected `f64`,\
    \ found `&isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpei724g6e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + f64::from(x.median()))\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `median` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmp_cp8mqpi.rs:7:65\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |acc, x| acc + f64::from(x.median()))\n  |                                 \
    \                                ^^^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(b).expect(\"\
    overflow\")\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpzgg1pjha.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n --> /tmp/tmpzgg1pjha.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphvb3n_v2.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo1vitsfn.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1wvr7bw.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpq1wvr7bw.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphdagaoo_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |acc,\
    \ x| if x < acc {\n            x\n        } else {\n            acc\n        }\n\
    \    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp2sui6o3r.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp2sui6o3r.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2sui6o3r.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() as f64 / 2.0\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.5`,\n right: `3.0`', /tmp/tmp2j1tskyy.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjgnxl39k.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n               \
    \   |median, e| median + (e as f64 / l.len()))\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp166v9pyq.rs:8:50\n\
    \  |\n8 |                   |median, e| median + (e as f64 / l.len()))\n  |  \
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0606]: casting\
    \ `&isize` as `f64` is invalid\n --> /tmp/tmp166v9pyq.rs:8:41\n  |\n8 |      \
    \             |median, e| median + (e as f64 / l.len()))\n  |                \
    \                         -^^^^^^^\n  |                                      \
    \   |\n  |                                         cannot cast `&isize` as `f64`\n\
    \  |                                         help: dereference the expression:\
    \ `*e`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpax0f42cd.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp99ziag97.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(f64::nan())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpaoo3v3p9.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaoo3v3p9.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n  |                \
    \       ^ expected `isize`, found `f64`\n\nerror[E0599]: no function or associated\
    \ item named `nan` found for type `f64` in the current scope\n --> /tmp/tmpaoo3v3p9.rs:8:41\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n  |                \
    \                         ^^^\n  |                                         |\n\
    \  |                                         function or associated item not found\
    \ in `f64`\n  |                                         help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpaoo3v3p9.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\
    \ as f64\n  |                                                ++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        if a <\
    \ b {\n            a\n        } else {\n            b\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp9_mgeuy0.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9_mgeuy0.rs:8:16\n\
    \  |\n8 |         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9_mgeuy0.rs:11:13\n   |\n11 |\
    \             b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(a)\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpspoi_9bw.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpspoi_9bw.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpspoi_9bw.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpspoi_9bw.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1k5vteuo.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpqlci7nh0.rs:8:11\n  |\n8 |         a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap()\n  |           ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n --> /tmp/tmpqlci7nh0.rs:8:38\n\
    \  |\n8 |         a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n  |   \
    \                                   ^^^^^^^^^ the trait `From<&isize>` is not\
    \ implemented for `f64`\n  |\n  = help: the following other types implement trait\
    \ `From<T>`:\n            <f32 as From<i16>>\n            <f32 as From<i8>>\n\
    \            <f32 as From<u16>>\n            <f32 as From<u8>>\n            <f64\
    \ as From<f32>>\n            <f64 as From<i16>>\n            <f64 as From<i32>>\n\
    \            <f64 as From<i8>>\n          and 67 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgbl7caet.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(f64::from(b.next()))\n\
    \    }).unwrap()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpynzmew5g.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `next` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpynzmew5g.rs:8:35\n  |\n8 |         a.checked_add(f64::from(b.next()))\n\
    \  |                                   ^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |acc,\
    \ x| if x < acc {\n            acc\n        } else {\n            x\n        },\n\
    \    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpfcsm8nmg.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpfcsm8nmg.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfcsm8nmg.rs:12:13\n\
    \   |\n12 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4m17gysf.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4m17gysf.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprakxps41.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            None => a,\n            Some(x) => if x < a { a } else\
    \ { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxoxfuuqm.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxoxfuuqm.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmpxoxfuuqm.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxoxfuuqm.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp97qvkcjr.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        a.checked_add(b).unwrap().sqrt().ok()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpdc6raguk.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0599]: no method named `checked_add` found for type `f64`\
    \ in the current scope\n --> /tmp/tmpdc6raguk.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |acc, x| acc + x / l.len())\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxgg2sm8c.rs:7:43\n  |\n7 |\
    \     l.iter().fold(0.0, |acc, x| acc + x / l.len())\n  |                    \
    \                       ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot divide `&isize` by `usize`\n --> /tmp/tmpxgg2sm8c.rs:7:41\n  |\n7 | \
    \    l.iter().fold(0.0, |acc, x| acc + x / l.len())\n  |                     \
    \                    ^ no implementation for `&isize / usize`\n  |\n  = help:\
    \ the trait `Div<usize>` is not implemented for `&isize`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot add `isize`\
    \ to `f64`\n --> /tmp/tmpxgg2sm8c.rs:7:37\n  |\n7 |     l.iter().fold(0.0, |acc,\
    \ x| acc + x / l.len())\n  |                                     ^ no implementation\
    \ for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            a if a < b => a,\n            a if a > b => b,\n   \
    \         _ => a + b,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm60w2wgm.rs:9:27\n  |\n9 |\
    \             a if a < b => a,\n  |                           ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmpm60w2wgm.rs:11:20\n\
    \   |\n11 |             _ => a + b,\n   |                    ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if a > b {\n\
    \            a\n        } else {\n            b\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4gh4lav7.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4gh4lav7.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n    })\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpll13qz66.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |                 \
    \      ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpll13qz66.rs:8:36\n  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpll13qz66.rs:8:9\n  |\n\
    8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY) as f64\n  |  \
    \                                                     ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpppmaorog.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |a,\
    \ b| {\n            match b {\n                0 => a,\n                a => a\
    \ - b,\n            }\n        },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp34hzukkk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp34hzukkk.rs:12:22\n\
    \   |\n10 | /             match b {\n11 | |                 0 => a,\n   | |  \
    \                    - this is found to be of type `f64`\n12 | |             \
    \    a => a - b,\n   | |                      ^^^^^ expected `f64`, found `isize`\n\
    13 | |             }\n   | |_____________- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |            \
    \     a => (a - b) as f64,\n   |                      +     ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |a,\
    \ b| {\n            if a > b {\n                a\n            } else {\n    \
    \            b\n            }\n        },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp4mslf80q.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4mslf80q.rs:10:20\n   |\n10 |\
    \             if a > b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4mslf80q.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  if a < b {\n            a\n        } else {\n            b\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppd0a95d6.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppd0a95d6.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        match\
    \ b {\n            None => a,\n            Some(x) => if x < a { a } else { x\
    \ },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpmsa67s90.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmsa67s90.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmsa67s90.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmpmsa67s90.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmsa67s90.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnwapyc1b.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuwh5ktc1.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps4grdydq.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |a,\
    \ b| {\n            a + (b - a as f64) / 2.0\n        }\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpv314zpku.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: cannot subtract `f64` from `&isize`\n  --> /tmp/tmpv314zpku.rs:10:20\n\
    \   |\n10 |             a + (b - a as f64) / 2.0\n   |                    ^ no\
    \ implementation for `&isize - f64`\n   |\n   = help: the trait `Sub<f64>` is\
    \ not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprazcc2x5.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpytwser4y.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpytwser4y.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7lbqby2a.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp1i61za9r.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzjt2aefs.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwdghccz8.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0qaji3yr.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b| {\n      \
    \  match b {\n            a if a < b => a,\n            a if a > b => b,\n   \
    \         _ => a + b,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmponuq0p2z.rs:9:27\n  |\n9 |\
    \             a if a < b => a,\n  |                           ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmponuq0p2z.rs:11:20\n\
    \   |\n11 |             _ => a + b,\n   |                    ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e) / l.len()\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpv0eqshmr.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, e| sum + e) / l.len()\n  |            \
    \                         ^ no implementation for `{float} + &isize`\n  |\n  =\
    \ help: the trait `Add<&isize>` is not implemented for `{float}`\n  = help: the\
    \ following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide `{float}`\
    \ by `usize`\n --> /tmp/tmpv0eqshmr.rs:7:42\n  |\n7 |     l.iter().fold(0.0, |sum,\
    \ e| sum + e) / l.len()\n  |                                          ^ no implementation\
    \ for `{float} / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `{float}`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzfd81z8j.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmplw8_e_j3.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplw8_e_j3.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len().check();\n\
    \    l.len() / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmp3k7jf0a5.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmp3k7jf0a5.rs:10:13\n   |\n10 |     l.len() / 2.0\n\
    \   |             ^ no implementation for `usize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpocotw6wz.rs:7:51\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x / 2)\n  |    \
    \                                               ^ no implementation for `f64 +\
    \ isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n        b.checked_add(a).unwrap_or(a)\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp1qp4o_1q.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1qp4o_1q.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1qp4o_1q.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp1qp4o_1q.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
