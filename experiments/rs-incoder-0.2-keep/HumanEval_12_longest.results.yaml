name: HumanEval_12_longest
language: rust
results:
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| match s.len() {\n\
    \        0 => Some(s),\n        max if max == s.len() => Some(s),\n        _ =>\
    \ max,\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnvzcr__2.rs:10:19\n   |\n\
    10 |         0 => Some(s),\n   |                   ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                   |\n   |                   expected\
    \ struct `String`, found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnvzcr__2.rs:11:39\n\
    \   |\n11 |         max if max == s.len() => Some(s),\n   |                  \
    \                     ^- help: try using a conversion method: `.to_string()`\n\
    \   |                                       |\n   |                          \
    \             expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let len = strings[index].len();\n \
    \       if max_len.len() < len {\n            max_len = strings[index];\n    \
    \        max_index = index;\n        }\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpv7rwx_t4.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_index\
    \ = -1;\n    for s in strings {\n        let len = s.len();\n        if max_len.len()\
    \ < len {\n            max_len = s;\n            max_index = len;\n        }\n\
    \    }\n    if max_len.len() == 0 {\n        return None;\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpv1iq3vtm.rs:10:25\n\
    \   |\n10 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n        }\n    }\n    Some(max_len)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4yuac7fq.rs:19:10\n   |\n\
    19 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = String::new();\n\
    \    for &s in strings {\n        let len = s.len();\n        if len > max_len.len()\
    \ {\n            max_len = len;\n            max_index = s;\n        }\n    }\n\
    \n    Some(max_index)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmbayf5j6.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmpmbayf5j6.rs:17:16\n\
    \   |\n17 |         if len > max_len.len() {\n   |                ^ no implementation\
    \ for `String < usize` and `String > usize`\n   |\n   = help: the trait `PartialOrd<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             String\n             str\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphvq4kmu1.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    let mut longest_idx = String::new();\n\n    for &s in strings {\n       \
    \ let len = s.len();\n        if len > longest_len.len() {\n            longest_len\
    \ = len;\n            longest_str = s;\n            longest_idx = s;\n       \
    \ }\n    }\n\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmerwr4y0.rs:17:9\n   |\n\
    17 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmpmerwr4y0.rs:19:16\n\
    \   |\n19 |         if len > longest_len.len() {\n   |                ^ no implementation\
    \ for `String < usize` and `String > usize`\n   |\n   = help: the trait `PartialOrd<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             String\n             str\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        let len = s.len();\n        if max_len.len() <\
    \ len {\n            max_len = s;\n            max_index = len;\n        }\n \
    \   }\n\n    if max_len.len() == 0 {\n        return None;\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpus5ijkjq.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpus5ijkjq.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ &s in strings {\n        let len = s.len();\n        if max_len.len() < len\
    \ {\n            max_len = s;\n            max_index = len;\n        }\n    }\n\
    \    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxetp1q1b.rs:14:9\n   |\n\
    14 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpxetp1q1b.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len = std::cmp::max::<usize>(\n   \
    \     strings.iter().map(|s| s.len()).sum(),\n        strings.len(),\n    );\n\
    \    let mut longest_str = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest_len {\n            longest_len = s.len();\n            longest_str\
    \ = s;\n        }\n    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmpk_vjjnkn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp8r4pnugn.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd19qr8zw.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpd19qr8zw.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    let mut longestlen = longest.len();\n\
    \    for s in strings.iter().rev() {\n        if s.len() > longestlen {\n    \
    \        longest = s;\n            longestlen = s.len();\n        }\n    }\n\n\
    \    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps8n33cqo.rs:17:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n17 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        let\
    \ mut len = s.len();\n        match acc {\n            None => Some(s),\n    \
    \        Some(mut acc) => if len > acc.len() {\n                Some(s.clone())\n\
    \            } else {\n                None\n            }\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmbq4xybs.rs:12:26\n   |\n\
    12 |             None => Some(s),\n   |                          ^- help: try\
    \ using a conversion method: `.to_string()`\n   |                          |\n\
    \   |                          expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpcr1m4lfv.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    let mut longest_len = strings[0].len();\n\
    \n    for s in strings.iter().rev() {\n        if s.len() > longest_len {\n  \
    \          longest = s;\n            longest_len = s.len();\n        }\n    }\n\
    \n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu272n9b9.rs:18:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n18 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6nujss8y.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6nujss8y.rs:9:63\n\
    \  |\n9 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp6nujss8y.rs:9:5\n  |\n8 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n9 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmpnr3sr62n.rs:14:16\n   |\n14 |         .ok_or(ErrorKind::EmptyInput)\n\
    \   |                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmpnr3sr62n.rs:13:10\n    |\n\
    13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ s in strings {\n        let len = s.len();\n        if max_len.len() < len {\n\
    \            max_len = s;\n            max_index = len;\n        }\n    }\n  \
    \  Some(max_len.clone())\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpc9qm9m80.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \n    for s in strings {\n        if s.len() > longest_len.len() {\n         \
    \   longest_len = s.len();\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprxzk26_l.rs:18:27\n   |\n\
    13 |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n18 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpafuj1yr0.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpg8ohxcdt.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).ok()\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmppytlp4c7.rs:9:44\n  |\n9 |     strings.iter().max_by_key(|s|\
    \ s.len()).ok()\n  |                                            ^^ help: there\
    \ is an associated function with a similar name: `or`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpjrep1eos.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\n    for s in\
    \ strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \        }\n    }\n\n    if max_len == strings.len() {\n        return None;\n\
    \    }\n\n    Some(strings[strings.iter().position(|s| s.len() == max_len).unwrap()])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `max_len`\n  --> /tmp/tmp6kiac2x6.rs:13:13\n\
    \   |\n13 |     let mut max_len = String::new();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable:\
    \ `max_len`\n  --> /tmp/tmp6kiac2x6.rs:14:13\n   |\n14 |     let mut max_len =\
    \ strings.iter().map(|s| s.len()).max().unwrap();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n\nwarning:\
    \ unused variable: `max_len`\n  --> /tmp/tmp6kiac2x6.rs:15:13\n   |\n15 |    \
    \ let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n   |    \
    \         ^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_max_len`\n\nwarning: unused variable: `max_len`\n  --> /tmp/tmp6kiac2x6.rs:16:13\n\
    \   |\n16 |     let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_max_len`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp6kiac2x6.rs:13:9\n\
    \   |\n13 |     let mut max_len = String::new();\n   |         ----^^^^^^^\n \
    \  |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp6kiac2x6.rs:14:9\n\
    \   |\n14 |     let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \   |         ----^^^^^^^\n   |         |\n   |         help: remove this `mut`\n\
    \nwarning: variable does not need to be mutable\n  --> /tmp/tmp6kiac2x6.rs:15:9\n\
    \   |\n15 |     let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \   |         ----^^^^^^^\n   |         |\n   |         help: remove this `mut`\n\
    \nwarning: variable does not need to be mutable\n  --> /tmp/tmp6kiac2x6.rs:16:9\n\
    \   |\n16 |     let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \   |         ----^^^^^^^\n   |         |\n   |         help: remove this `mut`\n\
    \nerror[E0382]: borrow of moved value: `strings`\n   --> /tmp/tmp6kiac2x6.rs:25:19\n\
    \    "
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(\n        None,\n        |mut acc,\
    \ s| {\n            if acc.is_none() {\n                acc = Some(s);\n     \
    \       } else {\n                let len = s.len();\n                if len >\
    \ acc.unwrap().len() {\n                    acc = Some(s);\n                }\n\
    \            }\n            acc\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz2mpv2xv.rs:13:28\n   |\n\
    13 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz2mpv2xv.rs:17:32\n   |\n17 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp5_whhv37.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2c6xhr9g.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2c6xhr9g.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len > s.len() {\n          \
    \      acc = Some(s);\n            }\n        }\n        acc\n    })\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp5holf4d_.rs:10:36\n   |\n10 |         if let Some(mut len)\
    \ = acc.len() {\n   |                                    ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5holf4d_.rs:12:28\n\
    \   |\n12 |                 acc = Some(s);\n   |                            ^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \          |\n   |                            expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq7kpqfcd.rs:16:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n16 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let len = strings[index].len();\n \
    \       if max_len.len() < len {\n            max_len = strings[index];\n    \
    \        max_index = index;\n        }\n    }\n\n    if max_len.len() == 0 {\n\
    \        return None;\n    }\n\n    Some(strings[max_index])\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpl3w0hfaa.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let len = strings[index].len();\n \
    \       if max_len.len() < len {\n            max_len = strings[index];\n    \
    \        max_index = index;\n        }\n    }\n    Some(strings[max_index])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprqnf26fb.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_hsfbu9.rs:21:10\n   |\n\
    21 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::EmptyInput)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmpos0fz1uy.rs:14:16\n   |\n14 |         .ok_or(Error::EmptyInput)\n  \
    \ |                ^^^^^ use of undeclared type `Error`\n\nerror[E0599]: `Option<usize>`\
    \ is not an iterator\n   --> /tmp/tmpos0fz1uy.rs:13:10\n    |\n13  |         \
    \  .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.iter().max().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpjq6zhmt7.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = strings[0].len();\n    for s in strings {\n \
    \       if s.len() > longest_len {\n            longest_len = s.len();\n     \
    \   }\n    }\n\n    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(strings[0])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr3_pg8sc.rs:20:34\n   |\n\
    20 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(strings[0])\n\
    \   |                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr3_pg8sc.rs:20:63\n\
    \   |\n20 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(strings[0])\n\
    \   |                                                               ^^^^^^^^^^\n\
    \   |                                                               |\n   |  \
    \                                                             expected `&String`,\
    \ found struct `String`\n   |                                                \
    \               help: consider borrowing here: `&strings[0]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr3_pg8sc.rs:20:5\n   |\n8  | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n...\n20 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).unwrap_or(strings[0])\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ (i, s) in strings.iter().enumerate() {\n        let len = s.len();\n       \
    \ if max_len.len() < len {\n            max_len = s;\n            max_index =\
    \ i;\n        }\n    }\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54cow3lg.rs:17:23\n   |\n\
    12 |     let mut max_len = String::new();\n   |                       -------------\
    \ expected due to this value\n...\n17 |             max_len = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \  --> /tmp/tmp54cow3lg.rs:13:25\n   |\n13 |     let mut max_index = -1;\n   |\
    \                         ^^ the trait `Neg` is not implemented for `usize`\n\
    \   |\n   = help: the following other types implement trait `Neg`:\n         \
    \    &f32\n             &f64\n             &i128\n             &i16\n        \
    \     &i32\n             &i64\n             &i8\n             &isize\n       \
    \    and 8 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| if s.len() > max.len()\
    \ { max } else { None })\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmp8jwwxz3a.rs:9:57\n  |\n9 |     strings.iter().fold(None,\
    \ |max, s| if s.len() > max.len() { max } else { None })\n  |                \
    \                                         ^^^ method not found in `Option<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len = std::cmp::min::<usize>(\n   \
    \     strings.len(),\n        strings.iter().map(|s| s.len()).max(),\n    );\n\
    \    let mut longest_str = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest_len {\n            longest_len = s.len();\n            longest_str\
    \ = s;\n        }\n    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm986txcs.rs:11:9\n   |\n\
    11 |         strings.iter().map(|s| s.len()).max(),\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<usize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi0jkxy5i.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi0jkxy5i.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_index\
    \ = -1;\n    for s in strings {\n        let len = s.len();\n        if max_len.len()\
    \ < len {\n            max_len = s;\n            max_index = len;\n        }\n\
    \    }\n    if max_len.len() == 0 {\n        return None;\n    }\n    Some(strings[max_index])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpvhfgxkws.rs:10:25\n\
    \   |\n10 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = strings[0].len();\n    let mut longest_string\
    \ = strings[0];\n\n    for string in strings.iter().rev() {\n        if string.len()\
    \ > longest_len {\n            longest_len = string.len();\n            longest_string\
    \ = string;\n        }\n    }\n\n    Some(longest_string)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9cw7kuq7.rs:19:30\n   |\n\
    14 |     let mut longest_string = strings[0];\n   |                          \
    \    ---------- expected due to this value\n...\n19 |             longest_string\
    \ = string;\n   |                              ^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                              |\n   |          \
    \                    expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(None, |mut\
    \ acc, s| {\n            let len = s.len();\n            if len > acc.len() {\n\
    \                Some(s.clone())\n            } else {\n                Some(acc.clone())\n\
    \            }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpi4mwabmw.rs:13:26\n   |\n13 |             if len > acc.len()\
    \ {\n   |                          ^^^ method not found in `Option<String>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpi4mwabmw.rs:16:22\n   |\n16 |  \
    \               Some(acc.clone())\n   |                      ^^^^^^^^^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        let len = s.len();\n        if max_len.len() <\
    \ len {\n            max_len = s;\n            max_index = len;\n        }\n \
    \   }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptn22fd4n.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmptn22fd4n.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() < s.len() {\n                acc =\
    \ s;\n            }\n            acc\n        })\n        .ok()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_tmykhjd.rs:13:23\n   |\n\
    11 |         .fold(String::new(), |mut acc, s| {\n   |                       \
    \            --- expected due to this parameter type\n12 |             if acc.len()\
    \ < s.len() {\n13 |                 acc = s;\n   |                       ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                       |\n\
    \   |                       expected struct `String`, found `&String`\n\nerror[E0599]:\
    \ no method named `ok` found for struct `String` in the current scope\n  --> /tmp/tmp_tmykhjd.rs:17:10\n\
    \   |\n17 |         .ok()\n   |          ^^ method not found in `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp6xoxryns.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() < s.len() {\n                acc =\
    \ s\n            } else {\n                acc\n            }\n        })\n  \
    \      .ok()\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1luymed7.rs:13:23\n   |\n\
    11 |         .fold(String::new(), |mut acc, s| {\n   |                       \
    \            --- expected due to this parameter type\n12 |             if acc.len()\
    \ < s.len() {\n13 |                 acc = s\n   |                       ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                       |\n\
    \   |                       expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1luymed7.rs:13:17\n   |\n13 |              \
    \   acc = s\n   |                 ^^^^^^^ expected struct `String`, found `()`\n\
    \nerror[E0599]: no method named `ok` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp1luymed7.rs:18:10\n   |\n18 |         .ok()\n   |     \
    \     ^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::LongestEmpty)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmpizj_u5vh.rs:14:16\n   |\n14 |         .ok_or(Error::LongestEmpty)\n\
    \   |                ^^^^^ use of undeclared type `Error`\n\nerror[E0599]: `Option<usize>`\
    \ is not an iterator\n   --> /tmp/tmpizj_u5vh.rs:13:10\n    |\n13  |         \
    \  .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_89thmkg.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_89thmkg.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw_jk_loi.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n        .ok()\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpkuoir41z.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5cimy_b7.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5cimy_b7.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n        }\n    }\n\n    if max_len == 0 {\n\
    \        return None;\n    }\n\n    Some(strings[strings.iter().position(|s| s.len()\
    \ == max_len).unwrap()])\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `max_len`\n  --> /tmp/tmpyskfxqdd.rs:13:13\n\
    \   |\n13 |     let mut max_len = String::new();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not\
    \ need to be mutable\n  --> /tmp/tmpyskfxqdd.rs:13:9\n   |\n13 |     let mut max_len\
    \ = String::new();\n   |         ----^^^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error[E0382]: borrow of moved value: `strings`\n   --> /tmp/tmpyskfxqdd.rs:25:10\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n15  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |     Some(strings[strings.iter().position(|s| s.len() == max_len).unwrap()])\n\
    \    |          ^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `strings`\nhelp: consider\
    \ iterating over a slice of the `Vec<String>`'s content to avoid moving into the\
    \ `for` loop\n    |\n15  |     for s in &strings {\n    |              +\n\nerror[E0507]:\
    \ cannot move out of index of `Vec<String>`\n  --> /tmp/tmpyskfxqdd.rs:25:10\n\
    \   |\n25 |     Some(strings[strings.iter().position(|s| s.len() == max_len).unwrap()])\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ move occurs because value has type `String`, which does not implement the `Copy`\
    \ trait\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nSome\
    \ errors have detailed explanations: E0382, E0507.\nFor more information about\
    \ an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            Some(s.len())\n        } else {\n            if\
    \ s.len() > acc.unwrap().unwrap() {\n                Some(s)\n            } else\
    \ {\n                None\n            }\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn4colad2.rs:11:18\n   |\n\
    11 |             Some(s.len())\n   |                  ^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                  |\n   |         \
    \         expected struct `String`, found `usize`\n\nerror[E0599]: no method named\
    \ `unwrap` found for struct `String` in the current scope\n  --> /tmp/tmpn4colad2.rs:13:39\n\
    \   |\n13 |             if s.len() > acc.unwrap().unwrap() {\n   |           \
    \                            ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn4colad2.rs:14:22\n   |\n14 |              \
    \   Some(s)\n   |                      ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplbmk4s4p.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp4czljc9z.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n            max_index = strings.iter().position(|&s| s == max_len).unwrap();\n\
    \        }\n    }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkndudx9m.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpkndudx9m.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, x| {\n        let\
    \ mut len = x.len();\n        if len > acc.len() {\n            acc = Some(x);\n\
    \        }\n        Some(acc)\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp0v3mhe4u.rs:11:22\n   |\n11 |         if len > acc.len()\
    \ {\n   |                      ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0v3mhe4u.rs:12:24\n   |\n12 |             acc\
    \ = Some(x);\n   |                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0v3mhe4u.rs:14:14\n\
    \   |\n14 |         Some(acc)\n   |              ^^^ expected struct `String`,\
    \ found enum `Option`\n   |\n   = note: expected struct `String`\n           \
    \     found enum `Option<String>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwrzr4pi.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            Some(s.len())\n        } else {\n            match\
    \ acc.as_ref().unwrap().cmp(&s.len()) {\n                Ordering::Less => Some(s),\n\
    \                Ordering::Greater => Some(acc),\n                Ordering::Equal\
    \ => None,\n            }\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpqr8g19hp.rs:14:17\n   |\n14 |                 Ordering::Less => Some(s),\n\
    \   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpqr8g19hp.rs:15:17\n\
    \   |\n15 |                 Ordering::Greater => Some(acc),\n   |            \
    \     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpqr8g19hp.rs:16:17\n   |\n16\
    \ |                 Ordering::Equal => None,\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqr8g19hp.rs:11:18\n\
    \   |\n11 |             Some(s.len())\n   |                  ^^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                  |\n   |   \
    \               expected struct `String`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqr8g19hp.rs:13:45\n   |\n13 |             match acc.as_ref().unwrap().cmp(&s.len())\
    \ {\n   |                                             ^^^^^^^^ expected struct\
    \ `String`, found `usize`\n   |\n   = note: expected reference `&String`\n   \
    \           found reference `&usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqr8g19hp.rs:14:40\n   |\n14 |                 Ordering::Less => Some(s),\n\
    \   |                                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                        |\n   |        \
    \                                expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqr8g19hp.rs:15:43\n   |\n15 |  \
    \               Ordering::Greater => Some(acc),\n   |                        \
    \                   ^^^ expected struct `String`, found enum `Option`\n   |\n\
    \   = note: expected struct `String`\n                found enum `Option<String>`\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`."
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n        }\n    }\n    Some(max_len)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsx6oi640.rs:19:10\n   |\n\
    19 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_index = -1;\n    for index in strings.iter().rev().skip(1)\
    \ {\n        let len = strings.iter().skip(index).map(|s| s.len()).max().unwrap();\n\
    \        if len > max_len {\n            max_len = len;\n            max_index\
    \ = index;\n        }\n    }\n    Some(strings[max_index])\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp57lo2c7w.rs:17:39\n   |\n\
    17 |         let len = strings.iter().skip(index).map(|s| s.len()).max().unwrap();\n\
    \   |                                       ^^^^^ expected `usize`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp57lo2c7w.rs:20:25\n   |\n15 |\
    \     let mut max_index = -1;\n   |                         -- expected due to\
    \ this value\n...\n20 |             max_index = index;\n   |                 \
    \        ^^^^^ expected integer, found `&String`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --> /tmp/tmp57lo2c7w.rs:15:25\n   |\n15 | \
    \    let mut max_index = -1;\n   |                         ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd2e3tm6t.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd2e3tm6t.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n\n \
    \   for &s in strings {\n        let len = s.len();\n        if max_len.len()\
    \ < len {\n            max_len = s;\n            max_index = len;\n        }\n\
    \    }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwtsrlfi.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpjwtsrlfi.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmpsfczs69w.rs:14:16\n   |\n14 |         .ok_or(ErrorKind::EmptyInput)\n\
    \   |                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmpsfczs69w.rs:13:10\n    |\n\
    13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpzdlszby8.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7t0spkkj.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmpz07wjst5.rs:14:16\n   |\n14 |         .ok_or(ErrorKind::EmptyInput)\n\
    \   |                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmpz07wjst5.rs:13:10\n    |\n\
    13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \n    for s in strings {\n        if s.len() > longest_len.len() {\n         \
    \   longest_len = s.len();\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpusdlpw0l.rs:18:27\n   |\n\
    13 |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n18 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n            max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \        }\n    }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgpzpztyr.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpgpzpztyr.rs:18:55\n\
    \   |\n18 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \  --> /tmp/tmpgpzpztyr.rs:14:25\n   |\n14 |     let mut max_index = -1;\n   |\
    \                         ^^ the trait `Neg` is not implemented for `usize`\n\
    \   |\n   = help: the following other types implement trait `Neg`:\n         \
    \    &f32\n             &f64\n             &i128\n             &i16\n        \
    \     &i32\n             &i64\n             &i8\n             &isize\n       \
    \    and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmprqr6zd1o.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n\n    for s in strings {\n        if s.len() ==\
    \ max_len {\n            return Some(s);\n        }\n    }\n\n    None\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `max_len`\n  --> /tmp/tmp06a7ju5z.rs:13:13\n\
    \   |\n13 |     let mut max_len = String::new();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not\
    \ need to be mutable\n  --> /tmp/tmp06a7ju5z.rs:13:9\n   |\n13 |     let mut max_len\
    \ = String::new();\n   |         ----^^^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error[E0382]: use of moved value: `strings`\n   --> /tmp/tmp06a7ju5z.rs:21:14\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n15  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for s in strings {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for s in &strings\
    \ {\n    |              +\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len < s.len() {\n          \
    \      acc = Some(s);\n            }\n        }\n        acc\n    })\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp18it05vq.rs:10:36\n   |\n10 |         if let Some(mut len)\
    \ = acc.len() {\n   |                                    ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp18it05vq.rs:12:28\n\
    \   |\n12 |                 acc = Some(s);\n   |                            ^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \          |\n   |                            expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest.len() < s.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpsf276_b0.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n\n    for s in strings {\n        if s.len() ==\
    \ max_len {\n            return Some(s);\n        }\n    }\n\n    None\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `max_len`\n  --> /tmp/tmpj5cvk0t9.rs:13:13\n\
    \   |\n13 |     let mut max_len = String::new();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not\
    \ need to be mutable\n  --> /tmp/tmpj5cvk0t9.rs:13:9\n   |\n13 |     let mut max_len\
    \ = String::new();\n   |         ----^^^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error[E0382]: use of moved value: `strings`\n   --> /tmp/tmpj5cvk0t9.rs:21:14\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n15  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for s in strings {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for s in &strings\
    \ {\n    |              +\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzgu6hx53.rs:16:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n16 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpceikx9im.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        let\
    \ mut len = s.len();\n        if len > acc.len() {\n            acc = Some(s);\n\
    \        }\n        Some(acc)\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpk8jyfy2w.rs:11:22\n   |\n11 |         if len > acc.len()\
    \ {\n   |                      ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk8jyfy2w.rs:12:24\n   |\n12 |             acc\
    \ = Some(s);\n   |                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk8jyfy2w.rs:14:14\n\
    \   |\n14 |         Some(acc)\n   |              ^^^ expected struct `String`,\
    \ found enum `Option`\n   |\n   = note: expected struct `String`\n           \
    \     found enum `Option<String>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest != s.len() {\n            longest = s;\n        }\n  \
    \  }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmpmf4p32t_.rs:11:20\n\
    \   |\n11 |         if longest != s.len() {\n   |                    ^^ no implementation\
    \ for `String == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpmf4p32t_.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| if max.len() < s.len()\
    \ { max } else { Some(s) })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmp7grm9p_w.rs:9:47\n  |\n9 |     strings.iter().fold(None,\
    \ |max, s| if max.len() < s.len() { max } else { Some(s) })\n  |             \
    \                                  ^^^ method not found in `Option<String>`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp7grm9p_w.rs:9:83\n  |\n9 |     strings.iter().fold(None,\
    \ |max, s| if max.len() < s.len() { max } else { Some(s) })\n  |             \
    \                                                                      ^- help:\
    \ try using a conversion method: `.to_string()`\n  |                         \
    \                                                          |\n  |            \
    \                                                                       expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: expected one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmpj4mzdmdd.rs:39:1\n\
    \   |\n38 |     let mut max_len = strings.iter().map(|s\n   |                \
    \                            - expected one of `:`, `@`, or `|`\n39 | }\n   |\
    \ ^ unexpected token\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpj4mzdmdd.rs:38:41\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n38 |     let mut max_len = strings.iter().map(|s\n   |      \
    \                                   ^ unclosed delimiter\n39 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            acc.push_str(s);\n            acc\n        })\n\
    \        .chars()\n        .max()\n        .map(|c| c.to_string())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmp46aufcha.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmprul7kcv5.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest.len() < s.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpour2_i6w.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mdw3sc6.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).or(None)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0trt5jpn.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len()).or(None)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(\n        None,\n        |mut acc,\
    \ s| {\n            if acc.is_none() {\n                acc = Some(s);\n     \
    \       } else {\n                let mut len = s.len();\n                let\
    \ mut max_len = acc.unwrap().len();\n                if len > max_len {\n    \
    \                max_len = len;\n                }\n                if max_len\
    \ > len {\n                    acc = Some(s);\n                }\n           \
    \ }\n            acc\n        },\n    )\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg357g7he.rs:13:28\n   |\n\
    13 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg357g7he.rs:21:32\n   |\n21 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n        }\n    }\n    Some(max_len)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmwoix6r2.rs:19:10\n   |\n\
    19 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpgja_4dud.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len < s.len() {\n          \
    \      len = s.len();\n            }\n        }\n        Some(s.clone());\n  \
    \  })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpi1msht7j.rs:10:36\n   |\n10 |         if let Some(mut len)\
    \ = acc.len() {\n   |                                    ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi1msht7j.rs:9:44\n\
    \   |\n9  |       strings.iter().fold(None, |mut acc, s| {\n   |  ____________________________________________^\n\
    10 | |         if let Some(mut len) = acc.len() {\n11 | |             if len <\
    \ s.len() {\n12 | |                 len = s.len();\n...  |\n15 | |         Some(s.clone());\n\
    \   | |                        - help: remove this semicolon\n16 | |     })\n\
    \   | |_____^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqtdfw7dz.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n            max_index = strings.iter().position(|&s| s.len() == max_len.len()).unwrap();\n\
    \        }\n    }\n\n    Some(strings[max_index])\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsc36z8m9.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpsc36z8m9.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let string = strings[index];\n    \
    \    let len = string.len();\n        if max_len.len() < len {\n            max_len\
    \ = string;\n            max_index = index;\n        }\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpakxfieir.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.chars().count())\n\
    \        .max()\n        .cloned()\n        .unwrap_or(0)\n        .to_string()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp0sb2kj_9.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0].len();\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest {\n            longest = s.len();\n        }\n\
    \    }\n\n    Some(strings[strings.iter().rindex().rev().next().unwrap().clone()])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rindex` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpxcpehnjh.rs:20:33\n   |\n20 |     Some(strings[strings.iter().rindex().rev().next().unwrap().clone()])\n\
    \   |                                 ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ String>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest == s.len() {\n            longest = s;\n        } else\
    \ if longest != s.len() {\n            longest = Some(s);\n            break;\n\
    \        }\n    }\n    longest\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmp04v5e3xa.rs:11:20\n\
    \   |\n11 |         if longest == s.len() {\n   |                    ^^ no implementation\
    \ for `String == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `String` with `usize`\n\
    \  --> /tmp/tmp04v5e3xa.rs:13:27\n   |\n13 |         } else if longest != s.len()\
    \ {\n   |                           ^^ no implementation for `String == usize`\n\
    \   |\n   = help: the trait `PartialEq<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp04v5e3xa.rs:14:23\n   |\n9  |     let mut longest = String::new();\n\
    \   |                       ------------- expected due to this value\n...\n14\
    \ |             longest = Some(s);\n   |                       ^^^^^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp04v5e3xa.rs:18:5\n   |\n8  | fn longest(strings: Vec<String>) ->\
    \ Option<String> {\n   |                                     -------------- expected\
    \ `Option<String>` becaus"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8y4rhv1c.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ index in 0..strings.len() {\n        let len = strings[index].len();\n     \
    \   if max_len.len() < len {\n            max_len = strings[index];\n        \
    \    max_index = index;\n        }\n    }\n    Some(max_len.to_string())\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp9t0lhn41.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len < s.len() {\n          \
    \      len = s.len();\n            }\n        }\n        Some(s.clone());\n  \
    \  })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp0rzsrt1s.rs:10:36\n   |\n10 |         if let Some(mut len)\
    \ = acc.len() {\n   |                                    ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0rzsrt1s.rs:9:44\n\
    \   |\n9  |       strings.iter().fold(None, |mut acc, s| {\n   |  ____________________________________________^\n\
    10 | |         if let Some(mut len) = acc.len() {\n11 | |             if len <\
    \ s.len() {\n12 | |                 len = s.len();\n...  |\n15 | |         Some(s.clone());\n\
    \   | |                        - help: remove this semicolon\n16 | |     })\n\
    \   | |_____^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3saf8oy.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpl3saf8oy.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n            max_index = strings.iter().position(|&s| s == max_len).unwrap();\n\
    \        }\n    }\n\n    if max_index >= 0 {\n        Some(max_len.clone())\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxdfvo5ip.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpxdfvo5ip.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp255uj6da.rs:16:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n16 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpw7zqiqdg.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let string = strings[index];\n    \
    \    let len = string.len();\n        if max_len.len() < len {\n            max_len\
    \ = string;\n            max_index = index;\n        }\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpgqk613ku.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::BadInput)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmpduos4ccu.rs:14:16\n   |\n14 |         .ok_or(Error::BadInput)\n   |\
    \                ^^^^^ use of undeclared type `Error`\n\nerror[E0599]: `Option<usize>`\
    \ is not an iterator\n   --> /tmp/tmpduos4ccu.rs:13:10\n    |\n13  |         \
    \  .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| match s.len() {\n\
    \        0 => Some(s),\n        1 => Some(s),\n        _ => max,\n    })\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86hojkt2.rs:10:19\n   |\n\
    10 |         0 => Some(s),\n   |                   ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                   |\n   |                   expected\
    \ struct `String`, found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86hojkt2.rs:11:19\n\
    \   |\n11 |         1 => Some(s),\n   |                   ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                   |\n   |          \
    \         expected struct `String`, found `&String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_len = String::new();\n\
    \    for s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n        }\n    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_index\
    \ = String::new();\n    for s in strings {\n        if s.len() > max_len.len()\
    \ {\n            max_len = s;\n            max_index = s;\n        }\n    }\n\
    \    Some(max_index)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `s`\n  --> /tmp/tmptij26h6t.rs:14:25\n\
    \   |\n11 |     for s in strings {\n   |         - move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n12 |         if s.len()\
    \ > max_len.len() {\n13 |             max_len = s;\n   |                     \
    \  - value moved here\n14 |             max_index = s;\n   |                 \
    \        ^ value used here after move\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0].len();\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest {\n            longest = s.len();\n        }\n\
    \    }\n\n    Some(strings[strings.iter().rindex().rev().next().unwrap()])\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rindex` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpnoj37290.rs:20:33\n   |\n20 |     Some(strings[strings.iter().rindex().rev().next().unwrap()])\n\
    \   |                                 ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ String>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(\n        \
    \    None,\n            |mut acc, s| {\n                let len = s.len();\n \
    \               if len > acc.len() {\n                    Some(s.clone())\n  \
    \              } else if len == acc.len() {\n                    Some(acc.clone())\n\
    \                } else {\n                    None\n                }\n     \
    \       },\n        )\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp6i9lgujr.rs:15:30\n   |\n15 |                 if len >\
    \ acc.len() {\n   |                              ^^^ method not found in `Option<String>`\n\
    \nerror[E0599]: no method named `len` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmp6i9lgujr.rs:17:38\n   |\n17 |                 } else if len ==\
    \ acc.len() {\n   |                                      ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6i9lgujr.rs:18:26\n\
    \   |\n18 |                     Some(acc.clone())\n   |                      \
    \    ^^^^^^^^^^^ expected struct `String`, found enum `Option`\n   |\n   = note:\
    \ expected struct `String`\n                found enum `Option<String>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let len = strings[index].len();\n \
    \       if max_len.len() < len {\n            max_len = strings[index];\n    \
    \        max_index = index;\n        }\n    }\n\n    if max_len.len() == 0 {\n\
    \        return None;\n    }\n\n    Some(strings[max_index])\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpvjge9mec.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() as usize - b.len()\
    \ as usize)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpga70zslm.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() as usize - b.len() as usize)\n  | \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `std::cmp::Ordering`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpga70zslm.rs:9:5\n  |\n8 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n9 |     strings.iter().max_by(|a, b| a.len() as usize\
    \ - b.len() as usize)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        let len = s.len();\n        if max_len.len() <\
    \ len {\n            max_len = s;\n            max_index = len;\n        }\n \
    \   }\n\n    if max_len.len() == 0 {\n        return None;\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpieafil_c.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpieafil_c.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = strings[0].len();\n    let mut longest_string\
    \ = strings[0];\n    for s in strings.iter().skip(1) {\n        if s.len() > longest_len\
    \ {\n            longest_len = s.len();\n            longest_string = s;\n   \
    \     }\n    }\n\n    Some(longest_string)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkebl4yq.rs:18:30\n   |\n\
    14 |     let mut longest_string = strings[0];\n   |                          \
    \    ---------- expected due to this value\n...\n18 |             longest_string\
    \ = s;\n   |                              ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                              |\n   |                  \
    \            expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| if s.len() > max.len()\
    \ {\n        Some(s)\n    } else {\n        max\n    })\n}\n\nfn main() {\n  \
    \  let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpspe4ie4t.rs:9:57\n  |\n9 |     strings.iter().fold(None,\
    \ |max, s| if s.len() > max.len() {\n  |                                     \
    \                    ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpspe4ie4t.rs:10:14\n   |\n10 |         Some(s)\n\
    \   |              ^- help: try using a conversion method: `.to_string()`\n  \
    \ |              |\n   |              expected struct `String`, found `&String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ s in strings {\n        let len = s.len();\n        if max_len.len() < len {\n\
    \            max_len = s;\n            max_index = len;\n        }\n    }\n  \
    \  Some(max_len.clone())\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpzkqpp4f6.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmpoxhl70ox.rs:14:16\n   |\n14 |         .ok_or(ErrorKind::EmptyInput)\n\
    \   |                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmpoxhl70ox.rs:13:10\n    |\n\
    13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() < s.len() {\n                acc =\
    \ s;\n            }\n            acc\n        })\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpijpbg8oy.rs:11:15\n   |\n\
    11 |         .fold(String::new(), |mut acc, s| {\n   |               ^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum\
    \ `Option<String>`\n            found struct `String`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n11 |         .fold(Some(String::new()), |mut acc,\
    \ s| {\n   |               +++++             +\n\nerror[E0599]: no method named\
    \ `len` found for enum `Option` in the current scope\n  --> /tmp/tmpijpbg8oy.rs:12:20\n\
    \   |\n12 |             if acc.len() < s.len() {\n   |                    ^^^\
    \ method not found in `Option<String>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpijpbg8oy.rs:13:23\n   |\n11 |         .fold(String::new(), |mut acc,\
    \ s| {\n   |                                   --- expected due to this parameter\
    \ type\n12 |             if acc.len() < s.len() {\n13 |                 acc =\
    \ s;\n   |                       ^ expected enum `Option`, found `&String`\n \
    \  |\n   = note:   expected enum `Option<String>`\n           found reference\
    \ `&String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::BadInput)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmprc57c5mt.rs:14:16\n   |\n14 |         .ok_or(Error::BadInput)\n   |\
    \                ^^^^^ use of undeclared type `Error`\n\nerror[E0599]: `Option<usize>`\
    \ is not an iterator\n   --> /tmp/tmprc57c5mt.rs:13:10\n    |\n13  |         \
    \  .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq5ry0kjt.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len = String::new();\n    for s in\
    \ strings {\n        if s.len() > longest_len.len() {\n            longest_len\
    \ = s;\n        }\n    }\n    longest_len.cloned()\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpo6wsyryd.rs:15:17\n\
    \    |\n15  |       longest_len.cloned()\n    |                   ^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ &s in strings {\n        let len = s.len();\n        if max_len.len() < len\
    \ {\n            max_len = s;\n            max_index = len;\n        }\n    }\n\
    \    if max_len.len() == 0 {\n        return None;\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvhec47f.rs:14:9\n   |\n\
    14 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpgvhec47f.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    let mut current_longest = strings[0];\n\
    \n    for s in strings.iter().rev() {\n        if s.len() > longest {\n      \
    \      longest = s.len();\n            current_longest = s;\n        }\n    }\n\
    \n    Some(current_longest)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2_acc05z.rs:17:22\n   |\n\
    17 |         if s.len() > longest {\n   |                      ^^^^^^^ expected\
    \ `usize`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2_acc05z.rs:18:23\n\
    \   |\n13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n18 |             longest = s.len();\n   | \
    \                      ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                       |\n   |                       expected struct `String`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2_acc05z.rs:19:31\n\
    \   |\n14 |     let mut current_longest = strings[0];\n   |                  \
    \             ---------- expected due to this value\n...\n19 |             current_longest\
    \ = s;\n   |                               ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                               |\n   |                 \
    \              expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6o9o0jjh.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprmrapcfv.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprmrapcfv.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len = String::new();\n    let mut longest_str\
    \ = String::new();\n    for s in strings {\n        let len = s.len();\n     \
    \   if len > longest_len.len() {\n            longest_len = len;\n           \
    \ longest_str = s;\n        }\n    }\n    Some(longest_str)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiplbqxlb.rs:14:27\n   |\n\
    9  |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n14 |             longest_len\
    \ = len;\n   |                           ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                           |\n   |                     \
    \      expected struct `String`, found `usize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n        }\n    }\n\n    Some(max_len.clone())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm7l88uo4.rs:21:10\n   |\n\
    21 |     Some(max_len.clone())\n   |          ^^^^^^^^^^^^^^^\n   |          |\n\
    \   |          expected struct `String`, found `usize`\n   |          help: try\
    \ using a conversion method: `max_len.to_string()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len < s.len() {\n          \
    \      len = s.len();\n            }\n        }\n        Some(s.clone());\n  \
    \  })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpur8aveyd.rs:10:36\n   |\n10 |         if let Some(mut len)\
    \ = acc.len() {\n   |                                    ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpur8aveyd.rs:9:44\n\
    \   |\n9  |       strings.iter().fold(None, |mut acc, s| {\n   |  ____________________________________________^\n\
    10 | |         if let Some(mut len) = acc.len() {\n11 | |             if len <\
    \ s.len() {\n12 | |                 len = s.len();\n...  |\n15 | |         Some(s.clone());\n\
    \   | |                        - help: remove this semicolon\n16 | |     })\n\
    \   | |_____^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = strings[0].len();\n    let mut longest_string\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest_len\
    \ {\n            longest_len = s.len();\n            longest_string = s;\n   \
    \     }\n    }\n    Some(longest_string)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb86j0qkj.rs:18:30\n   |\n\
    14 |     let mut longest_string = strings[0];\n   |                          \
    \    ---------- expected due to this value\n...\n18 |             longest_string\
    \ = s;\n   |                              ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                              |\n   |                  \
    \            expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmp6cw6tkd7.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::cmp::max::<usize>(strings.len(),\
    \ 1);\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > max_len {\n            max_len = s.len();\n            longest = s;\n\
    \        }\n    }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmpb7j2c5wl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpivtb6_q7.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\n   \
    \ for s in strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \        }\n    }\n\n    Some(max_len)\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7qjfh4ue.rs:24:10\n   |\n\
    24 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp5nf2_0aj.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ &s in strings {\n        let len = s.len();\n        if max_len.len() < len\
    \ {\n            max_len = s;\n            max_index = len;\n        }\n    }\n\
    \    if max_len.len() == 0 {\n        return None;\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp89enlja4.rs:14:9\n   |\n\
    14 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp89enlja4.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_index\
    \ = String::new();\n    for s in strings {\n        let len = s.len();\n     \
    \   if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = s;\n        }\n    }\n    Some(max_index)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `s`\n  --> /tmp/tmp8y681etj.rs:15:25\n\
    \   |\n11 |     for s in strings {\n   |         - move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n...\n14 |        \
    \     max_len = s;\n   |                       - value moved here\n15 |      \
    \       max_index = s;\n   |                         ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() < s.len() {\n                acc =\
    \ s\n            } else {\n                acc\n            }\n        })\n  \
    \      .ok()\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps_04p40b.rs:13:23\n   |\n\
    11 |         .fold(String::new(), |mut acc, s| {\n   |                       \
    \            --- expected due to this parameter type\n12 |             if acc.len()\
    \ < s.len() {\n13 |                 acc = s\n   |                       ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                       |\n\
    \   |                       expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps_04p40b.rs:13:17\n   |\n13 |              \
    \   acc = s\n   |                 ^^^^^^^ expected struct `String`, found `()`\n\
    \nerror[E0599]: no method named `ok` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmps_04p40b.rs:18:10\n   |\n18 |         .ok()\n   |     \
    \     ^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    let mut longest_len = strings[0].len();\n\
    \n    for s in strings.iter().rev() {\n        if s.len() > longest_len {\n  \
    \          longest = s;\n            longest_len = s.len();\n        }\n    }\n\
    \n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxdus5l5_.rs:18:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n18 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = String::new();\n    let mut longest_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut longest_str = String::new();\n    let\
    \ mut longest_str = strings.iter().map(|s| s.to_string()).max().unwrap();\n\n\
    \    for s in strings {\n        if longest_len < s.len() {\n            longest_len\
    \ = s.len();\n            longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpi21oys0v.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            Some(s.to_string().len())\n        } else {\n \
    \           match s.to_string().len() {\n                acc if acc > s.to_string().len()\
    \ => Some(s.to_string().len()),\n                _ => acc,\n            }\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppw4lxis0.rs:11:18\n   |\n\
    11 |             Some(s.to_string().len())\n   |                  ^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppw4lxis0.rs:14:58\n   |\n14 |              \
    \   acc if acc > s.to_string().len() => Some(s.to_string().len()),\n   |     \
    \                                                     ^^^^^^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \                                  |\n   |                                   \
    \                       expected struct `String`, found `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqys62n4n.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqys62n4n.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n            max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \        }\n    }\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8_btfgfv.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmp8_btfgfv.rs:18:55\n\
    \   |\n18 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \  --> /tmp/tmp8_btfgfv.rs:14:25\n   |\n14 |     let mut max_index = -1;\n   |\
    \                         ^^ the trait `Neg` is not implemented for `usize`\n\
    \   |\n   = help: the following other types implement trait `Neg`:\n         \
    \    &f32\n             &f64\n             &i128\n             &i16\n        \
    \     &i32\n             &i64\n             &i8\n             &isize\n       \
    \    and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| if s.len() > max.len()\
    \ {\n        Some(s)\n    } else {\n        max\n    })\n}\n\nfn main() {\n  \
    \  let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpuvnlmlx5.rs:9:57\n  |\n9 |     strings.iter().fold(None,\
    \ |max, s| if s.len() > max.len() {\n  |                                     \
    \                    ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuvnlmlx5.rs:10:14\n   |\n10 |         Some(s)\n\
    \   |              ^- help: try using a conversion method: `.to_string()`\n  \
    \ |              |\n   |              expected struct `String`, found `&String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3gk0o8bh.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.ok()\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ok` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpmliouymr.rs:15:13\n   |\n15 |     longest.ok()\n   |  \
    \           ^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let len = strings[index].len();\n \
    \       if max_len.len() < len {\n            max_len = strings[index];\n    \
    \        max_index = index;\n        }\n    }\n\n    if max_len.len() == 0 {\n\
    \        return None;\n    }\n\n    Some(strings[max_index])\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpztoksw1p.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_index\
    \ = -1;\n    for s in strings {\n        if s.len() > max_len.len() {\n      \
    \      max_len = s;\n            max_index = strings.iter().position(|s| s ==\
    \ max_len).unwrap();\n        }\n    }\n    if max_index >= 0 {\n        Some(max_len.clone())\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpfi8b7sgb.rs:14:55\n\
    \   |\n14 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \  --> /tmp/tmpfi8b7sgb.rs:10:25\n   |\n10 |     let mut max_index = -1;\n   |\
    \                         ^^ the trait `Neg` is not implemented for `usize`\n\
    \   |\n   = help: the following other types implement trait `Neg`:\n         \
    \    &f32\n             &f64\n             &i128\n             &i16\n        \
    \     &i32\n             &i64\n             &i8\n             &isize\n       \
    \    and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphj_9h1o8.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphj_9h1o8.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| match s.len() {\n\
    \        0 => Some(s),\n        max => Some(s),\n        _ => max,\n    })\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2cey3e8z.rs:10:19\n   |\n\
    10 |         0 => Some(s),\n   |                   ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                   |\n   |                   expected\
    \ struct `String`, found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2cey3e8z.rs:11:21\n\
    \   |\n11 |         max => Some(s),\n   |                     ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::LongestEmpty)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmplrieg34w.rs:14:16\n   |\n14 |         .ok_or(Error::LongestEmpty)\n\
    \   |                ^^^^^ use of undeclared type `Error`\n\nerror[E0599]: `Option<usize>`\
    \ is not an iterator\n   --> /tmp/tmplrieg34w.rs:13:10\n    |\n13  |         \
    \  .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for index in 0..strings.len() {\n        let len = strings[index].len();\n \
    \       if max_len.len() < len {\n            max_len = strings[index];\n    \
    \        max_index = index;\n        }\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp__a7nx6l.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n\n    for s in strings {\n        if s.len() ==\
    \ max_len {\n            return Some(s);\n        }\n    }\n\n    None\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `max_len`\n  --> /tmp/tmp8mqu6uan.rs:13:13\n\
    \   |\n13 |     let mut max_len = String::new();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not\
    \ need to be mutable\n  --> /tmp/tmp8mqu6uan.rs:13:9\n   |\n13 |     let mut max_len\
    \ = String::new();\n   |         ----^^^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error[E0382]: use of moved value: `strings`\n   --> /tmp/tmp8mqu6uan.rs:21:14\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n15  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for s in strings {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for s in &strings\
    \ {\n    |              +\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmposztp5j3.rs:20:10\n   |\n\
    20 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).or(None)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8e1ktcfd.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len()).or(None)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            Some(s.len())\n        } else {\n            if\
    \ s.len() > acc.unwrap().unwrap() {\n                Some(s)\n            } else\
    \ {\n                None\n            }\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg0f0wmfu.rs:11:18\n   |\n\
    11 |             Some(s.len())\n   |                  ^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                  |\n   |         \
    \         expected struct `String`, found `usize`\n\nerror[E0599]: no method named\
    \ `unwrap` found for struct `String` in the current scope\n  --> /tmp/tmpg0f0wmfu.rs:13:39\n\
    \   |\n13 |             if s.len() > acc.unwrap().unwrap() {\n   |           \
    \                            ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg0f0wmfu.rs:14:22\n   |\n14 |              \
    \   Some(s)\n   |                      ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len = std::cmp::max::<usize>(\n   \
    \     strings.iter().map(|s| s.len()).sum(),\n        0,\n    );\n    let mut\
    \ longest_str = String::new();\n    for s in strings {\n        if s.len() > longest_len\
    \ {\n            longest_len = s.len();\n            longest_str = s;\n      \
    \  }\n    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmpbw914rie.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            acc = Some(s);\n        } else if acc.as_ref().unwrap().len()\
    \ < s.len() {\n            acc = Some(s);\n        }\n        acc\n    })\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp15f7runz.rs:11:24\n   |\n\
    11 |             acc = Some(s);\n   |                        ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                        |\n   |   \
    \                     expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp15f7runz.rs:13:24\n   |\n13 |             acc\
    \ = Some(s);\n   |                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        let\
    \ len = s.len();\n        if len > acc.len() {\n            acc = Some(s);\n \
    \       }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpek1qk5hf.rs:11:22\n   |\n11 |         if len > acc.len()\
    \ {\n   |                      ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpek1qk5hf.rs:12:24\n   |\n12 |             acc\
    \ = Some(s);\n   |                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0wtqp8qt.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0wtqp8qt.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() < s.len() {\n                acc =\
    \ s\n            } else {\n                acc\n            }\n        })\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmuxcen8b.rs:11:15\n   |\n\
    11 |         .fold(String::new(), |mut acc, s| {\n   |               ^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum\
    \ `Option<String>`\n            found struct `String`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n11 |         .fold(Some(String::new()), |mut acc,\
    \ s| {\n   |               +++++             +\n\nerror[E0599]: no method named\
    \ `len` found for enum `Option` in the current scope\n  --> /tmp/tmpmuxcen8b.rs:12:20\n\
    \   |\n12 |             if acc.len() < s.len() {\n   |                    ^^^\
    \ method not found in `Option<String>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmuxcen8b.rs:13:23\n   |\n11 |         .fold(String::new(), |mut acc,\
    \ s| {\n   |                                   --- expected due to this parameter\
    \ type\n12 |             if acc.len() < s.len() {\n13 |                 acc =\
    \ s\n   |                       ^ expected enum `Option`, found `&String`\n  \
    \ |\n   = note:   expected enum `Option<String>`\n           found reference `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmuxcen8b.rs:13:17\n   |\n13 |\
    \                 acc = s\n   |                 ^^^^^^^ expected enum `Option`,\
    \ found `()`\n   |\n   = note:   expected enum `Option<String>`\n           found\
    \ unit type `()`\nhelp: try adding an expression at the end of the block\n   |\n\
    13 ~                 acc = s;\n14 +                 None\n   |\n13 ~         \
    \        acc = s;\n14 +                 Some(())\n   |\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::cmp::max::<usize>(strings.len(),\
    \ 1);\n    let mut longest = strings[0];\n    for s in strings {\n        if s.len()\
    \ > max_len {\n            max_len = s.len();\n            longest = s;\n    \
    \    }\n    }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp21u7s5x6.rs:10:23\n\
    \   |\n10 |     let mut longest = strings[0];\n   |                       ^^^^^^^^^^\n\
    \   |                       |\n   |                       move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                    help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n\n    for s in strings.iter()\
    \ {\n        if s.len() > longest_len {\n            longest_len = s.len();\n\
    \        }\n    }\n\n    strings.iter().find(|s| s.len() == longest_len)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkgfye0i.rs:24:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n24 |     strings.iter().find(|s| s.len() == longest_len)\n   |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected enum `Option<String>`\n         \
    \     found enum `Option<&String>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpry6a8qd5.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ &s in strings {\n        let len = s.len();\n        if max_len.len() < len\
    \ {\n            max_len = s;\n            max_index = len;\n        }\n    }\n\
    \    Some(max_len.clone())\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcl33x0ug.rs:14:9\n   |\n\
    14 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpcl33x0ug.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            acc = Some(s);\n        } else {\n            let\
    \ mut len = s.len();\n            if len > acc.unwrap().len() {\n            \
    \    acc = Some(s);\n            }\n        }\n        acc\n    })\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuczyrg1x.rs:11:24\n   |\n\
    11 |             acc = Some(s);\n   |                        ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                        |\n   |   \
    \                     expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuczyrg1x.rs:15:28\n   |\n15 |              \
    \   acc = Some(s);\n   |                            ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                            |\n   |            \
    \                expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmp9nyovi9i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .unwrap_or(0)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpwpx_oggq.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbzvhwj78.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbzvhwj78.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_index = -1;\n   \
    \ for &s in strings {\n        if s.len() > max_len.len() {\n            max_len\
    \ = s;\n            max_index = strings.iter().position(|&s| s.len() == max_len.len()).unwrap();\n\
    \        }\n    }\n\n    Some(max_len)\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp87qptuzm.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp87qptuzm.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1g320g4e.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1g320g4e.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ index in 0..strings.len() {\n        let len = strings[index].len();\n     \
    \   if max_len.len() < len {\n            max_len = strings[index];\n        \
    \    max_index = index;\n        }\n    }\n    Some(max_len.to_string())\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpn7xajzcs.rs:13:25\n\
    \   |\n13 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpe0_zi323.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0hly7ey1.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf9fht67c.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjugpov1v.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjugpov1v.rs:9:63\n\
    \  |\n9 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjugpov1v.rs:9:5\n  |\n8 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n9 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, s| {\n        if let\
    \ Some(len) = s.len() {\n            if len > max {\n                Some(s)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0wjtp18b.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0wjtp18b.rs:12:22\n   |\n12 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest == s.len() {\n            longest = s;\n        }\n  \
    \  }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmppwr_906g.rs:11:20\n\
    \   |\n11 |         if longest == s.len() {\n   |                    ^^ no implementation\
    \ for `String == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmppwr_906g.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7agtufot.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkc0e4box.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi3bpn10e.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ &s in strings {\n        if s.len() > max_len.len() {\n            max_len =\
    \ s;\n            max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \        }\n    }\n    Some(max_len.clone())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbrk4kmrp.rs:14:9\n   |\n\
    14 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpbrk4kmrp.rs:17:55\n\
    \   |\n17 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \  --> /tmp/tmpbrk4kmrp.rs:13:25\n   |\n13 |     let mut max_index = -1;\n   |\
    \                         ^^ the trait `Neg` is not implemented for `usize`\n\
    \   |\n   = help: the following other types implement trait `Neg`:\n         \
    \    &f32\n             &f64\n             &i128\n             &i16\n        \
    \     &i32\n             &i64\n             &i8\n             &isize\n       \
    \    and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8pxb3civ.rs:9:54\n  |\n9 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8pxb3civ.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmpv49uyf8b.rs:14:16\n   |\n14 |         .ok_or(ErrorKind::EmptyInput)\n\
    \   |                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmpv49uyf8b.rs:13:10\n    |\n\
    13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            acc = Some(s);\n        } else if acc.unwrap().len()\
    \ < s.len() {\n            acc = Some(s);\n        }\n        acc\n    })\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvch6vfc5.rs:11:24\n   |\n\
    11 |             acc = Some(s);\n   |                        ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                        |\n   |   \
    \                     expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvch6vfc5.rs:13:24\n   |\n13 |             acc\
    \ = Some(s);\n   |                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpuh17zu9c.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest.len() < s.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpdqgg36h2.rs:15:13\n\
    \    |\n15  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        let\
    \ len = s.len();\n        if len > acc.len() {\n            Some(s.clone())\n\
    \        } else {\n            acc.replace(len, len, s);\n            None\n \
    \       }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp8k6jtnef.rs:11:22\n   |\n11 |         if len > acc.len()\
    \ {\n   |                      ^^^ method not found in `Option<String>`\n\nerror[E0061]:\
    \ this function takes 1 argument but 3 arguments were supplied\n    --> /tmp/tmp8k6jtnef.rs:14:17\n\
    \     |\n14   |             acc.replace(len, len, s);\n     |                \
    \ ^^^^^^^ ---  ---  - supplied 3 arguments\n     |                 |\n     | \
    \                expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n\n    for s in strings {\n        if s.len() ==\
    \ max_len {\n            return Some(s);\n        }\n    }\n\n    None\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `max_len`\n  --> /tmp/tmp85_cte0n.rs:13:13\n\
    \   |\n13 |     let mut max_len = String::new();\n   |             ^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_max_len`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does not\
    \ need to be mutable\n  --> /tmp/tmp85_cte0n.rs:13:9\n   |\n13 |     let mut max_len\
    \ = String::new();\n   |         ----^^^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error[E0382]: use of moved value: `strings`\n   --> /tmp/tmp85_cte0n.rs:21:14\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n15  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n21  |     for s in strings {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for s in &strings\
    \ {\n    |              +\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5961p66j.rs:15:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n15 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, &str| {\n        match\
    \ str.length() {\n            0 => Some(max),\n            max if max > str.length()\
    \ => Some(str),\n            _ => max,\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpzu493d8n.rs:10:19\n   |\n10 |         match str.length()\
    \ {\n   |                   ^^^^^^ help: there is an associated function with\
    \ a similar name: `len`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzu493d8n.rs:11:23\n\
    \   |\n11 |             0 => Some(max),\n   |                       ^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<String>`\n\nerror[E0599]: no method named\
    \ `length` found for struct `String` in the current scope\n  --> /tmp/tmpzu493d8n.rs:12:30\n\
    \   |\n12 |             max if max > str.length() => Some(str),\n   |        \
    \                      ^^^^^^ help: there is an associated function with a similar\
    \ name: `len`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len < s.len() {\n          \
    \      len = s.len();\n            }\n        }\n        Some(s.clone());\n  \
    \  })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp6p5t_5gs.rs:10:36\n   |\n10 |         if let Some(mut len)\
    \ = acc.len() {\n   |                                    ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6p5t_5gs.rs:9:44\n\
    \   |\n9  |       strings.iter().fold(None, |mut acc, s| {\n   |  ____________________________________________^\n\
    10 | |         if let Some(mut len) = acc.len() {\n11 | |             if len <\
    \ s.len() {\n12 | |                 len = s.len();\n...  |\n15 | |         Some(s.clone());\n\
    \   | |                        - help: remove this semicolon\n16 | |     })\n\
    \   | |_____^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    for s in strings\
    \ {\n        if s.len() > max_len.len() {\n            max_len = s;\n        }\n\
    \    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmp192eebyn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = strings[0].len();\n    let mut longest_string\
    \ = strings[0];\n\n    for s in strings.iter().rev() {\n        if s.len() > longest_len\
    \ {\n            longest_len = s.len();\n            longest_string = s;\n   \
    \     }\n    }\n\n    Some(longest_string)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2tg6o_1w.rs:19:30\n   |\n\
    14 |     let mut longest_string = strings[0];\n   |                          \
    \    ---------- expected due to this value\n...\n19 |             longest_string\
    \ = s;\n   |                              ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                              |\n   |                  \
    \            expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::cmp::max::<usize>(strings.len(),\
    \ 0);\n    let mut max_string = None;\n    for s in strings {\n        let len\
    \ = s.len();\n        if max_len < len {\n            max_len = len;\n       \
    \     max_string = Some(s);\n        }\n    }\n    max_string\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"x\")`', /tmp/tmpnymvnaet.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpw86yccb9.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgb14rcim.rs:21:10\n   |\n\
    21 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_len\
    \ = String::new();\n    for s in strings {\n        if s.len() > max_len.len()\
    \ {\n            max_len = s;\n        }\n    }\n    Some(max_len)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmp18nmioob.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp31g8y1zi.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n  |          \
    \                        ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest_len = strings[0].len();\n    for s in strings {\n   \
    \     if s.len() > longest_len {\n            longest_len = s.len();\n       \
    \ }\n    }\n    strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s.to_string()).unwrap_or(None)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6blwqzoe.rs:18:34\n   |\n\
    18 |     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s.to_string()).unwrap_or(None)\n\
    \   |                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6blwqzoe.rs:18:86\n\
    \   |\n18 |     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s.to_string()).unwrap_or(None)\n\
    \   |                                                                        \
    \              ^^^^ expected struct `String`, found enum `Option`\n   |\n   =\
    \ note: expected struct `String`\n                found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6blwqzoe.rs:18:5\n   |\n8  | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n...\n18 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).map(|s| s.to_string()).unwrap_or(None)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum\
    \ `Option<String>`\n            found struct `String`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n18 |     Some(strings.iter().max_by(|a, b| a.len()\
    \ < b.len()).map(|s| s.to_string()).unwrap_or(None))\n   |     +++++         \
    \                                                                            \
    \ +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.as_mut().map(|s| s.len()) {\n            if len > s.len()\
    \ {\n                acc = Some(s);\n            }\n        }\n        acc\n \
    \   })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptwvrh4gx.rs:12:28\n   |\n\
    12 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
