language: rust
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
