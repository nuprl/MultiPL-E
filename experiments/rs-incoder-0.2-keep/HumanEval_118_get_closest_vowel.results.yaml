language: rust
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: -15
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n\
    \    let mut vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_end.chain(vowels_start);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter\
    \ = vowels_iter.chain(vowels_iter);\n    let mut vowels_iter = vowels_iter.chain(vowels_iter);\n\
    \    let mut vowels_iter = vowels_iter.\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp01w37kyc.rs:45:1\n   |\n45\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp01w37kyc.rs:44:39\n\
    \   |\n44 |     let mut vowels_iter = vowels_iter.\n   |                     \
    \                  ^ help: add `;` here\n45 | }\n   | - unexpected token\n\n"
  stdout: ''
  timestamp: 1660053040
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl40aj8dy.rs:31:66\n   |\n\
    31 |     let mut vowels_start_end_end_end_end_end_end_end_end_end_end_\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl40aj8dy.rs:11:39\n   |\n11 | fn get_closest_vowel(word: String)\
    \ -> String {\n   |    -----------------                  ^^^^^^ expected struct\
    \ `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min = vec![0];\n    let mut vowels_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index = vec![0];\n    let mut\
    \ vowels_index_count_max_index_max = vec![0];\n    let mut vowels_index_count_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_max_index_min = vec![0];\n    let\
    \ mut vowels_index_count_min_index_min = vec![0];\n    let mut vowels_index_count_max_index_min_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_index = vec![0];\n\
    \    let mut vowels_index_count_max_index_min_index_max = vec![0];\n    let mut\
    \ vowels_index_count_min_index_min_index_max = vec![0];\n    let mut vowels_index_count_min_index_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_index_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_index_max = vec![0];\n    let mut\
    \ vowels_index_count_min_index_min_index_max = vec![0];\n    let mut vowels_index_count_min_index_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_index_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_index_max = vec![0];\n    let mut\
    \ vowels_index_count_min_index_min_index_max = vec![0];\n    let mut vowels_index_count_min_index_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_index_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_index_max = vec![0];\n    let mut\
    \ vowels_index_count_min_index_min_index_max = vec![0];\n    let mut vowels_index_count_min_index_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_index_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_index_max = vec![0];\n    let mut\
    \ vowels_index_count_min_index_min_index_max = vec![0];\n    let mut vowels_index_count_min_index_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_index_max = vec![0];\n\
    \    let mut vowels_index_count_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjq8_sm_e.rs:46:32\n   |\n\
    46 |     let mut vowels_index_count_\n   |                                ^ help:\
    \ add `;` here\n47 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjq8_sm_e.rs:11:39\n   |\n11 | fn get_closest_vowel(word: String)\
    \ -> String {\n   |    -----------------                  ^^^^^^ expected struct\
    \ `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    for vowel in vowels {\n \
    \       vowels_set.insert(vowel);\n    }\n    let mut vowels_count = HashSet::new();\n\
    \    for vowel in vowels {\n        vowels_count.insert(vowel);\n    }\n    let\
    \ mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = HashSet::new();\n    let mut vowels_count = HashSet::new();\n\
    \    let mut vowels_count = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpmdy8m66z.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected expression\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:13:26\n   |\n13\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:17:28\n   |\n17\
    \ |     let mut vowels_count = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:21:28\n   |\n21\
    \ |     let mut vowels_count = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:22:28\n   |\n22\
    \ |     let mut vowels_count = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:23:28\n   |\n23\
    \ |     let mut vowels_count = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:24:28\n   |\n24\
    \ |     let mut vowels_count = HashSet::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpmdy8m66z.rs:25:28\n   |\n25\
    \ |     let mut"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_middle = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_middle\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_middle = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_middle = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let mut vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let mut vowels_end = vec![\"a\", \"e\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpr2xvzx64.rs:55:65\n\
    \   |\n55 |       assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
    o\"));\n   |  _________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660052975
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl40aj8dy.rs:31:66\n   |\n\
    31 |     let mut vowels_start_end_end_end_end_end_end_end_end_end_end_\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl40aj8dy.rs:11:39\n   |\n11 | fn get_closest_vowel(word: String)\
    \ -> String {\n   |    -----------------                  ^^^^^^ expected struct\
    \ `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_len\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_len\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_len = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl8huof91.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl8huof91.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_end = vec![0];\n\
    \    let mut vowels_index_start = vec![0];\n    let mut vowels_index_start_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end = vec![0];\n    let mut vowels_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end = vec![0];\n    let\
    \ mut vowels_index_start_end_end_end_end_end = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end = vec![0];\n \
    \   let mut vowels_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end =\
    \ vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps6s9irtt.rs:38:18\n   |\n\
    38 |     let mut vowel\n   |                  ^ help: add `;` here\n39 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6s9irtt.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8zxdasxf.rs:31:91\n   |\n\
    31 |     let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec\n   |                                                                \
    \                           ^ help: add `;` here\n32 | }\n   | - unexpected token\n\
    \nerror[E0423]: expected value, found macro `vec`\n  --> /tmp/tmp8zxdasxf.rs:31:88\n\
    \   |\n31 |     let mut vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec\n   |                                                                \
    \                        ^^^ not a value\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp8zxdasxf.rs:11:39\n   |\n11 | fn get_closest_vowel(word: String)\
    \ -> String {\n   |    -----------------                  ^^^^^^ expected struct\
    \ `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0423.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    let mut vowels_index = HashMap::new();\n\
    \    let mut vowels_index2 = HashMap::new();\n    let mut vowels_index3 = HashMap::new();\n\
    \    let mut vowels_index4 = HashMap::new();\n    let mut vowels_index5 = HashMap::new();\n\
    \    let mut vowels_index6 = HashMap::new();\n    let mut vowels_index7 = HashMap::new();\n\
    \    let mut vowels_index8 = HashMap::new();\n    let mut vowels_index9 = HashMap::new();\n\
    \    let mut vowels_index10 = HashMap::new();\n    let mut vowels_index11 = HashMap::new();\n\
    \    let mut vowels_index12 = HashMap::new();\n    let mut vowels_index13 = HashMap::new();\n\
    \    let mut vowels_index14 = HashMap::new();\n    let mut vowels_index15 = HashMap::new();\n\
    \    let mut vowels_index16 = HashMap::new();\n    let mut vowels_index17 = HashMap::new();\n\
    \    let mut vowels_index18 = HashMap::new();\n    let mut vowels_index19 = HashMap::new();\n\
    \    let mut vowels_index20 = HashMap::new();\n    let mut vowels_index21 = HashMap::new();\n\
    \    let mut vowels_index22 = HashMap::new();\n    let mut vowels_index23 = HashMap::new();\n\
    \    let mut vowels_index24 = HashMap::new();\n    let mut vowels_index25 = HashMap::new();\n\
    \    let mut vowels_index26 = HashMap::new();\n    let mut vowels_index27 = HashMap::new();\n\
    \    let mut vowels_index28 = HashMap::new();\n    let mut vowels_index29 = HashMap::new();\n\
    \    let mut vowels_index30 = HashMap::new();\n    let mut vowels_index31 = HashMap::new();\n\
    \    let mut vowels_index32 = HashMap::new();\n    let mut vowels_index33 = HashMap::new();\n\
    \    let mut vowels_index34 = HashMap::new();\n    let mut vowels_index35 = HashMap::new();\n\
    \    let mut vowels_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqf8cl1mq.rs:49:20\n   |\n\
    49 |     let mut vowels_\n   |                    ^ help: add `;` here\n50 | }\n\
    \   | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpqf8cl1mq.rs:13:26\n   |\n13 |     let mut vowels_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpqf8cl1mq.rs:14:28\n   |\n14 |     let mut vowels_index = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpqf8cl1mq.rs:15:29\n   |\n15 |     let mut vowels_index2 = HashMap::new();\n\
    \   |                             ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpqf8cl1mq.rs:16:29\n   |\n16 |     let mut vowels_index3 = HashMap::new();\n\
    \   |                             ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpqf8cl1mq.rs:17:29\n   |\n17 |     let mut vowels_index4 = HashMap::new();\n\
    \   |                             ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpqf8cl1mq.rs:18:29\n   |\n18 |     let mut vowels_index5 = HashMap::new();\n\
    \   |                             ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min = vec![0];\n    let mut vowels_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index = vec![0];\n    let mut\
    \ vowels_index_count_max_index_max = vec![0];\n    let mut vowels_index_count_min_index_max\
    \ = vec![0];\n    let mut vowels_index_count_max_index_min = vec![0];\n    let\
    \ mut vowels_index_count_min_index_min = vec![0];\n    let mut vowels_index_count_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_max = vec![0];\n  \
    \  let mut vowels_index_count_max_index_min_min = vec![0];\n    let mut vowels_index_count_min_index_min_min\
    \ = vec![0];\n    let mut vowels_index_count_max_index_min_min_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_min_max = vec![0];\n    let mut\
    \ vowels_index_count_max_index_min_min_min = vec![0];\n    let mut vowels_index_count_min_index_min_min_min\
    \ = vec![0];\n    let mut vowels_index_count_max_index_min_min_min_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_min_min_max = vec![0];\n    let\
    \ mut vowels_index_count_max_index_min_min_min_min = vec![0];\n    let mut vowels_index_count_min_index_min_min_min_min\
    \ = vec![0];\n    let mut vowels_index_count_max_index_min_min_min_min_max = vec![0];\n\
    \    let mut vowels_index_count_min_index_min_min_min_min_max = vec![0];\n   \
    \ let mut vowels_index_count_max_index_min_min_min_min_min = vec![0];\n    let\
    \ mut vowels_index_count_min_index_min_min_min_min = vec![0];\n    let mut vowels_index_count_max_index_min_min_min_min_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_index_min_min_min_min_max = vec![0];\n\
    \    let mut vowels_index_count_max_index_min_min_min_min_min = vec![0];\n   \
    \ let mut vowels_index_count_min_index_min_min_min_min = vec![0];\n    let mut\
    \ vowels_index_count_max_index_min_min_min_min_max = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphf5zdnqa.rs:45:18\n   |\n\
    45 |     let mut vowel\n   |                  ^ help: add `;` here\n46 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf5zdnqa.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n\
    \    let mut vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpt9gv15je.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmply5bfin3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_middle = vowels_iter.next();\n\
    \    let mut vowels_first_half = vowels_iter.next();\n    let mut vowels_second_half\
    \ = vowels_iter.next();\n    let mut vowels_first_half_iter = vowels_first_half.iter();\n\
    \    let mut vowels_second_half_iter = vowels_second_half.iter();\n    let mut\
    \ vowels_first_half_end = vowels_first_half_iter.next();\n    let mut vowels_second_half_end\
    \ = vowels_second_half_iter.next();\n    let mut vowels_first_half_start = vowels_first_half_iter.next();\n\
    \    let mut vowels_second_half_start = vowels_second_half_iter.next();\n    let\
    \ mut vowels_first_half_middle = vowels_first_half_iter.next();\n    let mut vowels_second_half_middle\
    \ = vowels_second_half_iter.next();\n    let mut vowels_first_half_middle_iter\
    \ = vowels_first_half_middle.iter();\n    let mut vowels_second_half_middle_iter\
    \ = vowels_second_half_middle.iter();\n    let mut vowels_first_half_middle_end\
    \ = vowels_first_half_middle_iter.next();\n    let mut vowels_second_half_middle_end\
    \ = vowels_second_half_middle_iter.next();\n    let mut vowels_first_half_middle_start\
    \ = vowels_first_half_middle_iter.next();\n    let mut vowels_second_half_middle_start\
    \ = vowels_second_half_middle_iter.next();\n    let mut vowels_first_half_middle_middle\
    \ = vowels_first_half_middle_iter.next();\n    let mut vowels_second_half_middle_middle\
    \ = vowels_second_half_middle_iter.next();\n    let mut vowels_first_half_middle_middle_iter\
    \ = vowels_first_half_middle_middle.iter();\n    let mut vowels_second_half_middle_middle_iter\
    \ = vowels_second_half_middle_middle.iter();\n    let mut vowels_first_half_middle_middle_end\
    \ = vowels_first_half_middle_middle_iter.next();\n    let mut vowels_second_half_middle_middle_end\
    \ = vowels_second_half_middle_middle_iter.next();\n    let mut vowels_first_half_middle_middle_start\
    \ = vowels_first_half_middle_middle_iter.next();\n    let mut vowels_second_half_middle_middle_start\
    \ = vowels_second_half_middle_middle_iter.next();\n    let mut vowels_first_half_middle_middle_middle\
    \ = vowels_first_half_middle_middle_iter.next();\n    let mut vowels_second_half_middle_middle_middle\
    \ = vowels_second_half_middle_middle_iter.next();\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpxsu9t2sb.rs:44:1\n\
    \   |\n44 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min = vec![0];\n    let mut vowels_index_count_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index = vec![0];\n    let\
    \ mut vowels_index_count_min_max_index_max = vec![0];\n    let mut vowels_index_count_min_max_index_min\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max = vec![0];\n\
    \    let mut vowels_index_count_min_max_index_min_max_index = vec![0];\n    let\
    \ mut vowels_index_count_min_max_index_min_max_index_max = vec![0];\n    let mut\
    \ vowels_index_count_min_max_index_min_max_index_min = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max_index_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpce5wrxk2.rs:38:88\n   |\n\
    38 |     let mut vowels_index_count_min_max_index_min_max_index_min_max_index_min_max_index_\n\
    \   |                                                                        \
    \                ^ help: add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpce5wrxk2.rs:11:39\n   |\n11 | fn get_closest_vowel(word:\
    \ String) -> String {\n   |    -----------------                  ^^^^^^ expected\
    \ struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels.iter().rev();\n\
    \    let mut vowels_start = vowels.iter().rev();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = vowels_iter.clone();\n    let mut vowels_iter = vowels_end.clone();\n\
    \    let mut vowels_end = vowels_start.clone();\n    let mut vowels_start = vowels_iter.clone();\n\
    \    let mut vowels_iter = vowels_end.clone();\n    let mut vowels_end = vowels_start.clone();\n\
    \    let mut vowels_start = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpt9gv15je.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = word.len();\n    let mut vowels_idx_end = word.len()\
    \ - 1;\n    let mut vowels_idx_start = word.len() - 2;\n    let mut vowels_idx_start_end\
    \ = word.len() - 3;\n    let mut vowels_idx_start_end_end = word.len() - 4;\n\
    \    let mut vowels_idx_start_end_end_end = word.len() - 5;\n    let mut vowels_idx_start_end_end_end_end\
    \ = word.len() - 6;\n    let mut vowels_idx_start_end_end_end_end_end = word.len()\
    \ - 7;\n    let mut vowels_idx_start_end_end_end_end_end_end = word.len() - 8;\n\
    \    let mut vowels_idx_start_end_end_end_end_end_end_end = word.len() - 9;\n\
    \    let mut vowels_idx_start_end_end_end_end_end_end_end_end = word.len() - 10;\n\
    \    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end = word.len()\
    \ - 11;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 12;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 13;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 14;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 15;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 16;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 17;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 18;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 19;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 20;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 21;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 22;\n    let mut vowels_idx_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = word.len() - 23;\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa_a5cd_h.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_end = vec![0];\n\
    \    let mut vowels_index_start = vec![0];\n    let mut vowels_index_start_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end = vec![0];\n    let mut vowels_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end = vec![0];\n    let\
    \ mut vowels_index_start_end_end_end_end_end = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end = vec![0];\n \
    \   let mut vowels_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end =\
    \ vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps6s9irtt.rs:38:18\n   |\n\
    38 |     let mut vowel\n   |                  ^ help: add `;` here\n39 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6s9irtt.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmply5bfin3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index2 = vec![0];\n    let mut vowels_count2 = vec![0];\n\
    \    let mut vowels_index3 = vec![0];\n    let mut vowels_count3 = vec![0];\n\
    \    let mut vowels_index4 = vec![0];\n    let mut vowels_count4 = vec![0];\n\
    \    let mut vowels_index5 = vec![0];\n    let mut vowels_count5 = vec![0];\n\
    \    let mut vowels_index6 = vec![0];\n    let mut vowels_count6 = vec![0];\n\
    \    let mut vowels_index7 = vec![0];\n    let mut vowels_count7 = vec![0];\n\
    \    let mut vowels_index8 = vec![0];\n    let mut vowels_count8 = vec![0];\n\
    \    let mut vowels_index9 = vec![0];\n    let mut vowels_count9 = vec![0];\n\
    \    let mut vowels_index10 = vec![0];\n    let mut vowels_count10 = vec![0];\n\
    \    let mut vowels_index11 = vec![0];\n    let mut vowels_count11 = vec![0];\n\
    \    let mut vowels_index12 = vec![0];\n    let mut vowels_count12 = vec![0];\n\
    \    let mut vowels_index13 = vec![0];\n    let mut vowels_count13 = vec![0];\n\
    \    let mut vowels_index14 = vec![0];\n    let mut vowels_count14 = vec![0];\n\
    \    let mut vowels_index15 = vec![0];\n    let mut vowels_count15 = vec![0];\n\
    \    let mut vowels_index16 = vec![0];\n    let mut vowels_count16 = vec![0];\n\
    \    let mut vowels_index17 = vec![0];\n    let mut vowels_count17 = vec![0];\n\
    \    let mut vowels_index18 = vec![0];\n    let mut vowels_count18 = vec![0];\n\
    \    let mut vowels_index19 = vec![0];\n    let mut vowels_count19 = vec![0];\n\
    \    let mut vowels_index20 = vec![0];\n    let mut vowels_count20 = vec![0];\n\
    \    let mut vowels_index21 = vec![0];\n    let mut vowels_count21 = vec![0];\n\
    \    let mut vowels_index22 = vec![0];\n    let mut vowels_count22 = vec![0];\n\
    \    let mut vowels_index23 = vec![0];\n    let \n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpilpgv9ya.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmply5bfin3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_end = vec![0];\n\
    \    let mut vowels_index_start = vec![0];\n    let mut vowels_index_start_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end = vec![0];\n    let mut vowels_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end = vec![0];\n    let\
    \ mut vowels_index_start_end_end_end_end_end = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end = vec![0];\n \
    \   let mut vowels_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end =\
    \ vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp128zp60t.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).collect::<Vec<_>>();\n    vowels_idx\n        .iter()\n        .cloned()\n\
    \        .enumerate()\n        .filter(|&(_, c)| c != 'a')\n        .map(|(_,\
    \ c)| vowels.iter().position(|&v| v == c).unwrap())\n        .max()\n        .unwrap_or(0)\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_turcliq.rs:13:84\n   |\n\
    13 |     let mut vowels_idx = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).collect::<Vec<_>>();\n   |                                          \
    \                                          ^ expected `&&str`, found `char`\n\n\
    error[E0277]: can't compare `&str` with `char`\n  --> /tmp/tmp_turcliq.rs:19:53\n\
    \   |\n19 |         .map(|(_, c)| vowels.iter().position(|&v| v == c).unwrap())\n\
    \   |                                                     ^^ no implementation\
    \ for `&str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_turcliq.rs:14:5\n   |\n11 |   fn get_closest_vowel(word:\
    \ String) -> String {\n   |                                         ------ expected\
    \ `String` because of return type\n...\n14 | /     vowels_idx\n15 | |        \
    \ .iter()\n16 | |         .cloned()\n17 | |         .enumerate()\n...  |\n20 |\
    \ |         .max()\n21 | |         .unwrap_or(0)\n   | |                     ^-\
    \ help: try using a conversion method: `.to_string()`\n   | |_____________________|\n\
    \   |                       expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_count_index = vec![0];\n\
    \    let mut vowels_count_index_end = vec![0];\n    let mut vowels_count_index_start\
    \ = vec![0];\n    let mut vowels_count_index_start_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end = vec![0];\n    let mut vowels_count_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end = vec![0];\n    let\
    \ mut vowels_count_index_start_end_end_end_end_end_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end_end_end_end_end_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end_end_end_end_end_end_end = vec![0];\n    let\
    \ mut vowels_count_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpngx_a1yx.rs:39:1\n\
    \   |\n39 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    vowels.iter().for_each(|v|\
    \ vowels_set.insert(v));\n    let mut vowels_count = vowels_set.len();\n    let\
    \ mut vowels_index = vowels.len();\n    let mut vowels_index2 = vowels.len();\n\
    \    let mut vowels_index3 = vowels.len();\n    let mut vowels_index4 = vowels.len();\n\
    \    let mut vowels_index5 = vowels.len();\n    let mut vowels_index6 = vowels.len();\n\
    \    let mut vowels_index7 = vowels.len();\n    let mut vowels_index8 = vowels.len();\n\
    \    let mut vowels_index9 = vowels.len();\n    let mut vowels_index10 = vowels.len();\n\
    \    let mut vowels_index11 = vowels.len();\n    let mut vowels_index12 = vowels.len();\n\
    \    let mut vowels_index13 = vowels.len();\n    let mut vowels_index14 = vowels.len();\n\
    \    let mut vowels_index15 = vowels.len();\n    let mut vowels_index16 = vowels.len();\n\
    \    let mut vowels_index17 = vowels.len();\n    let mut vowels_index18 = vowels.len();\n\
    \    let mut vowels_index19 = vowels.len();\n    let mut vowels_index20 = vowels.len();\n\
    \    let mut vowels_index21 = vowels.len();\n    let mut vowels_index22 = vowels.len();\n\
    \    let mut vowels_index23 = vowels.len();\n    let mut vowels_index24 = vowels.len();\n\
    \    let mut vowels_index25 = vowels.len();\n    let mut vowels_index26 = vowels.len();\n\
    \    let mut vowels_index27 = vowels.len();\n    let mut vowels_index28 = vowels.len();\n\
    \    let mut vowels_index29 = vowels.len();\n    let mut vowels_index30 = vowels.len();\n\
    \    let mut vowels_index31 = vowels.len();\n    let mut vowels_index32 = vowels.len();\n\
    \    let mut vowels_index33 = vowels.len();\n    let mut vowels_index34 = vowels.len();\n\
    \    let mut vowels_index35 = vowels.len();\n    let mut vowels_index36 = vowels.len\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppu3vnzax.rs:51:40\n   |\n\
    51 |     let mut vowels_index36 = vowels.len\n   |                           \
    \             ^ help: add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppu3vnzax.rs:13:26\n\
    \   |\n13 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0616]: field `len`\
    \ of struct `Vec` is private\n  --> /tmp/tmppu3vnzax.rs:51:37\n   |\n51 |    \
    \ let mut vowels_index36 = vowels.len\n   |                                  \
    \   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n\
    \   |\n51 |     let mut vowels_index36 = vowels.len()\n   |                  \
    \                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppu3vnzax.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433, E0616.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_iter = vowels.iter();\n\
    \    let mut vowels_iter = vowels.iter();\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppgwmmu8v.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2tsisry.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmply5bfin3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    for vowel in vowels {\n \
    \       vowels_set.insert(vowel);\n    }\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprmo2q8p9.rs:55:38\n   |\n\
    55 |     let mut vowels_set = HashSet::new\n   |                             \
    \         ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:55:26\n\
    \   |\n55 |     let mut vowels_set = HashSet::new\n   |                      \
    \    ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:13:26\n   |\n13\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:17:26\n   |\n17\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:18:26\n   |\n18\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:19:26\n   |\n19\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:20:26\n   |\n20\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmprmo2q8p9.rs:21:26\n   |\n21\
    \ |     let mut vowe"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min = vec![0];\n    let mut vowels_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index = vec![0];\n    let mut\
    \ vowels_index_count_max_index_count = vec![0];\n    let mut vowels_index_count_min_index_count\
    \ = vec![0];\n    let mut vowels_index_count_max_index_count_min = vec![0];\n\
    \    let mut vowels_index_count_min_index_count_max = vec![0];\n    let mut vowels_index_count_min_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count =\
    \ vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_max_index_count\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_index_count_\n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5hf_i08x.rs:39:48\n   |\n\
    39 |     let mut vowels_index_count_min_index_count_\n   |                   \
    \                             ^ help: add `;` here\n40 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hf_i08x.rs:11:39\n \
    \  |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_count_index = vec![0];\n\
    \    let mut vowels_count_index_end = vec![0];\n    let mut vowels_count_index_start\
    \ = vec![0];\n    let mut vowels_count_index_start_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end = vec![0];\n    let mut vowels_count_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end = vec![0];\n    let\
    \ mut vowels_count_index_start_end_end_end_end_end_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end_end_end_end_end_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end_end_end_end_end_end_end = vec![0];\n    let\
    \ mut vowels_count_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpngx_a1yx.rs:39:1\n\
    \   |\n39 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_count_index = 0;\n\
    \    let mut vowels_count_max = 0;\n    let mut vowels_count_min = 0;\n    let\
    \ mut vowels_count_max2 = 0;\n    let mut vowels_count_min2 = 0;\n    let mut\
    \ vowels_count_max3 = 0;\n    let mut vowels_count_min3 = 0;\n    let mut vowels_count_max4\
    \ = 0;\n    let mut vowels_count_min4 = 0;\n    let mut vowels_count_max5 = 0;\n\
    \    let mut vowels_count_min5 = 0;\n    let mut vowels_count_max6 = 0;\n    let\
    \ mut vowels_count_min6 = 0;\n    let mut vowels_count_max7 = 0;\n    let mut\
    \ vowels_count_min7 = 0;\n    let mut vowels_count_max8 = 0;\n    let mut vowels_count_min8\
    \ = 0;\n    let mut vowels_count_max9 = 0;\n    let mut vowels_count_min9 = 0;\n\
    \    let mut vowels_count_max10 = 0;\n    let mut vowels_count_min10 = 0;\n  \
    \  let mut vowels_count_max11 = 0;\n    let mut vowels_count_min11 = 0;\n    let\
    \ mut vowels_count_max12 = 0;\n    let mut vowels_count_min12 = 0;\n    let mut\
    \ vowels_count_max13 = 0;\n    let mut vowels_count_min13 = 0;\n    let mut vowels_count_max14\
    \ = 0;\n    let mut vowels_count_min14 = 0;\n    let mut vowels_count_max15 =\
    \ 0;\n    let mut vowels_count_min15 = 0;\n    let mut vowels_count_max16 = 0;\n\
    \    let mut vowels_count_min16 = 0;\n    let mut vowels_count_max17 = 0;\n  \
    \  let mut vowels_count_min17 = 0;\n    let mut vowels_count_max18 = 0;\n    let\
    \ mut vowels_count_min18 = 0;\n    let mut vowels_count_max19 = 0;\n    let mut\
    \ vowels_count_min19 = 0;\n    let mut vowels_count_max20 = 0;\n    let mut vowels_count_min20\
    \ = 0;\n    let mut vowels_count_max21 = 0;\n    let mut vowels_count_min21 =\
    \ 0;\n    let mut vowels_count_max22 = 0;\n    let mut vowels_count_min22 = 0;\n\
    \    let mut vowels_count_max23 = 0;\n    let mut vowels_count_min23 = 0;\n  \
    \  let mut vowels_count_max24 = 0;\n    let mut vowels_count_min24 = 0;\n    let\
    \ mut vowels_\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpehefiyzk.rs:63:20\n   |\n\
    63 |     let mut vowels_\n   |                    ^ help: add `;` here\n64 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpehefiyzk.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_middle = vowels_iter.next();\n\
    \    let mut vowels_first_half = vowels_iter.next();\n    let mut vowels_second_half\
    \ = vowels_iter.next();\n    let mut vowels_first_half_iter = vowels_first_half.iter();\n\
    \    let mut vowels_second_half_iter = vowels_second_half.iter();\n    let mut\
    \ vowels_first_half_end = vowels_first_half_iter.next();\n    let mut vowels_second_half_end\
    \ = vowels_second_half_iter.next();\n    let mut vowels_first_half_start = vowels_first_half_iter.next();\n\
    \    let mut vowels_second_half_start = vowels_second_half_iter.next();\n    let\
    \ mut vowels_first_half_middle = vowels_first_half_iter.next();\n    let mut vowels_second_half_middle\
    \ = vowels_second_half_iter.next();\n    let mut vowels_first_half_middle_iter\
    \ = vowels_first_half_middle.iter();\n    let mut vowels_second_half_middle_iter\
    \ = vowels_second_half_middle.iter();\n    let mut vowels_first_half_middle_end\
    \ = vowels_first_half_middle_iter.next();\n    let mut vowels_second_half_middle_end\
    \ = vowels_second_half_middle_iter.next();\n    let mut vowels_first_half_middle_start\
    \ = vowels_first_half_middle_iter.next();\n    let mut vowels_second_half_middle_start\
    \ = vowels_second_half_middle_iter.next();\n    let mut vowels_first_half_middle_middle\
    \ = vowels_first_half_middle_iter.next();\n    let mut vowels_second_half_middle_middle\
    \ = vowels_second_half_middle_iter.next();\n    let mut vowels_first_half_middle_middle_iter\
    \ = vowels_first_half_middle_middle.iter();\n    let mut vowels_second_half_middle_middle_iter\
    \ = vowels_second_half_middle_middle.iter();\n    let mut vowels_first_half_middle_middle_end\
    \ = vowels_first_half_middle_middle_iter.next();\n    let mut vowels_second_half_middle_middle_end\
    \ = vowels_second_half_middle_middle_iter.next();\n    let mut vowels_first_half_middle_middle_start\
    \ = vowels_first_half_middle_middle_iter.next();\n    let mut vowels_second_half_middle_middle_start\
    \ = vowels_second_half_middle_middle_iter.next();\n    let mut vowels_first_half_middle_middle_middle\
    \ = vowels_first_half_middle_middle_iter.next();\n    let mut vowels_second_half_middle_middle_middle\
    \ = vowels_second_half_middle_middle_iter.next();\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpxsu9t2sb.rs:44:1\n\
    \   |\n44 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).count();\n    let mut vowels_idx_end = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n    vowels_idx_end += 1;\n\
    \    vowels_idx -= 1;\n    if vowels_idx < 0 {\n        vowels_idx = 0;\n    }\n\
    \    if vowels_idx_end < 0 {\n        vowels_idx_end = 0;\n    }\n    let mut\
    \ vowels_idx_start = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).count();\n    vowels_idx_start -= 1;\n    if vowels_idx_start < 0 {\n\
    \        vowels_idx_start = 0;\n    }\n    let mut vowels_idx_mid = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n    vowels_idx_mid -= 1;\n\
    \    if vowels_idx_mid < 0 {\n        vowels_idx_mid = 0;\n    }\n    let mut\
    \ vowels_idx_start = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).count();\n    vowels_idx_start -= 1;\n    if vowels_idx_start < 0 {\n\
    \        vowels_idx_start = 0;\n    }\n    let mut vowels_idx_mid = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n    vowels_idx_mid -= 1;\n\
    \    if vowels_idx_mid < 0 {\n        vowels_idx_mid = 0;\n    }\n    let mut\
    \ vowels_idx_end = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).count();\n    vowels_idx_end -= 1;\n    if vowels_idx_end < 0 {\n   \
    \     vowels_idx_end = 0;\n    }\n    let mut vowels_idx_start = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n    vowels_idx_start -= 1;\n\
    \    if vowels_idx_start < 0 {\n        vowels_idx_start = 0;\n    }\n    let\
    \ mut vowels_idx_mid = word.chars().enumerate\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvwx1es0q.rs:53:52\n   |\n\
    53 |     let mut vowels_idx_mid = word.chars().enumerate\n   |               \
    \                                     ^ help: add `;` here\n54 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwx1es0q.rs:13:84\n \
    \  |\n13 |     let mut vowels_idx = word.chars().enumerate().filter(|&(_, c)|\
    \ vowels.contains(c)).map(|(_, c)| c).count();\n   |                         \
    \                                                           ^ expected `&&str`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwx1es0q.rs:14:88\n\
    \   |\n14 |     let mut vowels_idx_end = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n   |                     \
    \                                                                   ^ expected\
    \ `&&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwx1es0q.rs:23:90\n\
    \   |\n23 |     let mut vowels_idx_start = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n   |                     \
    \                                                                     ^ expected\
    \ `&&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwx1es0q.rs:28:88\n\
    \   |\n28 |     let mut vowels_idx_mid = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n   |                     \
    \                                                                   ^ expected\
    \ `&&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwx1es0q.rs:33:90\n\
    \   |\n33 |     let mut vowels_idx_start = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n   |                     \
    \                                                                     ^ expected\
    \ `&&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvwx1es0q.rs:38:88\n\
    \   |\n38 |     let mut vowels_idx_mid = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels.contains(c)).map(|(_, c)| c).count();\n   |                     \
    \                         "
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).count();\n    if vowels_idx < word.len() {\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let\
    \ mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx = vowels_idx -\
    \ 1;\n        let mut vowels_idx = vowels_idx - 1;\n        let mut vowels_idx\
    \ = vowels_idx - 1;\n        let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpize_p4e3.rs:74:3\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n14 |     if vowels_idx\
    \ < word.len() {\n   |                                - this delimiter might not\
    \ be properly closed...\n...\n57 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n74 | }\n   |   ^\n\nerror: expected pattern, found\
    \ `}`\n  --> /tmp/tmpize_p4e3.rs:57:1\n   |\n57 | }\n   | ^ expected pattern\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpize_p4e3.rs:13:84\n   |\n13 |\
    \     let mut vowels_idx = word.chars().enumerate().filter(|&(_, c)| vowels.contains(c)).map(|(_,\
    \ c)| c).count();\n   |                                                      \
    \                              ^ expected `&&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpize_p4e3.rs:11:39\n   |\n11 | fn get_closest_vowel(word:\
    \ String) -> String {\n   |    -----------------                  ^^^^^^ expected\
    \ struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len =\
    \ vowels.len();\n    let mut vowels_idx2 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len2\
    \ = vowels.len();\n    let mut vowels_idx3 = vec![0, 1, 2, 3, 4];\n    let mut\
    \ vowels_len3 = vowels.len();\n    let mut vowels_idx4 = vec![0, 1, 2, 3, 4];\n\
    \    let mut vowels_len4 = vowels.len();\n    let mut vowels_idx5 = vec![0, 1,\
    \ 2, 3, 4];\n    let mut vowels_len5 = vowels.len();\n    let mut vowels_idx6\
    \ = vec![0, 1, 2, 3, 4];\n    let mut vowels_len6 = vowels.len();\n    let mut\
    \ vowels_idx7 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len7 = vowels.len();\n\
    \    let mut vowels_idx8 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len8 = vowels.len();\n\
    \    let mut vowels_idx9 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len9 = vowels.len();\n\
    \    let mut vowels_idx10 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len10 = vowels.len();\n\
    \    let mut vowels_idx11 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len11 = vowels.len();\n\
    \    let mut vowels_idx12 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len12 = vowels.len();\n\
    \    let mut vowels_idx13 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len13 = vowels.len();\n\
    \    let mut vowels_idx14 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len14 = vowels.len();\n\
    \    let mut vowels_idx15 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len15 = vowels.len();\n\
    \    let mut vowels_idx16 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len16 = vowels.len();\n\
    \    let mut vowels_idx17 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len17 = vowels.len();\n\
    \    let mut vowels_idx18 = vec![0, 1, 2, 3, 4];\n    let mut vowels_len18 = vowels.len();\n\
    \    let mut vowels_idx19 = vec![0, 1, 2, 3, 4];\n    let \n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp29of06mh.rs:51:1\n  \
    \ |\n51 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmply5bfin3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_count_index = vec![0];\n\
    \    let mut vowels_count_index_end = vec![0];\n    let mut vowels_count_index_start\
    \ = vec![0];\n    let mut vowels_count_index_start_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end = vec![0];\n    let mut vowels_count_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end = vec![0];\n    let\
    \ mut vowels_count_index_start_end_end_end_end_end_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end_end_end_end_end_end = vec![0];\n    let mut\
    \ vowels_count_index_start_end_end_end_end_end_end_end_end = vec![0];\n    let\
    \ mut vowels_count_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_count_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpngx_a1yx.rs:39:1\n\
    \   |\n39 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_count_index = 0;\n\
    \    let mut vowels_count_max = 0;\n    let mut vowels_count_min = 0;\n    let\
    \ mut vowels_count_index2 = 0;\n    let mut vowels_count_max2 = 0;\n    let mut\
    \ vowels_count_min2 = 0;\n    let mut vowels_count_index3 = 0;\n    let mut vowels_count_max3\
    \ = 0;\n    let mut vowels_count_min3 = 0;\n    let mut vowels_count_index4 =\
    \ 0;\n    let mut vowels_count_max4 = 0;\n    let mut vowels_count_min4 = 0;\n\
    \    let mut vowels_count_index5 = 0;\n    let mut vowels_count_max5 = 0;\n  \
    \  let mut vowels_count_min5 = 0;\n    let mut vowels_count_index6 = 0;\n    let\
    \ mut vowels_count_max6 = 0;\n    let mut vowels_count_min6 = 0;\n    let mut\
    \ vowels_count_index7 = 0;\n    let mut vowels_count_max7 = 0;\n    let mut vowels_count_min7\
    \ = 0;\n    let mut vowels_count_index8 = 0;\n    let mut vowels_count_max8 =\
    \ 0;\n    let mut vowels_count_min8 = 0;\n    let mut vowels_count_index9 = 0;\n\
    \    let mut vowels_count_max9 = 0;\n    let mut vowels_count_min9 = 0;\n    let\
    \ mut vowels_count_index10 = 0;\n    let mut vowels_count_max10 = 0;\n    let\
    \ mut vowels_count_min10 = 0;\n    let mut vowels_count_index11 = 0;\n    let\
    \ mut vowels_count_max11 = 0;\n    let mut vowels_count_min11 = 0;\n    let mut\
    \ vowels_count_index12 = 0;\n    let mut vowels_count_max12 = 0;\n    let mut\
    \ vowels_count_min12 = 0;\n    let mut vowels_count_index13 = 0;\n    let mut\
    \ vowels_count_max13 = 0;\n    let mut vowels_count_min13 = 0;\n    let mut vowels_count_index14\
    \ = 0;\n    let mut vowels_count_max14 = 0;\n    let mut vowels_count_min14 =\
    \ 0;\n    let mut vowels_count_index15 = 0;\n    let mut vowels_count_max15 =\
    \ 0;\n    let mut vowels_count_min15 = 0;\n    let mut vowels_count_index16 =\
    \ 0;\n    let mut vowels_count_max16 = 0;\n    let mut vowels_count_min16 = 0;\n\
    \    let mut vowels_count_index17 = 0;\n    let mut vowels_count_max17 = 0;\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl162_q2s.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jnv8kxb.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_len = word.len();\n\
    \    let mut vowels_index2 = vec![0];\n    let mut vowels_len2 = word.len();\n\
    \    let mut vowels_index3 = vec![0];\n    let mut vowels_len3 = word.len();\n\
    \    let mut vowels_index4 = vec![0];\n    let mut vowels_len4 = word.len();\n\
    \    let mut vowels_index5 = vec![0];\n    let mut vowels_len5 = word.len();\n\
    \    let mut vowels_index6 = vec![0];\n    let mut vowels_len6 = word.len();\n\
    \    let mut vowels_index7 = vec![0];\n    let mut vowels_len7 = word.len();\n\
    \    let mut vowels_index8 = vec![0];\n    let mut vowels_len8 = word.len();\n\
    \    let mut vowels_index9 = vec![0];\n    let mut vowels_len9 = word.len();\n\
    \    let mut vowels_index10 = vec![0];\n    let mut vowels_len10 = word.len();\n\
    \    let mut vowels_index11 = vec![0];\n    let mut vowels_len11 = word.len();\n\
    \    let mut vowels_index12 = vec![0];\n    let mut vowels_len12 = word.len();\n\
    \    let mut vowels_index13 = vec![0];\n    let mut vowels_len13 = word.len();\n\
    \    let mut vowels_index14 = vec![0];\n    let mut vowels_len14 = word.len();\n\
    \    let mut vowels_index15 = vec![0];\n    let mut vowels_len15 = word.len();\n\
    \    let mut vowels_index16 = vec![0];\n    let mut vowels_len16 = word.len();\n\
    \    let mut vowels_index17 = vec![0];\n    let mut vowels_len17 = word.len();\n\
    \    let mut vowels_index18 = vec![0];\n    let mut vowels_len18 = word.len();\n\
    \    let mut vowels_index19 = vec![0];\n    let mut vowels_len19 = word.len();\n\
    \    let mut vowels_index20 = vec![0];\n    let mut vowels_len20 = word.len();\n\
    \    let mut vowels_index21 = vec![0];\n    let mut vowels_len21 = word.len();\n\
    \    let mut vowels_index22 = vec![0];\n    let mut vowel\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsk43wpcu.rs:56:18\n   |\n\
    56 |     let mut vowel\n   |                  ^ help: add `;` here\n57 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk43wpcu.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2tsisry.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmply5bfin3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_count_index = vec![0];\n    let mut vowels_count_max = vec![0];\n\
    \    let mut vowels_count_min = vec![0];\n    let mut vowels_count_max_index =\
    \ vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec![0];\n    let mut vowels_count_min_index = vec![0];\n    let mut vowels_count_max_index\
    \ = vec\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsd1ndhf4.rs:54:41\n   |\n\
    54 |     let mut vowels_count_max_index = vec\n   |                          \
    \               ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0423]:\
    \ expected value, found macro `vec`\n  --> /tmp/tmpsd1ndhf4.rs:54:38\n   |\n54\
    \ |     let mut vowels_count_max_index = vec\n   |                           \
    \           ^^^ not a value\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsd1ndhf4.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_end = vec![0];\n\
    \    let mut vowels_index_start = vec![0];\n    let mut vowels_index_start_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end = vec![0];\n    let mut vowels_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end = vec![0];\n    let\
    \ mut vowels_index_start_end_end_end_end_end = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end = vec![0];\n \
    \   let mut vowels_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end =\
    \ vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps6s9irtt.rs:38:18\n   |\n\
    38 |     let mut vowel\n   |                  ^ help: add `;` here\n39 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6s9irtt.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq3rs8r3.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3rs8r3.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_set.insert(vowel);\n    }\n    let mut vowels_count = HashMap::new();\n\
    \    let mut vowels_count_set = HashSet::new();\n    for vowel in vowels.iter()\
    \ {\n        vowels_count.insert(vowel, 0);\n        vowels_count_set.insert(vowel);\n\
    \    }\n    let mut vowels_count_copy = vowels_count.clone();\n    let mut vowels_count_copy_set\
    \ = vowels_count_set.clone();\n    let mut vowels_count_copy_copy = vowels_count_copy.clone();\n\
    \    let mut vowels_count_copy_copy_set = vowels_count_copy_set.clone();\n   \
    \ let mut vowels_count_copy_copy_copy_set = vowels_count_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_set = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set\
    \ = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set\
    \ = vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set.clone();\n\
    \    let mut vowels_count_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_set\
    \ = \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp5fmhzdfk.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected expression\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp5fmhzdfk.rs:13:26\n   |\n13\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashMap`\n  --> /tmp/tmp5fmhzdfk.rs:17:28\n   |\n17\
    \ |     let mut vowels_count = HashMap::new();\n   |                         \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp5fmhzdfk.rs:18:32\n   |\n18\
    \ |     let mut vowels_count_set = HashSet::new();\n   |                     \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot\
    \ find value `vowels_count_copy_copy_copy_copy_copy_set` in this scope\n  -->\
    \ /tmp/tmp5fmhzdfk.rs:29:57\n   |\n29 |     let mut vowels_count_copy_copy_copy_copy_copy_set\
    \ = vowels_count_copy_copy_copy_copy_copy_set.clone();\n   |                 \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_count_copy_copy_copy_copy_set`\n\
    \nerror[E0425]: cannot find value `vowels_count_copy_copy_copy_copy_copy_copy_set`\
    \ in this scope\n  --> /tmp/tmp5fmhzdfk.rs:30:62\n   |\n30 |     let mut vowels_count_copy_copy_copy_copy_copy_copy_set\
    \ = vowels_count_copy_copy_copy_copy_copy_copy_set.clone();\n   |            \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `vowels_count_copy_copy_copy_copy_copy_set`\n\
    \nerror[E0425]: cannot find value `vowels_count_copy_copy_copy_copy_copy_copy_copy_set`\
    \ in this scope\n  --> /tmp/tmp5fmhzdfk.rs:3"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut vowels_index = vowels_index.iter().cloned().collect::<Vec<_>>();\n\
    \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jnv8kxb.rs:11:39\n   |\n\
    11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_count_index = vec![0];\n\
    \    let mut vowels_count_index2 = vec![0];\n    let mut vowels_count_index3 =\
    \ vec![0];\n    let mut vowels_count_index4 = vec![0];\n    let mut vowels_count_index5\
    \ = vec![0];\n    let mut vowels_count_index6 = vec![0];\n    let mut vowels_count_index7\
    \ = vec![0];\n    let mut vowels_count_index8 = vec![0];\n    let mut vowels_count_index9\
    \ = vec![0];\n    let mut vowels_count_index10 = vec![0];\n    let mut vowels_count_index11\
    \ = vec![0];\n    let mut vowels_count_index12 = vec![0];\n    let mut vowels_count_index13\
    \ = vec![0];\n    let mut vowels_count_index14 = vec![0];\n    let mut vowels_count_index15\
    \ = vec![0];\n    let mut vowels_count_index16 = vec![0];\n    let mut vowels_count_index17\
    \ = vec![0];\n    let mut vowels_count_index18 = vec![0];\n    let mut vowels_count_index19\
    \ = vec![0];\n    let mut vowels_count_index20 = vec![0];\n    let mut vowels_count_index21\
    \ = vec![0];\n    let mut vowels_count_index22 = vec![0];\n    let mut vowels_count_index23\
    \ = vec![0];\n    let mut vowels_count_index24 = vec![0];\n    let mut vowels_count_index25\
    \ = vec![0];\n    let mut vowels_count_index26 = vec![0];\n    let mut vowels_count_index27\
    \ = vec![0];\n    let mut vowels_count_index28 = vec![0];\n    let mut vowels_count_index29\
    \ = vec![0];\n    let mut vowels_count_index30 = vec![0];\n    let mut vowels_count_index31\
    \ = vec![0];\n    let mut vowels_count_index32 = vec![0];\n    let mut vowels_count_index33\
    \ = vec![0];\n    let mut vowels_count_index34 = vec![0];\n    let mut vowels_count_index35\
    \ = vec![0];\n    let mut vowels_count_index36 = vec![0];\n    let mut vowels_count_index37\
    \ = vec![0];\n    let mut vowels_count_index38 = vec![0];\n    let mut \n}\n\n\
    fn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpiymlfn0x.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mut vowels_set = HashSet::new();\n\
    \    let mut vowels_set = HashSet::new();\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppleg7w_5.rs:54:11\n   |\n\
    54 |     let mu\n   |           ^ help: add `;` here\n55 | }\n   | - unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmppleg7w_5.rs:13:26\n   |\n13 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppleg7w_5.rs:14:26\n\
    \   |\n14 |     let mut vowels_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmppleg7w_5.rs:15:26\n   |\n15\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmppleg7w_5.rs:16:26\n   |\n16\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmppleg7w_5.rs:17:26\n   |\n17\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmppleg7w_5.rs:18:26\n   |\n18\
    \ |     let mut vowels_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmppleg7w_5.rs:19:2"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_iter = vowels.iter();\n    let mut vowels_end = vowels_iter.next();\n\
    \    let mut vowels_start = vowels_iter.next();\n    let mut vowels_mid = vowels_iter.next();\n\
    \    let mut vowels_mid2 = vowels_iter.next();\n    let mut vowels_mid3 = vowels_iter.next();\n\
    \    let mut vowels_mid4 = vowels_iter.next();\n    let mut vowels_mid5 = vowels_iter.next();\n\
    \    let mut vowels_mid6 = vowels_iter.next();\n    let mut vowels_mid7 = vowels_iter.next();\n\
    \    let mut vowels_mid8 = vowels_iter.next();\n    let mut vowels_mid9 = vowels_iter.next();\n\
    \    let mut vowels_mid10 = vowels_iter.next();\n    let mut vowels_mid11 = vowels_iter.next();\n\
    \    let mut vowels_mid12 = vowels_iter.next();\n    let mut vowels_mid13 = vowels_iter.next();\n\
    \    let mut vowels_mid14 = vowels_iter.next();\n    let mut vowels_mid15 = vowels_iter.next();\n\
    \    let mut vowels_mid16 = vowels_iter.next();\n    let mut vowels_mid17 = vowels_iter.next();\n\
    \    let mut vowels_mid18 = vowels_iter.next();\n    let mut vowels_mid19 = vowels_iter.next();\n\
    \    let mut vowels_mid20 = vowels_iter.next();\n    let mut vowels_mid21 = vowels_iter.next();\n\
    \    let mut vowels_mid22 = vowels_iter.next();\n    let mut vowels_mid23 = vowels_iter.next();\n\
    \    let mut vowels_mid24 = vowels_iter.next();\n    let mut vowels_mid25 = vowels_iter.next();\n\
    \    let mut vowels_mid26 = vowels_iter.next();\n    let mut vowels_mid27 = vowels_iter.next();\n\
    \    let mut vowels_mid28 = vowels_iter.next();\n    let mut vowels_mid29 = vowels_iter.next();\n\
    \    let mut vowels_mid30 = vowels_iter.next();\n    let mut vowels_mid31 = vowels_iter.next();\n\
    \    let mut vowels_mid32 = vowels_iter.next();\n    let mut vowels_mid33 = vowels_iter.next();\n\
    \    let mut vowels_mid34 = vowels_iter.next();\n    let mut vowels_mid35 = vowels_iter.next();\n\
    \    let mut vowels_mid36 = vowels_iter.next();\n    let mut vowels_\n}\n\nfn\
    \ main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzodbwm84.rs:52:20\n   |\n\
    52 |     let mut vowels_\n   |                    ^ help: add `;` here\n53 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzodbwm84.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n\
    \    let mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n    let\
    \ mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len\
    \ = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n\
    \    let mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n    let\
    \ mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len\
    \ = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n\
    \    let mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n    let\
    \ mut vowels_len = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len\
    \ = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n\
    \    let mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_len = vec![0];\n    let mut vowels_idx\
    \ = vec![0];\n    let mut vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsekv7jqv.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsekv7jqv.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_middle = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_middle\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_middle = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_middle = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let mut vowels_middle = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let mut vowels_end = vec![\"a\", \"e\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpr2xvzx64.rs:55:65\n\
    \   |\n55 |       assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
    o\"));\n   |  _________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660052975
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_end = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let mut vowels_start = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut\
    \ vowels_mid = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_end = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_start = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid = vec![\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_end = vec![\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_start = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_end = vec![\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_start = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_end = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_start =\
    \ vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_start\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_end\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_mid_mid_mid_mid_start\
    \ = vec![\"a\", \"\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpl8dc4nr9.rs:52:65\n\
    \   |\n52 |       assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
    o\"));\n   |  _________________________________________________________________^\n\
    53 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_index_end = vec![0];\n\
    \    let mut vowels_index_start = vec![0];\n    let mut vowels_index_start_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end = vec![0];\n    let mut vowels_index_start_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end = vec![0];\n    let\
    \ mut vowels_index_start_end_end_end_end_end = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end = vec![0];\n \
    \   let mut vowels_index_start_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end = vec![0];\n\
    \    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end =\
    \ vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = vec![0];\n    let mut vowels_index_\n}\n\nfn main() {\n    let candidate =\
    \ get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_a891zz9.rs:38:26\n   |\n\
    38 |     let mut vowels_index_\n   |                          ^ help: add `;`\
    \ here\n39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_a891zz9.rs:11:39\n   |\n11 | fn get_closest_vowel(word: String) ->\
    \ String {\n   |    -----------------                  ^^^^^^ expected struct\
    \ `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    vowels.iter().for_each(|v|\
    \ vowels_set.insert(v));\n    let mut vowels_found = HashSet::new();\n    word.chars().for_each(|c|\
    \ {\n        if vowels_set.contains(&c) {\n            vowels_found.insert(c);\n\
    \        }\n    });\n    vowels_found.iter().next().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp2y2_284_.rs:13:26\n   |\n13 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp2y2_284_.rs:15:28\n\
    \   |\n15 |     let mut vowels_found = HashSet::new();\n   |                 \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count = vec![0];\n    let mut\
    \ vowels_index_count_index_count_index = vec![0];\n    let mut vowels_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index = vec![0];\n\
    \    let mut vowels_index_count_index_count_index_count_index_count = vec![0];\n\
    \    let mut vowels_index_count_index_count_index_count_index_count_index = vec![0];\n\
    \    let mut vowels_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![0];\n    let mut vowels_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![0];\n    let \n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp7tsxx86o.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    vowels.iter().for_each(|v|\
    \ vowels_set.insert(v));\n    let mut vowels_count = HashMap::new();\n    vowels.iter().for_each(|v|\
    \ vowels_count.insert(v, 0));\n    word.chars().for_each(|c| {\n        if vowels_set.contains(&c.to_lowercase())\
    \ {\n            vowels_count.entry(c.to_lowercase()).or_insert(0)\n         \
    \       .and_modify(|x| x += 1).or_insert(0);\n        }\n    });\n    let mut\
    \ min_count = std::i32::MAX;\n    let mut min_vowel = String::new();\n    vowels.iter().for_each(|v|\
    \ {\n        if vowels_count.get(&v).unwrap() < min_count {\n            min_count\
    \ = vowels_count.get(&v).unwrap();\n            min_vowel = v;\n        }\n  \
    \  });\n    min_vowel\n}\n\nfn main() {\n    let candidate = get_closest_vowel;\n\
    \    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n \
    \   assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"\
    easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n\
    \    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n   \
    \ assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpaphmlog8.rs:13:26\n   |\n13 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpaphmlog8.rs:15:28\n\
    \   |\n15 |     let mut vowels_count = HashMap::new();\n   |                 \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaphmlog8.rs:28:25\n   |\n24 |     let mut min_vowel = String::new();\n\
    \   |                         ------------- expected due to this value\n...\n\
    28 |             min_vowel = v;\n   |                         ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                         |\n   |  \
    \                       expected struct `String`, found `&&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len =\
    \ word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4];\n    let mut vowels_len\
    \ = word.len();\n    let mut vowels_idx = vec![0, 1, 2, 3, 4\n}\n\nfn main() {\n\
    \    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpuu0dq4jw.rs:56:1\n   |\n56 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpuu0dq4jw.rs:55:30\n   |\n11 | fn get_closest_vowel(word: String) ->\
    \ String {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n55 |     let mut vowels_idx = vec![0, 1, 2, 3,\
    \ 4\n   |                              ^ unclosed delimiter\n56 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_idx = word.len();\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowels_idx = vowels_idx\
    \ - 1;\n    let mut vowels_idx = vowels_idx - 1;\n    let mut vowel\n}\n\nfn main()\
    \ {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp14qi5mc4.rs:54:18\n   |\n\
    54 |     let mut vowel\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp14qi5mc4.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let \n}\n\nfn main() {\n    let\
    \ candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")),\
    \ String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"\
    o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\"\
    )), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmjho3nl0.rs:61:1\n  \
    \ |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index_count = vec![0];\n    let mut vowels_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_max = vec![0];\n    let mut vowels_index_count_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index = vec![0];\n    let\
    \ mut vowels_index_count_min_max_index_count = vec![0];\n    let mut vowels_index_count_min_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_max = vec![0];\n\
    \    let mut vowels_index_count_min_max_index_count_min_max = vec![0];\n    let\
    \ mut vowels_index_count_min_max_index_count_min_max_index = vec![0];\n    let\
    \ mut vowels_index_count_min_max_index_count_min_max_index_count = vec![0];\n\
    \    let mut vowels_index_count_min_max_index_count_min_max_index_count_min =\
    \ vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max_index\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max_index_count\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max_index_count_max\
    \ = vec![0];\n    let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max_index_count_\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdw38xu6d.rs:38:112\n   |\n\
    38 |     let mut vowels_index_count_min_max_index_count_min_max_index_count_min_max_index_count_min_max_index_count_\n\
    \   |                                                                        \
    \                                        ^ help: add `;` here\n39 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdw38xu6d.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_set = HashSet::new();\n    for vowel in vowels {\n \
    \       vowels_set.insert(vowel);\n    }\n    let mut vowels_index = word.chars().enumerate().filter(|&(_,\
    \ c)| vowels_set.contains(c)).collect::<Vec<_>>();\n    let mut vowels_index =\
    \ vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::<Vec<_>>();\n    let mut vowels_index\
    \ = vowels_index.iter().cloned().collect::\n}\n\nfn main() {\n    let candidate\
    \ = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"\
    u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n\
    \    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"\
    a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"\
    i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `.`, `;`, `?`, `else`, or an operator, found\
    \ `::`\n  --> /tmp/tmpo7v1ep26.rs:37:64\n   |\n37 |     let mut vowels_index =\
    \ vowels_index.iter().cloned().collect::\n   |                               \
    \                                 ^^ expected one of `(`, `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmpo7v1ep26.rs:13:26\n   |\n13 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghoqbogc.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghoqbogc.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748751
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
- exit_code: 1
  program: "/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
    \ String) -> String {\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut vowels_count = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index\
    \ = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index =\
    \ vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n\
    \    let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n  \
    \  let mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let\
    \ mut vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut\
    \ vowels_index = vec![0];\n    let mut vowels_index = vec![0];\n    let mut vowel\n\
    }\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
    yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
    )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\"\
    )), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n\
    \    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n   \
    \ assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"\
    Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\"\
    )), String::from(\"o\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1a7vxavm.rs:62:18\n   |\n\
    62 |     let mut vowel\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1a7vxavm.rs:11:39\n\
    \   |\n11 | fn get_closest_vowel(word: String) -> String {\n   |    -----------------\
    \                  ^^^^^^ expected struct `String`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660052976
