name: HumanEval_140_fix_spaces
language: rust
results:
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\
    \").replace(\" \", \"_\").to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpz2kv9250.rs:9:68\n  |\n9 |   \
    \  text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\").replace(\"\
    \ \", \"_\").to_string()\n  |                                                \
    \                    ^^^^ method cannot be called on `Vec<char>` due to unsatisfied\
    \ trait bounds\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `[char]: Join<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(\"  \", \" \");\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpzc8jdxop.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpzc8jdxop.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").trim().replace(\"\
    \  \", \"_\");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz1q9640q.rs:8:32\n   |\n\
    8  | fn fix_spaces(text: String) -> String {\n   |    ----------             \
    \     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n9  |     let mut\
    \ s = text;\n10 |     s.replace(\"  \", \" \").trim().replace(\"  \", \"_\");\n\
    \   |                                                   - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            spaces = 0;\n        }\n        if spaces == 2\
    \ {\n            result.push_str(\"_\");\n            spaces = 0;\n        } else\
    \ {\n            result.push_str(&format!(\"{}\", ch));\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `text`\n  --> /tmp/tmp34jq7j41.rs:11:15\n\
    \   |\n8  | fn fix_spaces(text: String) -> String {\n   |               ---- move\
    \ occurs because `text` has type `String`, which does not implement the `Copy`\
    \ trait\n9  |     let mut result = text;\n   |                      ---- value\
    \ moved here\n10 |     let mut spaces = 0;\n11 |     for ch in text.chars() {\n\
    \   |               ^^^^^^^^^^^^ value borrowed here after move\n   |\n   = note:\
    \ borrow occurs due to deref coercion to `str`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(' ', ' - ');\n            i += 2;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpyo2jkvem.rs:14:28\n\
    \   |\n14 |             s.replace(' ', ' - ');\n   |                         \
    \   ^--^^\n   |                             |\n   |                          \
    \   help: consider removing the non-printing characters: `-`\n   |\nnote: there\
    \ are non-printing characters, the full sequence is ` - `\n  --> /tmp/tmpyo2jkvem.rs:14:29\n\
    \   |\n14 |             s.replace(' ', ' - ');\n   |                         \
    \    ^^\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  -->\
    \ /tmp/tmpyo2jkvem.rs:13:12\n   |\n13 |         if s[i] == ' ' && s[i + 1] ==\
    \ ' ' {\n   |            ^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpyo2jkvem.rs:13:27\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |                \
    \           ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            if spaces > 2 {\n                result = result.replace(\n\
    \                    &mut result.chars().skip(spaces),\n                    &mut\
    \ \"_\",\n                );\n            }\n            result = result.replace(&mut\
    \ ch, &mut \"_\");\n            spaces = 0;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `Skip<Chars<'_>>`\n\
    \   --> /tmp/tmpdklfpo5_.rs:17:21\n    |\n16  |                 result = result.replace(\n\
    \    |                                 ------- required by a bound introduced\
    \ by this call\n17  |                     &mut result.chars().skip(spaces),\n\
    \    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut<(char,)>`\
    \ closure, found `Skip<Chars<'_>>`\n    |\n    = help: the trait `FnMut<(char,)>`\
    \ is not implemented for `Skip<Chars<'_>>`\n    = help: the following other types\
    \ implement trait `Pattern<'a>`:\n              &'b String\n              &'b\
    \ [char; N]\n              &'b [char]\n              &'b str\n              &'c\
    \ &'b str\n              [char; N]\n              char\n              pattern::MultiCharEqPattern<C>\n\
    \    = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&mut Skip<Chars<'_>>`\n    = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `&mut Skip<Chars<'_>>`\nnote: required by a\
    \ bound in `str::<impl str>::replace`\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `char`\n   --> /tmp/tmpdklfpo5_.rs:21:37\n    |\n21  |      \
    \       result = result.replace(&mut ch, &mut \"_\");\n    |                 \
    \            ------- ^^^^^^^ expected an `FnMut<(char,)>` closure, found `char`\n\
    \    |                             |\n    |                             required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `FnMut<(char,)>`\
    \ is not implemented for `char`\n    = note: required because of the requirements\
    \ on the impl of `FnOnce<(char,)>` for `&mut char`\n    = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `&mut char`\nnote: required\
    \ by a bound in `str::<impl str>::replace`\nhelp: consider dereferencing here\n\
    \    |\n21  |             result = result.replace(*&mut ch, &mut \"_\");\n   \
    \ |                                     +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuqrg60me.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.chars().count(|c| c == ' ') > 2 {\n        s.replace(\"  \", \"_\");\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpnsfmnawn.rs:11:18\n    |\n11  |     if s.chars().count(|c| c ==\
    \ ' ') > 2 {\n    |                  ^^^^^ ------------ supplied 1 argument\n\
    \    |                  |\n    |                  expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(' ', '_');\n            i += 2;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpfzjjuw59.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpfzjjuw59.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfzjjuw59.rs:14:28\n\
    \   |\n14 |             s.replace(' ', '_');\n   |                           \
    \ ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n14 |             s.replace(' ', \"_\");\n\
    \   |                            ~~~\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n     \
    \       i += 1;\n        } else {\n            if i + 1 < s.len() {\n        \
    \        if s[i + 1] == ' ' {\n                    i += 1;\n                }\
    \ else {\n                    s = s.replace(\"  \", \"_\");\n                \
    \    i += 1;\n                }\n            }\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpa_t2yzh9.rs:13:12\n\
    \   |\n13 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpa_t2yzh9.rs:17:20\n   |\n17 |                 if s[i + 1] == '\
    \ ' {\n   |                    ^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(\"  \", \"_\");\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd7zj4uq2.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd7zj4uq2.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter_map(|c| match c {\n        ' '\
    \ => '_',\n        _ => c,\n    }).collect::<String>().replace(\"  \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprlk_x0xu.rs:10:16\n   |\n\
    10 |         ' ' => '_',\n   |                ^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<_>`\n              found type\
    \ `char`\nhelp: try wrapping the expression in `Some`\n   |\n10 |         ' '\
    \ => Some('_'),\n   |                +++++   +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\");\n    if s.chars().count() == 2 {\n        let mut i = 0;\n      \
    \  while i < s.len() {\n            if s[i] == ' ' && s[i + 1] == ' ' {\n    \
    \            s.insert(i + 1, \"-\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd8z6y509.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' {\n   |            \
    \    ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd8z6y509.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' {\n   |                               ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd8z6y509.rs:15:33\n\
    \   |\n15 |                 s.insert(i + 1, \"-\");\n   |                    \
    \             ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write\
    \ a `char` literal, use single quotes\n   |\n15 |                 s.insert(i +\
    \ 1, '-');\n   |                                 ~~~\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphcnc55d1.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpj18ad9oq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx2pa53gs.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpupam0i08.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy4octdeu.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp3gkwlod2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpeww_a4ij.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter(|c| c.is_whitespace()).map(|c|\
    \ '_').collect::<String>().replace(\" \", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Example\"`', /tmp/tmp03l_j0e4.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\");\n    if s.chars().count() == 2 {\n        s.replace(\"  \", \"_\"\
    );\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpz3oah9kh.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            prev_space = true;\n\
    \        } else {\n            result.push(c);\n            prev_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpb5_muij0.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(\"  \", \" \");\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpzfy5s49w.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpzfy5s49w.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpesu71k72.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n     \
    \       break;\n        }\n        i += 1;\n    }\n    if i == s.len() {\n   \
    \     return text;\n    }\n    let mut j = i;\n    while j < s.len() {\n     \
    \   if s[j] == ' ' {\n            s[j] = '_';\n        }\n        j += 1;\n  \
    \  }\n    s[0..i].to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqx_80e26.rs:13:12\n\
    \   |\n13 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpqx_80e26.rs:23:12\n   |\n23 |         if s[j] == ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpqx_80e26.rs:24:13\n   |\n24 |             s[j] = '_';\n   |   \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nFor more information"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1543p4zi.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkfw_q4yf.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8ngcs4e_.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8ngcs4e_.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8ngcs4e_.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmp9rktth.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp28q01r6w.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpyozf0bxi.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpyozf0bxi.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpyozf0bxi.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").trim().replace(\"\
    \  \", \"_\");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps5c599kt.rs:8:32\n   |\n\
    8  | fn fix_spaces(text: String) -> String {\n   |    ----------             \
    \     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n9  |     let mut\
    \ s = text;\n10 |     s.replace(\"  \", \" \").trim().replace(\"  \", \"_\");\n\
    \   |                                                   - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwnbezweq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            if spaces > 1 {\n                result.push_str(\"\
    _\");\n                spaces = 0;\n            }\n            result.push_str(&format!(\"\
    {}\", ch));\n        }\n    }\n    if spaces > 1 {\n        result.push_str(\"\
    _\");\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `text`\n  --> /tmp/tmpf3qc_ij3.rs:11:15\n\
    \   |\n8  | fn fix_spaces(text: String) -> String {\n   |               ---- move\
    \ occurs because `text` has type `String`, which does not implement the `Copy`\
    \ trait\n9  |     let mut result = text;\n   |                      ---- value\
    \ moved here\n10 |     let mut spaces = 0;\n11 |     for ch in text.chars() {\n\
    \   |               ^^^^^^^^^^^^ value borrowed here after move\n   |\n   = note:\
    \ borrow occurs due to deref coercion to `str`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkj87pjjg.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe9q275b3.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpe9q275b3.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpe9q275b3.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpghhx6bli.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count(|c| c == ' ') > 2 {\n        s.replace(\"  \", \"_\");\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp5l2z87pn.rs:11:18\n    |\n11  |     if s.chars().count(|c| c ==\
    \ ' ') > 2 {\n    |                  ^^^^^ ------------ supplied 1 argument\n\
    \    |                  |\n    |                  expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpootcxve2.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter_map(|c| match c {\n        ' '\
    \ => '_',\n        _ => c,\n    }).collect::<String>().replace(\"  \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprfntv6mr.rs:10:16\n   |\n\
    10 |         ' ' => '_',\n   |                ^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<_>`\n              found type\
    \ `char`\nhelp: try wrapping the expression in `Some`\n   |\n10 |         ' '\
    \ => Some('_'),\n   |                +++++   +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            prev_space = true;\n\
    \        } else {\n            result.push(c);\n            prev_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpr1ddqda8.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\", &s[2..]));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgktgpa_2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6slsdgre.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm8f5ai29.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n                s.replace(\"\
    \  \", &format!(\"{}{}\", &s[i..i + 3], &s[i + 3..]));\n                i += 3;\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpj73rp6a3.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpj73rp6a3.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpj73rp6a3.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2wtfelev.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2o96c7ht.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n     \
    \       break;\n        }\n        i += 1;\n    }\n    if i == s.len() {\n   \
    \     return text;\n    }\n    let mut j = i;\n    while j < s.len() {\n     \
    \   if s[j] == ' ' {\n            s[j] = '_';\n            i += 1;\n        }\n\
    \        j += 1;\n    }\n    s[i..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp16pdzstn.rs:13:12\n\
    \   |\n13 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp16pdzstn.rs:23:12\n   |\n23 |         if s[j] == ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp16pdzstn.rs:24:13\n   |\n24 |             s[j] = '_';\n   |   \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nFor more information"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzbph9mrm.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp_13kis4u.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyuwqwhxc.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpbng03m5p.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9xi8r26m.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6os5pqvk.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            if spaces > 1 {\n                result.push_str(\"\
    _\");\n                spaces = 0;\n            }\n            result.push_str(&ch);\n\
    \        }\n    }\n    if spaces > 1 {\n        result.push_str(\"_\");\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz1z7yrct.rs:19:29\n   |\n\
    19 |             result.push_str(&ch);\n   |                             ^^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    \  \", \"_\").trim();\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0co2b2gp.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpddj63gch.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(' ', ' - ');\n            i += 2;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpzbf9bi_w.rs:14:28\n\
    \   |\n14 |             s.replace(' ', ' - ');\n   |                         \
    \   ^--^^\n   |                             |\n   |                          \
    \   help: consider removing the non-printing characters: `-`\n   |\nnote: there\
    \ are non-printing characters, the full sequence is ` - `\n  --> /tmp/tmpzbf9bi_w.rs:14:29\n\
    \   |\n14 |             s.replace(' ', ' - ');\n   |                         \
    \    ^^\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  -->\
    \ /tmp/tmpzbf9bi_w.rs:13:12\n   |\n13 |         if s[i] == ' ' && s[i + 1] ==\
    \ ' ' {\n   |            ^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpzbf9bi_w.rs:13:27\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |                \
    \           ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            spaces = 0;\n        }\n        if spaces > 2 {\n\
    \            result = result.replace(&ch, &\"_\");\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n   --> /tmp/tmp61es9_tv.rs:18:37\n\
    \    |\n18  |             result = result.replace(&ch, &\"_\");\n    |       \
    \                      ------- ^^^ expected an `Fn<(char,)>` closure, found `char`\n\
    \    |                             |\n    |                             required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `Fn<(char,)>`\
    \ is not implemented for `char`\n    = note: required because of the requirements\
    \ on the impl of `FnOnce<(char,)>` for `&char`\n    = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `&char`\nnote: required by\
    \ a bound in `str::<impl str>::replace`\nhelp: consider dereferencing here\n \
    \   |\n18  |             result = result.replace(*&ch, &\"_\");\n    |       \
    \                              +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjo6k79r5.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplxq1mulq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(' ', '-', i);\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmps0xa05sh.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmps0xa05sh.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmps0xa05sh.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter(|c| c.is_whitespace()).collect::<String>().replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Example\"`', /tmp/tmpttu3wubw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\", &s[1..]));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppbesjqsp.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut last = 0;\n    while last < s.len() {\n        let mut last = s.rfind('\
    \ ', last);\n        if last == s.len() {\n            break;\n        }\n   \
    \     let mut next = last + 1;\n        while next < s.len() {\n            if\
    \ s[next] == ' ' {\n                s[next] = '_';\n                last = next;\n\
    \                break;\n            }\n            next += 1;\n        }\n  \
    \  }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpl6ohf441.rs:13:26\n     |\n13   |         let mut last = s.rfind('\
    \ ', last);\n     |                          ^^^^^ ---  ---- supplied 2 arguments\n\
    \     |                          |\n     |                          expected 1\
    \ argument\n     |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl6ohf441.rs:14:20\n   |\n14 |         if last == s.len()\
    \ {\n   |                    ^^^^^^^ expected enum `Option`, found `usize`\n \
    \  |\n   = note: expected enum `Option<usize>`\n              found type `usize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |         if last == Some(s.len())\
    \ {\n   |                    +++++       +\n\nerror[E0369]: cannot add `{integer}`\
    \ to `Option<usize>`\n  --> /tmp/tmpl6ohf441.rs:17:29\n   |\n17 |         let\
    \ mut next = last + 1;\n   |                        ---- ^ - {integer}\n   | \
    \                       |\n   |                        Option<usize>\n\nerror[E0277]:\
    \ can't compare `Option<usize>` with `usize`\n  --> /tmp/tmpl6ohf441.rs:18:20\n\
    \   |\n18 |         while next < s.len() {\n   |                    ^ no implementation\
    \ for `Option<usize> < usize` and `Option<usize> > usize`\n   |\n   = help: the\
    \ trait `PartialOrd<usize>` is not implemented for `Option<usize>`\n   = help:\
    \ the trait `PartialOrd` is implemented for `Option<T>`\n\nerror[E0277]: the type\
    \ `String` cannot be mutably indexed by `Option<usize>`\n  --> /tmp/tmpl6ohf441.rs:20:17\n\
    \   |\n20 |                 s[next] = '_';\n   |                 ^^^^^^^ `String`\
    \ cannot be mutably indexed by `Option<usize>`\n   |\n   = help: the trait `IndexMut<Option<usize>>`\
    \ is not implemented for `String`\n   = note: you can use `.chars().nth()` or\
    \ `.bytes().nth()`\n           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n\
    \   = help: the following other types implement trait `IndexMut<Idx>`:\n     \
    \        <String as IndexMut<RangeFrom<usize>>>\n             <String as IndexMut<RangeFull>>\n\
    \             <"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0pox14up.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpp7gm5wuk.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpugtra2n2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut last = 0;\n    while last < s.len() {\n        let mut next = s.find('\
    \ ', last);\n        if next == s.len() {\n            next = s.len();\n     \
    \   }\n        if next != last {\n            s.replace(&last, next, \" \");\n\
    \        }\n        last = next;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp6nb69sh1.rs:13:26\n     |\n13   |         let mut next = s.find('\
    \ ', last);\n     |                          ^^^^ ---  ---- supplied 2 arguments\n\
    \     |                          |\n     |                          expected 1\
    \ argument\n     |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6nb69sh1.rs:14:20\n   |\n14 |         if next == s.len()\
    \ {\n   |                    ^^^^^^^ expected enum `Option`, found `usize`\n \
    \  |\n   = note: expected enum `Option<usize>`\n              found type `usize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |         if next == Some(s.len())\
    \ {\n   |                    +++++       +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6nb69sh1.rs:15:20\n   |\n13 |         let mut next = s.find(' ',\
    \ last);\n   |                        ----------------- expected due to this value\n\
    14 |         if next == s.len() {\n15 |             next = s.len();\n   |    \
    \                ^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note:\
    \ expected enum `Option<usize>`\n              found type `usize`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n15 |             next = Some(s.len());\n   |\
    \                    +++++       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6nb69sh1.rs:17:20\n\
    \   |\n17 |         if next != last {\n   |                    ^^^^ expected enum\
    \ `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n  \
    \            found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |         if next != Some(last) {\n   |                    +++++   \
    \ +\n\nerror[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \   --> /tmp/tmp6nb69sh1.rs:18:15\n    |\n18  |             s.replace(&last, next,\
    \ \" \");\n    |               ^^^^^^^ -----  ----  --- supplied 3 arguments\n\
    \    |               |\n    |               expected 2 arguments\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6nb69sh1.rs:20:16\n\
    \   |\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").trim().replace(\"\
    \  \", \"_\");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyjgackku.rs:8:32\n   |\n\
    8  | fn fix_spaces(text: String) -> String {\n   |    ----------             \
    \     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n9  |     let mut\
    \ s = text;\n10 |     s.replace(\"  \", \" \").trim().replace(\"  \", \"_\");\n\
    \   |                                                   - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpppw8g6go.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpppw8g6go.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpppw8g6go.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \");\n \
    \   s.replace(\"  \", \"_\");\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpucdvu48d.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").trim().replace(\"\
    \  \", \"_\");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1lc_is0n.rs:8:32\n   |\n\
    8  | fn fix_spaces(text: String) -> String {\n   |    ----------             \
    \     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n9  |     let mut\
    \ s = text;\n10 |     s.replace(\"  \", \" \").trim().replace(\"  \", \"_\");\n\
    \   |                                                   - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpa2r94vom.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmfl4sfy7.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp2xzqvwww.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp2xzqvwww.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp2xzqvwww.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmps9633gdz.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpj09jj1z8.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            spaces = 0;\n        }\n        if spaces > 2 {\n\
    \            result = result.replace(&ch, &format!(\"_{}\", ch));\n        } else\
    \ {\n            result = result.replace(&ch, &format!(\"{}\", ch));\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n   --> /tmp/tmpw_2wiywj.rs:18:29\n\
    \    |\n18  |             result = result.replace(&ch, &format!(\"_{}\", ch));\n\
    \    |                             ^^^^^^^ expected an `Fn<(char,)>` closure,\
    \ found `char`\n    |\n    = help: the trait `Fn<(char,)>` is not implemented\
    \ for `char`\n    = help: the trait `Pattern<'a>` is implemented for `char`\n\
    \    = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&char`\n    = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `&char`\nnote: required by a bound in `str::<impl str>::replace`\n\
    \nerror[E0277]: expected a `Fn<(char,)>` closure, found `char`\n   --> /tmp/tmpw_2wiywj.rs:20:29\n\
    \    |\n20  |             result = result.replace(&ch, &format!(\"{}\", ch));\n\
    \    |                             ^^^^^^^ expected an `Fn<(char,)>` closure,\
    \ found `char`\n    |\n    = help: the trait `Fn<(char,)>` is not implemented\
    \ for `char`\n    = help: the trait `Pattern<'a>` is implemented for `char`\n\
    \    = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&char`\n    = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `&char`\nnote: required by a bound in `str::<impl str>::replace`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2wc0vjo0.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1mkw06pi.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count(|c| c == ' ') > 2 {\n        s.replace(\"  \", \"_\");\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpwl9yrhgr.rs:11:18\n    |\n11  |     if s.chars().count(|c| c ==\
    \ ' ') > 2 {\n    |                  ^^^^^ ------------ supplied 1 argument\n\
    \    |                  |\n    |                  expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmprwh7yzyt.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpbkr8_1hu.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjrwzb_wo.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(\"  \", \" \");\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpn7kstome.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpn7kstome.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp_o6tolb9.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars()\n        .filter(|c| c.is_whitespace())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect::<Vec<_>>()\n    \
    \    .join(\"_\")\n        .to_string()\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp1p16ahch.rs:13:10\n   |\n13 |\
    \         .join(\"_\")\n   |          ^^^^ method cannot be called on `Vec<char>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `[char]: Join<_>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpji0doe_4.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4q3o5jbm.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpaww1a4oo.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpktyf1dw0.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpehjnx4jt.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppnzjdegr.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppv8q0gfz.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\
    \").replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpjpidsp4v.rs:9:68\n  |\n9 |   \
    \  text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\").replace(\"\
    \ \", \"_\")\n  |                                                            \
    \        ^^^^ method cannot be called on `Vec<char>` due to unsatisfied trait\
    \ bounds\n  |\n  = note: the following trait bounds were not satisfied:\n    \
    \      `[char]: Join<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpld902z5r.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpc5fzi1x4.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpbo7yc8c9.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpxz1qqzmp.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp5ul1f9w5.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpewkse0xc.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpazo8b_w1.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpycbect2v.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \");\n \
    \   if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(' ', \"-\");\n                i += 2;\n            } else {\n\
    \                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8ivf5qdn.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8ivf5qdn.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8ivf5qdn.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = false;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            spaces = true;\n\
    \        } else {\n            if spaces {\n                result.push('_');\n\
    \                spaces = false;\n            }\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `text`\n  --> /tmp/tmpvgn6g32a.rs:11:15\n\
    \   |\n8  | fn fix_spaces(text: String) -> String {\n   |               ---- move\
    \ occurs because `text` has type `String`, which does not implement the `Copy`\
    \ trait\n9  |     let mut result = text;\n   |                      ---- value\
    \ moved here\n10 |     let mut spaces = false;\n11 |     for ch in text.chars()\
    \ {\n   |               ^^^^^^^^^^^^ value borrowed here after move\n   |\n  \
    \ = note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = false;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces = true;\n\
    \        } else {\n            if spaces {\n                result = result.replace(\"\
    \ \", \"_\");\n                spaces = false;\n            }\n            result\
    \ += &c;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp50k40uaj.rs:19:23\n   |\n\
    19 |             result += &c;\n   |                       ^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpfouq9wu0.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpfouq9wu0.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpfouq9wu0.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = false;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            spaces = true;\n\
    \        } else {\n            if spaces {\n                result.replace(&mut\
    \ ch, 1, '_');\n            } else {\n                result.replace(&mut ch,\
    \ 1, '-');\n            }\n            spaces = false;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \   --> /tmp/tmpiu442gp9.rs:16:24\n    |\n16  |                 result.replace(&mut\
    \ ch, 1, '_');\n    |                        ^^^^^^^ -------  -  --- supplied\
    \ 3 arguments\n    |                        |\n    |                        expected\
    \ 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]:\
    \ this function takes 2 arguments but 3 arguments were supplied\n   --> /tmp/tmpiu442gp9.rs:18:24\n\
    \    |\n18  |                 result.replace(&mut ch, 1, '-');\n    |        \
    \                ^^^^^^^ -------  -  --- supplied 3 arguments\n    |         \
    \               |\n    |                        expected 2 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \");\n    if s.len() > 2 {\n        let mut i = 0;\n        while i <\
    \ s.len() - 2 {\n            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] ==\
    \ ' ' {\n                s.swap(i, i + 2);\n                i += 2;\n        \
    \    } else {\n                i += 1;\n            }\n        }\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd15g8rx_.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd15g8rx_.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd15g8rx_.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpxwd1b0bn.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ last_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            last_space = true;\n\
    \        } else {\n            result.push(c);\n            last_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpvhpn59he.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \" \");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpbhpyix9j.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpbhpyix9j.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpbhpyix9j.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(\"  \", \" \");\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp617ekzno.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp617ekzno.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").trim().replace(\"\
    \ \", \"-\");\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpub4jol5m.rs:8:32\n   |\n\
    8  | fn fix_spaces(text: String) -> String {\n   |    ----------             \
    \     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n9  |     let mut\
    \ s = text;\n10 |     s.replace(\"  \", \" \").trim().replace(\" \", \"-\");\n\
    \   |                                                  - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpsl3x2jp2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9_siar47.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmphtjgtt0o.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpibuzwuc5.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyok0d29a.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjt6dhk33.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    \  \", \"_\");\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpp_gfrrul.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkh5g7juo.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpswr1vsfh.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp960a86_m.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 0;\n \
    \   for ch in text.chars() {\n        if ch == ' ' {\n            spaces += 1;\n\
    \        } else {\n            if spaces > 1 {\n                result = result.replace(&mut\
    \ ch, &format!(\"_{}\", ch));\n            } else {\n                result =\
    \ result.replace(&mut ch, &format!(\"{}\", ch));\n            }\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `char`\n   -->\
    \ /tmp/tmpel73ru42.rs:16:33\n    |\n16  |                 result = result.replace(&mut\
    \ ch, &format!(\"_{}\", ch));\n    |                                 ^^^^^^^ expected\
    \ an `FnMut<(char,)>` closure, found `char`\n    |\n    = help: the trait `FnMut<(char,)>`\
    \ is not implemented for `char`\n    = help: the trait `Pattern<'a>` is implemented\
    \ for `char`\n    = note: required because of the requirements on the impl of\
    \ `FnOnce<(char,)>` for `&mut char`\n    = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `&mut char`\nnote: required by a bound in `str::<impl\
    \ str>::replace`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `char`\n\
    \   --> /tmp/tmpel73ru42.rs:18:33\n    |\n18  |                 result = result.replace(&mut\
    \ ch, &format!(\"{}\", ch));\n    |                                 ^^^^^^^ expected\
    \ an `FnMut<(char,)>` closure, found `char`\n    |\n    = help: the trait `FnMut<(char,)>`\
    \ is not implemented for `char`\n    = help: the trait `Pattern<'a>` is implemented\
    \ for `char`\n    = note: required because of the requirements on the impl of\
    \ `FnOnce<(char,)>` for `&mut char`\n    = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `&mut char`\nnote: required by a bound in `str::<impl\
    \ str>::replace`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n    if s.len() > 2 {\n        let\
    \ mut i = 0;\n        let mut j = s.len() - 1;\n        while i < j {\n      \
    \      if s[i] == ' ' && s[i + 1] == ' ' {\n                s.swap(i, i + 2);\n\
    \                i += 2;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu_3h7bwk.rs:15:16\n\
    \   |\n15 |             if s[i] == ' ' && s[i + 1] == ' ' {\n   |            \
    \    ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu_3h7bwk.rs:15:31\n   |\n15 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' {\n   |                               ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `swap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpu_3h7bwk.rs:16:19\n   |\n16 |          \
    \       s.swap(i, i + 2);\n   |                   ^^^^ method not found in `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyz39c_9z.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp921a9inm.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmptvzkob_c.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars()\n        .filter(|c| c.is_whitespace())\n\
    \        .map(|c| c.to_ascii_lowercase().chars().collect::<Vec<_>>())\n      \
    \  .flatten()\n        .filter(|c| !c.is_empty())\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .map(|c| if c.len() > 2 { c.iter().collect::<Vec<_>>().join(\"\
    -\") } else { c })\n        .collect::<Vec<_>>()\n        .join(\"-\")\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpf1pkiwn2.rs:11:41\n   |\n11 |         .map(|c| c.to_ascii_lowercase().chars().collect::<Vec<_>>())\n\
    \   |                                         ^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpahd4u0rp.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp_htvm4fu.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx_o02iqn.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\
    \").replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpb4jtmsk4.rs:9:68\n  |\n9 |   \
    \  text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\").replace(\"\
    \ \", \"_\")\n  |                                                            \
    \        ^^^^ method cannot be called on `Vec<char>` due to unsatisfied trait\
    \ bounds\n  |\n  = note: the following trait bounds were not satisfied:\n    \
    \      `[char]: Join<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpqd59sbxi.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.insert(i, \"-\");\n                i += 2;\n            } else {\n\
    \                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmppn3_ca__.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmppn3_ca__.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmppn3_ca__.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \");\n \
    \   let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n            s.replace(' ', '-');\n            i += 2;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpsjbs9e2y.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpsjbs9e2y.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsjbs9e2y.rs:14:28\n\
    \   |\n14 |             s.replace(' ', '-');\n   |                           \
    \ ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n14 |             s.replace(' ', \"-\");\n\
    \   |                            ~~~\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppd9ej77n.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut last = s.len() - 1;\n        while last\
    \ > 0 && s[last] == ' ' {\n            last = last - 1;\n        }\n        let\
    \ mut first = last + 1;\n        while first < s.len() && s[first] == ' ' {\n\
    \            first = first + 1;\n        }\n        let mut new_s = &s[..first];\n\
    \        new_s.insert(new_s.len() - 1, &s[last..]);\n        s = new_s;\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmprnek01qm.rs:13:27\n\
    \   |\n13 |         while last > 0 && s[last] == ' ' {\n   |                 \
    \          ^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmprnek01qm.rs:17:34\n   |\n17 |         while first < s.len() &&\
    \ s[first] == ' ' {\n   |                                  ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `insert` found for reference `&str`\
    \ in the current scope\n  --> /tmp/tmprnek01qm.rs:21:15\n   |\n21 |         new_s.insert(new_s.len()\
    \ - 1, &s[last..]);\n   |               ^^^^^^ method not found in `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprnek01qm.rs:22:13\n   |\n9  |  \
    \   let mut s = text;\n   |                 ---- expected due to this value\n\
    ...\n22 |         s = new_s;\n   |             ^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |             |\n   |             expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explan"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpo_iu150x.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpv2u2acxa.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgybrk9zq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpfuopo1f6.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgjedkhrh.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1ubrv90b.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1zt3c3d2.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\");\n    if s.len() > 2 {\n        let mut i = 0;\n        while i <\
    \ s.len() - 2 {\n            if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n \
    \               s.insert(i + 1, \"-\");\n                i += 2;\n           \
    \ } else {\n                i += 1;\n            }\n        }\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpeyu5t46y.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpeyu5t46y.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpeyu5t46y.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.chars().count(|c| c == ' ') > 2 {\n        s.replace(\"  \", \"_\");\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpq6zhms8q.rs:11:18\n    |\n11  |     if s.chars().count(|c| c ==\
    \ ' ') > 2 {\n    |                  ^^^^^ ------------ supplied 1 argument\n\
    \    |                  |\n    |                  expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ last_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            last_space = true;\n\
    \        } else {\n            result.push(c);\n            last_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpa7qamp6t.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpsduonxdz.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = false;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            spaces = true;\n\
    \        } else {\n            if spaces {\n                result.push('_');\n\
    \                spaces = false;\n            }\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `text`\n  --> /tmp/tmpx7kjcez3.rs:11:15\n\
    \   |\n8  | fn fix_spaces(text: String) -> String {\n   |               ---- move\
    \ occurs because `text` has type `String`, which does not implement the `Copy`\
    \ trait\n9  |     let mut result = text;\n   |                      ---- value\
    \ moved here\n10 |     let mut spaces = false;\n11 |     for ch in text.chars()\
    \ {\n   |               ^^^^^^^^^^^^ value borrowed here after move\n   |\n  \
    \ = note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = text;\n    let mut spaces = 1;\n \
    \   while result.chars().any(|c| c == ' ') {\n        result = result.replace(\"\
    \ \", \"_\", spaces, result.len());\n        spaces++;\n    }\n    while result.chars().any(|c|\
    \ c == ' ') {\n        result = result.replace(\" \", \"-\", spaces, result.len());\n\
    \        spaces++;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmppl319lw8.rs:13:15\n\
    \   |\n13 |         spaces++;\n   |               ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n13 |         { let tmp = spaces; spaces\
    \ += 1; tmp };\n   |         +++++++++++       ~~~~~~~~~~~~~~~~~~~~\n13 -    \
    \     spaces++;\n13 +         spaces += 1;\n   | \n\nerror: Rust has no postfix\
    \ increment operator\n  --> /tmp/tmppl319lw8.rs:17:15\n   |\n17 |         spaces++;\n\
    \   |               ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n17 |         { let tmp = spaces; spaces += 1; tmp };\n   |         +++++++++++\
    \       ~~~~~~~~~~~~~~~~~~~~\n17 -         spaces++;\n17 +         spaces += 1;\n\
    \   | \n\nerror[E0061]: this function takes 2 arguments but 4 arguments were supplied\n\
    \   --> /tmp/tmppl319lw8.rs:12:25\n    |\n12  |         result = result.replace(\"\
    \ \", \"_\", spaces, result.len());\n    |                         ^^^^^^^ ---\
    \  ---  ------  ------------ supplied 4 arguments\n    |                     \
    \    |\n    |                         expected 2 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0061]: this function takes 2 arguments but 4\
    \ arguments were supplied\n   --> /tmp/tmppl319lw8.rs:16:25\n    |\n16  |    \
    \     result = result.replace(\" \", \"-\", spaces, result.len());\n    |    \
    \                     ^^^^^^^ ---  ---  ------  ------------ supplied 4 arguments\n\
    \    |                         |\n    |                         expected 2 arguments\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwf7ftlrz.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \");\n \
    \   let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n            s.replace(' ', '-');\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpo08wrzot.rs:13:12\n\
    \   |\n13 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpo08wrzot.rs:13:27\n   |\n13 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |                           ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo08wrzot.rs:14:28\n\
    \   |\n14 |             s.replace(' ', '-');\n   |                           \
    \ ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n14 |             s.replace(' ', \"-\");\n\
    \   |                            ~~~\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == s[i + 1] && s[i] == s[i + 2] {\n                s.insert(i,\
    \ \"-\");\n                i += 2;\n            } else {\n                i +=\
    \ 1;\n            }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp4645p9ms.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i] == s[i + 2] {\n   |      \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp4645p9ms.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp4645p9ms.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] {\n   |                                    ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <Stri"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.chars().any(|c| c == ' ') {\n        let mut i = 0;\n        while i\
    \ < s.len() {\n            if s[i] == ' ' {\n                let j = i + 1;\n\
    \                while j < s.len() {\n                    if s[j] == ' ' {\n \
    \                       s = &s[0..i] + &s[j..].to_string();\n                \
    \        break;\n                    }\n                    j += 1;\n        \
    \        }\n            }\n            i += 1;\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpwgyyfgzo.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' {\n   |                ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpwgyyfgzo.rs:17:24\n   |\n17 |                     if s[j] == '\
    \ ' {\n   |                        ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0369]: cannot add `&String` to `&str`\n  --> /tmp/tmpwgyyfgzo.rs:18:38\n\
    \   |\n18 |                         s = &s[0..i] + &s[j..].to_string();\n   |\
    \                             -------- ^ ------------------- &String\n   |   \
    \                          |        |\n   |                             |    \
    \    `+` cannot be used to concatenate two `&str` strings\n   |              \
    \               &str\n   |\n   = note: string concatenation requires an owned\
    \ `String` on the left\nhelp: remove the borrow to obtain an owned `String`\n\
    \   |\n18 -                         s = &s[0..i] + &s[j..].to_string();\n18 +\
    \                         s = s[0..i] + &s[j..].to_string();\n   | \n\nerror:\
    \ aborting due to 3 pr"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpo8jf0kxl.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\", &s[2..]));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb3ktqk5t.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz4zregz1.rs:8:32\n  |\n8 |\
    \ fn fix_spaces(text: String) -> String {\n  |    ----------                 \
    \ ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmph63bb_9u.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppl92ycpf.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n                s.swap(i\
    \ + 1, i + 2);\n            } else {\n                i += 1;\n            }\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpp50w4ru5.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpp50w4ru5.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpp50w4ru5.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\
    \").replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpyziirnrd.rs:9:68\n  |\n9 |   \
    \  text.chars().filter(|c| c.is_whitespace()).collect::<Vec<_>>().join(\"\").replace(\"\
    \ \", \"_\")\n  |                                                            \
    \        ^^^^ method cannot be called on `Vec<char>` due to unsatisfied trait\
    \ bounds\n  |\n  = note: the following trait bounds were not satisfied:\n    \
    \      `[char]: Join<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpvqk3mbhv.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut last = s.len() - 1;\n        while last\
    \ > 0 && s[last] == ' ' {\n            last = last - 1;\n        }\n        s.replace(last,\
    \ last + 1, \"-\");\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpmrjvj2o3.rs:13:27\n\
    \   |\n13 |         while last > 0 && s[last] == ' ' {\n   |                 \
    \          ^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0061]: this function takes 2 arguments but 3 arguments were\
    \ supplied\n   --> /tmp/tmpmrjvj2o3.rs:16:11\n    |\n16  |         s.replace(last,\
    \ last + 1, \"-\");\n    |           ^^^^^^^ ----  --------  --- supplied 3 arguments\n\
    \    |           |\n    |           expected 2 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ last_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            last_space = true;\n\
    \        } else {\n            result.push(c);\n            last_space = false;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpsuak_9y_.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2licdq2u.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp_wtr59te.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyvpevtw8.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    \  \", \"_\");\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp41jo0f3k.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp5d0dfboq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.chars().filter_map(|c| match c {\n        ' '\
    \ => '_',\n        _ => c,\n    }).collect::<String>().replace(\" \", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy73ukwv.rs:10:16\n   |\n\
    10 |         ' ' => '_',\n   |                ^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<_>`\n              found type\
    \ `char`\nhelp: try wrapping the expression in `Some`\n   |\n10 |         ' '\
    \ => Some('_'),\n   |                +++++   +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut last = 0;\n        for c in s.chars() {\n\
    \            if c == ' ' {\n                last = c;\n            }\n       \
    \     if last == c {\n                last = ' ';\n            }\n        }\n\
    \        s = &s[..last];\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp46rwnmet.rs:15:24\n   |\n\
    12 |         let mut last = 0;\n   |                        - expected due to\
    \ this value\n...\n15 |                 last = c;\n   |                      \
    \  ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp46rwnmet.rs:17:24\n\
    \   |\n17 |             if last == c {\n   |                        ^ expected\
    \ integer, found `char`\n\nerror[E0277]: can't compare `{integer}` with `char`\n\
    \  --> /tmp/tmp46rwnmet.rs:17:21\n   |\n17 |             if last == c {\n   |\
    \                     ^^ no implementation for `{integer} == char`\n   |\n   =\
    \ help: the trait `PartialEq<char>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp46rwnmet.rs:18:24\n   |\n12 |\
    \         let mut last = 0;\n   |                        - expected due to this\
    \ value\n...\n18 |                 last = ' ';\n   |                        ^^^\
    \ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp46rwnmet.rs:21:13\n\
    \   |\n9  |     let mut s = text;\n   |                 ---- expected due to this\
    \ value\n...\n21 |         s = &s[..last];\n   |             ^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n21 |         s = (&s[..last]).to_string();\n   |             +         \
    \ +++++++++++++\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpxk9dozly.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.chars().count(|c| c == ' ') > 2 {\n        s.replace(\"  \", \"_\");\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp3jznqfpd.rs:11:18\n    |\n11  |     if s.chars().count(|c| c ==\
    \ ' ') > 2 {\n    |                  ^^^^^ ------------ supplied 1 argument\n\
    \    |                  |\n    |                  expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == s[i + 1] && s[i] == s[i + 2] {\n                s.swap(i\
    \ + 1, i + 2);\n            } else {\n                i += 1;\n            }\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1wlxfijc.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i] == s[i + 2] {\n   |      \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp1wlxfijc.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp1wlxfijc.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] {\n   |                                    ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <Stri"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmcqcgdk9.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n    if s.len() > 2 {\n        let\
    \ mut i = 0;\n        while i < s.len() - 2 {\n            if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n                s.insert(i, \"-\");\n    \
    \            i += 2;\n            } else {\n                i += 1;\n        \
    \    }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpg71libj6.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpg71libj6.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpg71libj6.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        let mut last = s.len();\n        for c in s.chars()\
    \ {\n            if c == ' ' {\n                last = s.len();\n            }\
    \ else {\n                last = s.len();\n            }\n        }\n        s\
    \ = &s[..last];\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8dfdel3l.rs:20:13\n   |\n\
    9  |     let mut s = text;\n   |                 ---- expected due to this value\n\
    ...\n20 |         s = &s[..last];\n   |             ^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\nhelp: try using a conversion method\n   |\n20\
    \ |         s = (&s[..last]).to_string();\n   |             +          +++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgvbocwtq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpx9u1yxtd.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmptvdgw23l.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").trim();\n    if s.len() > 2 {\n        let mut i = 0;\n        while\
    \ i < s.len() - 2 {\n            if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n\
    \                s.swap(i + 1, i + 2);\n                i += 2;\n            }\
    \ else {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp9rnngeom.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp9rnngeom.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp9rnngeom.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgddmd23y.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\", &s[2..]));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzvkcvrgm.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2g8kwdql.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\", &s[2..]));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp12fbz9ly.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjgmlc89v.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpip56nfs8.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n     \
    \       break;\n        }\n        i += 1;\n    }\n    if i == s.len() {\n   \
    \     return text;\n    }\n    let mut j = i;\n    while j < s.len() {\n     \
    \   if s[j] == ' ' {\n            s[j] = '_';\n            i += 1;\n        }\
    \ else {\n            break;\n        }\n        j += 1;\n    }\n    if j == s.len()\
    \ {\n        return text;\n    }\n    s[j] = '-';\n    fix_spaces(&s[..j]);\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq6juzszg.rs:13:12\n\
    \   |\n13 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpq6juzszg.rs:23:12\n   |\n23 |         if s[j] == ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpq6juzszg.rs:24:13\n   |\n24 |             s[j] = '_';\n   |   \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \"_\").trim().to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpj79m6ohj.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpfdl9yj3n.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n\
    \            if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n        \
    \        s.replace(\"  \", \"_\");\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp3enjjhwv.rs:14:16\n\
    \   |\n14 |             if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n\
    \   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp3enjjhwv.rs:14:31\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                               ^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp3enjjhwv.rs:14:50\n   |\n14 |             if s[i] == ' ' && s[i\
    \ + 1] == ' ' && s[i + 2] == ' ' {\n   |                                     \
    \             ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4yv_jlry.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkb3csol4.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\", &s[2..]));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpf88zoaqz.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"\
    -\", \" \").replace(\"  \", \" \").trim();\n    if s.len() > 2 {\n        let\
    \ mut i = 0;\n        while i < s.len() - 2 {\n            if s[i] == s[i + 1]\
    \ && s[i + 1] == s[i + 2] {\n                s.insert(i, \" \");\n           \
    \     i += 2;\n            } else {\n                i += 1;\n            }\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpjbeej784.rs:14:16\n\
    \   |\n14 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpjbeej784.rs:14:24\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                        ^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpjbeej784.rs:14:36\n   |\n14 |             if s[i] == s[i + 1] &&\
    \ s[i + 1] == s[i + 2] {\n   |                                    ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpqsf8n7s5.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
