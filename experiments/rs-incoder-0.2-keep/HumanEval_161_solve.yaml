name: HumanEval_161_solve
language: rust
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n/// solve(\"\
  ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
  AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
  )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
  ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
  ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
  \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
  \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n"
completions: ["    let mut s = s;\n    let mut res = String::new();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase()\
    \ {\n                res.push_str(i.to_uppercase());\n            } else {\n \
    \               res.push_str(i.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(i);\n        }\n    }\n    res.reverse();\n    return\
    \ res;", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        if s[i].is_ascii() {\n            if s[i].to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(&s[i].to_ascii_lowercase());\n            }\
    \ else {\n                res.push_str(&s[i].to_ascii_uppercase());\n        \
    \    }\n        } else {\n            res.push_str(&s[i]);\n        }\n      \
    \  i += 1;\n    }\n    res.reverse();\n    res", "    s.chars().map(|c| match\
    \ c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n        'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect::<String>().reverse().to_string()", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while i <\
    \ s.len() {\n        if s[i].is_ascii() {\n            if s[i].to_ascii_lowercase()\
    \ == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n            }\
    \ else {\n                s[i] = s[i].to_ascii_lowercase();\n            }\n \
    \       } else {\n            s[i] = s[i];\n        }\n        res += s[i];\n\
    \        i += 1;\n    }\n    return res;", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(c);\n        }\n  \
    \  }\n    res", "    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \        'A' .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n   \
    \             res.push_str(c.to_ascii_uppercase());\n            } else {\n  \
    \              res.push_str(c.to_ascii_lowercase());\n            }\n        }\
    \ else {\n            res.push_str(&c.to_string());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            }\n      \
    \  } else {\n            res.push_str(c);\n        }\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_ascii() {\n            if i.to_ascii_lowercase() == i {\n      \
    \          res.push_str(i.to_ascii_uppercase());\n            } else {\n     \
    \           res.push_str(i.to_ascii_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty() {\n\
    \        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for i in s.chars() {\n        if i.is_uppercase() {\n  \
    \          res.push_str(&i.to_lowercase());\n        } else {\n            res.push_str(&i.to_uppercase());\n\
    \        }\n    }\n    if res.is_empty() {\n        return s;\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res.push_str(&s.to_ascii_lowercase());\n    return res;", " \
    \   s.chars().map(|c| if c.is_letter() {\n        c.to_ascii_lowercase().to_string()\n\
    \    } else {\n        c.to_string()\n    }).collect::<Vec<_>>().join(\"\").to_string()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        if c.to_ascii_lowercase() == c {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c);\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(\"0\");\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_lowercase() == s[i] {\n                res.push_str(&s[i].to_uppercase());\n\
    \            } else {\n                res.push_str(&s[i].to_lowercase());\n \
    \           }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(\"\\0\");\n    return res;", "    s.chars().map(|c|\
    \ match c {\n        'a' => c.to_ascii_lowercase(),\n        'A' => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect::<String>().reverse()", "    s.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n        'A' .. 'Z'\
    \ => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            }\n      \
    \  } else {\n            res.push_str(c);\n        }\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n   \
    \     } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n   \
    \             res.push(c);\n            } else {\n                res.push(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push(c);\n        }\n    }\n\
    \    res.reverse();\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for i in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for ch in s.chars() {\n        if ch.is_ascii_lowercase() {\n           \
    \ res.push_str(&ch.to_ascii_uppercase());\n        } else {\n            res.push_str(&ch.to_ascii_lowercase());\n\
    \        }\n    }\n    res.push_str(&s);\n    return res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii()\
    \ {\n            if ch.is_lowercase() {\n                res.push_str(&ch.to_uppercase());\n\
    \            } else {\n                res.push_str(&ch.to_lowercase());\n   \
    \         }\n        } else {\n            res.push_str(&ch);\n        }\n   \
    \ }\n    res.reverse();\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n\
    \            if c.is_lowercase() {\n                res.push_str(c.to_uppercase());\n\
    \            } else {\n                res.push_str(c.to_lowercase());\n     \
    \       }\n        } else {\n            res.push_str(&c);\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase() {\n\
    \                res.push_str(i.to_uppercase());\n            } else {\n     \
    \           res.push_str(i.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(i);\n        }\n    }\n    res.reverse();\n    return\
    \ res;", "    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n    \
    \            res.push_str(c.to_ascii_lowercase());\n            } else {\n   \
    \             res.push_str(c.to_ascii_uppercase());\n            }\n        }\
    \ else {\n            res.push_str(&c.to_string());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_ascii() {\n            if s[i].is_lowercase()\
    \ {\n                res.push_str(&s[i .. i + 1].reverse());\n               \
    \ i += 1;\n            } else {\n                res.push_str(&s[i .. i + 1]);\n\
    \                i += 1;\n            }\n        } else {\n            res.push_str(&s[i\
    \ .. i + 1]);\n            i += 1;\n        }\n    }\n    res.push_str(&s[i ..\
    \ s.len()]);\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase()\
    \ {\n                res.push_str(c.to_uppercase());\n            } else {\n \
    \               res.push_str(c.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(&c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(&s);\n    }\n    res", "    let mut s = s;\n  \
    \  let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;", "    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(\"\\0\");\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            }\n      \
    \  } else {\n            res.push_str(&c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        res.push_str(&s);\n    }\n    res", "    let mut s = s;\n  \
    \  let mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(&i.to_uppercase());\n        } else {\n        \
    \    res.push_str(&i.to_lowercase());\n        }\n    }\n    res.push_str(&s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for i in s.chars() {\n        if i.is_ascii() {\n            if i.to_ascii_lowercase()\
    \ == i {\n                res.push_str(i.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(i.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else {\n   \
    \         res.push_str(c.to_ascii_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter() {\n\
    \            if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(&s[s.len() - 1]);\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_ascii_lowercase());\n\
    \    }\n    return res;", "    s.chars().map(|c| if c.is_letter() {\n        match\
    \ c.to_lowercase() {\n            \"a\" => \"A\",\n            \"b\" => \"B\"\
    ,\n            \"c\" => \"C\",\n            \"d\" => \"D\",\n            \"e\"\
    \ => \"E\",\n            \"f\" => \"F\",\n            \"g\" => \"G\",\n      \
    \      \"h\" => \"H\",\n            \"i\" => \"I\",\n            \"j\" => \"J\"\
    ,\n            \"k\" => \"K\",\n            \"l\" => \"L\",\n            \"m\"\
    \ => \"M\",\n            \"n\" => \"N\",\n            \"o\" => \"O\",\n      \
    \      \"p\" => \"P\",\n            \"q\" => \"Q\",\n            \"r\" => \"R\"\
    ,\n            \"s\" => \"S\",\n            \"t\" => \"T\",\n            \"u\"\
    \ => \"U\",\n            \"v\" => \"V\",\n            \"w\" => \"W\",\n      \
    \      \"x\" => \"X\",\n            \"y\" => \"Y\",\n            \"z\" => \"Z\"\
    ,\n            _ => c,\n        }\n    } else {\n        c\n    }).collect::<String>().join(\"\
    \")", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n    \
    \    if s[i].is_ascii() {\n            if s[i].to_ascii_lowercase() == s[i] {\n\
    \                s[i] = s[i].to_ascii_uppercase();\n            } else {\n   \
    \             s[i] = s[i].to_ascii_lowercase();\n            }\n        } else\
    \ {\n            s[i] = s[i].to_ascii_lowercase();\n        }\n        res +=\
    \ s[i];\n        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        if c.to_ascii_lowercase() == c {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c.to_string());\n\
    \        }\n    }\n    res.push_str(&s);\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i].is_ascii() {\n            i += 1;\n        } else {\n       \
    \     res.push_str(&s[i .. i].to_lowercase());\n            i += 1;\n        }\n\
    \    }\n    res.push_str(&s[i .. s.len()].to_lowercase());\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n   \
    \     } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    s.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n        'A'\
    \ .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res.push_str(\"_\");\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n\
    \        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(\"_\");\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res.reverse();\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for ch in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        return s;\n    }\n    return res;", "    let mut s = s;\n  \
    \  let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n    \
    \            res.push_str(c.to_ascii_uppercase());\n            } else {\n   \
    \             res.push_str(c.to_ascii_lowercase());\n            }\n        }\
    \ else {\n            res.push_str(&c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for i in s.chars() {\n        if i.is_ascii() {\n    \
    \        if i.is_lowercase() {\n                res.push_str(i.to_uppercase());\n\
    \            } else {\n                res.push_str(i.to_lowercase());\n     \
    \       }\n        } else {\n            res.push_str(i);\n        }\n    }\n\
    \    if res.is_empty() {\n        return s;\n    }\n    res.reverse();\n    return\
    \ res;", "    let mut s = s;\n    let mut res = String::new();\n    for ch in\
    \ s.chars() {\n        if ch.is_ascii() {\n            if let Some(upper) = ch.to_ascii_lowercase()\
    \ {\n                res.push_str(&upper);\n            } else {\n           \
    \     res.push_str(&ch.to_ascii_uppercase());\n            }\n        } else {\n\
    \            res.push_str(&ch);\n        }\n    }\n    res", "    let mut s =\
    \ s;\n    let mut res = String::new();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i].is_ascii_letter() {\n            if s[i].to_ascii_lowercase()\
    \ != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n     \
    \       } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(&s[s.len() - 1]);\n    res", "    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s.to_lowercase());\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for ch in s.chars() {\n      \
    \  if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n   \
    \     } else {\n            res.push_str(&ch.to_lowercase());\n        }\n   \
    \ }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    s.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n        'A'\
    \ .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase()\
    \ {\n                res.push_str(c.to_uppercase());\n            } else {\n \
    \               res.push_str(c.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(&c);\n        }\n    }\n    if res.is_empty() {\n\
    \        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter()\
    \ {\n            i += 1;\n        } else {\n            res.push_str(&s[..i]);\n\
    \            i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for i in s.chars() {\n        if i.is_uppercase()\
    \ {\n            res.push_str(i.to_lowercase());\n        } else {\n         \
    \   res.push_str(i.to_uppercase());\n        }\n    }\n    if res.is_empty() {\n\
    \        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for i in s.chars() {\n        if i.is_ascii() {\n      \
    \      if i.is_lowercase() {\n                res.push_str(&i.to_uppercase());\n\
    \            } else {\n                res.push_str(&i.to_lowercase());\n    \
    \        }\n        } else {\n            res.push_str(&i);\n        }\n    }\n\
    \    if res.len() == 0 {\n        res.push_str(\"0\");\n    }\n    res", "   \
    \ s.chars().map(|c| match c {\n        'a' => c.to_ascii_lowercase(),\n      \
    \  'A' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()",
  "    let mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n\
    \        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res",
  "    let mut res = String::new();\n    let mut s = s;\n    while !s.is_empty() {\n\
    \        if s.chars().any(|c| c.is_ascii_lowercase()) {\n            res.push_str(s.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect::<String>().rev());\n        } else {\n    \
    \        res.push_str(s);\n        }\n        s = s.chars().next().unwrap();\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n       \
    \ } else {\n            res.push_str(c.to_uppercase());\n        }\n    }\n  \
    \  if res.len() == 0 {\n        res.push_str(\"0\");\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n   \
    \     } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n        } else\
    \ {\n            res.push_str(c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s.to_lowercase());\n    }\n    return res;", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res.push_str(s.to_lowercase());\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n        \
    \    if s[i].to_ascii_lowercase() == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i].to_ascii_lowercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n    \
    \        s[i] = s[i].to_ascii_uppercase();\n        } else {\n            s[i]\
    \ = s[i].to_ascii_lowercase();\n        }\n        res += s[i];\n        i +=\
    \ 1;\n    }\n    res += s[s.len() - 1];\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  if res.len() == 0 {\n        res.push_str(\"_\");\n    }\n    return res;",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for ch in s.chars() {\n  \
    \      if ch.is_lowercase() {\n            res.push_str(ch.to_uppercase());\n\
    \        } else {\n            res.push_str(ch.to_lowercase());\n        }\n \
    \   }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else {\n   \
    \         res.push_str(c.to_ascii_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n   \
    \             res.push_str(c.to_ascii_uppercase());\n            } else {\n  \
    \              res.push_str(c.to_ascii_lowercase());\n            }\n        }\
    \ else {\n            res.push_str(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        return s;\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&c.to_string());\n\
    \        }\n    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(s);\n    }\n    res", "  \
    \  let mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n\
    \        if i.is_ascii() {\n            if i.to_ascii_lowercase() == i {\n   \
    \             res.push_str(i.to_ascii_uppercase());\n            } else {\n  \
    \              res.push_str(i.to_ascii_lowercase());\n            }\n        }\
    \ else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            res.push_str(c.to_lowercase());\n        } else {\n            res.push_str(c.to_uppercase());\n\
    \        }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(\"0\");\n    }\n    return res;", "    let mut\
    \ res = String::new();\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s[i].is_ascii_letter() {\n            res.push_str(&s[i\
    \ .. i + 1].to_lowercase());\n            i += 1;\n        } else {\n        \
    \    res.push_str(&s[i .. i + 1]);\n            i += 1;\n        }\n    }\n  \
    \  res.push_str(&s[..i].to_lowercase());\n    res", "    s.chars().map(|c| match\
    \ c {\n        'a' => c.to_ascii_lowercase(),\n        'A' => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect::<String>().reverse()", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    if res.is_empty() {\n\
    \        return s;\n    }\n    return res;", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for i in s.chars() {\n        if i.is_ascii() {\n\
    \            res.push_str(i.to_ascii_lowercase());\n        } else {\n       \
    \     res.push_str(i.to_ascii_uppercase());\n        }\n    }\n    if res.len()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s.chars().any(|c| c.is_ascii_lowercase()) {\n            s.swap(i,\
    \ s.len() - i - 1);\n            res.push_str(&s[..i]);\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i]);\n            i += 1;\n \
    \       }\n    }\n    res.push_str(&s[..i]);\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&c);\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s.to_lowercase());\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n          \
    \      res.push_str(c.to_ascii_uppercase());\n            } else {\n         \
    \       res.push_str(c.to_ascii_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&c.to_string());\n        }\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n   \
    \     } else {\n            res.push_str(i.to_uppercase());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    let mut i =\
    \ 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n      \
    \      i += 1;\n            res.push_str(&s[i .. i].to_lowercase());\n       \
    \ } else {\n            res.push_str(&s[i .. i]);\n        }\n        i += 1;\n\
    \    }\n    res.push_str(&s[s.len() - 1 .. s.len()].to_lowercase());\n    res",
  "    s.chars().map(|c| if c.is_letter() {\n        c.to_ascii_lowercase()\n    }\
    \ else {\n        c.to_ascii_uppercase()\n    }).collect::<String>().reverse().to_string()",
  "    let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_ascii_lowercase() {\n            res.push_str(&s[i\
    \ .. i + 1]);\n            i += 1;\n        } else {\n            res.push_str(&s[i\
    \ .. i + 1].to_ascii_lowercase());\n            i += 1;\n        }\n    }\n  \
    \  res.push_str(&s[i .. s.len()]);\n    res", "    s.chars().map(|c| match c {\n\
    \        'a' .. 'z' => c.to_ascii_lowercase(),\n        'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect::<String>().reverse()", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for ch in s.chars() {\n        if ch.is_lowercase()\
    \ {\n            res.push_str(ch.to_uppercase());\n        } else {\n        \
    \    res.push_str(ch.to_lowercase());\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else {\n   \
    \         res.push_str(c.to_ascii_lowercase());\n        }\n    }\n    if res.len()\
    \ == 0 {\n        res.push_str(\"_\");\n    }\n    return res;", "    s.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n        'A'\
    \ .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    res", "    s.chars().map(|c| match c {\n     \
    \   'a' .. 'z' => c.to_ascii_lowercase(),\n        'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect::<String>().reverse().to_string()", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n   \
    \     } else {\n            res.push_str(c.to_uppercase());\n        }\n    }\n\
    \    if res.is_empty() {\n        return s;\n    }\n    res.reverse();\n    return\
    \ res;", "    let mut s = s;\n    let mut res = String::new();\n    for i in s.chars()\
    \ {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c);\n        }\n \
    \   }\n    res", "    s.chars().map(|c| match c {\n        'a' .. 'z' => c as\
    \ char,\n        'A' .. 'Z' => c as char,\n        _ => c,\n    }).collect::<String>().reverse().to_string()",
  "    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase() == c {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(c);\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            }\n      \
    \  } else {\n            res.push_str(c);\n        }\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_ascii() {\n            if i.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(i.to_ascii_lowercase());\n            } else {\n\
    \                res.push_str(i.to_ascii_uppercase());\n            }\n      \
    \  } else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&c.to_string());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    if res.is_empty() {\n\
    \        res.push_str(s.to_lowercase());\n    }\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c.to_string());\n\
    \        }\n    }\n    if res.is_empty() {\n        res = \"#\".to_string();\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ i in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase()\
    \ {\n                res.push_str(i.to_uppercase());\n            } else {\n \
    \               res.push_str(i.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty() {\n\
    \        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n  \
    \          res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    return res;",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.is_lowercase() {\n              \
    \  res.push_str(c.to_uppercase());\n            } else {\n                res.push_str(c.to_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c);\n        }\n \
    \   }\n    if res.is_empty() {\n        res\n    } else {\n        res\n    }",
  "    let mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n\
    \        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        return s;\n    }\n    res.reverse();\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else {\n   \
    \         res.push_str(c.to_ascii_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    return res;", "    let mut s = s;\n    let mut res = String::new();\n   \
    \ for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            }\n      \
    \  } else {\n            res.push_str(&c);\n        }\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for i in s.chars() {\n   \
    \     if i.is_ascii_lowercase() {\n            res.push_str(i.to_ascii_uppercase());\n\
    \        } else if i.is_ascii_uppercase() {\n            res.push_str(i.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(i);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for ch in s.chars()\
    \ {\n        if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    if res.chars().count() == 0 {\n        res.push_str(\"0\");\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(s);\n    }\n    return res;",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    s.chars().map(|c| match c {\n        'a' => c.to_ascii_lowercase(),\n\
    \        'A' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()",
  "    let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_ascii() {\n            if s[i].to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(&s[i].to_ascii_lowercase());\n            }\
    \ else {\n                res.push_str(&s[i].to_ascii_uppercase());\n        \
    \    }\n        } else {\n            res.push_str(&s[i]);\n        }\n      \
    \  i += 1;\n    }\n    res.push_str(\"\\0\");\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else {\n   \
    \         res.push_str(c.to_ascii_lowercase());\n        }\n    }\n    res.push_str(s);\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res.push_str(&s);\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        'A' .. 'Z' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter() {\n \
    \           if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            res.push_str(&s[i .. i + 1]);\n            i += 1;\n        }\
    \ else {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n   \
    \         i += 1;\n        }\n    }\n    res.push_str(&s[i ..]);\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        }\n    }\n    res", "    let mut res\
    \ = String::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        if s.chars().any(|c| c.is_ascii_lowercase()) {\n            res.push_str(s.chars().map(|c|\
    \ c.to_ascii_lowercase()).collect::<String>());\n        } else {\n          \
    \  res.push_str(s);\n        }\n        s = s.chars().filter(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    res.push_str(s);\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for i in s.chars() {\n        if i.is_lowercase() {\n  \
    \          res.push_str(i.to_uppercase());\n        } else {\n            res.push_str(i.to_lowercase());\n\
    \        }\n    }\n    res.reverse();\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    if res.is_empty() {\n\
    \        res.push_str(s.to_lowercase());\n    }\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for i in s.chars() {\n        if i.is_lowercase()\
    \ {\n            res.push_str(&i.to_uppercase());\n        } else {\n        \
    \    res.push_str(&i.to_lowercase());\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\".to_string();\n    }\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    if res.len() == 0 {\n\
    \        res.push_str(\"_\");\n    }\n    return res;", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii() {\n            if c.is_lowercase() {\n                res.push_str(c.to_uppercase());\n\
    \            } else {\n                res.push_str(c.to_lowercase());\n     \
    \       }\n        } else {\n            res.push_str(&c);\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(s.to_lowercase());\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i]);\n            i += 1;\n \
    \       }\n    }\n    res.push_str(&s[..i].to_lowercase());\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for ch in s.chars() {\n  \
    \      if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for ch in\
    \ s.chars() {\n        if ch.is_ascii_lowercase() {\n            res.push_str(&ch.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_ascii_lowercase());\n     \
    \   }\n    }\n    res.push_str(&s.chars().last().unwrap());\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n   \
    \     } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for ch in\
    \ s.chars() {\n        if ch.is_ascii() {\n            if ch.is_lowercase() {\n\
    \                res.push_str(&ch.to_uppercase());\n            } else {\n   \
    \             res.push_str(&ch.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(&ch);\n        }\n    }\n    res.reverse();\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        return s;\n    }\n    return res;", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(\"0\");\n    }\n    return res;", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n          \
    \      res.push_str(c.to_ascii_uppercase());\n            } else {\n         \
    \       res.push_str(c.to_ascii_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&c.to_string());\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            res.push_str(c.to_lowercase());\n        } else {\n            res.push_str(c.to_uppercase());\n\
    \        }\n    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    return\
    \ res;", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res"]
stop_tokens:
- "\n}"
