name: HumanEval_66_digitSum
language: rust
results:
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpe5_a3pn7.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpe5_a3pn7.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5hzr6c1m.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5hzr6c1m.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp0posyarm.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp0posyarm.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpejs_lbaa.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpejs_lbaa.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpw6978q_p.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpw6978q_p.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6kf5idyq.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp6kf5idyq.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptbtfwpyo.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmptbtfwpyo.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpw1vs2nnu.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpw1vs2nnu.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpw4c163bc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpw4c163bc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpgakpyk9o.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpgakpyk9o.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5bro6m33.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5bro6m33.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp3yehoz0t.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp3yehoz0t.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpw6woh2s6.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpw6woh2s6.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5_2gzxex.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5_2gzxex.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_nrnlwjr.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp_nrnlwjr.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmppk71x40e.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmppk71x40e.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp2uetyst8.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp2uetyst8.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpr8aumrm3.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpr8aumrm3.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp8__g37bm.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp8__g37bm.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpawfj1yoz.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpawfj1yoz.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpncleq6e5.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpncleq6e5.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmphg2qq3yz.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmphg2qq3yz.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpiuqcqvog.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpyiniwp9v.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpyiniwp9v.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_wvi8abq.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp_wvi8abq.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpkeugu5ee.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp3nirey_7.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp3nirey_7.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp88w3h6l7.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp88w3h6l7.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpmj1jt9ln.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpmj1jt9ln.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5vt1dqmo.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5vt1dqmo.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6q8uywf2.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp6q8uywf2.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpekowrykf.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpekowrykf.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpv0om0no1.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpv0om0no1.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5e8blcbc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5e8blcbc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5megxfpq.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5megxfpq.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpsru2ioef.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpsru2ioef.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        } else {\n            break;\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpu5_j59jy.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbnk80dnz.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpbnk80dnz.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpz9m3rjee.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpz9m3rjee.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp2jkywb4k.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp2jkywb4k.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp778e5ouf.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp778e5ouf.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpj7g23ugh.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpj7g23ugh.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptx5xzjdx.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmptx5xzjdx.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpyi2ph6na.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpyi2ph6na.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptgtahqmc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmptgtahqmc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpz0z55qbl.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpz0z55qbl.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpzdcme36p.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpzdcme36p.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpknvyimey.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp090rtavk.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp090rtavk.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmppertsw7t.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmppertsw7t.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp7fenrr7d.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp7fenrr7d.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp0_bmhgwg.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp0_bmhgwg.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwat1andd.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpwat1andd.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpz55ap_xy.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpz55ap_xy.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpdmpqu8zu.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpdmpqu8zu.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmplbqvlnmo.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmplbqvlnmo.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpsjqtwpcc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpsjqtwpcc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpc1vuu82k.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpc1vuu82k.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwwzjjwk_.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpwwzjjwk_.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp87a12bsd.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp87a12bsd.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp7ip5_3ty.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_o_dcdi0.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp_o_dcdi0.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpyyvto007.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpyyvto007.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmps5q1k09f.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpoqzn4ds6.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpoqzn4ds6.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpmpa89b8l.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpmpa89b8l.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpezvhobln.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp9xe6s9n6.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp9xe6s9n6.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpkpw_bxwe.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpkpw_bxwe.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp8h7x723n.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpuav4u_34.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpuav4u_34.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpvj4n916t.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpx5dmt7f5.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpx5dmt7f5.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5_49is4k.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5_49is4k.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp1gorwbph.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp1gorwbph.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpy1o8mr7h.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpy1o8mr7h.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp55dpdqgi.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp55dpdqgi.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpif94dkyw.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpif94dkyw.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpe9ctx8yp.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpe9ctx8yp.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpp15j6pnz.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpp15j6pnz.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpdol9vf8_.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpdol9vf8_.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpjolk50i1.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpjolk50i1.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp63pr2l8_.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp63pr2l8_.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp78zedove.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp78zedove.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpyttfn29q.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpyttfn29q.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpyi33b9q2.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpyi33b9q2.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpdaxrzxea.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpdaxrzxea.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp0k6he63o.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp0k6he63o.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpqtnik_f8.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpqtnik_f8.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpor_v12lv.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpor_v12lv.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp00euucdg.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp00euucdg.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpj02phm7o.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpj02phm7o.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpkvx4f5ip.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpkvx4f5ip.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp29sins3o.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp29sins3o.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpwt3fsanj.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp57gu916t.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp57gu916t.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpf5tsjsqi.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpf5tsjsqi.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpya38oxwt.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpya38oxwt.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpf1c_ux_u.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpr4ikqcb8.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpr4ikqcb8.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp86lw9yq0.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp86lw9yq0.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp1yq25d5l.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp1yq25d5l.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp1viokpiw.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp1viokpiw.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp70gy2dpr.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp70gy2dpr.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp0yh7aeam.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp0yh7aeam.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwcxrqiy5.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpwcxrqiy5.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpj5os55y4.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpj5os55y4.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp4f7oy6rl.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp4f7oy6rl.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp4i5o4utj.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp4i5o4utj.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpewr2yrdg.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpewr2yrdg.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpoq5j45tu.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpoq5j45tu.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6hpj0ou6.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp6hpj0ou6.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp5fc4lwvb.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp5fc4lwvb.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpsopkgr44.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpsopkgr44.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpju6i0aha.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpn3ra5son.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpn3ra5son.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpi2nl5hjy.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpi2nl5hjy.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpqprer0md.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpqprer0md.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpg0p4bb1n.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpg0p4bb1n.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp9x3o1zj7.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp9x3o1zj7.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpblrboeu6.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpblrboeu6.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpfkizx7_v.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpfkizx7_v.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpk_yu55xd.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpk_yu55xd.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpgel4kkmc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpgel4kkmc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6kmz3pz9.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp6kmz3pz9.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp185f3j0m.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp185f3j0m.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpan1g6mxc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpan1g6mxc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpf70s8x71.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpf70s8x71.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpf9y3qhv7.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpf9y3qhv7.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp15hqyj28.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp15hqyj28.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpo9etd8xv.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpo9etd8xv.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpz_uoq2of.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpz_uoq2of.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpdonqiqwf.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpdonqiqwf.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_vxjas2v.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp_vxjas2v.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpzo483j8t.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpzo483j8t.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpl8loidag.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpl8loidag.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpoz7m34ex.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpoz7m34ex.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpml8be935.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpml8be935.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp8av0th6e.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp8av0th6e.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpemiu6bed.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpemiu6bed.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwrav27mp.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpwrav27mp.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp4cucbgvn.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp4cucbgvn.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpko_pl7uo.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpko_pl7uo.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp13hkkes2.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp13hkkes2.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpv0hhxgpr.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpv0hhxgpr.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6rbgcauv.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp6rbgcauv.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp87juege_.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp87juege_.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpb8egczma.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpb8egczma.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp4xup6x96.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp4xup6x96.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpfaapb935.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpfaapb935.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpc6ec8dm4.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpc6ec8dm4.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp78xd8rhg.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp78xd8rhg.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpgmm1h0hw.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpgmm1h0hw.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpatcy4et5.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpatcy4et5.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwvazyajw.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpwvazyajw.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptgjotljb.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmptgjotljb.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp00egme3q.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp00egme3q.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmppuhdvus_.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmppuhdvus_.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpqr7s8j6e.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpqr7s8j6e.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp8g9oet_r.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp8g9oet_r.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp__xypzww.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp__xypzww.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpje7j611f.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpje7j611f.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpypr12r48.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpypr12r48.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp1oeijg7h.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp1oeijg7h.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbtd7pu4i.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpbtd7pu4i.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp_ww1cmcs.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpa7b3jcr4.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpa7b3jcr4.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpdhvfmd9e.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpdhvfmd9e.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpscuxw7rq.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpscuxw7rq.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpve315v4q.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpve315v4q.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp7hzlly26.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp7hzlly26.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptui7sqlo.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmptui7sqlo.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmphp5b63n2.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmphp5b63n2.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmprn6csvec.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmprn6csvec.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpio_hwdwv.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpio_hwdwv.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpixfm4tr0.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpixfm4tr0.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpc18h1ihn.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpc18h1ihn.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpg3w76zbt.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpg3w76zbt.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpotpcv1_8.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpotpcv1_8.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_juefp6i.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp_juefp6i.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptztilyt3.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmptztilyt3.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpc24yj3c8.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpc24yj3c8.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6olfyz40.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp6olfyz40.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmppcehskwt.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmppcehskwt.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpu2ayr2x3.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpu2ayr2x3.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp4gka1511.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_vw1lmwz.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp_vw1lmwz.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpi39vyijt.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpi39vyijt.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= 'A' && c <= 'Z' {\n    \
    \        sum += c - 'A' + 10;\n        } else {\n            sum += c;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp6vd1k0zd.rs:15:22\n\
    \   |\n15 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmp6vd1k0zd.rs:17:17\n \
    \  |\n17 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpczi7wab3.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpczi7wab3.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpf5vldvka.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpf5vldvka.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmprk88181u.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmprk88181u.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp2eksbgvb.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp2eksbgvb.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp7jb7_75s.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp7jb7_75s.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n    \
    \        sum += c - '0';\n        } else {\n            break;\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp5jqsc4up.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpve_yyxxc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpve_yyxxc.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpj8fw7bdn.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpj8fw7bdn.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp1oq6ierq.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp1oq6ierq.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpz9t_ble2.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpz9t_ble2.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp1qcjjg15.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmp1qcjjg15.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
