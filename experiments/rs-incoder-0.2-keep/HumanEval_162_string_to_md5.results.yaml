name: HumanEval_162_string_to_md5
language: rust
results:
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_base64().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd5ffw57a.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6bpt9ht1.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6bpt9ht1.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi2fga_p5.rs:7:18\n  |\n7 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpi2fga_p5.rs:8:5\n  |\n4 | fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n8 |     md5.to_owned()\n  |     ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n8 |     Some(md5.to_owned())\n  |     +++++              +\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"a\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    9\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"a\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"6\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    5\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"a\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    7\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"d\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"4\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    b\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"c\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"e\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    f\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"d\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"6\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    5\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"a\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    7\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"d\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"4\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    b\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"c\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"e\");\n    md5.push_str(&text.as_bytes());\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp70mi80h_.rs:11:18\n   |\n\
    11 |     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp70mi80h_.rs:13:18\n   |\n13 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp70mi80h_.rs:15:18\n   |\n15 |\
    \     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp70mi80h_.rs:17:18\n   |\n17 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp70mi80h_.rs:19:18\n   |\n19 |\
    \     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp70mi80h_.rs:21:18\n   |\n21 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp70mi80h_.rs:23:18\n   |\n23 |\
    \     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp70mi80h_.rs:25:18\n   |\n25 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n        "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(text);\n    md5.take_until(b'\\0')\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpumn8eaiq.rs:7:18\n  |\n7 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0599]: no method named\
    \ `take_until` found for struct `String` in the current scope\n --> /tmp/tmpumn8eaiq.rs:8:9\n\
    \  |\n8 |     md5.take_until(b'\\0')\n  |         ^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9dzx4b9g.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9dzx4b9g.rs:13:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_string()\n   |\
    \     ^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n  \
    \ = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_string())\n\
    \   |     +++++               +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1vreb0dt.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwepzzf68.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwepzzf68.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2_9407sz.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().unwrap().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpg9u6anlz.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(text);\n    md5.push(\"\
    )\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_463l23g.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_463l23g.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_463l23g.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n12 |     md5.push(')');\n\
    \   |              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_463l23g.rs:13:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(text);\n    md5.push(\"\
    )\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebqiiilp.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpebqiiilp.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpebqiiilp.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n12 |     md5.push(')');\n\
    \   |              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpebqiiilp.rs:13:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp48g6bbg0.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp48g6bbg0.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf9c7hi4_.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf9c7hi4_.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuw2kac69.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuw2kac69.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.finalize().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9hqx41lu.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1_suy3ig.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"$md5$\");\n    md5.push_str(text);\n  \
    \  md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkz6qi4lr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp741h11np.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1co9o4ca.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.finalize()\n        .map(|mut digest| digest.as_bytes().to_hex())\n\
    \        .ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_5nw3w7i.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    for c in text.chars() {\n        md5.push((c as u8).to_ascii_lowercase());\n\
    \    }\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm0egv01r.rs:10:18\n   |\n\
    10 |         md5.push((c as u8).to_ascii_lowercase());\n   |                 \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `u8`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpn12n64ff.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl92vfagm.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl92vfagm.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpjf4ejish.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpxbqq08_g.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptkhryeqs.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptkhryeqs.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpveomfrzg.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.result().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpehx06xxe.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpst9of24j.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    let mut md5_ctx = MD5::new();\n    md5_ctx.update(&text);\n\
    \    md5_ctx.digest(&mut md5);\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n  --> /tmp/tmpilhsocs_.rs:10:23\n\
    \   |\n10 |     let mut md5_ctx = MD5::new();\n   |                       ^^^\
    \ use of undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpx4vvcr00.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_base64().unwrap().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp0b7zbmbf.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf1715407.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf1715407.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu3s3bgan.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu3s3bgan.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbt7eezxo.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbt7eezxo.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_sz0o6vg.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().ok().map(|result|\
    \ result.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9d5mzeua.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpgla1lsdk.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8rhws6zr.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplri95n3x.rs:7:18\n  |\n7 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmplri95n3x.rs:8:5\n  |\n4 | fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n8 |     md5.to_owned()\n  |     ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n8 |     Some(md5.to_owned())\n  |     +++++              +\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpuisygbre.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(&text);\n    md5.push(\"\
    )\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_nxg9220.rs:9:14\n  |\n9 |\
    \     md5.push(\"MD5(\");\n  |              ^^^^^^ expected `char`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_nxg9220.rs:11:14\n   |\n11 |\
    \     md5.push(\")\");\n   |              ^^^ expected `char`, found `&str`\n\
    \   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n\
    11 |     md5.push(')');\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_nxg9220.rs:12:5\n   |\n4  | fn string_to_md5(text: String) ->\
    \ Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpyebpob28.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push(\"MD5\");\n    md5.push(\"\\0\");\n    md5.push(text.as_bytes());\n\
    \    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\
    \\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\"\
    );\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n \
    \   md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\
    \\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\"\
    );\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n \
    \   md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\
    \\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\"\
    );\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n \
    \   md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\
    \\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\"\
    );\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n \
    \   md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\
    \\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\"\
    );\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n \
    \   md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\
    \\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\");\n    md5.push(\"\\0\"\
    );\n    md5.push(\"\\0\");\n    \n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5\");\n   |              ^^^^^ expected `char`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:11:14\n   |\n11 |\
    \     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:12:14\n   |\n12 |\
    \     md5.push(text.as_bytes());\n   |              ^^^^^^^^^^^^^^^ expected `char`,\
    \ found `&[u8]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:13:14\n\
    \   |\n13 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:14:14\n\
    \   |\n14 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:15:14\n\
    \   |\n15 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:16:14\n\
    \   |\n16 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:17:14\n\
    \   |\n17 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:18:14\n\
    \   |\n18 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:19:14\n\
    \   |\n19 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:20:14\n\
    \   |\n20 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:21:14\n\
    \   |\n21 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:22:14\n\
    \   |\n22 |     md5.push(\"\\0\");\n   |              ^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbozpmbkx.rs:23:14\n\
    \   |\n23 |     md5.push(\"\\0\");\n   |              ^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_hex())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpm0jfdiij.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo295i4eo.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo295i4eo.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp840cs61z.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphlwl6q9w.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphlwl6q9w.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_string()\n   |\
    \     ^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n  \
    \ = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_string())\n\
    \   |     +++++               +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpc1426lfw.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp728nrzge.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp728nrzge.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpl092so1g.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp00y05h8z.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpi44f_2m5.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd8pr_gn0.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd8pr_gn0.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmptp647bal.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_base64().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpvrb7o6xz.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n   \
    \ md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n\
    \    md5.push_str(\"\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmp0x2ishab.rs:53:69\n\
    \   |\n53 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmp0x2ishab.rs:54:104\n   |\n54\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    55 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13x945wu.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp13x945wu.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpmu_9um6l.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    let mut digest = digest::digest(&mut md5);\n    digest.update(&text);\n\
    \    digest.finalize();\n    Some(md5)\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzx0ity_z.rs:9:22\n  |\n9 |     let mut digest = digest::digest(&mut\
    \ md5);\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_base64().unwrap().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8t131vui.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpb626cg_4.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut digest\
    \ = digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n    digest.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpxdwrjt0y.rs:9:22\n  |\n9 |     let mut digest = digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp265nhotl.rs:5:19\n  |\n5 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::digest::Digest::new(\"md5\");\n    md5.update(text.as_bytes());\n  \
    \  md5.finalize().unwrap()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpy0y0mzkp.rs:8:19\n  |\n8 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8vj6m9m5.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcik0rvku.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcx3rl3nr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(&text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpv0h6zh4z.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuzb55s_8.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuzb55s_8.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n  \
    \  md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n \
    \   md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#');\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push('#');\n    md5.push_str(&text.as_bytes());\n    md5.push('#');\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push('#\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpt2um512o.rs:63:14\n\
    \   |\n63 |     md5.push('#\n   |              ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqtdudoxn.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqtdudoxn.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5gfoyhxy.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5gfoyhxy.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpo7c4kaa8.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    for c in text.chars() {\n        md5.push((c as u32).to_ascii_lowercase());\n\
    \    }\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for type `u32`\
    \ in the current scope\n  --> /tmp/tmpkd7ncmi9.rs:10:29\n   |\n10 |         md5.push((c\
    \ as u32).to_ascii_lowercase());\n   |                             ^^^^^^^^^^^^^^^^^^\
    \ method not found in `u32`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmph8v3fv76.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.finalize().unwrap()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpkmm06ifi.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfhaljjl5.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfhaljjl5.rs:13:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().map(|result|\
    \ {\n        let mut md5 = digest::Md5::new();\n        md5.input(result.as_bytes());\n\
    \        md5.result().to_string()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmps5te7vbp.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `digest`\n  --> /tmp/tmps5te7vbp.rs:12:23\n\
    \   |\n12 |         let mut md5 = digest::Md5::new();\n   |                  \
    \     ^^^^^^ use of undeclared crate or module `digest`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(&text.to_lowercase());\n\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfxakyx_5.rs:4:35\n  |\n4 |\
    \ fn string_to_md5(text: String) -> Option<String> {\n  |    -------------   \
    \               ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note:   expected enum `Option<String>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.push_str(\"a79dbc69b674cd4ec67a72c62\");\n \
    \   md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(\"3e25960a79dbc69b674cd4ec\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpbxiku_n8.rs:36:69\n\
    \   |\n36 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpbxiku_n8.rs:37:104\n   |\n37\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    38 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp632jj3ap.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp632jj3ap.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxah11afw.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxah11afw.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_string()\n   |\
    \     ^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n  \
    \ = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_string())\n\
    \   |     +++++               +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().unwrap().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpdkv1mrbd.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpfyf6u07f.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6uecuncj.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(text);\n    md5.take_until(b'\\0')\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppi5ph0u1.rs:7:18\n  |\n7 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0599]: no method named\
    \ `take_until` found for struct `String` in the current scope\n --> /tmp/tmppi5ph0u1.rs:8:9\n\
    \  |\n8 |     md5.take_until(b'\\0')\n  |         ^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpjw83ap9q.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    for c in text.chars() {\n        md5.push((c as u32).to_ascii_lowercase());\n\
    \    }\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for type `u32`\
    \ in the current scope\n  --> /tmp/tmpm3_fpycz.rs:10:29\n   |\n10 |         md5.push((c\
    \ as u32).to_ascii_lowercase());\n   |                             ^^^^^^^^^^^^^^^^^^\
    \ method not found in `u32`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzhxtqwyr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzhxtqwyr.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp7g4on_1l.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphf195wz_.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.result().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpixe54lz2.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push(\"$MD5$\");\n    md5.push_str(&text);\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&md5.hex());\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzpgi_jv2.rs:9:14\n  |\n9 |\
    \     md5.push(\"$MD5$\");\n  |              ^^^^^^^ expected `char`, found `&str`\n\
    \nerror[E0599]: no method named `hex` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpzpgi_jv2.rs:12:23\n   |\n12 |     md5.push_str(&md5.hex());\n\
    \   |                       ^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `hex` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpzpgi_jv2.rs:14:23\n   |\n14 |     md5.push_str(&md5.hex());\n   |  \
    \                     ^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `hex` found for struct `String` in the current scope\n  --> /tmp/tmpzpgi_jv2.rs:16:23\n\
    \   |\n16 |     md5.push_str(&md5.hex());\n   |                       ^^^ method\
    \ not found in `String`\n\nerror[E0599]: no method named `hex` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpzpgi_jv2.rs:18:23\n   |\n18 | \
    \    md5.push_str(&md5.hex());\n   |                       ^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `hex` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpzpgi_jv2.rs:20:23\n   |\n20 |     md5.push_str(&md5.hex());\n\
    \   |                       ^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `hex` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpzpgi_jv2.rs:22:23\n   |\n22 |     md5.push_str(&md5.hex());\n   |  \
    \                     ^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `hex` found for struct `String` in the current scope\n  --> /tmp/tmpzpgi_jv2.rs:24:23\n\
    \   |\n24 |     md5.push_str(&md5.hex());\n   |                       ^^^ method\
    \ not found in `String`\n\nerror[E0599]: no method named `hex` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpzpgi_jv2.rs:26:23\n   |\n26 | \
    \    md5.push_str(&md5.hex());\n   |                       ^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `hex` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpzpgi_jv2.rs:28:23\n   |\n28 |     md5.push_str(&md5.hex());\n\
    \   |             "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp7ppepw14.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy563hapu.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy563hapu.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpo4y20tcl.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqidtxosw.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqidtxosw.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp809a3fby.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp809a3fby.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeifbioli.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::digest::Digest::new(\"md5\");\n    md5.update(text.as_bytes());\n  \
    \  md5.finalize().unwrap()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpn183i_j6.rs:8:19\n  |\n8 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvuin5r5e.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvuin5r5e.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuitkoem1.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuitkoem1.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().ok().map(|result|\
    \ result.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp4ptvayfa.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbo5ho_7p.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0zw64oux.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0zw64oux.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push('#');\n    md5.push_str(&text.to_lowercase());\n    md5.push('#');\n\
    \    md5.push_str(&text.to_lowercase());\n    md5.push('#\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpo_dfjdda.rs:63:14\n\
    \   |\n63 |     md5.push('#\n   |              ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwn61ajrs.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwn61ajrs.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_16efjlo.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5076f8f2.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5076f8f2.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    for c in text.chars() {\n        md5.push((c as u32).to_ascii_lowercase());\n\
    \    }\n    md5.push(\"aaa\");\n    md5.push(\"bbb\");\n    md5.push(\"ccc\");\n\
    \    md5.push(\"ddd\");\n    md5.push(\"eee\");\n    md5.push(\"fff\");\n    md5.push(\"\
    ggg\");\n    md5.push(\"hhh\");\n    md5.push(\"iii\");\n    md5.push(\"jjj\"\
    );\n    md5.push(\"kkk\");\n    md5.push(\"lll\");\n    md5.push(\"mmm\");\n \
    \   md5.push(\"nnn\");\n    md5.push(\"ooo\");\n    md5.push(\"ppp\");\n    md5.push(\"\
    qqq\");\n    md5.push(\"rrr\");\n    md5.push(\"sss\");\n    md5.push(\"ttt\"\
    );\n    md5.push(\"uuu\");\n    md5.push(\"vvv\");\n    md5.push(\"www\");\n \
    \   md5.push(\"xxx\");\n    md5.push(\"yyy\");\n    md5.push(\"zzz\");\n    md5.push(\"\
    aaaa\");\n    md5.push(\"bbbb\");\n    md5.push(\"cccc\");\n    md5.push(\"dddd\"\
    );\n    md5.push(\"eeee\");\n    md5.push(\"ffff\");\n    md5.push(\"gggg\");\n\
    \    md5.push(\"hhhh\");\n    md5.push(\"iiii\");\n    md5.push(\"jjjj\");\n \
    \   md5.push(\"kkkk\");\n    md5.push(\"llll\");\n    md5.push(\"mmmm\");\n  \
    \  md5.push(\"nnnn\");\n    md5.push(\"oooo\");\n    md5.push(\"pppp\");\n   \
    \ md5.push(\"qqqq\");\n    md5.push(\"rrrr\");\n    md5.push(\"ssss\");\n    md5.push(\"\
    tttt\");\n    md5.push(\"uuuu\");\n    md5.push(\"vvvv\");\n    md5.push(\"wwww\"\
    );\n    md5.push(\"xxxx\");\n    md5.push(\"yyyy\");\n    md5.push(\"zzzz\");\n\
    \    md5.push(\"aaaaa\");\n    md5.push(\"bbbbb\");\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for type `u32`\
    \ in the current scope\n  --> /tmp/tmp64mdumq0.rs:11:29\n   |\n11 |         md5.push((c\
    \ as u32).to_ascii_lowercase());\n   |                             ^^^^^^^^^^^^^^^^^^\
    \ method not found in `u32`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:13:14\n\
    \   |\n13 |     md5.push(\"aaa\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:14:14\n\
    \   |\n14 |     md5.push(\"bbb\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:15:14\n\
    \   |\n15 |     md5.push(\"ccc\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:16:14\n\
    \   |\n16 |     md5.push(\"ddd\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:17:14\n\
    \   |\n17 |     md5.push(\"eee\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:18:14\n\
    \   |\n18 |     md5.push(\"fff\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:19:14\n\
    \   |\n19 |     md5.push(\"ggg\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:20:14\n\
    \   |\n20 |     md5.push(\"hhh\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:21:14\n\
    \   |\n21 |     md5.push(\"iii\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:22:14\n\
    \   |\n22 |     md5.push(\"jjj\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:23:14\n\
    \   |\n23 |     md5.push(\"kkk\");\n   |              ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64mdumq0.rs:24:14\n\
    \   |\n24 |     md5.push(\"lll\");\n   |              ^^^^^ expected `char`, found\
    \ `&s"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpkkx560qw.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq4__3u33.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq4__3u33.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpkjsvwrca.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_bytes().to_hex())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd4mqtrgu.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk4wl3f1t.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| result.to_string()).ok()\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpgwh3eyr8.rs:5:19\n  |\n5 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().map(|result|\
    \ result.to_string()).ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp18zbgt8w.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjg1_l48u.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk4xl_tug.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk4xl_tug.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_rodk0cs.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcfwo_4u2.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcfwo_4u2.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_string()\n   |\
    \     ^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n  \
    \ = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_string())\n\
    \   |     +++++               +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpn9uj7qrd.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplqn82zjh.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(&format!(\"{:x}\", md5::Md5::new(text).unwrap()));\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpwf2cuhj1.rs:9:35\n  |\n9 |     md5.push_str(&format!(\"{:x}\", md5::Md5::new(text).unwrap()));\n\
    \  |                                   ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpim3mj_qy.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpim3mj_qy.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpum5pvavx.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2hjh3_bt.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi3ad962r.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi3ad962r.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_gge024v.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_gge024v.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    let mut md5_hash = digest::digest(&mut md5);\n    md5_hash.update(&text).unwrap();\n\
    \    md5_hash.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpblswo25t.rs:9:24\n  |\n9 |     let mut md5_hash = digest::digest(&mut\
    \ md5);\n  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvceg_wue.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvceg_wue.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvp8ndxbu.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvp8ndxbu.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd5gq976s.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd5gq976s.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    let mut md5_hash = String::new();\n\n    for c in text.chars()\
    \ {\n        let mut byte = c.to_digit(16).unwrap();\n        md5.push((byte >>\
    \ 4).to_string());\n        md5.push((byte & 0x0f).to_string());\n    }\n\n  \
    \  md5_hash.push_str(&md5);\n    md5_hash.push_str(\":\");\n    md5_hash.push_str(&md5);\n\
    \n    Some(md5_hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp93f9f_uw.rs:14:18\n   |\n\
    14 |         md5.push((byte >> 4).to_string());\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp93f9f_uw.rs:15:18\n   |\n15 |         md5.push((byte & 0x0f).to_string());\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpo6lvy0un.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpibdvbq22.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push(\"3\");\n    md5.push(text.as_bytes());\n   \
    \ md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md5.push(\"\
    4\");\n    md5.push(\"0\");\n    md5.push(\"a\");\n    md5.push(\"5\");\n    md\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmpbo1msqom.rs:71:5\n\
    \   |\n71 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbo1msqom.rs:10:14\n \
    \  |\n10 |     md5.push(\"3\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n\
    \   |\n10 |     md5.push('3');\n   |              ~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbo1msqom.rs:11:14\n   |\n11 |     md5.push(text.as_bytes());\n\
    \   |              ^^^^^^^^^^^^^^^ expected `char`, found `&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbo1msqom.rs:12:14\n   |\n12 |     md5.push(\"\
    0\");\n   |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n12 |     md5.push('0');\n\
    \   |              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbo1msqom.rs:13:14\n\
    \   |\n13 |     md5.push(\"a\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n\
    \   |\n13 |     md5.push('a');\n   |              ~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbo1msqom.rs:14:14\n   |\n14 |     md5.push(\"5\");\n  \
    \ |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to\
    \ write a `char` literal, use single quotes\n   |\n14 |     md5.push('5');\n \
    \  |              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbo1msqom.rs:15:14\n\
    \   |\n15 |     md5.push(\"4\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n\
    \   |\n15 |     md5.push('4');\n   |              ~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbo1msqom.rs:16:14\n   |\n16 |     md5.push(\"0\");\n  \
    \ |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to\
    \ write a `char` literal, use single quotes\n   |\n16 |     md5.push('0');\n \
    \  |              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbo1msqom.rs:17:14\n\
    \   |\n17 |     md5.push(\"a\");\n   |              ^^^ expec"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnyle7xvj.rs:7:18\n  |\n7 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpnyle7xvj.rs:8:5\n  |\n4 | fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n8 |     md5.to_owned()\n  |     ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n8 |     Some(md5.to_owned())\n  |     +++++              +\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpmzoeubtw.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkzzttx99.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkzzttx99.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().map(|result|\
    \ result.to_string()).ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2_whbm8z.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5jcfjaga.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5jcfjaga.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2qw8qigx.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    let mut md5_hash = String::new();\n\n    for c in text.chars()\
    \ {\n        let mut byte = c.to_digit(16).unwrap();\n        md5.push_str(&mut\
    \ byte.to_string());\n        md5_hash.push_str(&mut byte.to_string());\n    }\n\
    \n    Some(md5_hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpbtmcb2vp.rs:13:39\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4si54wat.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4si54wat.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpx76vxs2f.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::digest::Digest::new(\"md5\");\n    md5.update(text.as_bytes());\n  \
    \  md5.finalize().unwrap()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmprvacajxf.rs:8:19\n  |\n8 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ved6qbb.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4ved6qbb.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpi84l06uu.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().ok().map(|result|\
    \ result.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpvgu3uyik.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7g5s2cfi.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7g5s2cfi.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdaatcebg.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdaatcebg.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw1tr8esm.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpiwcymc9o.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(&format!(\"{:x}\", md5::Md5::new(text).unwrap()));\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp525x3z3c.rs:9:35\n  |\n9 |     md5.push_str(&format!(\"{:x}\", md5::Md5::new(text).unwrap()));\n\
    \  |                                   ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk2jy181j.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.finish().into_bytes())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpjutezx20.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk4qdfdd1.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk4qdfdd1.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphera5505.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp25k0r_ak.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    for c in text.chars() {\n        md5.push((c as u32).to_ascii_lowercase());\n\
    \    }\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for type `u32`\
    \ in the current scope\n  --> /tmp/tmpg2zrbs2k.rs:10:29\n   |\n10 |         md5.push((c\
    \ as u32).to_ascii_lowercase());\n   |                             ^^^^^^^^^^^^^^^^^^\
    \ method not found in `u32`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::Digest::new(\"md5\");\n    digest.update(&text);\n    digest.result()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmptkc4r_q7.rs:8:22\n  |\n8 |     let mut digest = digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpev1utvge.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpyh0y96yq.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpshyzn2q1.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.finalize().unwrap()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphxtqoc6b.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n   \
    \ md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n   \
    \ md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n   \
    \ md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n   \
    \ md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n   \
    \ md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"\
    $\");\n    md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n   \
    \ md5.push_str(&text.to_lowercase());\n    md5.push_str(\"$\");\n    md5.push_str(&text.to_lowercase());\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&text.to_\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfwls90v_.rs:61:17\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                                         - closing delimiter possibly meant for\
    \ this\n...\n61 |     md5.push_str(&text.to_\n   |                 ^ unclosed\
    \ delimiter\n62 | }\n   | ^ mismatched closing delimiter\n\nerror[E0609]: no field\
    \ `to_` on type `String`\n  --> /tmp/tmpfwls90v_.rs:61:24\n   |\n61 |     md5.push_str(&text.to_\n\
    \   |                        ^^^ unknown field\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfwls90v_.rs:61:5\n   |\n4  |   fn string_to_md5(text: String) ->\
    \ Option<String> {\n   |                                     -------------- expected\
    \ `Option<String>` because of return type\n...\n61 | /     md5.push_str(&text.to_\n\
    62 | | }\n   | |_^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\nhelp: try adding an\
    \ expression at the end of the block\n   |\n62 ~ }\n63 +     None\n   |\n62 ~\
    \ }\n63 +     Some(())\n   |\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpbcttgyq9.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps9ko8yf1.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps9ko8yf1.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpdkyeoo04.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpabpog614.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp7lrv7ajs.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmperh6x7fi.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    let mut md5_hash = digest::digest(&mut md5);\n    md5_hash.update(&text);\n\
    \    md5_hash.finish()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpv1k1vdwe.rs:9:24\n  |\n9 |     let mut md5_hash = digest::digest(&mut\
    \ md5);\n  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmprm5s2x_t.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n\
    \    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp64ckidlr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp64ckidlr.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n12 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjgt6lk12.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjgt6lk12.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvn9_6n80.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvn9_6n80.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjytowgbk.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjytowgbk.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_677r7r9.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6knpwauy.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n    md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpywr2fa2r.rs:7:18\n  |\n7 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpywr2fa2r.rs:8:5\n  |\n4 | fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n8 |     md5.to_owned()\n  |     ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n8 |     Some(md5.to_owned())\n  |     +++++              +\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.update(&text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpp5t8ympa.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpbfrbslv0.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0l48924q.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0l48924q.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpjn0oc_cr.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcfkp7ys5.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9duivwjs.rs:8:22\n  |\n8 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1b7jfqnr.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvmsjfjz6.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvmsjfjz6.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp01eilui7.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp01eilui7.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::digest::Digest::new(\"md5\");\n    md5.update(text.as_bytes());\n  \
    \  md5.finalize().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpvv0b7bxg.rs:8:19\n  |\n8 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp96aaxgyt.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp96aaxgyt.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6w6uixfj.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmfzpm3n7.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmfzpm3n7.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptz6b11g.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpptz6b11g.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3e25960a79dbc69b674cd4ec67a72c62\");\n  \
    \  md5.push_str(text);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp68wxyicg.rs:10:18\n   |\n\
    10 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp68wxyicg.rs:11:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::digest::Digest::new(\"md5\");\n    md5.update(&text);\n    md5.finalize().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6o1zy1p7.rs:8:19\n  |\n8 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
