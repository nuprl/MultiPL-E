name: HumanEval_160_do_algebra
language: rust
results:
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpziyku0rj.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpziyku0rj.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpziyku0rj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpziyku0rj.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpziyku0rj.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpziyku0rj.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmpziyku0rj.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => {\n   \
    \             panic!(\"Invalid operator\");\n            }\n        }\n      \
    \  operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxfu6e_e7.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxfu6e_e7.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        let operator =\
    \ operator[operator_index];\n        let operand = operand[operand_index];\n \
    \       match operator {\n            \"+\" => {\n                result += operand;\n\
    \            }\n            \"-\" => {\n                result -= operand;\n \
    \           }\n            \"*\" => {\n                result *= operand;\n  \
    \          }\n            \"/\" => {\n                result /= operand;\n   \
    \         }\n            \"//\" => {\n                result /= operand;\n   \
    \         }\n            \"**\" => {\n                result **= operand;\n  \
    \          }\n            _ => {\n                panic!(\"Invalid operator\"\
    );\n            }\n        }\n        operator_index += 1;\n        operand_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_l0697r0.rs:43:25\n\
    \   |\n43 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_l0697r0.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_l0697r0.rs:30:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_l0697r0.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_l0697r0.rs:36:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_l0697r0.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_l0697r0.rs:42:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n42 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 7 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpwd1povyy.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwd1povyy.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwd1povyy.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwd1povyy.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwd1povyy.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        let operator =\
    \ operator[operator_index];\n        let operand = operand[operand_index];\n \
    \       match operator {\n            \"+\" => {\n                result = result\
    \ + operand;\n            }\n            \"-\" => {\n                result =\
    \ result - operand;\n            }\n            \"*\" => {\n                result\
    \ = result * operand;\n            }\n            \"/\" => {\n               \
    \ result = result / operand;\n            }\n            \"**\" => {\n       \
    \         result = result ** operand;\n            }\n            _ => {\n   \
    \             return -1;\n            }\n        }\n        operator_index +=\
    \ 1;\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxa10uilr.rs:27:13\n   |\n\
    26 |         match operator {\n   |               -------- this expression has\
    \ type `String`\n27 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa10uilr.rs:30:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa10uilr.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa10uilr.rs:36:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa10uilr.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpxa10uilr.rs:40:34\n   |\n40 |               \
    \  result = result ** operand;\n   |                                  ^^^^^^^^^\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplsyjs23s.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplsyjs23s.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplsyjs23s.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplsyjs23s.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplsyjs23s.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplsyjs23s.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpt2v3btrh.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt2v3btrh.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt2v3btrh.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt2v3btrh.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt2v3btrh.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpt2v3btrh.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpt2v3btrh.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        let mut op: isize\
    \ = 0;\n        let mut op2: isize = 0;\n        if i < operator.len() {\n   \
    \         op = operator[i].parse().unwrap();\n        }\n        if i < operand.len()\
    \ {\n            op2 = operand[i].parse().unwrap();\n        }\n        result\
    \ += op * op2;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `parse` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsac3insq.rs:29:30\n   |\n29 |             op2 = operand[i].parse().unwrap();\n\
    \   |                              ^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmeq6ex3c.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmeq6ex3c.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmeq6ex3c.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmeq6ex3c.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmeq6ex3c.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmeq6ex3c.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8poxzscq.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8poxzscq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8poxzscq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8poxzscq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8poxzscq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8poxzscq.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp7ke0le4p.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7ke0le4p.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ke0le4p.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ke0le4p.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7ke0le4p.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ke0le4p.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgrvzvaap.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgrvzvaap.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgrvzvaap.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgrvzvaap.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgrvzvaap.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp3pivg0cy.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3pivg0cy.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3pivg0cy.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3pivg0cy.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3pivg0cy.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxnx2ezoi.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxnx2ezoi.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxnx2ezoi.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxnx2ezoi.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxnx2ezoi.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxnx2ezoi.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpeqvpqtgw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeqvpqtgw.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeqvpqtgw.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeqvpqtgw.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeqvpqtgw.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `isize`\n  -->\
    \ /tmp/tmpeqvpqtgw.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `isize += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpbd_54zyl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbd_54zyl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbd_54zyl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbd_54zyl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbd_54zyl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbd_54zyl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe0l6tz0t.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe0l6tz0t.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0l6tz0t.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0l6tz0t.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe0l6tz0t.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvtwucith.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtwucith.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtwucith.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtwucith.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtwucith.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtwucith.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpvtwucith.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpr8sztx7d.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr8sztx7d.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr8sztx7d.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr8sztx7d.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr8sztx7d.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr8sztx7d.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb63r8ifg.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb63r8ifg.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb63r8ifg.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb63r8ifg.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb63r8ifg.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb63r8ifg.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5o00rwxu.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5o00rwxu.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5o00rwxu.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5o00rwxu.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5o00rwxu.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5o00rwxu.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    let mut operator =\
    \ operator[operator_index].to_string();\n    let mut operand = operand[operand_index].to_string();\n\
    \    while operand != \"\" {\n        match operator {\n            \"+\" => {\n\
    \                result += operand.parse::<isize>().unwrap();\n              \
    \  operator_index += 1;\n                operand_index += 1;\n               \
    \ operator = operator[operator_index].to_string();\n                operand =\
    \ operand[operand_index].to_string();\n            }\n            \"-\" => {\n\
    \                result -= operand.parse::<isize>().unwrap();\n              \
    \  operator_index += 1;\n                operand_index += 1;\n               \
    \ operator = operator[operator_index].to_string();\n                operand =\
    \ operand[operand_index].to_string();\n            }\n            \"*\" => {\n\
    \                result *= operand.parse::<isize>().unwrap();\n              \
    \  operator_index += 1;\n                operand_index += 1;\n               \
    \ operator = operator[operator_index].to_string();\n                operand =\
    \ operand[operand_index].to_string();\n            }\n            \"//\" => {\n\
    \                result /= operand.parse::<isize>().unwrap();\n              \
    \  operator_index += 1;\n                operand_index += 1;\n               \
    \ operator = operator[operator_index].to_string();\n                operand =\
    \ operand[operand_index].to_string();\n            }\n            \"**\" => {\n\
    \                result **= operand.parse::<isize>().unwrap();\n             \
    \   operator_index += 1;\n                operand_index += 1;\n              \
    \  operator = operator[operator_index].to_string();\n                operand =\
    \ operand[operand_index].to_string();\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", operator),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpkie2f8mh.rs:56:25\n\
    \   |\n56 |                 result **= operand.parse::<isize>().unwrap();\n  \
    \ |                         ^^ expected expression\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkie2f8mh.rs:27:13\n   |\n26 |         match operator {\n\
    \   |               -------- this expression has type `String`\n27 |         \
    \    \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkie2f8mh.rs:34:13\n   |\n26 |\
    \         match operator {\n   |               -------- this expression has type\
    \ `String`\n...\n34 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkie2f8mh.rs:41:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n41 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkie2f8mh.rs:48:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n48 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpkie2f8mh.rs:55:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n55 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpkie2f8mh.rs:31:28\n\
    \   |\n31 |                 operator = operator[operator_index].to_string();\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpw72ft5bb.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw72ft5bb.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw72ft5bb.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw72ft5bb.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw72ft5bb.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp990jxkh3.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp990jxkh3.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp990jxkh3.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp990jxkh3.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp990jxkh3.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp990jxkh3.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp94x_qaiq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp94x_qaiq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp94x_qaiq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp94x_qaiq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp94x_qaiq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuek2p464.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuek2p464.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuek2p464.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuek2p464.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuek2p464.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuek2p464.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpuek2p464.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxls0mf25.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxls0mf25.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxls0mf25.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxls0mf25.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxls0mf25.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpyx898_g_.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyx898_g_.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyx898_g_.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyx898_g_.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyx898_g_.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp4lzlkzmk.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4lzlkzmk.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4lzlkzmk.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4lzlkzmk.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4lzlkzmk.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4lzlkzmk.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmp4lzlkzmk.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxc8uqwr1.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc8uqwr1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxc8uqwr1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxc8uqwr1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxc8uqwr1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxc8uqwr1.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpyrm06kh0.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyrm06kh0.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyrm06kh0.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyrm06kh0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyrm06kh0.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmppb4bev0q.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppb4bev0q.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppb4bev0q.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppb4bev0q.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppb4bev0q.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppb4bev0q.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x % x).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x * x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn8m0_npg.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn8m0_npg.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn8m0_npg.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpn8m0_npg.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn8m0_npg.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn8m0_npg.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x * x).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpn8m0_npg.rs:32:12\n    |\n32  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpg923qmzh.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg923qmzh.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg923qmzh.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg923qmzh.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg923qmzh.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg923qmzh.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpjqi1i5_d.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjqi1i5_d.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjqi1i5_d.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjqi1i5_d.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjqi1i5_d.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpjqi1i5_d.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpjqi1i5_d.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6ib7gow0.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ib7gow0.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ib7gow0.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ib7gow0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ib7gow0.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmp6ib7gow0.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmp6ib7gow0.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for i in 0..operand.len()\
    \ {\n                    result += operand[i];\n                }\n          \
    \  }\n            \"-\" => {\n                for i in 0..operand.len() {\n  \
    \                  result -= operand[i];\n                }\n            }\n \
    \           \"*\" => {\n                for i in 0..operand.len() {\n        \
    \            result *= operand[i];\n                }\n            }\n       \
    \     \"/\" => {\n                for i in 0..operand.len() {\n              \
    \      result /= operand[i];\n                }\n            }\n            \"\
    **\" => {\n                for i in 0..operand.len() {\n                    result\
    \ **= operand[i];\n                }\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6lf0ykpn.rs:45:29\n\
    \   |\n45 |                     result **= operand[i];\n   |                 \
    \            ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6lf0ykpn.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6lf0ykpn.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6lf0ykpn.rs:33:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6lf0ykpn.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6lf0ykpn.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n        operand_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphuk5ettf.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphuk5ettf.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpdb6oclkj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdb6oclkj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdb6oclkj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdb6oclkj.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdb6oclkj.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzyjdo_yb.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzyjdo_yb.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyjdo_yb.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyjdo_yb.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzyjdo_yb.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyjdo_yb.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpd3erza8k.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd3erza8k.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3erza8k.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3erza8k.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd3erza8k.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmpd3erza8k.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmpd3erza8k.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator\"),\n     \
    \   }\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmacrybsh.rs:46:25\n\
    \   |\n46 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmacrybsh.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpoxmzq7q_.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoxmzq7q_.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxmzq7q_.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxmzq7q_.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoxmzq7q_.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxmzq7q_.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpz_p2oyha.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz_p2oyha.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz_p2oyha.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz_p2oyha.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz_p2oyha.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2umbbhkn.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2umbbhkn.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2umbbhkn.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2umbbhkn.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2umbbhkn.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmprmpg8r77.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprmpg8r77.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprmpg8r77.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprmpg8r77.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprmpg8r77.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmprmpg8r77.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmprmpg8r77.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpsafgc_j2.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsafgc_j2.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsafgc_j2.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsafgc_j2.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsafgc_j2.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpsafgc_j2.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x % x).sum()),\n          \
    \  \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9cmq3odo.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9cmq3odo.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9cmq3odo.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9cmq3odo.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9cmq3odo.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmp9cmq3odo.rs:31:12\n    |\n31  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp0azx4x7m.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0azx4x7m.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0azx4x7m.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0azx4x7m.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0azx4x7m.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0azx4x7m.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmp0azx4x7m.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmppsqosyfq.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppsqosyfq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppsqosyfq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppsqosyfq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppsqosyfq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppsqosyfq.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        let mut operand = operand[i];\n        for j in 0..operator.len()\
    \ {\n            let mut operator = operator[j];\n            match operator {\n\
    \                \"+\" => {\n                    result += operand;\n        \
    \        }\n                \"-\" => {\n                    result -= operand;\n\
    \                }\n                \"*\" => {\n                    result *=\
    \ operand;\n                }\n                \"/\" => {\n                  \
    \  result /= operand;\n                }\n                \"//\" => {\n      \
    \              result /= operand;\n                }\n                \"**\" =>\
    \ {\n                    result **= operand;\n                }\n            \
    \    _ => {}\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp0v0z9yqf.rs:42:29\n\
    \   |\n42 |                     result **= operand;\n   |                    \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0v0z9yqf.rs:26:17\n\
    \   |\n25 |             match operator {\n   |                   -------- this\
    \ expression has type `String`\n26 |                 \"+\" => {\n   |        \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0v0z9yqf.rs:29:17\n   |\n25 |             match operator\
    \ {\n   |                   -------- this expression has type `String`\n...\n\
    29 |                 \"-\" => {\n   |                 ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0v0z9yqf.rs:32:17\n\
    \   |\n25 |             match operator {\n   |                   -------- this\
    \ expression has type `String`\n...\n32 |                 \"*\" => {\n   |   \
    \              ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0v0z9yqf.rs:35:17\n   |\n25 |             match operator\
    \ {\n   |                   -------- this expression has type `String`\n...\n\
    35 |                 \"/\" => {\n   |                 ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0v0z9yqf.rs:38:17\n\
    \   |\n25 |             match operator {\n   |                   -------- this\
    \ expression has type `String`\n...\n38 |                 \"//\" => {\n   |  \
    \               ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0v0z9yqf.rs:41:17\n   |\n25 |             match operator\
    \ {\n   |                   -------- this expression has type `String`\n...\n\
    41 |                 \"**\" => {\n   |                 ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x65ix2.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x65ix2.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x65ix2.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x65ix2.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x65ix2.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmp_1x65ix2.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmp_1x65ix2.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"//\" => result /= operand[1],\n            \"**\" => result **=\
    \ operand[1],\n            _ => panic!(\"Invalid operator: {}\", op),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuz1ffsda.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuz1ffsda.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuz1ffsda.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuz1ffsda.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuz1ffsda.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand[1],\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpjb_eer4q.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjb_eer4q.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjb_eer4q.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjb_eer4q.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjb_eer4q.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjb_eer4q.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpjb_eer4q.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpoya1kv7u.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoya1kv7u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoya1kv7u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoya1kv7u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoya1kv7u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoya1kv7u.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfgslzpxk.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfgslzpxk.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfgslzpxk.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfgslzpxk.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfgslzpxk.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpfgslzpxk.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplddkr9g2.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplddkr9g2.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplddkr9g2.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplddkr9g2.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplddkr9g2.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmhwxixho.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmhwxixho.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhwxixho.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhwxixho.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmhwxixho.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.last(),\n            \"-\" => result = result - operand.last(),\n\
    \            \"*\" => result = result * operand.last(),\n            \"/\" =>\
    \ result = result / operand.last(),\n            \"//\" => result = result / operand.last(),\n\
    \            \"**\" => result = result ** operand.last(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdkvjcp86.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.last(),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdkvjcp86.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ = result + operand.last(),\n24 |             \"-\" => result = result - operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdkvjcp86.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result * operand.last(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdkvjcp86.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result = result / operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdkvjcp86.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result = result / operand.last(),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpdkvjcp86.rs:28:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n28 |             \"**\" => result\
    \ = result ** operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0369]: cannot add `Option<&isize>` to `Option<&isize>`\n\
    \  --> /tmp/tmpdkvjcp86.rs:23:36\n   |\n23 |             \"+\" => result = result\
    \ + operand.last(),\n   |                             ------ ^ --------------\
    \ Option<&isize>\n   |                             |\n   |                   \
    \          Option<&isize>\n\nerror[E0369]: cannot subtract `Option<&isize>` from\
    \ `O"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().rev().sum()),\n            \"\
    *\" => result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|x|\
    \ x != 0).sum()),\n            \"**\" => result.push(result.iter().map(|x| x **\
    \ 2).sum()),\n            _ => panic!(\"Unknown operator: {}\", op),\n       \
    \ }\n    }\n    result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxe4cnvp2.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxe4cnvp2.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxe4cnvp2.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxe4cnvp2.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x != 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxe4cnvp2.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]:\
    \ can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpxe4cnvp2.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x != 0).sum()),\n\
    \   |                                                            ^^ no implementation\
    \ for `&&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 othe"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxb17jey1.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxb17jey1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxb17jey1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxb17jey1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxb17jey1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxb17jey1.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpljlarkn5.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpljlarkn5.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpljlarkn5.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpljlarkn5.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpljlarkn5.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpljlarkn5.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpaprtwlod.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaprtwlod.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaprtwlod.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaprtwlod.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaprtwlod.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphiei611d.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphiei611d.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphiei611d.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphiei611d.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphiei611d.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphiei611d.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmphiei611d.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9a9mv891.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9a9mv891.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9a9mv891.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9a9mv891.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9a9mv891.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpu2rl6qkt.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu2rl6qkt.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2rl6qkt.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2rl6qkt.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu2rl6qkt.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2rl6qkt.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpo3voigkh.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo3voigkh.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3voigkh.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3voigkh.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo3voigkh.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.last(),\n            \"-\" => result = result - operand.last(),\n\
    \            \"*\" => result = result * operand.last(),\n            \"//\" =>\
    \ result = result / operand.last(),\n            \"**\" => result = result **\
    \ operand.last(),\n            _ => panic!(\"Invalid operator: {}\", op),\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf95z9oer.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.last(),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf95z9oer.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ = result + operand.last(),\n24 |             \"-\" => result = result - operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf95z9oer.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result * operand.last(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf95z9oer.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result = result / operand.last(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf95z9oer.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result = result ** operand.last(),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0369]: cannot add `Option<&isize>`\
    \ to `Option<&isize>`\n  --> /tmp/tmpf95z9oer.rs:23:36\n   |\n23 |           \
    \  \"+\" => result = result + operand.last(),\n   |                          \
    \   ------ ^ -------------- Option<&isize>\n   |                             |\n\
    \   |                             Option<&isize>\n\nerror[E0369]: cannot subtract\
    \ `Option<&isize>` from `Option<&isize>`\n  --> /tmp/tmpf95z9oer.rs:24:36\n  \
    \ |\n24 |             \"-\" => result = result - operand.last(),\n   |       \
    \                      ------ ^ -------------- Option<&isize>\n   |          \
    \                   |\n   |                             Option<&isize>\n\nerror"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpkjk3gwhm.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkjk3gwhm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjk3gwhm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjk3gwhm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkjk3gwhm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjk3gwhm.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        let mut operand = operand[i];\n        let mut operator\
    \ = operator[i];\n        while operand > 0 {\n            if operator == \"+\"\
    \ {\n                result += operand;\n                operand -= 1;\n     \
    \       } else if operator == \"-\" {\n                result -= operand;\n  \
    \              operand -= 1;\n            } else if operator == \"*\" {\n    \
    \            result *= operand;\n                operand -= 1;\n            }\
    \ else if operator == \"/\" {\n                if operand == 0 {\n           \
    \         panic!(\"Cannot divide by zero\");\n                }\n            \
    \    result /= operand;\n                operand -= 1;\n            } else if\
    \ operator == \"**\" {\n                if operand == 0 {\n                  \
    \  panic!(\"Cannot exponentiate by zero\");\n                }\n             \
    \   result **= operand;\n                operand -= 1;\n            } else {\n\
    \                panic!(\"Invalid operator\");\n            }\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpymcd77yg.rs:44:25\n\
    \   |\n44 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqakqp5qq.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqakqp5qq.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqakqp5qq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqakqp5qq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqakqp5qq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqakqp5qq.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"//\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => {\n   \
    \             panic!(\"Invalid operator\");\n            }\n        }\n      \
    \  operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpjc8fpszv.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjc8fpszv.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6db1htzr.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6db1htzr.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6db1htzr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6db1htzr.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6db1htzr.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6db1htzr.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp6db1htzr.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result //= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp3gj654ly.rs:28:13\n   |\n27 |             \"//\"\
    \ => result //= operand.last(),\n   |                  --       - expected one\
    \ of 8 possible tokens\n   |                  |\n   |                  while parsing\
    \ the `match` arm starting here\n28 |             \"**\" => result **= operand.last(),\n\
    \   |             ^^^^ unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp3gj654ly.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => result += operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3gj654ly.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n24 |             \"-\" => result -=\
    \ operand.last(),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3gj654ly.rs:25:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n25 |             \"*\" => result *= operand.last(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp3gj654ly.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result\
    \ /= operand.last(),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmp3gj654ly.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmp3gj654ly.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp4h_og6ht.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4h_og6ht.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h_og6ht.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h_og6ht.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4h_og6ht.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `isize`\n  -->\
    \ /tmp/tmp4h_og6ht.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `isize += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().rev().sum()),\n            \"\
    *\" => result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n            \"**\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).product()),\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n    }\n    result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_2snqc5.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpk_2snqc5.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_2snqc5.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_2snqc5.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk_2snqc5.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpk_2snqc5.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |                                                          &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n26 | \
    \            \"//\" => result.push(result.iter().filter(|x| *x % 2 == 0).sum()),\n\
    \   |                                           "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpa7f5zhud.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa7f5zhud.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa7f5zhud.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa7f5zhud.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa7f5zhud.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpa7f5zhud.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzvd0dqwt.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzvd0dqwt.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvd0dqwt.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvd0dqwt.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzvd0dqwt.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.pop(),\n     \
    \       \"-\" => result -= operand.pop(),\n            \"*\" => result *= operand.pop(),\n\
    \            \"/\" => result /= operand.pop(),\n            \"//\" => result /=\
    \ operand.pop(),\n            \"**\" => result **= operand.pop(),\n          \
    \  _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpro2qe090.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.pop(),\n   |            \
    \      --         ^^ expected expression\n   |                  |\n   |      \
    \            while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpro2qe090.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.pop(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpro2qe090.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.pop(),\n24 |         \
    \    \"-\" => result -= operand.pop(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpro2qe090.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.pop(),\n   |    \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpro2qe090.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.pop(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpro2qe090.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.pop(),\n   |   \
    \          ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Option<isize>` to `{integer}`\n  --> /tmp/tmpro2qe090.rs:23:27\n\
    \   |\n23 |             \"+\" => result += operand.pop(),\n   |              \
    \             ^^ no implementation for `{integer} += Option<isize>`\n   |\n  \
    \ = help: the trait `AddAssign<Option<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", operator[operator_index]),\n        }\n        operand_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmb31krk_.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmb31krk_.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"//\" => result /= operand[1],\n            \"**\" => result **=\
    \ operand[1],\n            _ => panic!(\"Invalid operator: {}\", op),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpme1tmhaq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpme1tmhaq.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme1tmhaq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme1tmhaq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpme1tmhaq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand[1],\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6dscak4q.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6dscak4q.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6dscak4q.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6dscak4q.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6dscak4q.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6dscak4q.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpyx1i5q4z.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyx1i5q4z.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyx1i5q4z.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyx1i5q4z.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyx1i5q4z.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6eu84cs7.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6eu84cs7.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6eu84cs7.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6eu84cs7.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6eu84cs7.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl4nlfsr7.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl4nlfsr7.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl4nlfsr7.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl4nlfsr7.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl4nlfsr7.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl4nlfsr7.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmpl4nlfsr7.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => {\n         \
    \       for i in 0..result.len() {\n                    result[i] += operand[i];\n\
    \                }\n            }\n            \"-\" => {\n                for\
    \ i in 0..result.len() {\n                    result[i] -= operand[i];\n     \
    \           }\n            }\n            \"*\" => {\n                for i in\
    \ 0..result.len() {\n                    result[i] *= operand[i];\n          \
    \      }\n            }\n            \"/\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] /= operand[i];\n                }\n       \
    \     }\n            \"//\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] /= operand[i];\n                }\n           \
    \ }\n            \"**\" => {\n                for i in 0..result.len() {\n   \
    \                 result[i] *= operand[i];\n                }\n            }\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:33:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj_xlrtot.rs:56:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n56 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to 7 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5sx2nvnj.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5sx2nvnj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5sx2nvnj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5sx2nvnj.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5sx2nvnj.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5sx2nvnj.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp604js6di.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp604js6di.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp604js6di.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp604js6di.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp604js6di.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmp604js6di.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmp604js6di.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => {\n                result\
    \ += operand[1];\n            }\n            \"-\" => {\n                result\
    \ -= operand[1];\n            }\n            \"*\" => {\n                result\
    \ *= operand[1];\n            }\n            \"/\" => {\n                result\
    \ /= operand[1];\n            }\n            \"//\" => {\n                result\
    \ /= operand[1];\n            }\n            \"**\" => {\n                result\
    \ **= operand[1];\n            }\n            _ => {\n                return -1;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpt_x4bsi0.rs:39:25\n\
    \   |\n39 |                 result **= operand[1];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_x4bsi0.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_x4bsi0.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_x4bsi0.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_x4bsi0.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_x4bsi0.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_x4bsi0.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x / x).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzo2u3lzn.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzo2u3lzn.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzo2u3lzn.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzo2u3lzn.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x / x).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzo2u3lzn.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzo2u3lzn.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpzo2u3lzn.rs:32:12\n    |\n32  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterato"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmptc_n90xh.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptc_n90xh.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptc_n90xh.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptc_n90xh.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptc_n90xh.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptc_n90xh.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmptc_n90xh.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand.iter().map(|x| operator[i].parse::<isize>().unwrap()).sum();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpzkuwykdb.rs:22:16\n\
    \   |\n22 |         result *= operand.iter().map(|x| operator[i].parse::<isize>().unwrap()).sum();\n\
    \   |                ^^ cannot infer type\n   |\nhelp: consider specifying the\
    \ type argument in the method call\n   |\n22 |         result *= operand.iter().map(|x|\
    \ operator[i].parse::<isize>().unwrap()).sum::<S>();\n   |                   \
    \                                                                 +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpkszlj6cf.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkszlj6cf.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkszlj6cf.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkszlj6cf.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkszlj6cf.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpkszlj6cf.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpkszlj6cf.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpglks5ekl.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpglks5ekl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpglks5ekl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpglks5ekl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpglks5ekl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.pop(),\n     \
    \       \"-\" => result -= operand.pop(),\n            \"*\" => result *= operand.pop(),\n\
    \            \"//\" => result /= operand.pop(),\n            \"**\" => result\
    \ **= operand.pop(),\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp16ndu9ud.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.pop(),\n   |            \
    \      --         ^^ expected expression\n   |                  |\n   |      \
    \            while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp16ndu9ud.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.pop(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp16ndu9ud.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.pop(),\n24 |         \
    \    \"-\" => result -= operand.pop(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp16ndu9ud.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.pop(),\n   |    \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp16ndu9ud.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.pop(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Option<isize>` to `{integer}`\n\
    \  --> /tmp/tmp16ndu9ud.rs:23:27\n   |\n23 |             \"+\" => result += operand.pop(),\n\
    \   |                           ^^ no implementation for `{integer} += Option<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Option<isize>>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n       "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9mi4laoo.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9mi4laoo.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9mi4laoo.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9mi4laoo.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9mi4laoo.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp59nbuor8.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp59nbuor8.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp59nbuor8.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp59nbuor8.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp59nbuor8.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp59nbuor8.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp59nbuor8.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpeiih24lv.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeiih24lv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeiih24lv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeiih24lv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeiih24lv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuq2_9j5g.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuq2_9j5g.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuq2_9j5g.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuq2_9j5g.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuq2_9j5g.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuq2_9j5g.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphav0um2z.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphav0um2z.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphav0um2z.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphav0um2z.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphav0um2z.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpq4y0xsqe.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq4y0xsqe.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq4y0xsqe.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq4y0xsqe.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq4y0xsqe.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq4y0xsqe.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzc11zqz8.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzc11zqz8.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzc11zqz8.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzc11zqz8.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzc11zqz8.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzc11zqz8.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpbb6bnddu.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbb6bnddu.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbb6bnddu.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbb6bnddu.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbb6bnddu.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpajvzy6hq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpajvzy6hq.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpajvzy6hq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpajvzy6hq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpajvzy6hq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpajvzy6hq.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgtr8mnfq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgtr8mnfq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgtr8mnfq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgtr8mnfq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgtr8mnfq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpollvz5tb.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpollvz5tb.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpollvz5tb.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpollvz5tb.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpollvz5tb.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpollvz5tb.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxjwm2i3p.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxjwm2i3p.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxjwm2i3p.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxjwm2i3p.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxjwm2i3p.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxjwm2i3p.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2g520ojp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2g520ojp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2g520ojp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2g520ojp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2g520ojp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2g520ojp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 1..operand.len() {\n        let mut temp: isize = 0;\n        for j in 0..operator.len()\
    \ {\n            temp = temp + operand[i] - operator[j] * operand[i - j];\n  \
    \      }\n        result = temp;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `String` by `isize`\n  --> /tmp/tmp6ibyb2w3.rs:24:52\n\
    \   |\n24 |             temp = temp + operand[i] - operator[j] * operand[i - j];\n\
    \   |                                        ----------- ^ -------------- isize\n\
    \   |                                        |\n   |                         \
    \               String\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpv9i71ect.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv9i71ect.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv9i71ect.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv9i71ect.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv9i71ect.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_wv2abdx.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_wv2abdx.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wv2abdx.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wv2abdx.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_wv2abdx.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmp_wv2abdx.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmp_wv2abdx.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9z3gsf09.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9z3gsf09.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z3gsf09.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z3gsf09.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9z3gsf09.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z3gsf09.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().rev().sum()),\n            \"\
    *\" => result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|x|\
    \ x != 0).sum()),\n            \"**\" => result.push(result.iter().map(|x| x **\
    \ 2).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n       \
    \ }\n    }\n    result.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ag34xsu.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5ag34xsu.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5ag34xsu.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ag34xsu.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x != 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5ag34xsu.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]:\
    \ can't compare `&&isize` with `{integer}`\n  --> /tmp/tmp5ag34xsu.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x != 0).sum()),\n\
    \   |                                                            ^^ no implementation\
    \ for `&&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 othe"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7pfewjc.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj7pfewjc.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7pfewjc.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7pfewjc.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7pfewjc.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfift3dj3.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfift3dj3.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfift3dj3.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfift3dj3.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfift3dj3.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfift3dj3.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphjiund_w.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphjiund_w.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjiund_w.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjiund_w.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphjiund_w.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| x % 2 == 0).sum()),\n            \"\
    **\" => result.push(result.iter().filter(|x| x % 2 == 1).sum()),\n           \
    \ _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv_5ewndk.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv_5ewndk.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv_5ewndk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpv_5ewndk.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv_5ewndk.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 1).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpv_5ewndk.rs:24:62\n   |\n24 |  \
    \           \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n \
    \  |                                                              ^ expected `&&isize`,\
    \ found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpv_5ewndk.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |     "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_8med_4c.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_8med_4c.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_8med_4c.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_8med_4c.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_8med_4c.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_8med_4c.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.last(),\n            \"-\" => result = result - operand.last(),\n\
    \            \"*\" => result = result * operand.last(),\n            \"/\" =>\
    \ result = result / operand.last(),\n            \"//\" => result = result / operand.last(),\n\
    \            \"**\" => result = result ** operand.last(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp49kj0amx.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.last(),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp49kj0amx.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ = result + operand.last(),\n24 |             \"-\" => result = result - operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp49kj0amx.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result * operand.last(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49kj0amx.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result = result / operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp49kj0amx.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result = result / operand.last(),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp49kj0amx.rs:28:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n28 |             \"**\" => result\
    \ = result ** operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0369]: cannot add `Option<&isize>` to `Option<&isize>`\n\
    \  --> /tmp/tmp49kj0amx.rs:23:36\n   |\n23 |             \"+\" => result = result\
    \ + operand.last(),\n   |                             ------ ^ --------------\
    \ Option<&isize>\n   |                             |\n   |                   \
    \          Option<&isize>\n\nerror[E0369]: cannot subtract `Option<&isize>` from\
    \ `O"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand.iter().map(|x| operator[i]).sum();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpf1guoag5.rs:22:16\n\
    \   |\n22 |         result *= operand.iter().map(|x| operator[i]).sum();\n   |\
    \                ^^ cannot infer type\n   |\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n22 |         result *= operand.iter().map(|x|\
    \ operator[i]).sum::<S>();\n   |                                             \
    \             +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_wopn7sn.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_wopn7sn.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wopn7sn.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wopn7sn.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_wopn7sn.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpo35i5kc1.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo35i5kc1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo35i5kc1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo35i5kc1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo35i5kc1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo35i5kc1.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvta97q_v.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvta97q_v.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvta97q_v.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvta97q_v.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvta97q_v.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvta97q_v.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmpvta97q_v.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => {\n   \
    \             panic!(\"Invalid operator\");\n            }\n        }\n      \
    \  operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpif6_kqrr.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpif6_kqrr.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpyo4z2iii.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyo4z2iii.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyo4z2iii.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyo4z2iii.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyo4z2iii.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyo4z2iii.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 2;\n            }\n            \"-\" => {\n      \
    \          result -= operand[operand_index] * operand[operand_index + 1];\n  \
    \              operator_index += 2;\n                operand_index += 2;\n   \
    \         }\n            \"*\" => {\n                result *= operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 2;\n            }\n            \"/\" => {\n      \
    \          result /= operand[operand_index] * operand[operand_index + 1];\n  \
    \              operator_index += 2;\n                operand_index += 2;\n   \
    \         }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"**\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            _ => panic!(\"Invalid operator: {}\", operator[operator_index]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_smhgcax.rs:24:15\n   |\n\
    24 |         match operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.iter().sum(),\n\
    \            \"-\" => result -= operand.iter().sum(),\n            \"*\" => result\
    \ *= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp66fuyu5z.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp66fuyu5z.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp66fuyu5z.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp66fuyu5z.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp66fuyu5z.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpbabv2385.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbabv2385.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbabv2385.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbabv2385.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbabv2385.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpbabv2385.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpbabv2385.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmph5ssy4fq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph5ssy4fq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph5ssy4fq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph5ssy4fq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph5ssy4fq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        let operator =\
    \ operator[operator_index];\n        let operand = operand[operand_index];\n \
    \       match operator {\n            \"+\" => {\n                result = result\
    \ + operand;\n            }\n            \"-\" => {\n                result =\
    \ result - operand;\n            }\n            \"*\" => {\n                result\
    \ = result * operand;\n            }\n            \"/\" => {\n               \
    \ result = result / operand;\n            }\n            \"//\" => {\n       \
    \         result = result / operand;\n            }\n            \"**\" => {\n\
    \                result = result ** operand;\n            }\n            _ =>\
    \ {\n                return -1;\n            }\n        }\n        operator_index\
    \ += 1;\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiht0y6d7.rs:27:13\n   |\n\
    26 |         match operator {\n   |               -------- this expression has\
    \ type `String`\n27 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiht0y6d7.rs:30:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiht0y6d7.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiht0y6d7.rs:36:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiht0y6d7.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpiht0y6d7.rs:42:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n42 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpiht0y6d7.rs:43:34\n\
    \   |\n43 |                 result = result ** operand;\n   |                \
    \                  ^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqt7j_noq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqt7j_noq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqt7j_noq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqt7j_noq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqt7j_noq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpv_23q9lf.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv_23q9lf.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_23q9lf.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_23q9lf.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv_23q9lf.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_23q9lf.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmpv_23q9lf.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnqn6dp8x.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnqn6dp8x.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnqn6dp8x.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnqn6dp8x.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnqn6dp8x.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnqn6dp8x.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9hx91tgh.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9hx91tgh.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9hx91tgh.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9hx91tgh.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9hx91tgh.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9hx91tgh.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb61b3bgk.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb61b3bgk.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb61b3bgk.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb61b3bgk.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb61b3bgk.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpb61b3bgk.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpb61b3bgk.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5teyv9s1.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5teyv9s1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5teyv9s1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5teyv9s1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5teyv9s1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpjag1ze8j.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjag1ze8j.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjag1ze8j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjag1ze8j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjag1ze8j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjag1ze8j.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for i in 0..operator.len() {\n        if operator[i] == \"+\" {\n          \
    \  result[i] += operand[i];\n        } else if operator[i] == \"-\" {\n      \
    \      result[i] -= operand[i];\n        } else if operator[i] == \"*\" {\n  \
    \          result[i] *= operand[i];\n        } else if operator[i] == \"/\" {\n\
    \            result[i] /= operand[i];\n        } else if operator[i] == \"//\"\
    \ {\n            result[i] /= operand[i];\n            result[i] %= operand[i];\n\
    \        } else if operator[i] == \"**\" {\n            result[i] **= operand[i];\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzge0wams.rs:34:24\n\
    \   |\n34 |             result[i] **= operand[i];\n   |                      \
    \  ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzge0wams.rs:37:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n37 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmprcixpspe.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprcixpspe.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprcixpspe.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprcixpspe.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprcixpspe.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprcixpspe.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphco7m4d6.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphco7m4d6.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphco7m4d6.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphco7m4d6.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphco7m4d6.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphco7m4d6.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuxhp6886.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuxhp6886.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuxhp6886.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuxhp6886.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuxhp6886.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuxhp6886.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgppomhu6.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgppomhu6.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgppomhu6.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgppomhu6.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgppomhu6.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgppomhu6.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand.iter().filter(|&x|\
    \ x == operator[i]).count() as isize;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `String`\n  --> /tmp/tmpue424h8w.rs:22:48\n\
    \   |\n22 |         result *= operand.iter().filter(|&x| x == operator[i]).count()\
    \ as isize;\n   |                                                ^^ no implementation\
    \ for `&isize == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        match operator[i]\
    \ {\n            \"+\" => {\n                result += operand[i];\n         \
    \       i += 1;\n            }\n            \"-\" => {\n                result\
    \ -= operand[i];\n                i += 1;\n            }\n            \"*\" =>\
    \ {\n                result *= operand[i];\n                i += 1;\n        \
    \    }\n            \"/\" => {\n                if operand[i] == 0 {\n       \
    \             panic!(\"Cannot divide by zero\");\n                }\n        \
    \        result /= operand[i];\n                i += 1;\n            }\n     \
    \       \"**\" => {\n                result **= operand[i];\n                i\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator\"),\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp3o7fx069.rs:44:25\n\
    \   |\n44 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3o7fx069.rs:23:15\n\
    \   |\n23 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"//\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n        operand_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_53_33i2.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_53_33i2.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"//\" => result /= operand[1],\n            \"**\" => result **=\
    \ operand[1],\n            _ => panic!(\"Invalid operator: {}\", op),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnzfmnlup.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzfmnlup.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzfmnlup.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzfmnlup.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzfmnlup.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand[1],\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpjhfn3aad.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjhfn3aad.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhfn3aad.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhfn3aad.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjhfn3aad.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhfn3aad.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Unknown\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk3gzczeb.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk3gzczeb.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3gzczeb.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3gzczeb.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk3gzczeb.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `isize`\n  -->\
    \ /tmp/tmpk3gzczeb.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `isize += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02p93m3b.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp02p93m3b.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02p93m3b.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02p93m3b.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02p93m3b.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02p93m3b.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => {\n                result\
    \ += operand.iter().sum();\n            }\n            \"-\" => {\n          \
    \      result -= operand.iter().sum();\n            }\n            \"*\" => {\n\
    \                result *= operand.iter().sum();\n            }\n            \"\
    /\" => {\n                result /= operand.iter().sum();\n            }\n   \
    \         \"//\" => {\n                result /= operand.iter().sum();\n     \
    \       }\n            \"**\" => {\n                result **= operand.iter().sum();\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", op),\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp0nmv6ac5.rs:39:25\n\
    \   |\n39 |                 result **= operand.iter().sum();\n   |           \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0nmv6ac5.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => {\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0nmv6ac5.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0nmv6ac5.rs:29:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n29 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0nmv6ac5.rs:32:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n32 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0nmv6ac5.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0nmv6ac5.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuehlgnay.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuehlgnay.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuehlgnay.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuehlgnay.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuehlgnay.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuehlgnay.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpuehlgnay.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => {\n   \
    \             panic!(\"Invalid operator\");\n            }\n        }\n      \
    \  operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpg1xey7nw.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg1xey7nw.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpy8waijpk.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy8waijpk.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy8waijpk.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy8waijpk.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy8waijpk.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy8waijpk.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpc2mw1o5s.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc2mw1o5s.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc2mw1o5s.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc2mw1o5s.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc2mw1o5s.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc2mw1o5s.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpa_5140wr.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa_5140wr.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa_5140wr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa_5140wr.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa_5140wr.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `isize`\n  -->\
    \ /tmp/tmpa_5140wr.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `isize += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgqpzh6m0.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgqpzh6m0.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgqpzh6m0.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgqpzh6m0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgqpzh6m0.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk0mac8yi.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk0mac8yi.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk0mac8yi.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk0mac8yi.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk0mac8yi.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpk0mac8yi.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpk0mac8yi.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplzcawg4q.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplzcawg4q.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplzcawg4q.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplzcawg4q.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplzcawg4q.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplzcawg4q.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpborcilt0.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpborcilt0.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpborcilt0.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpborcilt0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpborcilt0.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl7mncnk9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl7mncnk9.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl7mncnk9.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl7mncnk9.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl7mncnk9.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl7mncnk9.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpl7mncnk9.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp43_cenqr.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp43_cenqr.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp43_cenqr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp43_cenqr.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp43_cenqr.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmp43_cenqr.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6ognge3g.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ognge3g.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ognge3g.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ognge3g.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ognge3g.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ognge3g.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmp6ognge3g.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpwqbf9zjg.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwqbf9zjg.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwqbf9zjg.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwqbf9zjg.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwqbf9zjg.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwqbf9zjg.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvt3qw9bs.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvt3qw9bs.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvt3qw9bs.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvt3qw9bs.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvt3qw9bs.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        let operator =\
    \ operator[operator_index];\n        let operand = operand[operand_index];\n \
    \       match operator {\n            \"+\" => {\n                result += operand;\n\
    \            }\n            \"-\" => {\n                result -= operand;\n \
    \           }\n            \"*\" => {\n                result *= operand;\n  \
    \          }\n            \"/\" => {\n                result /= operand;\n   \
    \         }\n            \"//\" => {\n                result /= operand;\n   \
    \         }\n            \"**\" => {\n                result **= operand;\n  \
    \          }\n            _ => panic!(\"Invalid operator: {}\", operator),\n \
    \       }\n        operator_index += 1;\n        operand_index += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe6sh6yrm.rs:43:25\n\
    \   |\n43 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6sh6yrm.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6sh6yrm.rs:30:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6sh6yrm.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6sh6yrm.rs:36:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6sh6yrm.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpe6sh6yrm.rs:42:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n42 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 7 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_s7g6369.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_s7g6369.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_s7g6369.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_s7g6369.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_s7g6369.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_s7g6369.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl09eft8d.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl09eft8d.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl09eft8d.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl09eft8d.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl09eft8d.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl09eft8d.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpypnvdjc1.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpypnvdjc1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpypnvdjc1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpypnvdjc1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpypnvdjc1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpypnvdjc1.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpntno4eol.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpntno4eol.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpntno4eol.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpntno4eol.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpntno4eol.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpntno4eol.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqf647p6p.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqf647p6p.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqf647p6p.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqf647p6p.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqf647p6p.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmcs3uck9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmcs3uck9.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmcs3uck9.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmcs3uck9.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmcs3uck9.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmcs3uck9.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        let mut temp: isize = 0;\n        for j in 0..operator.len()\
    \ {\n            temp = temp + operand[j] * operator[j].parse::<isize>().unwrap();\n\
    \        }\n        result = result + temp;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpa794duiq.rs:24:69\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 2;\n            }\n            \"-\" => {\n      \
    \          result -= operand[operand_index] * operand[operand_index + 1];\n  \
    \              operator_index += 2;\n                operand_index += 2;\n   \
    \         }\n            \"*\" => {\n                result *= operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 2;\n            }\n            \"//\" => {\n     \
    \           result /= operand[operand_index] * operand[operand_index + 1];\n \
    \               operator_index += 2;\n                operand_index += 2;\n  \
    \          }\n            \"**\" => {\n                result **= operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 2;\n            }\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxjd7m4hn.rs:46:25\n\
    \   |\n46 |                 result **= operand[operand_index] * operand[operand_index\
    \ + 1];\n   |                         ^^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxjd7m4hn.rs:24:15\n   |\n24 |         match\
    \ operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.pop(),\n     \
    \       \"-\" => result -= operand.pop(),\n            \"*\" => result *= operand.pop(),\n\
    \            \"/\" => result /= operand.pop(),\n            \"//\" => result /=\
    \ operand.pop(),\n            \"**\" => result **= operand.pop(),\n          \
    \  _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmprlfdmlt9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.pop(),\n   |            \
    \      --         ^^ expected expression\n   |                  |\n   |      \
    \            while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprlfdmlt9.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.pop(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprlfdmlt9.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.pop(),\n24 |         \
    \    \"-\" => result -= operand.pop(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprlfdmlt9.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.pop(),\n   |    \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprlfdmlt9.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.pop(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprlfdmlt9.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.pop(),\n   |   \
    \          ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Option<isize>` to `{integer}`\n  --> /tmp/tmprlfdmlt9.rs:23:27\n\
    \   |\n23 |             \"+\" => result += operand.pop(),\n   |              \
    \             ^^ no implementation for `{integer} += Option<isize>`\n   |\n  \
    \ = help: the trait `AddAssign<Option<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpi_9zyxz0.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi_9zyxz0.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi_9zyxz0.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi_9zyxz0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi_9zyxz0.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi_9zyxz0.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpaaq4poaa.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaaq4poaa.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaaq4poaa.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaaq4poaa.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaaq4poaa.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaaq4poaa.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_vg9l5cr.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_vg9l5cr.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_vg9l5cr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_vg9l5cr.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_vg9l5cr.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_vg9l5cr.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n  \
    \          \"*\" => result.push(result.iter().product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| x % 2 == 0).sum()),\n            \"\
    **\" => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n       \
    \     _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqz0o6f7c.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqz0o6f7c.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqz0o6f7c.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpqz0o6f7c.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqz0o6f7c.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqz0o6f7c.rs:24:61\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n \
    \  |                                                             ^ expected `&&isize`,\
    \ found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpqz0o6f7c.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |      "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmph8vd3jd3.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph8vd3jd3.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8vd3jd3.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8vd3jd3.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph8vd3jd3.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8vd3jd3.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_xg_1cpx.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_xg_1cpx.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_xg_1cpx.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_xg_1cpx.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_xg_1cpx.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmp_xg_1cpx.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_n83xd32.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_n83xd32.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_n83xd32.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_n83xd32.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_n83xd32.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_n83xd32.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n        operand_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp622omc97.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp622omc97.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpep863hfr.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpep863hfr.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpep863hfr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpep863hfr.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpep863hfr.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpep863hfr.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpep863hfr.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphlh4lx8e.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphlh4lx8e.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlh4lx8e.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlh4lx8e.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphlh4lx8e.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlh4lx8e.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmphlh4lx8e.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpu2tag0hi.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu2tag0hi.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2tag0hi.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2tag0hi.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu2tag0hi.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2tag0hi.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmptja_i_oy.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptja_i_oy.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptja_i_oy.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptja_i_oy.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptja_i_oy.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result.iter().map(|x|\
    \ x + &result[0]).collect::<Vec<_>>().sum(),\n            \"-\" => result = result.iter().map(|x|\
    \ x - &result[0]).collect::<Vec<_>>().sum(),\n            \"*\" => result = result.iter().map(|x|\
    \ x * &result[0]).collect::<Vec<_>>().sum(),\n            \"//\" => result = result.iter().map(|x|\
    \ x % &result[0]).collect::<Vec<_>>().sum(),\n            \"**\" => result = result.iter().map(|x|\
    \ x ** &result[0]).collect::<Vec<_>>().sum(),\n            _ => panic!(\"Unknown\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7wi92yu6.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result.iter().map(|x| x + &result[0]).collect::<Vec<_>>().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7wi92yu6.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result = result.iter().map(|x| x + &result[0]).collect::<Vec<_>>().sum(),\n\
    24 |             \"-\" => result = result.iter().map(|x| x - &result[0]).collect::<Vec<_>>().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7wi92yu6.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result.iter().map(|x| x * &result[0]).collect::<Vec<_>>().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7wi92yu6.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"//\" => result = result.iter().map(|x| x % &result[0]).collect::<Vec<_>>().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7wi92yu6.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result = result.iter().map(|x| x ** &result[0]).collect::<Vec<_>>().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmp7wi92yu6.rs:23:87\n    |\n23\
    \  |               \"+\" => result = result.iter().map(|x| x + &result[0]).collect::<Vec<_>>().sum(),\n\
    \    |                                                                       \
    \                  ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpra9j890w.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpra9j890w.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpra9j890w.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpra9j890w.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpra9j890w.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpra9j890w.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9p5y5hcp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9p5y5hcp.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9p5y5hcp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9p5y5hcp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9p5y5hcp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9p5y5hcp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmp9p5y5hcp.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"/\"\
    \ => result.push(result.iter().filter( |&x| x != 0 ).product()),\n           \
    \ \"//\" => result.push(result.iter().filter( |&x| x != 0 ).filter( |&x| x % 1\
    \ == 0 ).sum()),\n            \"**\" => result.push(result.iter().filter( |&x|\
    \ x != 0 ).filter( |&x| x % 1 == 0 ).product()),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result.last()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm4iet0aj.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpm4iet0aj.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm4iet0aj.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpm4iet0aj.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).product()),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm4iet0aj.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).filter( |&x| x % 1 == 0 ).sum()),\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm4iet0aj.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).filter( |&x| x % 1 == 0 ).product()),\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm4iet0aj.rs:24:63\n\
    \   |\n24 |             \"-\" => result.push(result.iter().filter( |&x| x < 0\
    \ ).sum()),\n   |                                                            \
    \   ^\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2pm3z_7o.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2pm3z_7o.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2pm3z_7o.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2pm3z_7o.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2pm3z_7o.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2pm3z_7o.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpo9403yp3.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo9403yp3.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo9403yp3.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo9403yp3.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo9403yp3.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n     \
    \       \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n         \
    \   \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprr6f4fev.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprr6f4fev.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprr6f4fev.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprr6f4fev.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprr6f4fev.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmprr6f4fev.rs:27:58\n   |\n\
    27 |             \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n\
    \   |                                                          ^^^\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmprr6f4fev.rs:31:12\n    |\n31\
    \  |       result.sum()\n    |              ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp3w649byv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3w649byv.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3w649byv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3w649byv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3w649byv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3w649byv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp3w649byv.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n        operand_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp4fzhezk5.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4fzhezk5.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgszi97kj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgszi97kj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgszi97kj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgszi97kj.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgszi97kj.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n     \
    \       \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n         \
    \   \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwx6ji4jd.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwx6ji4jd.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwx6ji4jd.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwx6ji4jd.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwx6ji4jd.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmpwx6ji4jd.rs:27:58\n   |\n\
    27 |             \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n\
    \   |                                                          ^^^\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpwx6ji4jd.rs:31:12\n    |\n31\
    \  |       result.sum()\n    |              ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp0d4_ytfp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0d4_ytfp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0d4_ytfp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0d4_ytfp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0d4_ytfp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0d4_ytfp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplqe18n8q.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplqe18n8q.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplqe18n8q.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplqe18n8q.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplqe18n8q.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplqe18n8q.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmplqe18n8q.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp7zh58o91.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7zh58o91.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7zh58o91.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7zh58o91.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7zh58o91.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
