name: HumanEval_105_by_length
language: rust
results:
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n\
    \                continue;\n            }\n            if arr[j] == 1 {\n    \
    \            result.push(\"One\");\n                break;\n            }\n  \
    \          if arr[j] == 2 {\n                result.push(\"Two\");\n         \
    \       break;\n            }\n            if arr[j] == 3 {\n                result.push(\"\
    Three\");\n                break;\n            }\n            if arr[j] == 4 {\n\
    \                result.push(\"Four\");\n                break;\n            }\n\
    \            if arr[j] == 5 {\n                result.push(\"Five\");\n      \
    \          break;\n            }\n            if arr[j] == 6 {\n             \
    \   result.push(\"Six\");\n                break;\n            }\n           \
    \ if arr[j] == 7 {\n                result.push(\"Seven\");\n                break;\n\
    \            }\n            if arr[j] == 8 {\n                result.push(\"Eight\"\
    );\n                break;\n            }\n            if arr[j] == 9 {\n    \
    \            result.push(\"Nine\");\n                break;\n            }\n \
    \           j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpolylrwif.rs:68:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    68 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_vec();\n    arr.sort_unstable();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    for i in arr {\n        let mut name = String::new();\n\
    \        if i <= 9 {\n            name.push_str(&\"One\".to_string());\n     \
    \   } else if i <= 99 {\n            name.push_str(&\"Two\".to_string());\n  \
    \      } else if i <= 999 {\n            name.push_str(&\"Three\".to_string());\n\
    \        } else if i <= 9999 {\n            name.push_str(&\"Four\".to_string());\n\
    \        } else if i <= 9999999 {\n            name.push_str(&\"Five\".to_string());\n\
    \        } else if i <= 999999999 {\n            name.push_str(&\"Six\".to_string());\n\
    \        } else if i <= 99999999999 {\n            name.push_str(&\"Seven\".to_string());\n\
    \        } else if i <= 999999999999999 {\n            name.push_str(&\"Eight\"\
    .to_string());\n        } else if i <= 999999999999999999 {\n            name.push_str(&\"\
    Nine\".to_string());\n        } else {\n            name.push_str(&\"Ten\".to_string());\n\
    \        }\n        result.push(name);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]`,\n\
    \ right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]`', /tmp/tmpo4k9r9an.rs:55:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut millions = vec![];\n\
    \    let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut\
    \ quadrillions = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions\
    \ = vec![];\n    let mut septillions = vec![];\n    let mut octillions = vec![];\n\
    \    let mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut\
    \ undecillions = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions\
    \ = vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut billions = vec![];\n\
    \    let mut millions = vec![];\n    let mut thousands = vec![];\n    let mut\
    \ hundreds = vec![];\n    let mut tens = vec![];\n    let mut ones = vec![];\n\
    \    let mut ten_thousands = vec![];\n    let mut hundred_thousands = vec![];\n\
    \    let mut thousand_thousands = vec![];\n    let mut million_millions = vec![];\n\
    \    let mut billion_millions = vec![];\n    let mut trillion_millions = vec![];\n\
    \    let mut quad\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk0pq_x1j.rs:64:17\n   |\n\
    64 |     let mut quad\n   |                 ^ help: add `;` here\n65 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk0pq_x1j.rs:17:34\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr.rev();\n    let mut counter\
    \ = 1;\n    let mut digits = vec![];\n    let mut ones = vec![];\n    let mut\
    \ twos = vec![];\n    let mut threes = vec![];\n    let mut fours = vec![];\n\
    \    let mut fives = vec![];\n    let mut sixes = vec![];\n    let mut sevens\
    \ = vec![];\n    let mut eights = vec![];\n    let mut nines = vec![];\n    let\
    \ mut tens = vec![];\n    let mut hundreds = vec![];\n    let mut thousands =\
    \ vec![];\n    let mut millions = vec![];\n    let mut billions = vec![];\n  \
    \  let mut trillions = vec![];\n    let mut quadrillions = vec![];\n    let mut\
    \ quintillions = vec![];\n    let mut sextillions = vec![];\n    let mut septillions\
    \ = vec![];\n    let mut octillions = vec![];\n    let mut nonillions = vec![];\n\
    \    let mut decillions = vec![];\n    let mut undecillions = vec![];\n    let\
    \ mut duodecillions = vec![];\n    let mut tredecillions = vec![];\n    let mut\
    \ quattuordecillions = vec![];\n    let mut quindecillions = vec![];\n    let\
    \ mut sexdecillions = vec![];\n    let mut septendecillions = vec![];\n    let\
    \ mut octodecillions = vec![];\n    let mut novemdecillions = vec![];\n    let\
    \ mut vigintillions = vec![];\n    let mut unvigintillions = vec![];\n    let\
    \ mut duovigintillions = vec![];\n    let mut trevigintillions = vec![];\n   \
    \ let mut quattuorvigintillions = vec![];\n    let mut quinvigintillions = vec![];\n\
    \    let mut sexvigintillions = vec![];\n    let mut septenvigintillions = vec![];\n\
    \    let mut oc\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvaj7znqw.rs:64:15\n   |\n\
    64 |     let mut oc\n   |               ^ help: add `;` here\n65 | }\n   | - unexpected\
    \ token\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpvaj7znqw.rs:22:28\n\
    \    |\n22  |       let mut reversed = arr.rev();\n    |                     \
    \         ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvaj7znqw.rs:17:34\n   |\n17 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |    ---------                     ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr.rev();\n    let mut i\
    \ = 0;\n    while i < reversed.len() {\n        let mut cur = reversed[i];\n \
    \       let mut j = 0;\n        while j < reversed.len() {\n            if cur\
    \ > reversed[j] {\n                cur = reversed[j];\n            }\n       \
    \     j += 1\n        }\n        result.push(format!(\"{}\", cur));\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpdz3jdfuq.rs:22:28\n\
    \    |\n22  |       let mut reversed = arr.rev();\n    |                     \
    \         ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len && arr[j] < 10 {\n            j = j + 1;\n        }\n        if j ==\
    \ i {\n            result.push(\"One\");\n            i = i + 1;\n        } else\
    \ {\n            result.push(\"Two\");\n            i = i + 1;\n        }\n  \
    \      while j < len && arr[j] > 9 {\n            result.push(\"Three\");\n  \
    \          j = j + 1;\n        }\n        if j == i {\n            result.push(\"\
    Four\");\n            i = i + 1;\n        } else {\n            result.push(\"\
    Five\");\n            i = i + 1;\n        }\n        while j < len && arr[j] >=\
    \ 10 {\n            result.push(\"Six\");\n            j = j + 1;\n        }\n\
    \        if j == i {\n            result.push(\"Seven\");\n            i = i +\
    \ 1;\n        } else {\n            result.push(\"Eight\");\n            i = i\
    \ + 1;\n        }\n        while j < len && arr[j] <= 9 {\n            result.push(\"\
    Nine\");\n            j = j + 1;\n        }\n        if j == i {\n           \
    \ result.push(\"Zero\");\n            i = i + 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3zfc3hc.rs:64:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    64 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr.rev();\n    let mut i\
    \ = 0;\n    while i < reversed.len() {\n        let mut j = i;\n        while\
    \ j < reversed.len() && reversed[j] >= 10 {\n            j = j + 1;\n        }\n\
    \        result.push(by_digit(reversed[i..j]));\n        i = j;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp91zdkk6g.rs:29:21\n\
    \   |\n29 |         result.push(by_digit(reversed[i..j]));\n   |             \
    \        ^^^^^^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmp91zdkk6g.rs:22:28\n    |\n22  |       let mut reversed\
    \ = arr.rev();\n    |                              ^^^ `Vec<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    let mut\
    \ result = vec![];\n    for i in arr {\n        let mut name = String::new();\n\
    \        name.push_str(&\"One\".to_string());\n        name.push_str(&\"Two\"\
    .to_string());\n        name.push_str(&\"Three\".to_string());\n        name.push_str(&\"\
    Four\".to_string());\n        name.push_str(&\"Five\".to_string());\n        name.push_str(&\"\
    Six\".to_string());\n        name.push_str(&\"Seven\".to_string());\n        name.push_str(&\"\
    Eight\".to_string());\n        name.push_str(&\"Nine\".to_string());\n       \
    \ name.push_str(&i.to_string());\n        result.push(name);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"OneTwoThreeFourFiveSixSevenEightNine8\", \"OneTwoThreeFourFiveSixSevenEightNine5\"\
    , \"OneTwoThreeFourFiveSixSevenEightNine4\", \"OneTwoThreeFourFiveSixSevenEightNine3\"\
    , \"OneTwoThreeFourFiveSixSevenEightNine2\", \"OneTwoThreeFourFiveSixSevenEightNine2\"\
    , \"OneTwoThreeFourFiveSixSevenEightNine1\", \"OneTwoThreeFourFiveSixSevenEightNine1\"\
    ]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]`', /tmp/tmp181nh589.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    sorted_arr.reverse();\n\
    \    let mut result = vec![];\n    for i in 0..sorted_arr.len() {\n        let\
    \ mut index = i;\n        while index > 0 && sorted_arr[index - 1] > sorted_arr[index]\
    \ {\n            index -= 1;\n        }\n        result.push(&names[sorted_arr[index]]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp6vsvzhy_.rs:30:22\n\
    \   |\n30 |         result.push(&names[sorted_arr[index]]);\n   |            \
    \          ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_vec();\n    arr.sort();\n    arr.reverse();\n\
    \    arr.iter().map(|x| {\n        match x {\n            1 => \"One\",\n    \
    \        2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\"\
    ,\n            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"\
    Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\",\n          \
    \  _ => panic!(\"The array has strange number: {}\", x),\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp0cjqk_6i.rs:34:8\n     |\n34 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut i = 0;\n        let mut j = len - 1;\n \
    \       while i < j {\n            if arr[i] < arr[j] {\n                result.push(by_name(arr[i]));\n\
    \                i += 1;\n            } else {\n                j -= 1;\n    \
    \        }\n        }\n        len = j;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp1yn_rlib.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[i]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    let mut reversed\
    \ = vec![];\n    let mut counter = vec![];\n    let mut counter2 = vec![];\n\n\
    \    for i in arr.iter() {\n        if i <= 9 {\n            counter.push(i);\n\
    \        } else {\n            counter2.push(i);\n        }\n    }\n\n    for\
    \ i in counter.iter() {\n        reversed.push((counter2.pop().unwrap() - i).to_string());\n\
    \    }\n\n    for i in reversed.iter() {\n        if let Some(index) = arr.iter().position(|&x|\
    \ x == i) {\n            arr[index] = String::from(\"One\");\n        }\n    }\n\
    \n    arr\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphrnmqnuc.rs:28:17\n   |\n\
    28 |         if i <= 9 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&9`\n\nerror[E0277]: cannot subtract `&&isize` from\
    \ `&isize`\n  --> /tmp/tmphrnmqnuc.rs:36:48\n   |\n36 |         reversed.push((counter2.pop().unwrap()\
    \ - i).to_string());\n   |                                                ^ no\
    \ implementation for `&isize - &&isize`\n   |\n   = help: the trait `Sub<&&isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrnmqnuc.rs:40:60\n\
    \   |\n40 |         if let Some(index) = arr.iter().position(|&x| x == i) {\n\
    \   |                                                            ^ expected `isize`,\
    \ found reference\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\nhelp: consider dereferencing the borrow\n   |\n40 |        \
    \ if let Some(index) = arr.iter().position(|&x| x == *i) {\n   |             \
    \                                               +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphrnmqnuc.rs:41:26\n   |\n41 |             arr[index] =\
    \ String::from(\"One\");\n   |             ----------   ^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found struct `String`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrnmqnuc.rs:45:5\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n45 |     arr\n   |     ^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected stru"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut result = vec![];\n    let mut reversed = vec![];\n\n    let mut i\
    \ = 0;\n    while i < arr.len() {\n        let mut j = i;\n        while j < arr.len()\
    \ {\n            if arr[j] < 10 {\n                result.push(\"One\");\n   \
    \             reversed.push(arr[j]);\n                j += 1;\n            } else\
    \ {\n                result.push(\"Two\");\n                reversed.push(arr[j]);\n\
    \                j += 1;\n            }\n        }\n        i += 1;\n    }\n\n\
    \    for i in reversed.iter().rev() {\n        result.push(i);\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0a9b_3s.rs:43:21\n   |\n\
    43 |         result.push(i);\n   |                     ^ expected `str`, found\
    \ `isize`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl0a9b_3s.rs:46:5\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n46 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut i = 0;\n   \
    \ while i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n\
    \            if arr[j] < 10 {\n                result.push(\"One\");\n       \
    \         break;\n            }\n            if arr[j] < 100 {\n             \
    \   result.push(\"Two\");\n                break;\n            }\n           \
    \ if arr[j] < 1000 {\n                result.push(\"Three\");\n              \
    \  break;\n            }\n            if arr[j] < 10000 {\n                result.push(\"\
    Four\");\n                break;\n            }\n            if arr[j] < 100000\
    \ {\n                result.push(\"Five\");\n                break;\n        \
    \    }\n            if arr[j] < 1000000 {\n                result.push(\"Six\"\
    );\n                break;\n            }\n            if arr[j] < 10000000 {\n\
    \                result.push(\"Seven\");\n                break;\n           \
    \ }\n            if arr[j] < 100000000 {\n                result.push(\"Eight\"\
    );\n                break;\n            }\n            if arr[j] < 1000000000\
    \ {\n                result.push(\"Nine\");\n                break;\n        \
    \    }\n            if arr[j] < 10000000000 {\n                result.push(\"\
    Ten\");\n                break;\n            }\n            if arr[j] < 100000000000\
    \ {\n                result.push(\"Eleven\");\n                break;\n      \
    \      }\n            if arr[j] < 1000000000000 {\n                result.push(\"\
    Twelve\");\n                break;\n            }\n            if arr[j] < 10000000000000\
    \ {\n                result.push(\"Thirteen\");\n                break;\n    \
    \        }\n            if arr[j] < 100000000000000 {\n                result.push(\"\
    Fourteen\");\n                break;\n            }\n            if arr[j] < 1000000000000000\
    \ {\n                result.push(\"Fifteen\");\n                break;\n     \
    \       }\n            if arr[j] < 10000000000000000 {\n                result.push(\"\
    Sixteen\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Seventeen\");\n                break;\n   \
    \         }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Eighteen\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Nineteen\");\n                break;\n    \
    \        }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Twenty one\");\n                break;\n  \
    \          }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty two\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Twenty three\");\n     \
    \           break;\n            }\n            if arr[j] < 10000000000000000\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpxahkps7y.rs:125:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n20  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n21  | \
    \        let mut j = i;\n22  |         while j < arr.len() {\n    |          \
    \                   - this delimiter might not be properly closed...\n...\n116\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n125\
    \ | }\n    |   ^\n\nerror: expected `{`, found `}`\n   --> /tmp/tmpxahkps7y.rs:116:1\n\
    \    |\n115 |             if arr[j] < 10000000000000000\n    |             --\
    \ this `if` expression has a condition, but no block\n116 | }\n    | ^ expected\
    \ `{`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpxahkps7y.rs:20:5\n   \
    \ |\n17  |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n20  | /     while i < arr.len() {\n21  | |         let mut j = i;\n\
    22  | |         while j < arr.len() {\n23  | |             if arr[j] < 10 {\n\
    ...   |\n124 | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n125 | | }\n    |\
    \ |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<String>`\n\
    \            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut digits = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 10 {\n            digits.push(arr[i]);\n        } else {\n\
    \            reversed.push(arr[i] - 10);\n            digits.push(arr[i] - 10);\n\
    \        }\n        i += 1;\n    }\n    let mut j = 0;\n    while j < digits.len()\
    \ {\n        let mut i = 0;\n        while i < reversed.len() {\n            if\
    \ reversed[i] == digits[j] {\n                result.push(&names[i * 2]);\n  \
    \              i += 1;\n            } else {\n                break;\n       \
    \     }\n        }\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp3rhyf8x8.rs:36:30\n\
    \   |\n36 |                 result.push(&names[i * 2]);\n   |                \
    \              ^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 10 {\n                result.push(\"One\"\
    );\n                break;\n            }\n            if arr[j] < 100 {\n   \
    \             result.push(\"Two\");\n                break;\n            }\n \
    \           if arr[j] < 1000 {\n                result.push(\"Three\");\n    \
    \            break;\n            }\n            if arr[j] < 10000 {\n        \
    \        result.push(\"Four\");\n                break;\n            }\n     \
    \       if arr[j] < 100000 {\n                result.push(\"Five\");\n       \
    \         break;\n            }\n            if arr[j] < 1000000 {\n         \
    \       result.push(\"Six\");\n                break;\n            }\n       \
    \     if arr[j] < 10000000 {\n                result.push(\"Seven\");\n      \
    \          break;\n            }\n            if arr[j] < 100000000 {\n      \
    \          result.push(\"Eight\");\n                break;\n            }\n  \
    \          if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa6gbbs58.rs:64:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    64 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    reversed.push(sorted_arr[0]);\n\
    \    sorted_arr.sort_by_key(|x| x.cmp(&reversed[0]));\n    for i in 1..sorted_arr.len()\
    \ {\n        let mut j = i;\n        while j > 0 && sorted_arr[j - 1] > sorted_arr[j]\
    \ {\n            reversed.push(sorted_arr[j]);\n            j -= 1;\n        }\n\
    \        reversed.push(sorted_arr[j]);\n    }\n    for i in 0..(reversed.len()\
    \ - 1) {\n        result.push(by_digit(reversed[i]));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpxc3y19z_.rs:36:21\n\
    \   |\n36 |         result.push(by_digit(reversed[i]));\n   |                \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n   \
    \         if arr[j] < 10 {\n                result.push(\"One\");\n          \
    \      break;\n            }\n            if arr[j] < 100 {\n                result.push(\"\
    Two\");\n                break;\n            }\n            if arr[j] < 1000 {\n\
    \                result.push(\"Three\");\n                break;\n           \
    \ }\n            if arr[j] < 10000 {\n                result.push(\"Four\");\n\
    \                break;\n            }\n            if arr[j] < 100000 {\n   \
    \             result.push(\"Five\");\n                break;\n            }\n\
    \            if arr[j] < 1000000 {\n                result.push(\"Six\");\n  \
    \              break;\n            }\n            if arr[j] < 10000000 {\n   \
    \             result.push(\"Seven\");\n                break;\n            }\n\
    \            if arr[j] < 100000000 {\n                result.push(\"Eight\");\n\
    \                break;\n            }\n            if arr[j] < 1000000000 {\n\
    \                result.push(\"Nine\");\n                break;\n            }\n\
    \            j += 1\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12xhqatq.rs:63:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    63 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n            continue;\n        }\n        let mut j\
    \ = i;\n        while j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] < arr[i] {\n                result.push(by_length(arr.iter().cloned().skip(j).take(1).collect()));\n\
    \                break;\n            }\n            j += 1;\n        }\n     \
    \   i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc91hu729.rs:40:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    40 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut cur = arr.len() - 1;\n        while cur\
    \ >= 0 {\n            if arr[cur] > arr[cur + 1] {\n                swap(&mut\
    \ arr[cur], &mut arr[cur + 1]);\n            }\n            cur -= 1;\n      \
    \  }\n        len -= 1;\n        result.push(format!(\"{}\", arr[len]));\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpqsfjnn_h.rs:24:17\n\
    \   |\n24 |                 swap(&mut arr[cur], &mut arr[cur + 1]);\n   |    \
    \             ^^^^ not found in this scope\n   |\nhelp: consider importing one\
    \ of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reverse_arr\
    \ = Vec::new();\n    let mut reverse_arr_size = arr.len();\n    let mut i = 0;\n\
    \    while i < reverse_arr_size {\n        let mut j = i;\n        while j < reverse_arr_size\
    \ && arr[j] < 10 {\n            j += 1;\n        }\n        reverse_arr.push(arr[..j]);\n\
    \        i = j;\n    }\n    reverse_arr.reverse();\n    for i in reverse_arr {\n\
    \        result.push(by_digit(i));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpz1yk4aam.rs:32:21\n\
    \   |\n32 |         result.push(by_digit(i));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n   --> /tmp/tmpz1yk4aam.rs:27:26\n    |\n\
    27  |         reverse_arr.push(arr[..j]);\n    |                     ---- ^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |                     |\n   \
    \ |                     required by a bound introduced by this call\n    |\n \
    \   = help: the trait `Sized` is not implemented for `[isize]`\nnote: required\
    \ by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for values of type\
    \ `[isize]` cannot be known at compilation time\n   --> /tmp/tmpz1yk4aam.rs:19:27\n\
    \    |\n19  |     let mut reverse_arr = Vec::new();\n    |                   \
    \        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help:\
    \ the trait `Sized` is not implemented for `[isize]`\nnote: required by a bound\
    \ in `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `[isize]` cannot\
    \ be known at compilation time\n   --> /tmp/tmpz1yk4aam.rs:19:27\n    |\n19  |\
    \     let mut reverse_arr = Vec::new();\n    |                           ^^^ doesn't\
    \ have a size known at compile-time\n    |\n    = help: the trait `Sized` is not\
    \ implemented for `[isize]`\nnote: required by a bound in `Vec`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `Vec` in the current scope\n  -->\
    \ /tmp/tmpz1yk4aam.rs:30:17\n   |\n30 |     reverse_arr.reverse();\n   |     \
    \            ^^^^^^^ method not found in `Vec<[isize]>`\n\nerror[E0277]: the trait\
    \ bound `Vec<[isize]>: IntoIterator` is not satisfied\n  --> /tmp/tmpz1yk4aam.rs:31:14\n\
    \   |\n31 |     for i in reverse_arr {\n   |              ^^^^^^^^^^^ the trait\
    \ `IntoIterator` is not implemented for `Vec<[isize]>`\n   |\n   = help: the following\
    \ other types implement trait `IntoIterator`:\n             &'a Vec<T, A>\n  \
    \           &'a mut Vec<T, A>\n             Vec<T, A>\n\nerror[E0277]: the size\
    \ for values of type `[isize]"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len && arr[j] < 10 {\n            j += 1\n        }\n        if j == len\
    \ {\n            break;\n        }\n        let mut k = j;\n        while k <\
    \ len && arr[k] > 9 {\n            k += 1\n        }\n        if k == len {\n\
    \            break;\n        }\n        result.push(&arr[..k].iter().map(|x| &names[x\
    \ as usize]).collect::<Vec<_>>().join(\"\"));\n        i = k;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmplacza17h.rs:36:47\n\
    \   |\n36 |         result.push(&arr[..k].iter().map(|x| &names[x as usize]).collect::<Vec<_>>().join(\"\
    \"));\n   |                                               ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplacza17h.rs:39:5\n  \
    \ |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |               \
    \                   ----------- expected `Vec<String>` because of return type\n\
    ...\n39 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmplacza17h.rs:36:53\n\
    \   |\n36 |         result.push(&arr[..k].iter().map(|x| &names[x as usize]).collect::<Vec<_>>().join(\"\
    \"));\n   |                                                     -^^^^^^^^^\n \
    \  |                                                     |\n   |             \
    \                                        cannot cast `&isize` as `usize`\n   |\
    \                                                     help: dereference the expression:\
    \ `*x`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425, E0606.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] > 9 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n            break;\n        }\n        let mut j = i;\n\
    \        while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n\
    \        let mut k = j;\n        while k < arr.len() && arr[k] > 9 {\n       \
    \     k += 1\n        }\n        let mut l = k;\n        while l < arr.len() &&\
    \ arr[l] < 10 {\n            l += 1\n        }\n        let mut m = l;\n     \
    \   while m < arr.len() && arr[m] > 9 {\n            m += 1\n        }\n     \
    \   let mut n = m;\n        while n < arr.len() && arr[n] < 10 {\n           \
    \ n += 1\n        }\n        let mut o = n;\n        while o < arr.len() && arr[o]\
    \ > 9 {\n            o += 1\n        }\n        let mut p = o;\n        while\
    \ p < arr.len() && arr[p] > 9 {\n            p += 1\n        }\n        let mut\
    \ q = p;\n        while q < arr.len() && arr[q] < 10 {\n            q += 1\n \
    \       }\n        let mut r = q;\n        while r < arr.len() && arr[r] > 9 {\n\
    \            r += 1\n        }\n        let mut s = r;\n        while s < arr.len()\
    \ && arr[s] < 10 {\n            s += 1\n        }\n        let mut t = s;\n  \
    \      while t < arr.len() && arr[t] > 9 {\n            t += 1\n        }\n  \
    \      let mut u = t;\n        while u < arr.len() && arr[u] < 10 {\n        \
    \    u += 1\n        }\n        let mut v = u;\n        while v < arr.len() &&\
    \ arr[v] > 9 {\n            v += 1\n        }\n        let mut w = v;\n      \
    \  while w < arr.len() && arr[w] < 10 {\n            w += 1\n        }\n     \
    \   let mut x = w;\n        while x < arr.len() && arr[x] > 9 {\n            x\
    \ += 1\n        }\n        let mut y = x;\n        while y < arr.len() && arr[y]\
    \ < 10 {\n            y += 1\n        }\n        let mut z = y;\n        while\
    \ z < arr.len() && arr[z] > 9 {\n            z += 1\n        }\n        let mut\
    \ a = z;\n        while a < arr.len() && arr[a] < 10 {\n            a += 1\n \
    \       }\n        let mut b = a;\n        while b < arr.len() && arr[b] > 9 {\n\
    \            b += 1\n        }\n        let mut c = b;\n        while \n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmprv6tb8_j.rs:112:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n20  |     while\
    \ i < arr.len() {\n    |                         - this delimiter might not be\
    \ properly closed...\n...\n103 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n112 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmprv6tb8_j.rs:103:1\n    |\n102 |         while \n    |        \
    \ ----- while parsing the condition of this `while` expression\n103 | }\n    |\
    \ ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprv6tb8_j.rs:22:62\n\
    \   |\n22 |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&9`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmprv6tb8_j.rs:22:35\n\
    \     |\n22   |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprv6tb8_j.rs:17:34\n   |\n17 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |    ---------                     ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    i"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    if len == 0 {\n        return result;\n    }\n    let mut i = 0;\n    while\
    \ i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n    \
    \        continue;\n        }\n        let mut j = i;\n        while j > 0 &&\
    \ arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n        result.push(&arr[..j]);\n\
    \        i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_qhqsgf.rs:33:21\n   |\n\
    33 |         result.push(&arr[..j]);\n   |                     ^^^^^^^^^ expected\
    \ struct `String`, found `&[isize]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n            i +=\
    \ 1;\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n\
    \                continue;\n            }\n            if arr[j] == arr[i] {\n\
    \                j += 1;\n                continue;\n            }\n         \
    \   if arr[j] > arr[i] {\n                let mut temp = arr[i];\n           \
    \     arr[i] = arr[j];\n                arr[j] = temp;\n            }\n      \
    \      j += 1;\n        }\n        result.push(&arr[i - 1].to_string());\n   \
    \     i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpar03a9k0.rs:49:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    49 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut digits = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let digit = arr[i] - 1;\n        if digit < 10 {\n            digits.push(digit);\n\
    \        } else {\n            reversed.push(digit);\n        }\n        i +=\
    \ 1;\n    }\n    for i in 0..digits.len() {\n        let digit = digits[i];\n\
    \        let index = reversed.binary_search(&digit);\n        if index != -1 {\n\
    \            result.push(by_names[index]);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `by_names` in this scope\n  --> /tmp/tmpje_yf57f.rs:35:25\n\
    \   |\n35 |             result.push(by_names[index]);\n   |                  \
    \       ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpje_yf57f.rs:34:21\n   |\n34 |         if index != -1 {\n   |   \
    \                  ^^ expected enum `Result`, found integer\n   |\n   = note:\
    \ expected enum `Result<usize, usize>`\n              found type `{integer}`\n\
    help: try wrapping the expression in a variant of `Result`\n   |\n34 |       \
    \  if index != Ok(-1) {\n   |                     +++  +\n34 |         if index\
    \ != Err(-1) {\n   |                     ++++  +\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    let mut\
    \ result = vec![];\n    for &i in arr {\n        let mut s = String::new();\n\
    \        if i > 0 && i <= 9 {\n            s.push_str(&format!(\"{}\", i));\n\
    \        } else {\n            s.push_str(&format!(\"{}\", i - 10));\n       \
    \ }\n        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk9na0qc0.rs:25:9\n   |\n\
    25 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n    let mut result = vec![];\n    for i in arr {\n      \
    \  if i <= 9 {\n            result.push(by_digit(i));\n        } else {\n    \
    \        result.push(by_name(i));\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp31fqdju2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(i));\n   |                      \
    \   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `by_name`\
    \ in this scope\n  --> /tmp/tmp31fqdju2.rs:26:25\n   |\n26 |             result.push(by_name(i));\n\
    \   |                         ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n            continue;\n        }\n        let mut j\
    \ = i;\n        while j < len {\n            if arr[j] > arr[i] {\n          \
    \      break;\n            }\n            i += 1;\n        }\n        let mut\
    \ temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        result.push(by_digit(arr[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmplb3_ssvb.rs:36:21\n\
    \   |\n36 |         result.push(by_digit(arr[i]));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 0;\n    let mut ones = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut twos\
    \ = vec![\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"\
    , \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"];\n    let mut threes\
    \ = vec![\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"];\n    let mut fours = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut fives\
    \ = vec![\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"\
    , \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"];\n    let mut sixes\
    \ = vec![\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"];\n    let mut sevens = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut eights\
    \ = vec![\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"\
    , \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"];\n    let mut nines\
    \ = vec![\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"];\n    let mut tens = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut elevens\
    \ = vec![\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"\
    , \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"];\n    let mut twelves\
    \ = vec![\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"];\n    let mut thirteens = vec![\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let\
    \ mut fourteens = vec![\"Ten\", \"Eleven\", \"T\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpdpv5wza5.rs:43:110\n\
    \   |\n43 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n   |  ______________________________________________________________________________________________________________^\n\
    44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 10 {\n                result.push(\"One\"\
    );\n                break;\n            }\n            if arr[j] < 100 {\n   \
    \             result.push(\"Two\");\n                break;\n            }\n \
    \           if arr[j] < 1000 {\n                result.push(\"Three\");\n    \
    \            break;\n            }\n            if arr[j] < 10000 {\n        \
    \        result.push(\"Four\");\n                break;\n            }\n     \
    \       if arr[j] < 100000 {\n                result.push(\"Five\");\n       \
    \         break;\n            }\n            if arr[j] < 1000000 {\n         \
    \       result.push(\"Six\");\n                break;\n            }\n       \
    \     if arr[j] < 10000000 {\n                result.push(\"Seven\");\n      \
    \          break;\n            }\n            if arr[j] < 100000000 {\n      \
    \          result.push(\"Eight\");\n                break;\n            }\n  \
    \          if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            if arr[j] < 10000000000 {\n\
    \                result.push(\"Ten\");\n                break;\n            }\n\
    \            if arr[j] < 100000000000 {\n                result.push(\"Eleven\"\
    );\n                break;\n            }\n            if arr[j] < 1000000000000\
    \ {\n                result.push(\"Twelve\");\n                break;\n      \
    \      }\n            if arr[j] < 10000000000000 {\n                result.push(\"\
    Thirteen\");\n                break;\n            }\n            if arr[j] < 100000000000000\
    \ {\n                result.push(\"Fourteen\");\n                break;\n    \
    \        }\n            if arr[j] < 1000000000000000 {\n                result.push(\"\
    Fifteen\");\n                break;\n            }\n            if arr[j] < 10000000000000000\
    \ {\n                result.push(\"Sixteen\");\n                break;\n     \
    \       }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Seventeen\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Eighteen\");\n         \
    \       break;\n            }\n            if arr[j] < 100000000000000000 {\n\
    \                result.push(\"Nineteen\");\n                break;\n        \
    \    }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Twentyone\");\n                break;\n   \
    \         }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twentytwo\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Twentythree\");\n      \
    \          break;\n            }\n            if arr\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpahyd5zlz.rs:126:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n21  |     while\
    \ i < len {\n    |                   - unclosed delimiter\n22  |         let mut\
    \ j = i;\n23  |         while j < len {\n    |                       - this delimiter\
    \ might not be properly closed...\n...\n117 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n126 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmpahyd5zlz.rs:117:1\n    |\n116 |             if\
    \ arr\n    |             -- this `if` expression has a condition, but no block\n\
    117 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpahyd5zlz.rs:21:5\n\
    \    |\n17  |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |        \
    \                            ----------- expected `Vec<String>` because of return\
    \ type\n...\n21  | /     while i < len {\n22  | |         let mut j = i;\n23 \
    \ | |         while j < len {\n24  | |             if arr[j] < 10 {\n...   |\n\
    125 | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"),\
    \ String::from(\"Eight\"), String::from(\"Four\")]);\n126 | | }\n    | |__^ expected\
    \ struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<String>`\n\
    \            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut ten_thousands = vec![];\n\
    \    let mut hundred_thousands = vec![];\n    let mut millions = vec![];\n   \
    \ let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut quadrillions\
    \ = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions = vec![];\n\
    \    let mut septillions = vec![];\n    let mut octillions = vec![];\n    let\
    \ mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut undecillions\
    \ = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions =\
    \ vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut unvigintillions\
    \ = vec![];\n    let mut duovigintillions = vec![];\n    let mut trevigintillions\
    \ = vec![];\n    let mut quattuorvigintillions = vec![];\n    let mut quinvigintillions\
    \ = vec![];\n    let mut sexvigintillions = vec![];\n    let mut septenvigintillions\
    \ = vec![];\n    let mut octovigintilli\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvz3d8e47.rs:61:27\n   |\n\
    61 |     let mut octovigintilli\n   |                           ^ help: add `;`\
    \ here\n62 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpvz3d8e47.rs:17:34\n   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |    ---------                     ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n   \
    \         if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n           \
    \     continue;\n            }\n            result.push(format!(\"{}\", arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"2\", \"1\", \"1\", \"4\", \"5\", \"8\", \"2\", \"3\", \"1\", \"1\", \"4\"\
    , \"5\", \"8\", \"2\", \"3\", \"1\", \"4\", \"5\", \"8\", \"2\", \"3\", \"4\"\
    , \"5\", \"8\", \"2\", \"3\", \"5\", \"8\", \"2\", \"3\", \"8\", \"2\", \"3\"\
    , \"2\", \"3\", \"3\"]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\",\
    \ \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmp79iptpy7.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut digits = vec![];\n\
    \    let mut reversed = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < arr.len() {\n        digits.push(arr[i]);\n        i += 1;\n    }\n    while\
    \ j < digits.len() {\n        reversed.push((digits[j] - 1) as isize);\n     \
    \   j += 1;\n    }\n    for i in 0..(reversed.len() - 1) {\n        result.push(by_digit(reversed[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpvoxa9yqp.rs:32:21\n\
    \   |\n32 |         result.push(by_digit(reversed[i]));\n   |                \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr\n        .iter()\n  \
    \      .cloned()\n        .enumerate()\n        .filter_map(|(i, elem)| {\n  \
    \          if elem < 1 || elem > 9 {\n                None\n            } else\
    \ {\n                Some(elem as isize)\n            }\n        })\n        .collect::<Vec<_>>();\n\
    \    reversed.sort_by_key(|x| x);\n    let mut counter = 1;\n    for elem in &reversed\
    \ {\n        if elem == 0 {\n            result.push(\"Zero\");\n        } else\
    \ {\n            result.push(format!(\"{}\", counter));\n            counter +=\
    \ 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpb181g_43.rs:37:17\n\
    \   |\n37 |         if elem == 0 {\n   |                 ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpb181g_43.rs:40:25\n   |\n40 |             result.push(format!(\"{}\"\
    , counter));\n   |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n   |\n   = note: this error originates in the macro `format`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb181g_43.rs:44:5\n   |\n17 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n44 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            reversed.push(arr[j]);\n\
    \            j -= 1;\n        }\n        reversed.push(arr[j]);\n        i +=\
    \ 1;\n    }\n    for &n in reversed {\n        result.push(by_digit(n));\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpomawbvuw.rs:31:21\n\
    \   |\n31 |         result.push(by_digit(n));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpomawbvuw.rs:30:9\n\
    \   |\n30 |     for &n in reversed {\n   |         ^^    -------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `n`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    reversed.push(sorted_arr[0]);\n\
    \    sorted_arr.sort_by_key(|&x| x.cmp(&reversed[0]));\n    for i in 1..sorted_arr.len()\
    \ {\n        let mut current = reversed.clone();\n        current.push(sorted_arr[i]);\n\
    \        sorted_arr.sort_by_key(|&x| x.cmp(&current[0]));\n        result.push(current);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy7_pxsht.rs:30:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    30 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut i = 0;\n        let mut j = len - 1;\n \
    \       while i < j {\n            if arr[i] < arr[j] {\n                swap(&mut\
    \ arr[i], &mut arr[j]);\n                i += 1;\n                j -= 1;\n  \
    \          } else {\n                i += 1;\n            }\n        }\n     \
    \   len -= 1;\n        result.push(&arr[len]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpfsy1iv86.rs:25:17\n\
    \   |\n25 |                 swap(&mut arr[i], &mut arr[j]);\n   |            \
    \     ^^^^ not found in this scope\n   |\nhelp: consider importing one of these\
    \ items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfsy1iv86.rs:35:5\n   |\n17 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n35 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut digits = vec![];\n\
    \    let mut digits_len = vec![];\n    let mut digits_len_len = vec![];\n    let\
    \ mut digits_len_len_len = vec![];\n    let mut digits_len_len_len_len = vec![];\n\
    \    let mut digits_len_len_len_len_len = vec![];\n    let mut digits_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len = vec![];\n    let\
    \ mut digits_len_len_len_len_len_len_len_len = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len = vec![];\n  \
    \  let mut digits_len_len_len_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len = vec![];\n\
    \    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len =\
    \ vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx1z7b_s7.rs:44:72\n   |\n\
    44 |     let mut digits_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    \   |                                                                        ^\
    \ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx1z7b_s7.rs:17:34\n   |\n17 | fn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n   |    ---------                     ^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut current\
    \ = 1;\n    let mut current_reversed = 1;\n    let mut current_length = 1;\n \
    \   let mut current_reversed_length = 1;\n    let mut current_digit = 1;\n   \
    \ let mut current_reversed_digit = 1;\n    let mut current_name = \"\";\n    let\
    \ mut current_reversed_name = \"\";\n    let mut current_digits = 1;\n    let\
    \ mut current_reversed_digits = 1;\n    let mut current_digits_name = \"\";\n\
    \    let mut current_reversed_digits_name = \"\";\n    let mut current_digits_reversed\
    \ = 1;\n    let mut current_reversed_digits_reversed = 1;\n    let mut current_digits_reversed_name\
    \ = \"\";\n    let mut current_reversed_digits_reversed_name = \"\";\n    let\
    \ mut current_digits_reversed_reversed = 1;\n    let mut current_reversed_digits_reversed_reversed\
    \ = 1;\n    let mut current_digits_reversed_reversed_name = \"\";\n    let mut\
    \ current_reversed_digits_reversed_reversed_name = \"\";\n    let mut current_digits_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_name\
    \ = \"\";\n    let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsuqrotud.rs:54:134\n   |\n\
    54 |     let mut current_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsuqrotud.rs:17:34\n   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |    ---------                     ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                reversed.push(arr[j]);\n\
    \                j += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        reversed.reverse();\n        let mut k = i;\n  \
    \      while k < reversed.len() {\n            if reversed[k] < 10 {\n       \
    \         result.push(by_digit(reversed[k]));\n                k += 1;\n     \
    \       } else {\n                break;\n            }\n        }\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpqruq53zb.rs:35:29\n\
    \   |\n35 |                 result.push(by_digit(reversed[k]));\n   |        \
    \                     ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(format!(\"\
    {}\", arr[j]));\n                reversed.push(arr[j]);\n                j +=\
    \ 1;\n            } else {\n                break;\n            }\n        }\n\
    \        i += 1;\n    }\n    for &i in reversed.iter() {\n        result.push(by_digit(i));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpfbazlish.rs:35:21\n\
    \   |\n35 |         result.push(by_digit(i));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    arr.iter().map(|x|\
    \ {\n        match x {\n            1 => \"One\",\n            2 => \"Two\",\n\
    \            3 => \"Three\",\n            4 => \"Four\",\n            5 => \"\
    Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n            8\
    \ => \"Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"Invalid\
    \ number: {}\", x),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpyu4boieg.rs:37:8\n     |\n37 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] > 9 {\n          \
    \  result.push(by_length(arr[i..i + 1]));\n            i += 1;\n        } else\
    \ {\n            result.push(by_name(arr[i..i + 1]));\n            i += 1;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp_uoiqonm.rs:26:25\n\
    \   |\n26 |             result.push(by_name(arr[i..i + 1]));\n   |           \
    \              ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_uoiqonm.rs:23:35\n   |\n23 |             result.push(by_length(arr[i..i\
    \ + 1]));\n   |                                   ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                                   |\n\
    \   |                                   expected struct `Vec`, found slice `[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_uoiqonm.rs:30:5\n   |\n17 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n30 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    for i in arr {\n        let mut s = String::new();\n\
    \        if i < 10 {\n            s.push_str(&format!(\"One\", i));\n        }\
    \ else if i < 20 {\n            s.push_str(&format!(\"Two\", i));\n        } else\
    \ if i < 30 {\n            s.push_str(&format!(\"Three\", i));\n        } else\
    \ if i < 40 {\n            s.push_str(&format!(\"Four\", i));\n        } else\
    \ if i < 50 {\n            s.push_str(&format!(\"Five\", i));\n        } else\
    \ if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n        } else if\
    \ i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n        } else if\
    \ i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n        } else if\
    \ i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n        } else {\n\
    \            continue;\n        }\n        result.push(s);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmprvqlco5l.rs:25:40\n   |\n25 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmprvqlco5l.rs:27:40\n   |\n27 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmprvqlco5l.rs:29:42\n\
    \   |\n29 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmprvqlco5l.rs:31:41\n   |\n31 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmprvqlco5l.rs:33:41\n   |\n33 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmprvqlco5l.rs:35:40\n\
    \   |\n35 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmprvqlco5l.rs:37:42\n   |\n37 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result.push(by_digit(arr[i]));\n\
    \            i += 1;\n        } else {\n            result.push(by_digit(arr[i]));\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpumr_zpgy.rs:22:25\n\
    \   |\n22 |             result.push(by_digit(arr[i]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `by_digit` in this scope\n  --> /tmp/tmpumr_zpgy.rs:25:25\n   |\n25 |      \
    \       result.push(by_digit(arr[i]));\n   |                         ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut i = 0;\n        while i < len {\n      \
    \      if arr[i] < 1 || arr[i] > 9 {\n                i += 1;\n              \
    \  continue;\n            }\n            result.push(by_digit(arr[i]));\n    \
    \        i += 1;\n        }\n        len -= 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpicz2yj9w.rs:27:25\n\
    \   |\n27 |             result.push(by_digit(arr[i]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_owned();\n    arr.sort_unstable();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    for i in arr {\n        let mut s = String::new();\n\
    \        if i < 10 {\n            s.push_str(&format!(\"One\", i));\n        }\
    \ else if i < 20 {\n            s.push_str(&format!(\"Two\", i));\n        } else\
    \ if i < 30 {\n            s.push_str(&format!(\"Three\", i));\n        } else\
    \ if i < 40 {\n            s.push_str(&format!(\"Four\", i));\n        } else\
    \ if i < 50 {\n            s.push_str(&format!(\"Five\", i));\n        } else\
    \ if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n        } else if\
    \ i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n        } else if\
    \ i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n        } else if\
    \ i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n        } else {\n\
    \            continue;\n        }\n        result.push(s);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpq__pdn52.rs:28:40\n   |\n28 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpq__pdn52.rs:30:40\n   |\n30 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpq__pdn52.rs:32:42\n\
    \   |\n32 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmpq__pdn52.rs:34:41\n   |\n34 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpq__pdn52.rs:36:41\n   |\n36 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpq__pdn52.rs:38:40\n\
    \   |\n38 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmpq__pdn52.rs:40:42\n   |\n40 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while len > 0 {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n        } else {\n            result.push(by_digit(arr[i]));\n\
    \            i += 1;\n        }\n        len -= 1;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1,\
    \ 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp0x42megv.rs:25:25\n\
    \   |\n25 |             result.push(by_digit(arr[i]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut digits\
    \ = vec![];\n    let mut tens = vec![];\n    let mut hundreds = vec![];\n    let\
    \ mut thousands = vec![];\n    let mut ones = vec![];\n    let mut twos = vec![];\n\
    \    let mut threes = vec![];\n    let mut fours = vec![];\n    let mut fives\
    \ = vec![];\n    let mut sixes = vec![];\n    let mut sevens = vec![];\n    let\
    \ mut eights = vec![];\n    let mut nines = vec![];\n    let mut ten = vec![];\n\
    \    let mut hundred = vec![];\n    let mut thousand = vec![];\n    let mut one\
    \ = vec![];\n    let mut two = vec![];\n    let mut three = vec![];\n    let mut\
    \ four = vec![];\n    let mut five = vec![];\n    let mut six = vec![];\n    let\
    \ mut seven = vec![];\n    let mut eight = vec![];\n    let mut nine = vec![];\n\
    \    let mut ten_thousand = vec![];\n    let mut hundred_thousand = vec![];\n\
    \    let mut thousand_one = vec![];\n    let mut thousand_two = vec![];\n    let\
    \ mut thousand_three = vec![];\n    let mut thousand_four = vec![];\n    let mut\
    \ thousand_five = vec![];\n    let mut thousand_six = vec![];\n    let mut thousand_seven\
    \ = vec![];\n    let mut thousand_eight = vec![];\n    let mut thousand_nine =\
    \ vec![];\n    let mut hundred_one = vec![];\n    let mut hundred_two = vec![];\n\
    \    let mut hundred_three = vec![];\n    let mut hundred_four = vec![];\n   \
    \ let mut hundred_five = vec![];\n    let mut hundred_six = vec![];\n    let mut\
    \ hundred_seven = vec![];\n    let mut hundred_eight = vec![];\n    let mut hundred_nine\
    \ = vec![];\n    let mut hundred_ten = vec![];\n    let mut hund\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpalbugl6g.rs:69:17\n   |\n\
    69 |     let mut hund\n   |                 ^ help: add `;` here\n70 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpalbugl6g.rs:17:34\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut i = 0;\n   \
    \ while i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n\
    \            if arr[j] < 10 {\n                result.push(\"One\");\n       \
    \         break;\n            }\n            if arr[j] < 100 {\n             \
    \   result.push(\"Two\");\n                break;\n            }\n           \
    \ if arr[j] < 1000 {\n                result.push(\"Three\");\n              \
    \  break;\n            }\n            if arr[j] < 10000 {\n                result.push(\"\
    Four\");\n                break;\n            }\n            if arr[j] < 100000\
    \ {\n                result.push(\"Five\");\n                break;\n        \
    \    }\n            if arr[j] < 1000000 {\n                result.push(\"Six\"\
    );\n                break;\n            }\n            if arr[j] < 10000000 {\n\
    \                result.push(\"Seven\");\n                break;\n           \
    \ }\n            if arr[j] < 100000000 {\n                result.push(\"Eight\"\
    );\n                break;\n            }\n            if arr[j] < 1000000000\
    \ {\n                result.push(\"Nine\");\n                break;\n        \
    \    }\n            if arr[j] < 10000000000 {\n                result.push(\"\
    Ten\");\n                break;\n            }\n            if arr[j] < 100000000000\
    \ {\n                result.push(\"Eleven\");\n                break;\n      \
    \      }\n            if arr[j] < 1000000000000 {\n                result.push(\"\
    Twelve\");\n                break;\n            }\n            if arr[j] < 10000000000000\
    \ {\n                result.push(\"Thirteen\");\n                break;\n    \
    \        }\n            if arr[j] < 100000000000000 {\n                result.push(\"\
    Fourteen\");\n                break;\n            }\n            if arr[j] < 1000000000000000\
    \ {\n                result.push(\"Fifteen\");\n                break;\n     \
    \       }\n            if arr[j] < 10000000000000000 {\n                result.push(\"\
    Sixteen\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Seventeen\");\n                break;\n   \
    \         }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Eighteen\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Nineteen\");\n                break;\n    \
    \        }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Twenty one\");\n                break;\n  \
    \          }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty two\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Twenty three\");\n     \
    \           break;\n            }\n            if arr[j] < 10000000000000000\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpir6rt3i_.rs:125:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n20  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n21  | \
    \        let mut j = i;\n22  |         while j < arr.len() {\n    |          \
    \                   - this delimiter might not be properly closed...\n...\n116\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n125\
    \ | }\n    |   ^\n\nerror: expected `{`, found `}`\n   --> /tmp/tmpir6rt3i_.rs:116:1\n\
    \    |\n115 |             if arr[j] < 10000000000000000\n    |             --\
    \ this `if` expression has a condition, but no block\n116 | }\n    | ^ expected\
    \ `{`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpir6rt3i_.rs:20:5\n   \
    \ |\n17  |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n20  | /     while i < arr.len() {\n21  | |         let mut j = i;\n\
    22  | |         while j < arr.len() {\n23  | |             if arr[j] < 10 {\n\
    ...   |\n124 | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n125 | | }\n    |\
    \ |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<String>`\n\
    \            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut one = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    let mut two = vec![\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let\
    \ mut three = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n    let mut four = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut five\
    \ = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"];\n    let mut six = vec![\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut seven\
    \ = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"];\n    let mut eight = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut nine\
    \ = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"];\n    let mut ten = vec![\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut eleven\
    \ = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"];\n    let mut twelve = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut thirteen\
    \ = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"];\n    let mut fourteen = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut fifteen\
    \ = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"];\n    let mut sixteen = vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"S\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmptymr19tm.rs:44:110\n\
    \   |\n44 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n   |  ______________________________________________________________________________________________________________^\n\
    45 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(format!(\"\
    {}\", arr[j]));\n                j += 1;\n            } else {\n             \
    \   break;\n            }\n        }\n        reversed.push(arr[j]);\n       \
    \ i += 1;\n    }\n    for i in reversed.iter().rev() {\n        result.push(by_name(i));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpdwhzyzes.rs:35:21\n\
    \   |\n35 |         result.push(by_name(i));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reversed = arr.rev();\n\
    \    let mut i = 0;\n    while i < reversed.len() {\n        let mut j = i;\n\
    \        while j < reversed.len() && reversed[j] < 10 {\n            j = j + 1;\n\
    \        }\n        result.push(by_digit(reversed[i..j]));\n        i = j;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp9egg6gdo.rs:26:21\n\
    \   |\n26 |         result.push(by_digit(reversed[i..j]));\n   |             \
    \        ^^^^^^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmp9egg6gdo.rs:19:28\n    |\n19  |       let mut reversed\
    \ = arr.rev();\n    |                              ^^^ `Vec<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut counter\
    \ = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  let mut j = i;\n        while j < arr.len() {\n            if arr[j] < 1 ||\
    \ arr[j] > 9 {\n                j += 1;\n                continue;\n         \
    \   }\n            if arr[j] == arr[i] {\n                j += 1;\n          \
    \      continue;\n            }\n            if arr[j] > arr[i] {\n          \
    \      let mut temp = arr[i];\n                arr[i] = arr[j];\n            \
    \    arr[j] = temp;\n                i += 1;\n                j += 1;\n      \
    \          continue;\n            }\n            i += 1;\n        }\n        reversed.push(arr[i]);\n\
    \        i += 1;\n    }\n    for i in 0..(reversed.len() - 1) {\n        let mut\
    \ temp = reversed[i];\n        reversed[i] = reversed[i - 1];\n        reversed[i\
    \ - 1] = temp;\n    }\n    for i in 0..(reversed.len() - 1) {\n        let mut\
    \ temp = reversed[i];\n        result.append(&format!(\"{}\", temp));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbadm7mbl.rs:60:24\n   |\n\
    60 |         result.append(&format!(\"{}\", temp));\n   |                    \
    \    ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n   |\n\
    \   = note: expected struct `Vec<_>`\n              found struct `String`\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() {\n            if arr[j]\
    \ < 10 {\n                result.push(\"One\");\n                break;\n    \
    \        }\n            if arr[j] < 100 {\n                result.push(\"Two\"\
    );\n                break;\n            }\n            if arr[j] < 1000 {\n  \
    \              result.push(\"Three\");\n                break;\n            }\n\
    \            if arr[j] < 10000 {\n                result.push(\"Four\");\n   \
    \             break;\n            }\n            if arr[j] < 100000 {\n      \
    \          result.push(\"Five\");\n                break;\n            }\n   \
    \         if arr[j] < 1000000 {\n                result.push(\"Six\");\n     \
    \           break;\n            }\n            if arr[j] < 10000000 {\n      \
    \          result.push(\"Seven\");\n                break;\n            }\n  \
    \          if arr[j] < 100000000 {\n                result.push(\"Eight\");\n\
    \                break;\n            }\n            if arr[j] < 1000000000 {\n\
    \                result.push(\"Nine\");\n                break;\n            }\n\
    \            j += 1\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjc1w_yu8.rs:66:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    66 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 10 {\n                result.push(\"One\"\
    );\n                break;\n            }\n            if arr[j] < 100 {\n   \
    \             result.push(\"Two\");\n                break;\n            }\n \
    \           if arr[j] < 1000 {\n                result.push(\"Three\");\n    \
    \            break;\n            }\n            if arr[j] < 10000 {\n        \
    \        result.push(\"Four\");\n                break;\n            }\n     \
    \       if arr[j] < 100000 {\n                result.push(\"Five\");\n       \
    \         break;\n            }\n            if arr[j] < 1000000 {\n         \
    \       result.push(\"Six\");\n                break;\n            }\n       \
    \     if arr[j] < 10000000 {\n                result.push(\"Seven\");\n      \
    \          break;\n            }\n            if arr[j] < 100000000 {\n      \
    \          result.push(\"Eight\");\n                break;\n            }\n  \
    \          if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_n51q4ye.rs:64:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    64 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    let mut\
    \ result = vec![];\n    for i in arr {\n        let mut s = String::new();\n \
    \       match i {\n            1 => \"One\",\n            2 => \"Two\",\n    \
    \        3 => \"Three\",\n            4 => \"Four\",\n            5 => \"Five\"\
    ,\n            6 => \"Six\",\n            7 => \"Seven\",\n            8 => \"\
    Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"Invalid number:\
    \ {}\", i),\n        }\n        s.push(i);\n        result.push(s);\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpz4a60fm6.rs:37:18\n\
    \   |\n27 | /         match i {\n28 | |             1 => \"One\",\n29 | |    \
    \         2 => \"Two\",\n30 | |             3 => \"Three\",\n...  |\n36 | |  \
    \           9 => \"Nine\",\n   | |                  ------ this and all prior\
    \ arms are found to be of type `&str`\n37 | |             _ => panic!(\"Invalid\
    \ number: {}\", i),\n   | |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `()`\n38 | |         }\n   | |_________- `match` arms have incompatible\
    \ types\n   |\n   = note: this error originates in the macro `$crate::panic::panic_2015`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz4a60fm6.rs:39:16\n   |\n39 |         s.push(i);\n\
    \   |                ^ expected `char`, found `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    sorted_arr.reverse();\n\
    \n    let mut result = vec![];\n    for i in sorted_arr.iter() {\n        let\
    \ index = i as usize;\n        let digit = i % 10;\n        let name = digits_to_name(digit);\n\
    \        result.push(name);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digits_to_name` in this scope\n  -->\
    \ /tmp/tmpc47zz9gg.rs:30:20\n   |\n30 |         let name = digits_to_name(digit);\n\
    \   |                    ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0606]:\
    \ casting `&isize` as `usize` is invalid\n  --> /tmp/tmpc47zz9gg.rs:28:21\n  \
    \ |\n28 |         let index = i as usize;\n   |                     -^^^^^^^^^\n\
    \   |                     |\n   |                     cannot cast `&isize` as\
    \ `usize`\n   |                     help: dereference the expression: `*i`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0606.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reverse_arr = arr;\n\
    \    reverse_arr.reverse();\n    for i in reverse_arr.iter() {\n        let mut\
    \ index = i;\n        let mut digit = i;\n        while index > 0 {\n        \
    \    digit = digit / 10;\n            index -= 1;\n        }\n        result.push(by_digit(digit));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpdtr5hp_o.rs:28:21\n\
    \   |\n28 |         result.push(by_digit(digit));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdtr5hp_o.rs:24:23\n\
    \   |\n24 |         while index > 0 {\n   |                       ^\n   |    \
    \                   |\n   |                       expected `&isize`, found integer\n\
    \   |                       help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdtr5hp_o.rs:25:21\n   |\n23 |         let mut\
    \ digit = i;\n   |                         - expected due to this value\n24 |\
    \         while index > 0 {\n25 |             digit = digit / 10;\n   |      \
    \               ^^^^^^^^^^\n   |                     |\n   |                 \
    \    expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&(digit / 10)`\n\nerror[E0368]: binary assignment operation\
    \ `-=` cannot be applied to type `&isize`\n  --> /tmp/tmpdtr5hp_o.rs:26:13\n \
    \  |\n26 |             index -= 1;\n   |             -----^^^^^\n   |        \
    \     |\n   |             cannot use `-=` on type `&isize`\n   |\nhelp: `-=` can\
    \ be used on `isize`, you can dereference `index`\n   |\n26 |             *index\
    \ -= 1;\n   |             +\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= 1 && arr[i]\
    \ <= 9 {\n            reversed.push(arr[i]);\n            i += 1;\n        } else\
    \ {\n            result.push(by_digit(arr[i]));\n            i += 1;\n       \
    \ }\n    }\n    reversed.reverse();\n    for i in reversed.iter() {\n        result.push(by_digit(i));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpsb6z39i8.rs:26:25\n\
    \   |\n26 |             result.push(by_digit(arr[i]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `by_digit` in this scope\n  --> /tmp/tmpsb6z39i8.rs:32:21\n   |\n32 |      \
    \   result.push(by_digit(i));\n   |                     ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] > 9 {\n          \
    \  result.push(by_length(arr[i..i + 9]));\n            i += 9;\n        } else\
    \ {\n            result.push(by_name(arr[i]));\n            i += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmplgbd3p80.rs:26:25\n\
    \   |\n26 |             result.push(by_name(arr[i]));\n   |                  \
    \       ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplgbd3p80.rs:23:35\n   |\n23 |             result.push(by_length(arr[i..i\
    \ + 9]));\n   |                                   ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                                   |\n\
    \   |                                   expected struct `Vec`, found slice `[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplgbd3p80.rs:30:5\n   |\n17 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n30 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 10 {\n                result.push(\"One\"\
    );\n                break;\n            }\n            if arr[j] < 100 {\n   \
    \             result.push(\"Two\");\n                break;\n            }\n \
    \           if arr[j] < 1000 {\n                result.push(\"Three\");\n    \
    \            break;\n            }\n            if arr[j] < 10000 {\n        \
    \        result.push(\"Four\");\n                break;\n            }\n     \
    \       if arr[j] < 100000 {\n                result.push(\"Five\");\n       \
    \         break;\n            }\n            if arr[j] < 1000000 {\n         \
    \       result.push(\"Six\");\n                break;\n            }\n       \
    \     if arr[j] < 10000000 {\n                result.push(\"Seven\");\n      \
    \          break;\n            }\n            if arr[j] < 100000000 {\n      \
    \          result.push(\"Eight\");\n                break;\n            }\n  \
    \          if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr3_phc_u.rs:64:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    64 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        let mut j = i;\n        while j < len {\n      \
    \      if arr[j] < 10 {\n                result.push(\"One\");\n             \
    \   break;\n            }\n            if arr[j] < 100 {\n                result.push(\"\
    Two\");\n                break;\n            }\n            if arr[j] < 1000 {\n\
    \                result.push(\"Three\");\n                break;\n           \
    \ }\n            if arr[j] < 10000 {\n                result.push(\"Four\");\n\
    \                break;\n            }\n            if arr[j] < 100000 {\n   \
    \             result.push(\"Five\");\n                break;\n            }\n\
    \            if arr[j] < 1000000 {\n                result.push(\"Six\");\n  \
    \              break;\n            }\n            if arr[j] < 10000000 {\n   \
    \             result.push(\"Seven\");\n                break;\n            }\n\
    \            if arr[j] < 100000000 {\n                result.push(\"Eight\");\n\
    \                break;\n            }\n            if arr[j] < 1000000000 {\n\
    \                result.push(\"Nine\");\n                break;\n            }\n\
    \            j += 1\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnyhjlukf.rs:68:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    68 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    let mut\
    \ result = vec![];\n    for i in arr {\n        if i <= 9 {\n            result.push(\"\
    One\".to_string());\n        } else if i <= 99 {\n            result.push(\"Two\"\
    .to_string());\n        } else if i <= 999 {\n            result.push(\"Three\"\
    .to_string());\n        } else if i <= 9999 {\n            result.push(\"Four\"\
    .to_string());\n        } else if i <= 9999999 {\n            result.push(\"Five\"\
    .to_string());\n        } else if i <= 999999999 {\n            result.push(\"\
    Six\".to_string());\n        } else if i <= 99999999999 {\n            result.push(\"\
    Seven\".to_string());\n        } else if i <= 999999999999999 {\n            result.push(\"\
    Eight\".to_string());\n        } else if i <= 9999999999999999999 {\n        \
    \    result.push(\"Nine\".to_string());\n        } else {\n            continue;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "warning: comparison is useless due to type limits\n  --> /tmp/tmp6gy1my26.rs:42:19\n\
    \   |\n42 |         } else if i <= 9999999999999999999 {\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_comparisons)]`\
    \ on by default\n\nerror: literal out of range for `isize`\n  --> /tmp/tmp6gy1my26.rs:42:24\n\
    \   |\n42 |         } else if i <= 9999999999999999999 {\n   |               \
    \         ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[deny(overflowing_literals)]`\
    \ on by default\n   = note: the literal `9999999999999999999` does not fit into\
    \ the type `isize` whose range is `-9223372036854775808..=9223372036854775807`\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut i = 0;\n        while i < len {\n      \
    \      if arr[i] < 1 || arr[i] > 9 {\n                i += 1;\n              \
    \  continue;\n            }\n            result.push(format!(\"{}\", arr[i]));\n\
    \            i += 1;\n        }\n        len = arr.len();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n            continue;\n        }\n        let mut j\
    \ = i;\n        while j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] < arr[i] {\n                let tmp = arr[j];\n                arr[j]\
    \ = arr[i];\n                arr[i] = tmp;\n            }\n            j += 1;\n\
    \        }\n        result.push(&arr[len - i - 1]);\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3gto6y2r.rs:42:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    42 |     result\n   |     ^^^^^^ expected struct `String`, found `&isize`\n  \
    \ |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut i =\
    \ 0;\n    while i < arr.len() {\n        let mut j = i;\n        while j < arr.len()\
    \ {\n            if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n    \
    \            continue;\n            }\n            let mut k = j;\n          \
    \  while k > 0 && arr[k - 1] > arr[k] {\n                k -= 1;\n           \
    \ }\n            if k > 0 {\n                reversed.push((arr[k - 1] as isize).to_string());\n\
    \            }\n            result.push((arr[j] as isize).to_string());\n    \
    \        j += 1;\n        }\n        i += 1;\n    }\n    for i in reversed.iter().rev()\
    \ {\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjte024gp.rs:44:21\n   |\n\
    44 |         result.push(i);\n   |                     ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                     |\n   |                   \
    \  expected struct `String`, found `&String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut ten_thousands = vec![];\n\
    \    let mut hundred_thousands = vec![];\n    let mut millions = vec![];\n   \
    \ let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut quadrillions\
    \ = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions = vec![];\n\
    \    let mut septillions = vec![];\n    let mut octillions = vec![];\n    let\
    \ mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut undecillions\
    \ = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions =\
    \ vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut thousands_tens =\
    \ vec![];\n    let mut thousands_hundreds = vec![];\n    let mut thousands_thousands\
    \ = vec![];\n    let mut thousands_hundred_thousands = vec![];\n    let mut millions_hundreds\
    \ = vec![];\n    let mut millions_thousands = vec![];\n    let mut millions_hundred_thousands\
    \ = vec![];\n    let mut billions_hundreds = vec![];\n    let mut billi\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp05i0bea6.rs:62:18\n   |\n\
    62 |     let mut billi\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05i0bea6.rs:17:34\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(format!(\"\
    {}\", arr[j]));\n                reversed.push(arr[j]);\n                j +=\
    \ 1;\n            } else {\n                break;\n            }\n        }\n\
    \        i += 1;\n    }\n    for i in reversed.iter().rev() {\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptzf5p44x.rs:35:21\n   |\n\
    35 |         result.push(i);\n   |                     ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                     |\n   |                   \
    \  expected struct `String`, found `&isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    arr.sort_by_key(|&x|\
    \ x.cmp(&1));\n    arr.reverse();\n    let mut result = vec![];\n    for &x in\
    \ arr {\n        let mut s = String::new();\n        match x {\n            1\
    \ => s.push(\"One\"),\n            2 => s.push(\"Two\"),\n            3 => s.push(\"\
    Three\"),\n            4 => s.push(\"Four\"),\n            5 => s.push(\"Five\"\
    ),\n            6 => s.push(\"Six\"),\n            7 => s.push(\"Seven\"),\n \
    \           8 => s.push(\"Eight\"),\n            9 => s.push(\"Nine\"),\n    \
    \        _ => s.push(\"Unknown\"),\n        }\n        result.push(s);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:25:9\n   |\n\
    25 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjkkpw7sg.rs:28:25\n   |\n28 |             1 => s.push(\"One\"),\n\
    \   |                         ^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:29:25\n   |\n29 |             2\
    \ => s.push(\"Two\"),\n   |                         ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:30:25\n\
    \   |\n30 |             3 => s.push(\"Three\"),\n   |                        \
    \ ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjkkpw7sg.rs:31:25\n   |\n31 |             4 => s.push(\"Four\"),\n \
    \  |                         ^^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:32:25\n   |\n32 |             5\
    \ => s.push(\"Five\"),\n   |                         ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:33:25\n\
    \   |\n33 |             6 => s.push(\"Six\"),\n   |                         ^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:34:25\n\
    \   |\n34 |             7 => s.push(\"Seven\"),\n   |                        \
    \ ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjkkpw7sg.rs:35:25\n   |\n35 |             8 => s.push(\"Eight\"),\n\
    \   |                         ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:36:25\n   |\n36 |             9\
    \ => s.push(\"Nine\"),\n   |                         ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjkkpw7sg.rs:37:25\n\
    \   |\n37 |             _ => s.push(\"Unknown\"),\n   |                   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    if j == i {\n            break;\n        }\n        let mut reversed = vec![];\n\
    \        reversed.extend_from_slice(&arr[i..j]);\n        reversed.extend_from_slice(&arr[j..]);\n\
    \        reversed.reverse();\n        reversed.iter().for_each(|&x| {\n      \
    \      result.push(by_digit(x));\n        });\n        i = j;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp57neop43.rs:38:25\n\
    \   |\n38 |             result.push(by_digit(x));\n   |                      \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut i =\
    \ 0;\n    while i < arr.len() {\n        let mut j = i;\n        while j < arr.len()\
    \ {\n            if arr[j] < 10 {\n                result.push(\"One\");\n   \
    \             reversed.push(arr[j]);\n                j += 1;\n            } else\
    \ {\n                result.push(\"Two\");\n                reversed.push(arr[j]);\n\
    \                j += 1;\n            }\n        }\n        i += 1;\n    }\n \
    \   for i in reversed.iter().rev() {\n        result.push(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpny72sx5n.rs:40:21\n   |\n\
    40 |         result.push(i);\n   |                     ^ expected `str`, found\
    \ `isize`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpny72sx5n.rs:42:5\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n42 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut reversed_index = vec![];\n    let mut current_index = 0;\n    let\
    \ mut current_value = 0;\n    let mut current_value_index = 0;\n    let mut current_value_length\
    \ = 0;\n    let mut current_value_length_index = 0;\n    let mut current_value_length_value\
    \ = 0;\n    let mut current_value_length_value_index = 0;\n    let mut current_value_length_value_value\
    \ = 0;\n    let mut current_value_length_value_value_index = 0;\n    let mut current_value_length_value_value_value\
    \ = 0;\n    let mut current_value_length_value_value_value_index = 0;\n    let\
    \ mut current_value_length_value_value_value_value = 0;\n    let mut current_value_length_value_value_value_index\
    \ = 0;\n    let mut current_value_length_value_value_value_value = 0;\n    let\
    \ mut current_value_length_value_value_value_index = 0;\n    let mut current_value_length_value_value_value_value\
    \ = 0;\n    let mut current_value_length_value_value_value_index = 0;\n    let\
    \ mut current_value_length_value_value_value_value = 0;\n    let mut current_value_length_value_value_value_index\
    \ = 0;\n    let mut current_value_length_value_value_value_value = 0;\n    let\
    \ mut current_value_length_value_value_value_index = 0;\n    let mut current_value_length_value_value_value_value\
    \ = 0;\n    let mut current_value_length_value_value_value_index = 0;\n    let\
    \ mut current_value_length_value_value_value_value = 0;\n    let mut current_value_length_value_value_value_index\
    \ = 0;\n    let mut current_value_length_value_value_value_value = 0;\n    let\
    \ mut current_value_length_value_value_value_index = 0;\n    let mut current_value_length_value_value_value_value\
    \ = 0;\n    let mut current_value_length_value_value_value_index = 0;\n    let\
    \ mut current_value_length_value_value_value_value = 0;\n    let mut current_value_length_value_value_value_index\
    \ = 0;\n    let mut current_value_length_value_value_value_value = 0;\n    let\
    \ mut current_value_length_value_value_value_index = 0;\n    let mut current_value_length_value_value_value_value\
    \ = 0;\n    let mut current_value_length_value_value_value_index = 0;\n    let\
    \ mut current_value_length_value_value_value_value = 0;\n    let mut current_value_length_value_value_value_index\
    \ = 0;\n    let mut current_value_length_value_value_value_value = 0;\n    let\
    \ mut current_value_length_value_value_value_index = 0;\n    let mut current_value_length_value_value_value_value\
    \ = 0;\n    let mut current_value_length_value_value_value_index = 0;\n    let\
    \ mut current_value_length_value_value_value_value = 0;\n    let mut current_value_length_value_value_value_index\
    \ = 0;\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8w2wvpzc.rs:17:34\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------       \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n   \
    \         if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n           \
    \     continue;\n            }\n            result.push(&name[arr[j] - 1]);\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmp3yl6yr8p.rs:27:26\n\
    \   |\n27 |             result.push(&name[arr[j] - 1]);\n   |                \
    \          ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut ones\
    \ = vec![];\n    let mut twos = vec![];\n    let mut threes = vec![];\n    let\
    \ mut fours = vec![];\n    let mut fives = vec![];\n    let mut sixes = vec![];\n\
    \    let mut sevens = vec![];\n    let mut eights = vec![];\n    let mut nines\
    \ = vec![];\n    let mut tens = vec![];\n    let mut hundreds = vec![];\n    let\
    \ mut thousands = vec![];\n    let mut ten_thousands = vec![];\n    let mut hundred_thousands\
    \ = vec![];\n    let mut millions = vec![];\n    let mut billions = vec![];\n\
    \    let mut trillions = vec![];\n    let mut quadrillions = vec![];\n    let\
    \ mut quintillions = vec![];\n    let mut sextillions = vec![];\n    let mut septillions\
    \ = vec![];\n    let mut octillions = vec![];\n    let mut nonillions = vec![];\n\
    \    let mut decillions = vec![];\n    let mut undecillions = vec![];\n    let\
    \ mut duodecillions = vec![];\n    let mut tredecillions = vec![];\n    let mut\
    \ quattuordecillions = vec![];\n    let mut quindecillions = vec![];\n    let\
    \ mut sexdecillions = vec![];\n    let mut septendecillions = vec![];\n    let\
    \ mut octodecillions = vec![];\n    let mut novemdecillions = vec![];\n    let\
    \ mut vigintillions = vec![];\n    let mut billions_ = vec![];\n    let mut trillions_\
    \ = vec![];\n    let mut quadrillions_ = vec![];\n    let mut quintillions_ =\
    \ vec![];\n    let mut sextillions_ = vec![];\n    let mut septillions_ = vec![];\n\
    \    let mut octillions_ = vec![];\n    let mut nonillions_ = vec!\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `[`, or `{`, found `}`\n  --> /tmp/tmpzmxgd885.rs:65:1\n\
    \   |\n64 |     let mut nonillions_ = vec!\n   |                             \
    \  - expected one of `(`, `[`, or `{`\n65 | }\n   | ^ unexpected token\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut current = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        current.push(arr[i]);\n        i += 1;\n    }\n    while current.len()\
    \ > 0 {\n        reversed.push(current.pop());\n    }\n    for &i in reversed.iter()\
    \ {\n        result.push(by_name(i));\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp6wym4b50.rs:34:21\n\
    \   |\n34 |         result.push(by_name(i));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut millions = vec![];\n\
    \    let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut\
    \ quadrillions = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions\
    \ = vec![];\n    let mut septillions = vec![];\n    let mut octillions = vec![];\n\
    \    let mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut\
    \ undecillions = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions\
    \ = vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut thousandsones =\
    \ vec![];\n    let mut millionsones = vec![];\n    let mut billionsones = vec![];\n\
    \    let mut trillionsones = vec![];\n    let mut quadrillionsones = vec![];\n\
    \    let mut quintillionsones = vec![];\n    let mut sextillionsones = vec![];\n\
    \    let mut septillionsones = vec![];\n    let mut octillionsones = vec![];\n\
    \    let mut nonillionsones = vec![];\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp0j4rowyp.rs:63:1\n\
    \   |\n63 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort_unstable();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    for i in arr {\n        let mut s = String::new();\n\
    \        if i <= 9 {\n            s.push_str(&format!(\"{}\", i));\n        }\
    \ else {\n            s.push_str(&format!(\"{}\", i - 10));\n        }\n     \
    \   result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmpq2iumcnl.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr\n        .iter()\n  \
    \      .cloned()\n        .enumerate()\n        .map(|(i, elem)| {\n         \
    \   if elem < 10 {\n                let name = match elem {\n                \
    \    1 => \"One\",\n                    2 => \"Two\",\n                    3 =>\
    \ \"Three\",\n                    4 => \"Four\",\n                    5 => \"\
    Five\",\n                    6 => \"Six\",\n                    7 => \"Seven\"\
    ,\n                    8 => \"Eight\",\n                    9 => \"Nine\",\n \
    \                   _ => return \"\".to_string(),\n                };\n      \
    \          result.push(name);\n            }\n            elem\n        })\n \
    \       .collect::<Vec<_>>();\n    reversed.reverse();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0_b6_75q.rs:42:13\n   |\n\
    42 |             elem\n   |             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |             |\n   |             expected struct `String`,\
    \ found `isize`\n   |\nnote: return type inferred to be `String` here\n  --> /tmp/tmp0_b6_75q.rs:38:33\n\
    \   |\n38 |                     _ => return \"\".to_string(),\n   |          \
    \                       ^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0_b6_75q.rs:46:5\n   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n46 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 0;\n    for num in arr {\n        if num > 9 {\n      \
    \      reversed.push(num % 10);\n            counter += 1;\n        } else {\n\
    \            result.push(by_digit(num, counter));\n        }\n    }\n    reversed.reverse();\n\
    \    for num in reversed {\n        result.push(by_digit(num, counter));\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpry1fl1n_.rs:26:25\n\
    \   |\n26 |             result.push(by_digit(num, counter));\n   |           \
    \              ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `by_digit` in this scope\n  --> /tmp/tmpry1fl1n_.rs:31:21\n   |\n31 |      \
    \   result.push(by_digit(num, counter));\n   |                     ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut reversed = digits.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < reversed.len()\
    \ {\n        if reversed[i] < 10 {\n            i += 1;\n            continue;\n\
    \        }\n        if reversed[i] < 100 {\n            i += 1;\n            j\
    \ = i;\n            continue;\n        }\n        if reversed[i] < 1000 {\n  \
    \          i += 1;\n            j = i;\n            k = i;\n            continue;\n\
    \        }\n        if reversed[i] < 10000 {\n            i += 1;\n          \
    \  j = i;\n            k = i;\n            reversed.swap(i, j);\n            i\
    \ += 1;\n            continue;\n        }\n        if reversed[i] < 100000 {\n\
    \            i += 1;\n            j = i;\n            k = i;\n            reversed.swap(i,\
    \ j);\n            i += 1;\n            reversed.swap(i, k);\n            i +=\
    \ 1;\n            continue;\n        }\n        if reversed[i] < 1000000 {\n \
    \           i += 1;\n            j = i;\n            k = i;\n            reversed.swap(i,\
    \ j);\n            i += 1;\n            reversed.swap(i, k);\n            i +=\
    \ 1;\n            reversed.swap(i, k);\n            i += 1;\n            continue;\n\
    \        }\n        if reversed[i] < 10000000 {\n            i += 1;\n       \
    \     j = i;\n            k = i;\n            reversed.swap(i, j);\n         \
    \   i += 1;\n            reversed.swap(i, k);\n            i += 1;\n         \
    \   reversed.swap(i, k);\n            i += 1;\n            reversed.swap(i, k);\n\
    \            i += 1;\n            continue;\n        }\n        if reversed[i]\
    \ < 100000000 {\n            i += 1;\n            j = i;\n            k = i;\n\
    \            reversed.swap(i, j);\n            i += 1;\n            reversed.swap(i,\
    \ k);\n            i += 1;\n            reversed.swap(i, k);\n            i +=\
    \ 1;\n            reversed.swap(i, k);\n            i += 1;\n            reversed.swap(i,\
    \ k);\n            i += 1;\n            continue;\n        }\n        if reversed[i]\
    \ < 1000000000 {\n            i += 1;\n            j = i;\n            k = i;\n\
    \            reversed.swap(i, j);\n            i += 1;\n            reversed.swap(i,\
    \ k);\n            i += 1;\n            reversed.swap(i, k);\n            i +=\
    \ 1;\n            reversed.\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdhhj4nb5.rs:123:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n27  |     while\
    \ i < reversed.len() {\n    |                              - unclosed delimiter\n\
    ...\n103 |         if reversed[i] < 1000000000 {\n    |                      \
    \               - this delimiter might not be properly closed...\n...\n114 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n123 | }\n\
    \    |   ^\n\nerror: unexpected token: `}`\n   --> /tmp/tmpdhhj4nb5.rs:114:1\n\
    \    |\n114 | }\n    | ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpdhhj4nb5.rs:113:13\n\
    \    |\n103 | /         if reversed[i] < 1000000000 {\n104 | |             i +=\
    \ 1;\n105 | |             j = i;\n106 | |             k = i;\n...   |\n113 | |\
    \             reversed.\n    | |             ^^^^^^^^ expected `()`, found struct\
    \ `Vec`\n114 | | }\n    | |_- expected this to be `()`\n    |\n    = note: expected\
    \ unit type `()`\n                  found struct `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmpdhhj4nb5.rs:27:5\n    |\n17  |   fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n    |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n27  | /     while i < reversed.len()\
    \ {\n28  | |         if reversed[i] < 10 {\n29  | |             i += 1;\n30  |\
    \ |             continue;\n...   |\n122 | |     assert_eq!(candidate(vec![9, 4,\
    \ 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"Four\"\
    )]);\n123 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n    = note:\
    \ expected struct `Vec<String>`\n            found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len && arr[j] < 10 {\n            j += 1\n        }\n        if j == i {\n\
    \            result.push(String::from(\"\"));\n        } else {\n            result.push(String::from(&arr[j].to_string()));\n\
    \        }\n        i = j;\n    }\n    result.reverse();\n    for i in result\
    \ {\n        if i.len() == 1 {\n            i += &\"One\";\n        }\n      \
    \  if i.len() == 2 {\n            i += &\"Two\";\n        }\n        if i.len()\
    \ == 3 {\n            i += &\"Three\";\n        }\n        if i.len() == 4 {\n\
    \            i += &\"Four\";\n        }\n        if i.len() == 5 {\n         \
    \   i += &\"Five\";\n        }\n        if i.len() == 6 {\n            i += &\"\
    Six\";\n        }\n        if i.len() == 7 {\n            i += &\"Seven\";\n \
    \       }\n        if i.len() == 8 {\n            i += &\"Eight\";\n        }\n\
    \        if i.len() == 9 {\n            i += &\"Nine\";\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpb_kv2n2x.rs:19:9\n\
    \   |\n19 |     let mut len = arr.len();\n   |         ----^^^\n   |         |\n\
    \   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `i` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpb_kv2n2x.rs:36:13\n   |\n34 |     for i in result\
    \ {\n   |         - help: consider changing this to be mutable: `mut i`\n35 |\
    \         if i.len() == 1 {\n36 |             i += &\"One\";\n   |           \
    \  ^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `i` as mutable, as\
    \ it is not declared as mutable\n  --> /tmp/tmpb_kv2n2x.rs:39:13\n   |\n34 | \
    \    for i in result {\n   |         - help: consider changing this to be mutable:\
    \ `mut i`\n...\n39 |             i += &\"Two\";\n   |             ^ cannot borrow\
    \ as mutable\n\nerror[E0596]: cannot borrow `i` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpb_kv2n2x.rs:42:13\n   |\n34 |     for i in result\
    \ {\n   |         - help: consider changing this to be mutable: `mut i`\n...\n\
    42 |             i += &\"Three\";\n   |             ^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `i` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpb_kv2n2x.rs:45:13\n   |\n34 |     for i in result {\n   |     \
    \    - help: consider changing this to be mutable: `mut i`\n...\n45 |        \
    \     i += &\"Four\";\n   |             ^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `i` as mutable, as it is not declared as mutable\n  --> /tmp/tmpb_kv2n2x.rs:48:13\n\
    \   |\n34 |     for i in result {\n   |         - help: consider changing this\
    \ to be mutable: `mut i`\n...\n48 |             i += &\"Five\";\n   |        \
    \     ^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `i` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpb_kv2n2x.rs:51:13\n   |\n34\
    \ |     for i in result {\n   |         - help: consider changing this to be mutable:\
    \ `mut i`\n...\n51 |             i += &\"Six\";\n   |             ^ cannot borrow\
    \ as mutable\n\nerror[E0596]: cannot borrow `i` as mutable, as it is "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n    let mut result = vec![];\n    for i in arr {\n      \
    \  let mut s = String::new();\n        if i < 10 {\n            s.push_str(&format!(\"\
    One\", i));\n        } else if i < 20 {\n            s.push_str(&format!(\"Two\"\
    , i));\n        } else if i < 30 {\n            s.push_str(&format!(\"Three\"\
    , i));\n        } else if i < 40 {\n            s.push_str(&format!(\"Four\",\
    \ i));\n        } else if i < 50 {\n            s.push_str(&format!(\"Five\",\
    \ i));\n        } else if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n\
    \        } else if i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n\
    \        } else if i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n\
    \        } else if i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n\
    \        } else {\n            continue;\n        }\n        result.push(s);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmp7f48p3mb.rs:25:40\n   |\n25 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp7f48p3mb.rs:27:40\n   |\n27 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp7f48p3mb.rs:29:42\n\
    \   |\n29 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp7f48p3mb.rs:31:41\n   |\n31 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp7f48p3mb.rs:33:41\n   |\n33 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp7f48p3mb.rs:35:40\n\
    \   |\n35 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp7f48p3mb.rs:37:42\n   |\n37 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut one = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    let mut two = vec![\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"];\n    let mut three = vec![\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\n   \
    \ let mut four = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    let mut five = vec![\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"];\n    let mut six = vec![\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\n   \
    \ let mut seven = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    let mut eight = vec![\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"];\n    let mut nine = vec![\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\n   \
    \ let mut ten = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    let mut eleven = vec![\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"];\n    let mut twelve = vec![\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\n   \
    \ let mut thirteen = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut fourteen = vec![\"Ten\",\
    \ \"Eleven\", \"Twelve\", \"Thirteen\", \"\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpm__9bvru.rs:42:110\n\
    \   |\n42 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n   |  ______________________________________________________________________________________________________________^\n\
    43 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut reversed = vec![];\n    let mut counter = 1;\n    let mut current\
    \ = 1;\n    let mut last = 0;\n    let mut last_digit = 0;\n    let mut last_digit2\
    \ = 0;\n    let mut last_digit3 = 0;\n    let mut last_digit4 = 0;\n    let mut\
    \ last_digit5 = 0;\n    let mut last_digit6 = 0;\n    let mut last_digit7 = 0;\n\
    \    let mut last_digit8 = 0;\n    let mut last_digit9 = 0;\n    let mut last_digit10\
    \ = 0;\n    let mut last_digit11 = 0;\n    let mut last_digit12 = 0;\n    let\
    \ mut last_digit13 = 0;\n    let mut last_digit14 = 0;\n    let mut last_digit15\
    \ = 0;\n    let mut last_digit16 = 0;\n    let mut last_digit17 = 0;\n    let\
    \ mut last_digit18 = 0;\n    let mut last_digit19 = 0;\n    let mut last_digit20\
    \ = 0;\n    let mut last_digit21 = 0;\n    let mut last_digit22 = 0;\n    let\
    \ mut last_digit23 = 0;\n    let mut last_digit24 = 0;\n    let mut last_digit25\
    \ = 0;\n    let mut last_digit26 = 0;\n    let mut last_digit27 = 0;\n    let\
    \ mut last_digit28 = 0;\n    let mut last_digit29 = 0;\n    let mut last_digit30\
    \ = 0;\n    let mut last_digit31 = 0;\n    let mut last_digit32 = 0;\n    let\
    \ mut last_digit33 = 0;\n    let mut last_digit34 = 0;\n    let mut last_digit35\
    \ = 0;\n    let mut last_digit36 = 0;\n    let mut last_digit37 = 0;\n    let\
    \ mut last_digit38 = 0;\n    let mut last_digit39 = 0;\n    let mut last_digit40\
    \ = 0;\n    let mut last_digit41 = 0;\n    let mut last_digit42 = 0;\n    let\
    \ mut last_digit43 = 0;\n    let mut last_digit44 = 0;\n    let mut last_digit45\
    \ = 0;\n    let mut last_digit46 = 0;\n    let mut last_digit47 = 0;\n    let\
    \ mut last_digit48 = 0;\n    let mut last_digit49 = 0;\n    let mut last_digit50\
    \ = 0;\n    let mut last_digit51 = 0;\n    let mut last_digit52 = 0;\n    let\
    \ mut last_digit53 = 0;\n    let mut last_digit54 = 0;\n    let mut last_digit55\
    \ = 0;\n    let mut last_digit56 = 0;\n    let mut last_digit57 = 0;\n    let\
    \ mut last_digit58 = 0;\n    let mut last_digit59 = 0;\n    let mut last_digit\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpr0pmzpz8.rs:84:23\n   |\n\
    84 |     let mut last_digit\n   |                       ^ help: add `;` here\n\
    85 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr0pmzpz8.rs:17:34\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reversed = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(\"\
    One\");\n                break;\n            }\n            if arr[j] < 100 {\n\
    \                result.push(\"Two\");\n                break;\n            }\n\
    \            if arr[j] < 1000 {\n                result.push(\"Three\");\n   \
    \             break;\n            }\n            if arr[j] < 10000 {\n       \
    \         result.push(\"Four\");\n                break;\n            }\n    \
    \        if arr[j] < 100000 {\n                result.push(\"Five\");\n      \
    \          break;\n            }\n            if arr[j] < 1000000 {\n        \
    \        result.push(\"Six\");\n                break;\n            }\n      \
    \      if arr[j] < 10000000 {\n                result.push(\"Seven\");\n     \
    \           break;\n            }\n            if arr[j] < 100000000 {\n     \
    \           result.push(\"Eight\");\n                break;\n            }\n \
    \           if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            if arr[j] < 10000000000 {\n\
    \                result.push(\"Ten\");\n                break;\n            }\n\
    \            if arr[j] < 100000000000 {\n                result.push(\"Eleven\"\
    );\n                break;\n            }\n            if arr[j] < 1000000000000\
    \ {\n                result.push(\"Twelve\");\n                break;\n      \
    \      }\n            if arr[j] < 10000000000000 {\n                result.push(\"\
    Thirteen\");\n                break;\n            }\n            if arr[j] < 100000000000000\
    \ {\n                result.push(\"Fourteen\");\n                break;\n    \
    \        }\n            if arr[j] < 1000000000000000 {\n                result.push(\"\
    Fifteen\");\n                break;\n            }\n            if arr[j] < 10000000000000000\
    \ {\n                result.push(\"Sixteen\");\n                break;\n     \
    \       }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Seventeen\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Eighteen\");\n         \
    \       break;\n            }\n            if arr[j] < 100000000000000000 {\n\
    \                result.push(\"Nineteen\");\n                break;\n        \
    \    }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Twenty one\");\n                break;\n  \
    \          }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty two\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Twenty three\");\n     \
    \           break;\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp2s406a8h.rs:124:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n21  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n22  | \
    \        let mut j = i;\n23  |         while j < arr.len() {\n    |          \
    \                   - unclosed delimiter\n...\n112 |             if arr[j] < 100000000000000000\
    \ {\n    |                                            - this delimiter might not\
    \ be properly closed...\n...\n115 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n124 | }\n    |   ^\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmp2s406a8h.rs:21:5\n    |\n17  |   fn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n21  | /     while i < arr.len() {\n\
    22  | |         let mut j = i;\n23  | |         while j < arr.len() {\n24  | |\
    \             if arr[j] < 10 {\n...   |\n123 | |     assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n124 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n \
    \   = note: expected struct `Vec<String>`\n            found unit type `()`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reverse_arr = vec![];\n\
    \    let mut counter = 0;\n    let mut i = 0;\n    while i < arr.len() {\n   \
    \     if arr[i] < 10 {\n            counter = counter + 1;\n            i = i\
    \ + 1;\n        } else {\n            if counter > 0 {\n                reverse_arr.push(counter);\n\
    \                counter = 0;\n            }\n            i = i + 1;\n       \
    \ }\n    }\n    if counter > 0 {\n        reverse_arr.push(counter);\n    }\n\
    \    for i in reverse_arr.iter() {\n        result.push(by_digit(i as usize));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpgur75wbx.rs:38:21\n\
    \   |\n38 |         result.push(by_digit(i as usize));\n   |                 \
    \    ^^^^^^^^ not found in this scope\n\nerror[E0606]: casting `&{integer}` as\
    \ `usize` is invalid\n  --> /tmp/tmpgur75wbx.rs:38:30\n   |\n38 |         result.push(by_digit(i\
    \ as usize));\n   |                              -^^^^^^^^^\n   |            \
    \                  |\n   |                              cannot cast `&{integer}`\
    \ as `usize`\n   |                              help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n\
    \            continue;\n        }\n        let mut temp = arr[i];\n        arr[i]\
    \ = arr[j];\n        arr[j] = temp;\n        j += 1;\n        i += 1;\n    }\n\
    \    for i in 0..arr.len() {\n        let mut temp = String::new();\n        if\
    \ i < arr.len() {\n            let mut index = i;\n            while index > 0\
    \ {\n                let digit = arr[index - 1] % 10;\n                temp +=\
    \ &name[digit];\n                index -= 1;\n            }\n        }\n     \
    \   result.append(&temp);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpdgdui73e.rs:41:26\n\
    \   |\n41 |                 temp += &name[digit];\n   |                      \
    \    ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdgdui73e.rs:45:23\n\
    \   |\n45 |         result.append(&temp);\n   |                       ^^^^^ types\
    \ differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                      found reference `&String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n\n    for n in arr {\n        match n {\n      \
    \      1 => ones.push(String::from(\"One\")),\n            2 => twos.push(String::from(\"\
    Two\")),\n            3 => threes.push(String::from(\"Three\")),\n           \
    \ 4 => fours.push(String::from(\"Four\")),\n            5 => fives.push(String::from(\"\
    Five\")),\n            6 => sixes.push(String::from(\"Six\")),\n            7\
    \ => sevens.push(String::from(\"Seven\")),\n            8 => eights.push(String::from(\"\
    Eight\")),\n            9 => nines.push(String::from(\"Nine\")),\n           \
    \ _ => continue,\n        }\n    }\n\n    for n in arr {\n        match n {\n\
    \            1 => result.push(ones.pop()),\n            2 => result.push(twos.pop()),\n\
    \            3 => result.push(threes.pop()),\n            4 => result.push(fours.pop()),\n\
    \            5 => result.push(fives.pop()),\n            6 => result.push(sixes.pop()),\n\
    \            7 => result.push(sevens.pop()),\n            8 => result.push(eights.pop()),\n\
    \            9 => result.push(nines.pop()),\n            _ => continue,\n    \
    \    }\n    }\n\n    for n in arr {\n        match n {\n            1 => result.push(ones.pop()),\n\
    \            2 => result.push(twos.pop()),\n            3 => result.push(threes.pop()),\n\
    \            4 => result.push(fours.pop()),\n            5 => result.push(fives.pop()),\n\
    \            6 => result.push(sixes.pop()),\n            7 => result.push(sevens.pop()),\n\
    \            8 => result.push(eights.pop()),\n            9 => result.push(nines.pop()),\n\
    \            _ => continue,\n        }\n    }\n\n    for n in arr {\n        match\
    \ n {\n            1 => result.push(ones.pop()),\n            2 => result.push(twos.pop()),\n\
    \            3 => result.push(threes.pop()),\n            4 => result.push(fours.pop()),\n\
    \            5 => result.push(fives.pop()),\n\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkm119qnu.rs:92:3\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n75 |     for n in\
    \ arr {\n   |                  - unclosed delimiter\n76 |         match n {\n\
    \   |                 - this delimiter might not be properly closed...\n...\n\
    83 | }\n   | - ...as it matches this but it has different indentation\n...\n92\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkm119qnu.rs:75:5\n\
    \   |\n17 |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n75 | /     for n in arr {\n76 | |         match n {\n77 | |     \
    \        1 => result.push(ones.pop()),\n78 | |             2 => result.push(twos.pop()),\n\
    ...  |\n91 | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n92 | | }\n   | |__^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n \
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 0;\n    for num in arr {\n        if num > 9 {\n      \
    \      counter = num - 10;\n        } else {\n            counter = num;\n   \
    \     }\n        reversed.push(counter);\n    }\n    for i in reversed.iter_mut()\
    \ {\n        result.append(&names[i]);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp36r1d7pe.rs:30:24\n\
    \   |\n30 |         result.append(&names[i]);\n   |                        ^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 10 {\n                result.push(\"One\"\
    );\n                break;\n            }\n            if arr[j] < 100 {\n   \
    \             result.push(\"Two\");\n                break;\n            }\n \
    \           if arr[j] < 1000 {\n                result.push(\"Three\");\n    \
    \            break;\n            }\n            if arr[j] < 10000 {\n        \
    \        result.push(\"Four\");\n                break;\n            }\n     \
    \       if arr[j] < 100000 {\n                result.push(\"Five\");\n       \
    \         break;\n            }\n            if arr[j] < 1000000 {\n         \
    \       result.push(\"Six\");\n                break;\n            }\n       \
    \     if arr[j] < 10000000 {\n                result.push(\"Seven\");\n      \
    \          break;\n            }\n            if arr[j] < 100000000 {\n      \
    \          result.push(\"Eight\");\n                break;\n            }\n  \
    \          if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_spxsoy.rs:64:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    64 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n   \
    \         if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n           \
    \     continue;\n            }\n            result.push(&names[arr[j] - 1]);\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpjeo1wfpi.rs:27:26\n\
    \   |\n27 |             result.push(&names[arr[j] - 1]);\n   |               \
    \           ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() {\n            if arr[j]\
    \ < 10 {\n                result.push(\"One\");\n                j += 1;\n   \
    \         } else if arr[j] < 100 {\n                result.push(\"Two\");\n  \
    \              j += 1;\n            } else if arr[j] < 1000 {\n              \
    \  result.push(\"Three\");\n                j += 1;\n            } else if arr[j]\
    \ < 10000 {\n                result.push(\"Four\");\n                j += 1;\n\
    \            } else if arr[j] < 100000 {\n                result.push(\"Five\"\
    );\n                j += 1;\n            } else if arr[j] < 1000000 {\n      \
    \          result.push(\"Six\");\n                j += 1;\n            } else\
    \ if arr[j] < 10000000 {\n                result.push(\"Seven\");\n          \
    \      j += 1;\n            } else if arr[j] < 100000000 {\n                result.push(\"\
    Eight\");\n                j += 1;\n            } else if arr[j] < 1000000000\
    \ {\n                result.push(\"Nine\");\n                j += 1;\n       \
    \     } else {\n                result.push(\"Ten\");\n                j += 1;\n\
    \            }\n        }\n        i = j;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgjduulw9.rs:60:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    60 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut i =\
    \ 0;\n    let mut j = 0;\n    while i < arr.len() {\n        let mut cur = arr[i];\n\
    \        while j < arr.len() {\n            if cur > arr[j] {\n              \
    \  cur = arr[j];\n            }\n            j += 1\n        }\n        reversed.push(cur);\n\
    \        i += 1;\n    }\n    for i in reversed.iter() {\n        let mut cur =\
    \ i;\n        while cur > 9 {\n            result.push(by_digit(cur));\n     \
    \       cur -= 10;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpkpfpa28u.rs:39:25\n\
    \   |\n39 |             result.push(by_digit(cur));\n   |                    \
    \     ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkpfpa28u.rs:38:21\n   |\n38 |         while cur > 9 {\n   |        \
    \             ^\n   |                     |\n   |                     expected\
    \ `&isize`, found integer\n   |                     help: consider borrowing here:\
    \ `&9`\n\nerror[E0368]: binary assignment operation `-=` cannot be applied to\
    \ type `&isize`\n  --> /tmp/tmpkpfpa28u.rs:40:13\n   |\n40 |             cur -=\
    \ 10;\n   |             ---^^^^^^\n   |             |\n   |             cannot\
    \ use `-=` on type `&isize`\n   |\nhelp: `-=` can be used on `isize`, you can\
    \ dereference `cur`\n   |\n40 |             *cur -= 10;\n   |             +\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 0;\n    let mut i = 0;\n    while i < arr.len() {\n   \
    \     if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n                continue;\n\
    \            }\n            if arr[j] == arr[i] {\n                j += 1;\n \
    \               continue;\n            }\n            if arr[j] > arr[i] {\n \
    \               result.push(by_length(arr.iter().cloned().skip(i).take(j - i)));\n\
    \                i += j - i;\n                j += 1;\n                continue;\n\
    \            }\n            if arr[j] < arr[i] {\n                result.push(by_length(arr.iter().cloned().skip(i).take(j\
    \ - i)));\n                i += j - i;\n                j += 1;\n            \
    \    continue;\n            }\n            i += 1;\n            j += 1;\n    \
    \    }\n        reversed.push(i);\n        i += 1;\n    }\n    if result.len()\
    \ == 0 {\n        return vec![];\n    }\n    if result.len() == 1 {\n        result.push(by_length(arr.iter().cloned().skip(i).take(result.len()\
    \ - 1)));\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpib96p3lk.rs:38:39\n   |\n\
    38 |                 result.push(by_length(arr.iter().cloned().skip(i).take(j\
    \ - i)));\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `std::iter::Take<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpib96p3lk.rs:44:39\n\
    \   |\n44 |                 result.push(by_length(arr.iter().cloned().skip(i).take(j\
    \ - i)));\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `std::iter::Take<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpib96p3lk.rs:59:31\n\
    \   |\n59 |         result.push(by_length(arr.iter().cloned().skip(i).take(result.len()\
    \ - 1)));\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `std::iter::Take<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpib96p3lk.rs:61:5\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n61 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut reversed = vec![];\n    let mut sorted = vec![];\n    let mut counter\
    \ = 0;\n    let mut last_digit = 0;\n    let mut last_digit2 = 0;\n    let mut\
    \ last_digit3 = 0;\n    let mut last_digit4 = 0;\n    let mut last_digit5 = 0;\n\
    \    let mut last_digit6 = 0;\n    let mut last_digit7 = 0;\n    let mut last_digit8\
    \ = 0;\n    let mut last_digit9 = 0;\n    let mut last_digit10 = 0;\n    let mut\
    \ last_digit11 = 0;\n    let mut last_digit12 = 0;\n    let mut last_digit13 =\
    \ 0;\n    let mut last_digit14 = 0;\n    let mut last_digit15 = 0;\n    let mut\
    \ last_digit16 = 0;\n    let mut last_digit17 = 0;\n    let mut last_digit18 =\
    \ 0;\n    let mut last_digit19 = 0;\n    let mut last_digit20 = 0;\n    let mut\
    \ last_digit21 = 0;\n    let mut last_digit22 = 0;\n    let mut last_digit23 =\
    \ 0;\n    let mut last_digit24 = 0;\n    let mut last_digit25 = 0;\n    let mut\
    \ last_digit26 = 0;\n    let mut last_digit27 = 0;\n    let mut last_digit28 =\
    \ 0;\n    let mut last_digit29 = 0;\n    let mut last_digit30 = 0;\n    let mut\
    \ last_digit31 = 0;\n    let mut last_digit32 = 0;\n    let mut last_digit33 =\
    \ 0;\n    let mut last_digit34 = 0;\n    let mut last_digit35 = 0;\n    let mut\
    \ last_digit36 = 0;\n    let mut last_digit37 = 0;\n    let mut last_digit38 =\
    \ 0;\n    let mut last_digit39 = 0;\n    let mut last_digit40 = 0;\n    let mut\
    \ last_digit41 = 0;\n    let mut last_digit42 = 0;\n    let mut last_digit43 =\
    \ 0;\n    let mut last_digit44 = 0;\n    let mut last_digit45 = 0;\n    let mut\
    \ last_digit46 = 0;\n    let mut last_digit47 = 0;\n    let mut last_digit48 =\
    \ 0;\n    let mut last_digit49 = 0;\n    let mut last_digit50 = 0;\n    let mut\
    \ last_digit51 = 0;\n    let mut last_digit52 = 0;\n    let mut last_digit53 =\
    \ 0;\n    let mut last_digit54 = 0;\n    let mut last_digit55 = 0;\n    let mut\
    \ last_digit56 = 0;\n    let mut last_digit57 = 0;\n    let mut last_digit58 =\
    \ 0;\n    let mut last_digit59 = 0;\n    let mut last_digit60 = 0;\n\n}\n\nfn\
    \ main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1,\
    \ 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptftcsiy6.rs:17:34\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------       \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    arr.sort_unstable_by_key(|x|\
    \ x.checked_div(10).unwrap());\n    arr.reverse();\n    arr.iter().map(|x| {\n\
    \        let mut s = String::new();\n        let mut digit = x;\n        loop\
    \ {\n            if digit < 10 {\n                s.push_str(&format!(\"{}\",\
    \ digit));\n                break;\n            }\n            s.push_str(&format!(\"\
    {}\", digit % 10));\n            digit /= 10;\n        }\n        String::from(s)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8_l_2227.rs:28:24\n   |\n\
    28 |             if digit < 10 {\n   |                        ^^\n   |       \
    \                 |\n   |                        expected `&isize`, found integer\n\
    \   |                        help: consider borrowing here: `&10`\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `&isize`\n  --> /tmp/tmp8_l_2227.rs:33:13\n\
    \   |\n33 |             digit /= 10;\n   |             -----^^^^^^\n   |     \
    \        |\n   |             cannot use `/=` on type `&isize`\n   |\nhelp: `/=`\
    \ can be used on `isize`, you can dereference `digit`\n   |\n33 |            \
    \ *digit /= 10;\n   |             +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n            continue;\n        }\n        let mut j\
    \ = i;\n        while j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] == arr[i] {\n                i += 1;\n                j += 1;\n \
    \               continue;\n            }\n            if arr[j] > arr[i] {\n \
    \               let tmp = arr[j];\n                arr[j] = arr[i];\n        \
    \        arr[i] = tmp;\n                i += 1;\n                j += 1;\n   \
    \             continue;\n            }\n            i += 1;\n        }\n     \
    \   result.push(&names[arr[i] - 1]);\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpwb0a7nyz.rs:47:22\n\
    \   |\n47 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_vec();\n    arr.sort();\n    arr.reverse();\n    let\
    \ mut result = vec![];\n    for i in arr {\n        if i <= 9 {\n            result.push(\"\
    One\".to_string());\n        } else if i <= 99 {\n            result.push(\"Two\"\
    .to_string());\n        } else if i <= 999 {\n            result.push(\"Three\"\
    .to_string());\n        } else if i <= 9999 {\n            result.push(\"Four\"\
    .to_string());\n        } else if i <= 99999 {\n            result.push(\"Five\"\
    .to_string());\n        } else if i <= 999999 {\n            result.push(\"Six\"\
    .to_string());\n        } else if i <= 9999999 {\n            result.push(\"Seven\"\
    .to_string());\n        } else if i <= 999999999 {\n            result.push(\"\
    Eight\".to_string());\n        } else if i <= 99999999999 {\n            result.push(\"\
    Nine\".to_string());\n        } else {\n            result.push(\"One\".to_string());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]`,\n\
    \ right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]`', /tmp/tmpo7jfux0s.rs:53:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n            continue;\n        }\n        let mut j\
    \ = i;\n        while j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] == arr[i] {\n                result.push(by_name(arr[i]));\n    \
    \            i += 1;\n                j += 1;\n                break;\n      \
    \      }\n            j += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpoh0eujcm.rs:33:29\n\
    \   |\n33 |                 result.push(by_name(arr[i]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_vec();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n    let mut result = vec![];\n    for i in arr {\n      \
    \  result.push(by_digit(i));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpncyg9e97.rs:23:21\n\
    \   |\n23 |         result.push(by_digit(i));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n            i +=\
    \ 1;\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] > arr[j + 1] {\n                swap(&mut arr[j],\
    \ &mut arr[j + 1]);\n            }\n            j += 1;\n        }\n        result.push(&names[arr[i]\
    \ - 1]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpauqro6_a.rs:32:17\n\
    \   |\n32 |                 swap(&mut arr[j], &mut arr[j + 1]);\n   |        \
    \         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpauqro6_a.rs:36:22\n\
    \   |\n36 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 10 {\n            result.push(\"One\");\n        } else if\
    \ arr[i] < 100 {\n            result.push(\"Two\");\n        } else if arr[i]\
    \ < 1000 {\n            result.push(\"Three\");\n        } else if arr[i] < 10000\
    \ {\n            result.push(\"Four\");\n        } else if arr[i] < 100000 {\n\
    \            result.push(\"Five\");\n        } else if arr[i] < 1000000 {\n  \
    \          result.push(\"Six\");\n        } else if arr[i] < 10000000 {\n    \
    \        result.push(\"Seven\");\n        } else if arr[i] < 100000000 {\n   \
    \         result.push(\"Eight\");\n        } else if arr[i] < 1000000000 {\n \
    \           result.push(\"Nine\");\n        } else {\n            result.push(\"\
    Ten\");\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_mdjgchm.rs:47:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    47 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut i = 0;\n        let mut j = 0;\n       \
    \ let mut k = len - 1;\n        while i <= k {\n            if arr[i] > arr[j]\
    \ {\n                result.push(&arr[j]);\n                j += 1;\n        \
    \    } else {\n                i += 1;\n            }\n        }\n        len\
    \ = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplf1zh1r8.rs:34:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    34 |     result\n   |     ^^^^^^ expected struct `String`, found `&isize`\n  \
    \ |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut i = 0;\n   \
    \ while i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n\
    \            if arr[j] < 1 || arr[j] > 9 {\n                break;\n         \
    \   }\n            j += 1\n        }\n        let mut k = i;\n        while k\
    \ > 0 && arr[k - 1] > 9 {\n            k -= 1;\n        }\n        result.push(&arr[..k].iter().map(|x|\
    \ {\n            match x {\n                1 => \"One\",\n                2 =>\
    \ \"Two\",\n                3 => \"Three\",\n                4 => \"Four\",\n\
    \                5 => \"Five\",\n                6 => \"Six\",\n             \
    \   7 => \"Seven\",\n                8 => \"Eight\",\n                9 => \"\
    Nine\",\n                _ => panic!(\"Invalid number: {}\", x),\n           \
    \ }\n        }).collect::<Vec<_>>().join(\"\"));\n        i = k;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3rzgnwti.rs:48:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    48 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    arr.sort_by_key(|x|\
    \ x.cmp(&1));\n    arr.reverse();\n    let mut result = vec![];\n    for i in\
    \ arr {\n        let mut s = String::new();\n        if i < 10 {\n           \
    \ s.push_str(&format!(\"One\", i));\n        } else if i < 20 {\n            s.push_str(&format!(\"\
    Two\", i));\n        } else if i < 30 {\n            s.push_str(&format!(\"Three\"\
    , i));\n        } else if i < 40 {\n            s.push_str(&format!(\"Four\",\
    \ i));\n        } else if i < 50 {\n            s.push_str(&format!(\"Five\",\
    \ i));\n        } else if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n\
    \        } else if i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n\
    \        } else if i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n\
    \        } else if i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n\
    \        } else {\n            s.push_str(&format!(\"Ten\", i));\n        }\n\
    \        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmp51ltjhay.rs:29:40\n   |\n29 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp51ltjhay.rs:31:40\n   |\n31 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp51ltjhay.rs:33:42\n\
    \   |\n33 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp51ltjhay.rs:35:41\n   |\n35 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp51ltjhay.rs:37:41\n   |\n37 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp51ltjhay.rs:39:40\n\
    \   |\n39 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp51ltjhay.rs:41:42\n   |\n41 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut current = 1;\n    let mut last_digit = -1;\n    let mut last_digit2\
    \ = -1;\n    let mut last_digit3 = -1;\n    let mut last_digit4 = -1;\n    let\
    \ mut last_digit5 = -1;\n    let mut last_digit6 = -1;\n    let mut last_digit7\
    \ = -1;\n    let mut last_digit8 = -1;\n    let mut last_digit9 = -1;\n    let\
    \ mut last_digit10 = -1;\n    let mut last_digit11 = -1;\n    let mut last_digit12\
    \ = -1;\n    let mut last_digit13 = -1;\n    let mut last_digit14 = -1;\n    let\
    \ mut last_digit15 = -1;\n    let mut last_digit16 = -1;\n    let mut last_digit17\
    \ = -1;\n    let mut last_digit18 = -1;\n    let mut last_digit19 = -1;\n    let\
    \ mut last_digit20 = -1;\n    let mut last_digit21 = -1;\n    let mut last_digit22\
    \ = -1;\n    let mut last_digit23 = -1;\n    let mut last_digit24 = -1;\n    let\
    \ mut last_digit25 = -1;\n    let mut last_digit26 = -1;\n    let mut last_digit27\
    \ = -1;\n    let mut last_digit28 = -1;\n    let mut last_digit29 = -1;\n    let\
    \ mut last_digit30 = -1;\n    let mut last_digit31 = -1;\n    let mut last_digit32\
    \ = -1;\n    let mut last_digit33 = -1;\n    let mut last_digit34 = -1;\n    let\
    \ mut last_digit35 = -1;\n    let mut last_digit36 = -1;\n    let mut last_digit37\
    \ = -1;\n    let mut last_digit38 = -1;\n    let mut last_digit39 = -1;\n    let\
    \ mut last_digit40 = -1;\n    let mut last_digit41 = -1;\n    let mut last_digit42\
    \ = -1;\n    let mut last_digit43 = -1;\n    let mut last_digit44 = -1;\n    let\
    \ mut last_digit45 = -1;\n    let mut last_digit46 = -1;\n    let mut last_digit47\
    \ = -1;\n    let mut last_digit48 = -1;\n    let mut last_digit49 = -1;\n    let\
    \ mut last_digit50 = -1;\n    let mut last_digit51 = -1;\n    let mut last_digit52\
    \ = -1;\n    let mut last_digit53 = -1;\n    let mut last_digit54 = -1;\n    let\
    \ mut last_digit55 = -1;\n    let mut last_digit5\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl0a4mbe7.rs:76:24\n   |\n\
    76 |     let mut last_digit5\n   |                        ^ help: add `;` here\n\
    77 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl0a4mbe7.rs:17:34\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut digits = vec![];\n\
    \    let mut reversed = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        digits.push(arr[i] - 1);\n        reversed.push((arr[i] - 1) as u8);\n\
    \        i += 1;\n    }\n    let mut j = 0;\n    while j < digits.size() {\n \
    \       let digit = digits[j];\n        let index = reversed.iter().position(|&x|\
    \ x == digit).unwrap();\n        result.push(&names[digits[index]]);\n       \
    \ j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmptvfhhlv_.rs:31:22\n\
    \   |\n31 |         result.push(&names[digits[index]]);\n   |                \
    \      ^^^^^ not found in this scope\n\nerror[E0599]: no method named `size` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmptvfhhlv_.rs:28:22\n\
    \   |\n28 |     while j < digits.size() {\n   |                      ^^^^ help:\
    \ there is an associated function with a similar name: `resize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptvfhhlv_.rs:30:56\n   |\n30 |         let index\
    \ = reversed.iter().position(|&x| x == digit).unwrap();\n   |                \
    \                                        ^^^^^ expected `u8`, found `isize`\n\
    \   |\nhelp: you can convert `x` from `u8` to `isize`, matching the type of `digit`\n\
    \   |\n30 |         let index = reversed.iter().position(|&x| isize::from(x) ==\
    \ digit).unwrap();\n   |                                                   ++++++++++++\
    \ +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reverse_arr = vec![];\n\
    \    let mut reverse_arr_len = arr.len();\n    let mut reverse_arr_len2 = reverse_arr.len();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < reverse_arr_len {\n   \
    \     if reverse_arr[j] > 9 {\n            i += 1;\n            j = 0;\n     \
    \   } else {\n            result += &[\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][reverse_arr[j] as usize - 1];\n\
    \            j += 1;\n        }\n    }\n    while j < reverse_arr_len2 {\n   \
    \     result += &[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][reverse_arr[j] as usize - 1];\n        j += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmp52_xvtuy.rs:29:13\n   |\n29 |             result +=\
    \ &[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][reverse_arr[j] as usize - 1];\n   |             ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<_>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmp52_xvtuy.rs:34:9\n\
    \   |\n34 |         result += &[\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][reverse_arr[j] as usize - 1];\n   |\
    \         ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        reversed.push(arr[i]);\n\
    \        i += 1;\n    }\n    for i in reversed.iter().rev() {\n        result.push(by_digit(i));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp0dyxms64.rs:30:21\n\
    \   |\n30 |         result.push(by_digit(i));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] >= 1 && arr[j] <= 9 {\n                result.push(by_digit(arr[j]));\n\
    \                j += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp23g6v8sw.rs:25:29\n\
    \   |\n25 |                 result.push(by_digit(arr[j]));\n   |             \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n   \
    \         if arr[j] < 10 {\n                result.push(\"One\");\n          \
    \      break;\n            }\n            if arr[j] < 100 {\n                result.push(\"\
    Two\");\n                break;\n            }\n            if arr[j] < 1000 {\n\
    \                result.push(\"Three\");\n                break;\n           \
    \ }\n            if arr[j] < 10000 {\n                result.push(\"Four\");\n\
    \                break;\n            }\n            if arr[j] < 100000 {\n   \
    \             result.push(\"Five\");\n                break;\n            }\n\
    \            if arr[j] < 1000000 {\n                result.push(\"Six\");\n  \
    \              break;\n            }\n            if arr[j] < 10000000 {\n   \
    \             result.push(\"Seven\");\n                break;\n            }\n\
    \            if arr[j] < 100000000 {\n                result.push(\"Eight\");\n\
    \                break;\n            }\n            if arr[j] < 1000000000 {\n\
    \                result.push(\"Nine\");\n                break;\n            }\n\
    \            j += 1\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqfzp_7y2.rs:63:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    63 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut digits = vec![];\n    let mut reversed\
    \ = vec![];\n    let mut digits_len = arr.len();\n    let mut reverse_len = digits_len;\n\
    \    let mut i = 0;\n    while i < digits_len {\n        if arr[i] < 10 {\n  \
    \          digits.push(arr[i]);\n        } else {\n            digits.push(arr[i]\
    \ - 10);\n        }\n        i += 1;\n    }\n    digits.sort_unstable();\n   \
    \ digits.reverse();\n    for i in 0..digits_len {\n        let mut index = i;\n\
    \        while index < digits_len {\n            if digits[index] < 10 {\n   \
    \             index += 1;\n                continue;\n            }\n        \
    \    break;\n        }\n        reversed.push(digits[index]);\n    }\n    for\
    \ i in 0..digits_len {\n        let mut index = i;\n        while index < digits_len\
    \ {\n            if digits[index] < 10 {\n                index += 1;\n      \
    \          continue;\n            }\n            break;\n        }\n        result.push(&names[reversed[index]]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp72pxg06h.rs:57:22\n\
    \   |\n57 |         result.push(&names[reversed[index]]);\n   |              \
    \        ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        let mut j = i;\n        while j < len {\n      \
    \      if arr[j] < 10 {\n                result.push(\"One\");\n             \
    \   break;\n            }\n            if arr[j] < 100 {\n                result.push(\"\
    Two\");\n                break;\n            }\n            if arr[j] < 1000 {\n\
    \                result.push(\"Three\");\n                break;\n           \
    \ }\n            if arr[j] < 10000 {\n                result.push(\"Four\");\n\
    \                break;\n            }\n            if arr[j] < 100000 {\n   \
    \             result.push(\"Five\");\n                break;\n            }\n\
    \            if arr[j] < 1000000 {\n                result.push(\"Six\");\n  \
    \              break;\n            }\n            if arr[j] < 10000000 {\n   \
    \             result.push(\"Seven\");\n                break;\n            }\n\
    \            if arr[j] < 100000000 {\n                result.push(\"Eight\");\n\
    \                break;\n            }\n            if arr[j] < 1000000000 {\n\
    \                result.push(\"Nine\");\n                break;\n            }\n\
    \            j += 1; // skip to next digit\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2dgn0s1c.rs:67:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    67 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n   \
    \         if arr[j] < 10 {\n                result.push(\"One\");\n          \
    \      j += 1;\n            } else if arr[j] < 100 {\n                result.push(\"\
    Two\");\n                j += 1;\n            } else if arr[j] < 1000 {\n    \
    \            result.push(\"Three\");\n                j += 1;\n            } else\
    \ if arr[j] < 10000 {\n                result.push(\"Four\");\n              \
    \  j += 1;\n            } else if arr[j] < 100000 {\n                result.push(\"\
    Five\");\n                j += 1;\n            } else if arr[j] < 1000000 {\n\
    \                result.push(\"Six\");\n                j += 1;\n            }\
    \ else if arr[j] < 10000000 {\n                result.push(\"Seven\");\n     \
    \           j += 1;\n            } else if arr[j] < 100000000 {\n            \
    \    result.push(\"Eight\");\n                j += 1;\n            } else if arr[j]\
    \ < 1000000000 {\n                result.push(\"Nine\");\n                j +=\
    \ 1;\n            } else {\n                result.push(\"Ten\");\n          \
    \      j += 1;\n            }\n        }\n        i = j;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcw_bkg5y.rs:57:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    57 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut digits\
    \ = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = arr.len()\
    \ - 1;\n    while i <= k {\n        if arr[i] < 10 {\n            digits.push(arr[i]);\n\
    \            i += 1;\n        } else {\n            let mut temp = 0;\n      \
    \      let mut digit = arr[i];\n            while digit > 0 {\n              \
    \  temp += digit % 10;\n                digit /= 10;\n            }\n        \
    \    reversed.push(temp);\n            i += 1;\n        }\n    }\n    while i\
    \ <= k {\n        let mut temp = 0;\n        let mut digit = arr[i];\n       \
    \ while digit > 0 {\n            temp += digit % 10;\n            digit /= 10;\n\
    \        }\n        result.push(&names[temp]);\n        i += 1;\n    }\n    reversed.reverse();\n\
    \    for &i in &reversed {\n        result.push(&names[i]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpt5f6dkjs.rs:49:22\n\
    \   |\n49 |         result.push(&names[temp]);\n   |                      ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `names` in this scope\n\
    \  --> /tmp/tmpt5f6dkjs.rs:54:22\n   |\n54 |         result.push(&names[i]);\n\
    \   |                      ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reversed = Vec::new();\n\
    \    let mut one = String::from(\"One\");\n    let mut two = String::from(\"Two\"\
    );\n    let mut three = String::from(\"Three\");\n    let mut four = String::from(\"\
    Four\");\n    let mut five = String::from(\"Five\");\n    let mut six = String::from(\"\
    Six\");\n    let mut seven = String::from(\"Seven\");\n    let mut eight = String::from(\"\
    Eight\");\n    let mut nine = String::from(\"Nine\");\n    let mut ten = String::from(\"\
    Ten\");\n    let mut eleven = String::from(\"Eleven\");\n    let mut twelve =\
    \ String::from(\"Twelve\");\n    let mut thirteen = String::from(\"Thirteen\"\
    );\n    let mut fourteen = String::from(\"Fourteen\");\n    let mut fifteen =\
    \ String::from(\"Fifteen\");\n    let mut sixteen = String::from(\"Sixteen\");\n\
    \    let mut seventeen = String::from(\"Seventeen\");\n    let mut eighteen =\
    \ String::from(\"Eighteen\");\n    let mut nineteen = String::from(\"Nineteen\"\
    );\n    let mut twenty = String::from(\"Twenty\");\n    let mut twenty_one = String::from(\"\
    Twenty-One\");\n    let mut twenty_two = String::from(\"Twenty-Two\");\n    let\
    \ mut twenty_three = String::from(\"Twenty-Three\");\n    let mut twenty_four\
    \ = String::from(\"Twenty-Four\");\n    let mut twenty_five = String::from(\"\
    Twenty-Five\");\n    let mut twenty_six = String::from(\"Twenty-Six\");\n    let\
    \ mut twenty_seven = String::from(\"Twenty-Seven\");\n    let mut twenty_eight\
    \ = String::from(\"Twenty-Eight\");\n    let mut twenty_nine = String::from(\"\
    Twenty-Nine\");\n    let mut thirty = String::from(\"Thirty\");\n    let mut thirty_one\
    \ = String::from(\"Thirty-One\");\n    let mut thirty_two = String::from\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7e65eskt.rs:51:38\n   |\n\
    51 |     let mut thirty_two = String::from\n   |                             \
    \         ^ help: add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7e65eskt.rs:17:34\n   |\n17 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |    ---------                     ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut counter\
    \ = 0;\n    let mut current = 1;\n    let mut last = 0;\n    let mut last2 = 0;\n\
    \    let mut last3 = 0;\n    let mut last4 = 0;\n    let mut last5 = 0;\n    let\
    \ mut last6 = 0;\n    let mut last7 = 0;\n    let mut last8 = 0;\n    let mut\
    \ last9 = 0;\n    let mut last10 = 0;\n    let mut last11 = 0;\n    let mut last12\
    \ = 0;\n    let mut last13 = 0;\n    let mut last14 = 0;\n    let mut last15 =\
    \ 0;\n    let mut last16 = 0;\n    let mut last17 = 0;\n    let mut last18 = 0;\n\
    \    let mut last19 = 0;\n    let mut last20 = 0;\n    let mut last21 = 0;\n \
    \   let mut last22 = 0;\n    let mut last23 = 0;\n    let mut last24 = 0;\n  \
    \  let mut last25 = 0;\n    let mut last26 = 0;\n    let mut last27 = 0;\n   \
    \ let mut last28 = 0;\n    let mut last29 = 0;\n    let mut last30 = 0;\n    let\
    \ mut last31 = 0;\n    let mut last32 = 0;\n    let mut last33 = 0;\n    let mut\
    \ last34 = 0;\n    let mut last35 = 0;\n    let mut last36 = 0;\n    let mut last37\
    \ = 0;\n    let mut last38 = 0;\n    let mut last39 = 0;\n    let mut last40 =\
    \ 0;\n    let mut last41 = 0;\n    let mut last42 = 0;\n    let mut last43 = 0;\n\
    \    let mut last44 = 0;\n    let mut last45 = 0;\n    let mut last46 = 0;\n \
    \   let mut last47 = 0;\n    let mut last48 = 0;\n    let mut last49 = 0;\n  \
    \  let mut last50 = 0;\n    let mut last51 = 0;\n    let mut last52 = 0;\n   \
    \ let mut last53 = 0;\n    let mut last54 = 0;\n    let mut last55 = 0;\n    let\
    \ mut last56 = 0;\n    let mut last57 = 0;\n    let mut last58 = 0;\n    let mut\
    \ last59 = 0;\n    let mut last60 = 0;\n    let mut last61 = 0;\n    let mut last62\
    \ = 0;\n    let mut last63 = 0;\n    let mut last64 = 0;\n    let mut last65 =\
    \ 0;\n    let mut last66 = 0;\n    let mut last67 = 0;\n    let mut last68 = 0;\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdvqm3dro.rs:17:34\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------       \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reversed = Vec::new();\n\
    \    let mut reversed_index = 0;\n    let mut first_index = 0;\n    let mut last_index\
    \ = 0;\n    let mut first_value = 1;\n    let mut last_value = 9;\n    let mut\
    \ first_value_index = 0;\n    let mut last_value_index = 0;\n    let mut first_value_length\
    \ = 0;\n    let mut last_value_length = 0;\n    let mut first_value_length_index\
    \ = 0;\n    let mut last_value_length_index = 0;\n    let mut first_value_length_value\
    \ = 0;\n    let mut last_value_length_value = 0;\n    let mut first_value_length_value_index\
    \ = 0;\n    let mut last_value_length_value_index = 0;\n    let mut first_value_length_value_value\
    \ = 0;\n    let mut last_value_length_value_value = 0;\n    let mut first_value_length_value_value_index\
    \ = 0;\n    let mut last_value_length_value_value_index = 0;\n    let mut first_value_length_value_value_value\
    \ = 0;\n    let mut last_value_length_value_value_value = 0;\n    let mut first_value_length_value_value_index\
    \ = 0;\n    let mut last_value_length_value_value_index = 0;\n    let mut first_value_length_value_value_value\
    \ = 0;\n    let mut last_value_length_value_value_value = 0;\n    let mut first_value_length_value_value_value_index\
    \ = 0;\n    let mut last_value_length_value_value_value_index = 0;\n    let mut\
    \ first_value_length_value_value_value_value = 0;\n    let mut last_value_length_value_value_value_value\
    \ = 0;\n    let mut first_value_length_value_value_value_index = 0;\n    let mut\
    \ last_value_length_value_value_value_index = 0;\n    let mut first_value_length_value_value_value_value\
    \ = 0;\n    let mut last_value_length_value_value_value_value = 0;\n    let mut\
    \ first_value_length_value_value_value_index = 0;\n    let mut last_value_length_value_value_value_index\
    \ = 0;\n    let mut first_value_length_value_value_value_value = 0;\n    let mut\
    \ last_value_length_value_value_value_value = 0;\n    let mut first_value_length_value_value_value_index\
    \ = 0;\n    let mut last_value_length_value_value_value_index = 0;\n    let mut\
    \ first_value_length_value_value_value_value = 0;\n    let mut last_value_length_value_value_value_value\
    \ = 0;\n    let mut first_value_length_value_value_value_index = 0;\n    let mut\
    \ last_value_length_value_value_value_index = 0;\n    let mut first_value_length_value_value_value_value\
    \ = 0;\n    let mut last_value_length_value_value_value_value = 0;\n    let mut\
    \ first_value_length_value_value_value_index = 0;\n    let mut last_value_length_value_value_value\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl8_nzant.rs:66:48\n   |\n\
    66 |     let mut last_value_length_value_value_value\n   |                   \
    \                             ^ help: add `;` here\n67 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl8_nzant.rs:17:34\n \
    \  |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    --------- \
    \                    ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut one\
    \ = vec![\"One\"];\n    let mut two = vec![\"Two\"];\n    let mut three = vec![\"\
    Three\"];\n    let mut four = vec![\"Four\"];\n    let mut five = vec![\"Five\"\
    ];\n    let mut six = vec![\"Six\"];\n    let mut seven = vec![\"Seven\"];\n \
    \   let mut eight = vec![\"Eight\"];\n    let mut nine = vec![\"Nine\"];\n   \
    \ let mut ten = vec![\"Ten\"];\n    let mut twenty = vec![\"Twenty\"];\n    let\
    \ mut thirty = vec![\"Thirty\"];\n    let mut forty = vec![\"Forty\"];\n    let\
    \ mut fifty = vec![\"Fifty\"];\n    let mut sixty = vec![\"Sixty\"];\n    let\
    \ mut seventy = vec![\"Seventy\"];\n    let mut eighty = vec![\"Eighty\"];\n \
    \   let mut ninety = vec![\"Ninety\"];\n    let mut hundred = vec![\"Hundred\"\
    ];\n    let mut thousand = vec![\"Thousand\"];\n    let mut million = vec![\"\
    Million\"];\n    let mut billion = vec![\"Billion\"];\n    let mut trillion =\
    \ vec![\"Trillion\"];\n    let mut quadrillion = vec![\"Quadrillion\"];\n    let\
    \ mut quintillion = vec![\"Quintillion\"];\n    let mut sextillion = vec![\"Sextillion\"\
    ];\n    let mut septillion = vec![\"Septillion\"];\n    let mut octillion = vec![\"\
    Octillion\"];\n    let mut nonillion = vec![\"Nonillion\"];\n    let mut decillion\
    \ = vec![\"Decillion\"];\n    let mut undecillion = vec![\"Undecillion\"];\n \
    \   let mut duodecillion = vec![\"Duodecillion\"];\n    let mut tredecillion =\
    \ vec![\"Tredecillion\"];\n    let mut quattuordecillion = vec![\"Quattuordecillion\"\
    ];\n\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnzvr4lti.rs:17:34\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------       \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while len > 0 {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 1 {\n                j += 1;\n          \
    \      continue;\n            }\n            if arr[j] > 9 {\n               \
    \ j += 1;\n                continue;\n            }\n            break;\n    \
    \    }\n        result.push(&arr[..j]);\n        i = j;\n        len -= 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnu4pkpsq.rs:38:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    38 |     result\n   |     ^^^^^^ expected struct `String`, found `&[isize]`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&[isize]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr\n        .iter()\n  \
    \      .cloned()\n        .enumerate()\n        .map(|(i, x)| {\n            match\
    \ x {\n                1 => 1,\n                2 => 2,\n                3 =>\
    \ 3,\n                4 => 4,\n                5 => 5,\n                6 => 6,\n\
    \                7 => 7,\n                8 => 8,\n                9 => 9,\n \
    \               _ => x,\n            }\n        })\n        .collect::<Vec<_>>();\n\
    \    reversed.sort_unstable();\n    for i in reversed.iter() {\n        let mut\
    \ s = String::new();\n        if i < 10 {\n            s.push_str(&format!(\"\
    One\", i));\n        } else if i < 20 {\n            s.push_str(&format!(\"Two\"\
    , i));\n        } else if i < 30 {\n            s.push_str(&format!(\"Three\"\
    , i));\n        } else if i < 40 {\n            s.push_str(&format!(\"Four\",\
    \ i));\n        } else if i < 50 {\n            s.push_str(&format!(\"Five\",\
    \ i));\n        } else if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n\
    \        } else if i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n\
    \        } else if i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n\
    \        } else if i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n\
    \        } else {\n            s.push_str(&format!(\"Ten\", i));\n        }\n\
    \        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpq5p16_nh.rs:45:40\n   |\n45 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpq5p16_nh.rs:47:40\n   |\n47 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpq5p16_nh.rs:49:42\n\
    \   |\n49 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmpq5p16_nh.rs:51:41\n   |\n51 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpq5p16_nh.rs:53:41\n   |\n53 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpq5p16_nh.rs:55:40\n\
    \   |\n55 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmpq5p16_nh.rs:57:42\n   |\n57 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    let mut len =\
    \ arr.len();\n    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  let mut j = i;\n        while j < len {\n            if arr[j] < 1 || arr[j]\
    \ > 9 {\n                j += 1;\n                continue;\n            }\n \
    \           if arr[j] == arr[i] {\n                arr.swap(i, j);\n         \
    \       i += 1;\n                j += 1;\n                continue;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    let mut result\
    \ = vec![];\n    for i in 0..len {\n        if arr[i] < 1 || arr[i] > 9 {\n  \
    \          continue;\n        }\n        result.push(by_digit(arr[i]));\n    }\n\
    \    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpes1rtr80.rs:50:21\n\
    \   |\n50 |         result.push(by_digit(arr[i]));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n    arr.iter().map(|x| {\n        match x {\n           \
    \ 1 => \"One\",\n            2 => \"Two\",\n            3 => \"Three\",\n    \
    \        4 => \"Four\",\n            5 => \"Five\",\n            6 => \"Six\"\
    ,\n            7 => \"Seven\",\n            8 => \"Eight\",\n            9 =>\
    \ \"Nine\",\n            _ => panic!(\"Invalid number: {}\", x),\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmprfw91v3b.rs:34:8\n     |\n34 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] > 9 {\n            result.push(by_length(arr[i..i\
    \ + 9]));\n            i += 9;\n        } else {\n            result.push(by_name(arr[i]));\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp9c0cz8hm.rs:25:25\n\
    \   |\n25 |             result.push(by_name(arr[i]));\n   |                  \
    \       ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9c0cz8hm.rs:22:35\n   |\n22 |             result.push(by_length(arr[i..i\
    \ + 9]));\n   |                                   ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                                   |\n\
    \   |                                   expected struct `Vec`, found slice `[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9c0cz8hm.rs:29:5\n   |\n17 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n29 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut ones\
    \ = vec![];\n    let mut twos = vec![];\n    let mut threes = vec![];\n    let\
    \ mut fours = vec![];\n    let mut fives = vec![];\n    let mut sixes = vec![];\n\
    \    let mut sevens = vec![];\n    let mut eights = vec![];\n    let mut nines\
    \ = vec![];\n    let mut tens = vec![];\n    let mut hundreds = vec![];\n    let\
    \ mut thousands = vec![];\n    let mut ten_thousands = vec![];\n    let mut hundred_thousands\
    \ = vec![];\n    let mut millions = vec![];\n    let mut billions = vec![];\n\
    \    let mut trillions = vec![];\n    let mut quadrillions = vec![];\n    let\
    \ mut quintillions = vec![];\n    let mut sextillions = vec![];\n    let mut septillions\
    \ = vec![];\n    let mut octillions = vec![];\n    let mut nonillions = vec![];\n\
    \    let mut decillions = vec![];\n    let mut undecillions = vec![];\n    let\
    \ mut duodecillions = vec![];\n    let mut tredecillions = vec![];\n    let mut\
    \ quattuordecillions = vec![];\n    let mut quindecillions = vec![];\n    let\
    \ mut sexdecillions = vec![];\n    let mut septendecillions = vec![];\n    let\
    \ mut octodecillions = vec![];\n    let mut novemdecillions = vec![];\n    let\
    \ mut vigintillions = vec![];\n    let mut unvigintillions = vec![];\n    let\
    \ mut duovigintillions = vec![];\n    let mut trevigintillions = vec![];\n   \
    \ let mut quattuorvigintillions = vec![];\n    let mut quinvigintillions = vec![];\n\
    \    let mut sexvigintillions = vec![];\n    let mut septenvigintillions = \n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp2out12bq.rs:64:1\n\
    \   |\n64 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reverse_arr\
    \ = vec![];\n    let mut one_arr = vec![];\n    let mut two_arr = vec![];\n  \
    \  let mut three_arr = vec![];\n    let mut four_arr = vec![];\n    let mut five_arr\
    \ = vec![];\n    let mut six_arr = vec![];\n    let mut seven_arr = vec![];\n\
    \    let mut eight_arr = vec![];\n    let mut nine_arr = vec![];\n    let mut\
    \ one_counter = 0;\n    let mut two_counter = 0;\n    let mut three_counter =\
    \ 0;\n    let mut four_counter = 0;\n    let mut five_counter = 0;\n    let mut\
    \ six_counter = 0;\n    let mut seven_counter = 0;\n    let mut eight_counter\
    \ = 0;\n    let mut nine_counter = 0;\n    let mut one_counter = 0;\n    let mut\
    \ two_counter = 0;\n    let mut three_counter = 0;\n    let mut four_counter =\
    \ 0;\n    let mut five_counter = 0;\n    let mut six_counter = 0;\n    let mut\
    \ seven_counter = 0;\n    let mut eight_counter = 0;\n    let mut nine_counter\
    \ = 0;\n    let mut one_counter = 0;\n    let mut two_counter = 0;\n    let mut\
    \ three_counter = 0;\n    let mut four_counter = 0;\n    let mut five_counter\
    \ = 0;\n    let mut six_counter = 0;\n    let mut seven_counter = 0;\n    let\
    \ mut eight_counter = 0;\n    let mut nine_counter = 0;\n    let mut one_counter\
    \ = 0;\n    let mut two_counter = 0;\n    let mut three_counter = 0;\n    let\
    \ mut four_counter = 0;\n    let mut five_counter = 0;\n    let mut six_counter\
    \ = 0;\n    let mut seven_counter = 0;\n    let mut eight_counter = 0;\n    let\
    \ mut nine_counter = 0;\n    let mut one_counter = 0;\n    let mut two_counter\
    \ = 0;\n    let mut three_counter = 0;\n    let mut four_counter = 0;\n    let\
    \ mut five_counter = 0;\n    let mut six_counter = 0;\n    let mut seven_counter\
    \ = 0;\n    let mut eight_counter = 0;\n    let mut nine_counter = 0;\n    let\
    \ mut one_counter = 0;\n    let mut two_counter = 0;\n    let mut three_counter\
    \ = 0;\n    let mut four_counter = 0;\n    let mut five_counter = 0;\n    let\
    \ mut six_counter = 0;\n    let mut seven_counter = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmqmgpx7a.rs:81:11\n   |\n\
    81 |     let mu\n   |           ^ help: add `;` here\n82 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmqmgpx7a.rs:17:34\n \
    \  |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    --------- \
    \                    ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n\n    for n in arr {\n        match n {\n      \
    \      1 => ones.push(\"One\"),\n            2 => twos.push(\"Two\"),\n      \
    \      3 => threes.push(\"Three\"),\n            4 => fours.push(\"Four\"),\n\
    \            5 => fives.push(\"Five\"),\n            6 => sixes.push(\"Six\"),\n\
    \            7 => sevens.push(\"Seven\"),\n            8 => eights.push(\"Eight\"\
    ),\n            9 => nines.push(\"Nine\"),\n            _ => continue,\n     \
    \   }\n    }\n\n    for n in ones {\n        reversed.push(n);\n    }\n\n    for\
    \ n in twos {\n        reversed.push(n);\n    }\n\n    for n in threes {\n   \
    \     reversed.push(n);\n    }\n\n    for n in fours {\n        reversed.push(n);\n\
    \    }\n\n    for n in fives {\n        reversed.push(n);\n    }\n\n    for n\
    \ in sixes {\n        reversed.push(n);\n    }\n\n    for n in sevens {\n    \
    \    reversed.push(n);\n    }\n\n    for n in eights {\n        reversed.push(n);\n\
    \    }\n\n    for n in nines {\n        reversed.push(n);\n    }\n\n    for n\
    \ in reversed {\n        result.push(n);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp28kk8i6j.rs:85:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    85 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut one = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    let mut two = vec![\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"];\n    let mut three = vec![\"Twelve\", \"Thirteen\"\
    , \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    , \"Twenty\"];\n    let mut four = vec![\"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\"];\n\
    \    let mut five = vec![\"Fifty\", \"Forty\", \"Fifty\", \"Forty\", \"Fifty\"\
    , \"Forty\", \"Fifty\", \"Forty\", \"Fifty\"];\n    let mut six = vec![\"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\"\
    , \"Sixty\"];\n    let mut seven = vec![\"Seventy\", \"Eighty\", \"Ninety\", \"\
    Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"];\n    let\
    \ mut eight = vec![\"Eighty\", \"Ninety\", \"Twenty\", \"Thirty\", \"Forty\",\
    \ \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"];\n    let mut nine = vec![\"\
    Ninety\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"];\n    let mut ten = vec![\"Ten\", \"Eleven\", \"Twelve\"\
    , \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\"];\n    let mut eleven = vec![\"Eleven\", \"Twelve\", \"Thirteen\"\
    , \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    , \"Ten\"];\n    let mut twelve = vec![\"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\", \"Eleven\"\
    ];\n    let mut thirteen = \n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp17f449y0.rs:33:1\n\
    \   |\n33 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut reversed = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j]\
    \ {\n            j -= 1;\n        }\n        reversed.push(arr[j]);\n        i\
    \ = j;\n    }\n    for i in 0..(reversed.len() - 1) {\n        let mut j = i;\n\
    \        while j > 0 && reversed[j - 1] > reversed[j] {\n            j -= 1;\n\
    \        }\n        reversed.swap(j, i);\n    }\n    for i in 0..(reversed.len()\
    \ - 1) {\n        reversed.push(format!(\"{}\", i));\n    }\n    reversed\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpywzfuvyc.rs:43:23\n   |\n\
    43 |         reversed.push(format!(\"{}\", i));\n   |                       ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpywzfuvyc.rs:45:5\n  \
    \ |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |               \
    \                   ----------- expected `Vec<String>` because of return type\n\
    ...\n45 |     reversed\n   |     ^^^^^^^^ expected struct `String`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut reversed = arr\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .map(|(i, x)| {\n            if x <= 9 {\n                let mut result\
    \ = String::new();\n                let mut digit = x;\n                while\
    \ digit > 0 {\n                    result.push((digit % 10).to_string());\n  \
    \                  digit /= 10;\n                }\n                result.push((digit\
    \ % 10).to_string());\n                result\n            } else {\n        \
    \        \"\".to_string()\n            }\n        })\n        .collect::<Vec<String>>();\n\
    \    reversed.reverse();\n    reversed.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoazn3o37.rs:30:33\n   |\n\
    30 |                     result.push((digit % 10).to_string());\n   |        \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoazn3o37.rs:33:29\n\
    \   |\n33 |                 result.push((digit % 10).to_string());\n   |     \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reverse_arr = arr;\n\
    \    reverse_arr.reverse();\n    for i in reverse_arr.iter() {\n        let mut\
    \ num = String::new();\n        let mut digit = i as usize;\n        num = match\
    \ digit {\n            1 => \"One\",\n            2 => \"Two\",\n            3\
    \ => \"Three\",\n            4 => \"Four\",\n            5 => \"Five\",\n    \
    \        6 => \"Six\",\n            7 => \"Seven\",\n            8 => \"Eight\"\
    ,\n            9 => \"Nine\",\n            _ => panic!(\"Invalid number: {}\"\
    , digit),\n        };\n        result.push(num);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp26qos3ka.rs:25:18\n   |\n\
    25 |             1 => \"One\",\n   |                  ^^^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                  |\n   |           \
    \       expected struct `String`, found `&str`\n\nerror[E0606]: casting `&isize`\
    \ as `usize` is invalid\n  --> /tmp/tmp26qos3ka.rs:23:25\n   |\n23 |         let\
    \ mut digit = i as usize;\n   |                         -^^^^^^^^^\n   |     \
    \                    |\n   |                         cannot cast `&isize` as `usize`\n\
    \   |                         help: dereference the expression: `*i`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut reversed_index = vec![];\n    let mut reversed_index_count = vec![];\n\
    \    let mut reversed_index_count_max = vec![];\n    let mut reversed_index_count_min\
    \ = vec![];\n    let mut reversed_index_count_max_index = vec![];\n    let mut\
    \ reversed_index_count_min_index = vec![];\n    let mut reversed_index_count_max_value\
    \ = vec![];\n    let mut reversed_index_count_min_value = vec![];\n    let mut\
    \ reversed_index_count_max_value_count = vec![];\n    let mut reversed_index_count_min_value_count\
    \ = vec![];\n    let mut reversed_index_count_max_value_count_max = vec![];\n\
    \    let mut reversed_index_count_min_value_count_max = vec![];\n    let mut reversed_index_count_max_value_count_min\
    \ = vec![];\n    let mut reversed_index_count_min_value_count_min = vec![];\n\
    \    let mut reversed_index_count_max_value_count_max_index = vec![];\n    let\
    \ mut reversed_index_count_min_value_count_max_index = vec![];\n    let mut reversed_index_count_max_value_count_min_index\
    \ = vec![];\n    let mut reversed_index_count_min_value_count_min_index = vec![];\n\
    \    let mut reversed_index_count_max_value_count_max_value = vec![];\n    let\
    \ mut reversed_index_count_min_value_count_max_value = vec![];\n    let mut reversed_index_count_max_value_count_min_value\
    \ = vec![];\n    let mut reversed_index_count_min_value_count_min_value = vec![];\n\
    \    let mut reversed_index_count_max_value_count_max_value_count = vec![];\n\
    \    let mut reversed_index_count_min_value_count_max_value_count = vec![];\n\
    \    let mut reversed_index_count_max_value_count_min_value_count = vec![];\n\
    \    let mut reversed_index_count_min_value_count_min_value_count = vec![];\n\
    \    let mut reversed_index_count_max_value_count_max_value_count_max = vec![];\n\
    \    let mut reversed_index_count_min_value_count_max_value_count_max = vec![];\n\
    \    let mut reversed_index_count_max_value_count_min_value_count_max = vec![];\n\
    \    let mut reversed_index_count_min_value_count_min_value_count_max = vec![];\n\
    \    let mut reversed_index_count_max_value_count_max_value_count_min = vec![];\n\
    \    let mut reversed_index_count_min_value_count_max_value_count_min = vec![];\n\
    \    let mut reversed_index_\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5z6046g5.rs:52:28\n   |\n\
    52 |     let mut reversed_index_\n   |                            ^ help: add\
    \ `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5z6046g5.rs:17:34\n   |\n17 | fn by_length(arr: Vec<isize>) ->\
    \ Vec<String> {\n   |    ---------                     ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n    let mut result = vec![];\n    for i in arr {\n      \
    \  let mut s = String::new();\n        if i < 10 {\n            s.push_str(&format!(\"\
    One\", i));\n        } else if i < 20 {\n            s.push_str(&format!(\"Two\"\
    , i));\n        } else if i < 30 {\n            s.push_str(&format!(\"Three\"\
    , i));\n        } else if i < 40 {\n            s.push_str(&format!(\"Four\",\
    \ i));\n        } else if i < 50 {\n            s.push_str(&format!(\"Five\",\
    \ i));\n        } else if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n\
    \        } else if i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n\
    \        } else if i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n\
    \        } else if i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n\
    \        } else {\n            s.push_str(&format!(\"Ten\", i));\n        }\n\
    \        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpcr41jmgm.rs:25:40\n   |\n25 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpcr41jmgm.rs:27:40\n   |\n27 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpcr41jmgm.rs:29:42\n\
    \   |\n29 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmpcr41jmgm.rs:31:41\n   |\n31 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpcr41jmgm.rs:33:41\n   |\n33 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpcr41jmgm.rs:35:40\n\
    \   |\n35 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmpcr41jmgm.rs:37:42\n   |\n37 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_owned();\n    let mut len = arr.len();\n    let mut i\
    \ = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n         \
    \   i += 1;\n            continue;\n        }\n        let mut j = i;\n      \
    \  while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n    \
    \    swap(&mut arr[j], &mut arr[i]);\n        i += 1;\n    }\n    let mut result\
    \ = vec![];\n    for i in 0..len {\n        result.push(format!(\"{}\", arr[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpj0al6j42.rs:33:9\n\
    \   |\n33 |         swap(&mut arr[j], &mut arr[i]);\n   |         ^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        let mut j = i;\n        while j < len {\n      \
    \      if arr[j] < 10 {\n                result.push(format!(\"{}\", arr[j]));\n\
    \                j += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        i += 1;\n    }\n    result.reverse();\n    for i\
    \ in result {\n        if let Some(str) = &i {\n            match str {\n    \
    \            \"0\" => \"One\",\n                \"1\" => \"Two\",\n          \
    \      \"2\" => \"Three\",\n                \"3\" => \"Four\",\n             \
    \   \"4\" => \"Five\",\n                \"5\" => \"Six\",\n                \"\
    6\" => \"Seven\",\n                \"7\" => \"Eight\",\n                \"8\"\
    \ => \"Nine\",\n                _ => panic!(\"Invalid number in array: {}\", i),\n\
    \            }\n        } else {\n            panic!(\"Invalid number in array:\
    \ {}\", i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp8vfuzi4.rs:38:16\n   |\n\
    38 |         if let Some(str) = &i {\n   |                ^^^^^^^^^   -- this\
    \ expression has type `&String`\n   |                |\n   |                expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<_>`\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n   --> /tmp/tmpp8vfuzi4.rs:38:16\n\
    \    |\n38  |         if let Some(str) = &i {\n    |                ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Some`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmpp8vfuzi4.rs:49:22\n   |\n\
    39 | /             match str {\n40 | |                 \"0\" => \"One\",\n41 |\
    \ |                 \"1\" => \"Two\",\n42 | |                 \"2\" => \"Three\"\
    ,\n...  |\n48 | |                 \"8\" => \"Nine\",\n   | |                 \
    \       ------ this and all prior arms are found to be of type `&str`\n49 | |\
    \                 _ => panic!(\"Invalid number in array: {}\", i),\n   | |   \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `()`\n50 | |             }\n   | |_____________- `match` arms have incompatible\
    \ types\n   |\n   = note: this error originates in the macro `$crate::panic::panic_2015`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort_unstable();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    for i in arr {\n        if i <= 9 {\n     \
    \       result.push(\"One\".to_string());\n        } else if i <= 99 {\n     \
    \       result.push(\"Two\".to_string());\n        } else if i <= 999 {\n    \
    \        result.push(\"Three\".to_string());\n        } else if i <= 9999 {\n\
    \            result.push(\"Four\".to_string());\n        } else if i <= 99999\
    \ {\n            result.push(\"Five\".to_string());\n        } else if i <= 999999\
    \ {\n            result.push(\"Six\".to_string());\n        } else if i <= 9999999\
    \ {\n            result.push(\"Seven\".to_string());\n        } else if i <= 999999999\
    \ {\n            result.push(\"Eight\".to_string());\n        } else if i <= 99999999999\
    \ {\n            result.push(\"Nine\".to_string());\n        } else {\n      \
    \      result.push(\"Ten\".to_string());\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]`,\n\
    \ right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]`', /tmp/tmpvfghfcq_.rs:53:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut result = vec![];\n    let mut reversed = vec![];\n\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    let mut k = arr.len() - 1;\n\n    while i < k\
    \ {\n        if arr[i] < 9 {\n            i += 1;\n            continue;\n   \
    \     }\n\n        let mut tmp = arr[i];\n        reversed.push(tmp);\n\n    \
    \    while j > i && arr[j] < 9 {\n            j -= 1;\n        }\n\n        if\
    \ j > i {\n            i += 1;\n        } else {\n            i += 1;\n      \
    \      j = i;\n        }\n    }\n\n    for i in 0..(reversed.len() - 1) {\n  \
    \      result.push(by_name(reversed[i]));\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpzkwq43c7.rs:51:21\n\
    \   |\n51 |         result.push(by_name(reversed[i]));\n   |                 \
    \    ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    let mut reversed = vec![];\n\
    \    for i in 0..arr.len() {\n        let mut reversed_i = i;\n        while reversed_i\
    \ >= 10 {\n            reversed_i /= 10;\n        }\n        reversed.push(by_digit(arr[reversed_i].to_string()));\n\
    \    }\n    reversed.reverse();\n    for i in 0..arr.len() {\n        let mut\
    \ reversed_i = i;\n        while reversed_i >= 10 {\n            reversed_i /=\
    \ 10;\n        }\n        reversed.push(by_digit(arr[reversed_i].to_string()));\n\
    \    }\n    reversed\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6h851w68.rs:29:23\n\
    \   |\n29 |         reversed.push(by_digit(arr[reversed_i].to_string()));\n  \
    \ |                       ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `by_digit` in this scope\n  --> /tmp/tmp6h851w68.rs:37:23\n  \
    \ |\n37 |         reversed.push(by_digit(arr[reversed_i].to_string()));\n   |\
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_vec();\n    arr.sort();\n    arr.reverse();\n\
    \    arr.iter().map(|x| {\n        match x {\n            1 => \"One\",\n    \
    \        2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\"\
    ,\n            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"\
    Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\",\n          \
    \  _ => panic!(\"Invalid number: {}\", x),\n        }\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpqascd60_.rs:34:8\n     |\n34 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        let mut j = i;\n        while j < len {\n      \
    \      if arr[j] < 10 {\n                result.push(format!(\"{}\", arr[j]));\n\
    \                j += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        i += 1;\n    }\n    result.reverse();\n    for i\
    \ in result {\n        if let Ok(index) = i.parse::<usize>() {\n            arr[index]\
    \ = String::from(&i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq34yjggr.rs:39:26\n   |\n\
    39 |             arr[index] = String::from(&i);\n   |             ---------- \
    \  ^^^^^^^^^^^^^^^^ expected `isize`, found struct `String`\n   |            \
    \ |\n   |             expected due to the type of this binding\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut digits = vec![];\n\
    \    let mut reversed = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 10 {\n            digits.push(arr[i]);\n        } else {\n\
    \            digits.push(arr[i] - 10);\n        }\n        i += 1;\n    }\n  \
    \  for i in 0..digits.len() {\n        let mut j = i;\n        while j > 0 {\n\
    \            let mut k = j;\n            while k > 0 {\n                reversed.push(reversed[k\
    \ - 1]);\n                k -= 1;\n            }\n            reversed.push(digits[j]);\n\
    \            j -= 1;\n        }\n    }\n    for i in 0..digits.len() {\n     \
    \   result.push(by_digit(digits[i]));\n    }\n    for i in 0..reversed.len() {\n\
    \        result.push(by_digit(reversed[i]));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpl2okjohr.rs:43:21\n\
    \   |\n43 |         result.push(by_digit(digits[i]));\n   |                  \
    \   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `by_digit`\
    \ in this scope\n  --> /tmp/tmpl2okjohr.rs:46:21\n   |\n46 |         result.push(by_digit(reversed[i]));\n\
    \   |                     ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr.rev();\n    let mut counter\
    \ = 0;\n    let mut i = 0;\n    while i < reversed.len() {\n        if reversed[i]\
    \ < 10 {\n            counter = counter + 1;\n        } else {\n            if\
    \ counter == 0 {\n                result.push(\"One\");\n            } else {\n\
    \                result.push(\"Two\");\n            }\n            counter = 0;\n\
    \        }\n        i = i + 1;\n    }\n    if counter == 0 {\n        result.push(\"\
    One\");\n    } else {\n        result.push(\"Two\");\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpku1np3qk.rs:22:28\n\
    \    |\n22  |       let mut reversed = arr.rev();\n    |                     \
    \         ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpku1np3qk.rs:43:5\n   |\n17 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n43 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    arr.iter().map(|x|\
    \ {\n        match x {\n            1 => \"One\",\n            2 => \"Two\",\n\
    \            3 => \"Three\",\n            4 => \"Four\",\n            5 => \"\
    Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n            8\
    \ => \"Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"Invalid\
    \ number: {}\", x),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8_d0iqfo.rs:37:8\n     |\n37 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() {\n            if arr[j]\
    \ < 1 || arr[j] > 9 {\n                j += 1;\n                continue;\n  \
    \          }\n            result.push(format!(\"{}\", arr[j]));\n            j\
    \ += 1;\n        }\n        i += 1;\n    }\n    result.reverse();\n    for i in\
    \ result {\n        if let Ok(index) = i.parse::<usize>() {\n            match\
    \ index {\n                0 => \"One\",\n                1 => \"Two\",\n    \
    \            2 => \"Three\",\n                3 => \"Four\",\n               \
    \ 4 => \"Five\",\n                5 => \"Six\",\n                6 => \"Seven\"\
    ,\n                7 => \"Eight\",\n                8 => \"Nine\",\n         \
    \       _ => panic!(\"Invalid number {}\", index),\n            }\n        } else\
    \ {\n            panic!(\"Invalid number {}\", i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpx8tu6d0v.rs:48:22\n\
    \   |\n38 | /             match index {\n39 | |                 0 => \"One\",\n\
    40 | |                 1 => \"Two\",\n41 | |                 2 => \"Three\",\n\
    ...  |\n47 | |                 8 => \"Nine\",\n   | |                      ------\
    \ this and all prior arms are found to be of type `&str`\n48 | |             \
    \    _ => panic!(\"Invalid number {}\", index),\n   | |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `()`\n49 | |             }\n   | |_____________- `match`\
    \ arms have incompatible types\n   |\n   = note: this error originates in the\
    \ macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut ten_thousands = vec![];\n\
    \    let mut hundred_thousands = vec![];\n    let mut millions = vec![];\n   \
    \ let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut quadrillions\
    \ = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions = vec![];\n\
    \    let mut septillions = vec![];\n    let mut octillions = vec![];\n    let\
    \ mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut undecillions\
    \ = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions =\
    \ vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut billions_ = vec![];\n\
    \    let mut trillions_ = vec![];\n    let mut quadrillions_ = vec![];\n    let\
    \ mut quintillions_ = vec![];\n    let mut sextillions_ = vec![];\n    let mut\
    \ septillions_ = vec![];\n    let mut octillions_ = vec![];\n    let mut nonillions_\
    \ = vec![];\n    let mut decillions_ = vec![];\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp26qqw4l3.rs:17:34\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------       \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() && arr[j] < 10 {\n      \
    \      j += 1\n        }\n        if j == i {\n            break;\n        }\n\
    \        let mut k = j;\n        while k > i && arr[k] > 9 {\n            k -=\
    \ 1\n        }\n        if k > i {\n            result.push(&arr[..i].iter().map(|x|\
    \ x.to_string()).collect::<Vec<_>>().join(\"\"));\n            result.push(&arr[i..k].iter().map(|x|\
    \ x.to_string()).collect::<Vec<_>>().join(\"\"));\n            i = k;\n      \
    \  } else {\n            result.push(&arr[i..j].iter().map(|x| x.to_string()).collect::<Vec<_>>().join(\"\
    \"));\n            i = j;\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv1c9paj7.rs:44:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    44 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9\
    \ {\n            i += 1;\n            continue;\n        }\n        let mut j\
    \ = i;\n        while j < len {\n            if arr[j] < 1 || arr[j] > 9 {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] == arr[i] {\n                result.push(by_digit(arr[j], i));\n\
    \                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpuhlf_9m2.rs:33:29\n\
    \   |\n33 |                 result.push(by_digit(arr[j], i));\n   |          \
    \                   ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 1;\n    let mut i = 0;\n    while i < arr.len() {\n   \
    \     if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] == arr[j - 1] {\n                j += 1;\n                continue;\n\
    \            }\n            break;\n        }\n        reversed.push(arr[j]);\n\
    \        i += 1;\n    }\n    for i in reversed.iter() {\n        result.push(by_digit(i));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpeaow31pv.rs:39:21\n\
    \   |\n39 |         result.push(by_digit(i));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort();\n    arr.reverse();\n\
    \    let mut result = Vec::new();\n    for i in arr {\n        let mut s = String::new();\n\
    \        if i < 10 {\n            s.push('0');\n        }\n        s.push(i.to_string());\n\
    \        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sb54l97.rs:27:16\n   |\n\
    27 |         s.push(i.to_string());\n   |                ^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    let mut\
    \ result = vec![];\n    for i in arr {\n        let mut s = String::new();\n \
    \       if i < 10 {\n            s.push_str(&format!(\"One\", i));\n        }\
    \ else if i < 20 {\n            s.push_str(&format!(\"Two\", i));\n        } else\
    \ if i < 30 {\n            s.push_str(&format!(\"Three\", i));\n        } else\
    \ if i < 40 {\n            s.push_str(&format!(\"Four\", i));\n        } else\
    \ if i < 50 {\n            s.push_str(&format!(\"Five\", i));\n        } else\
    \ if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n        } else if\
    \ i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n        } else if\
    \ i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n        } else if\
    \ i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n        } else {\n\
    \            continue;\n        }\n        result.push(s);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmp_8xs6o1z.rs:28:40\n   |\n28 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp_8xs6o1z.rs:30:40\n   |\n30 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp_8xs6o1z.rs:32:42\n\
    \   |\n32 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp_8xs6o1z.rs:34:41\n   |\n34 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp_8xs6o1z.rs:36:41\n   |\n36 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp_8xs6o1z.rs:38:40\n\
    \   |\n38 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp_8xs6o1z.rs:40:42\n   |\n40 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut reversed_index = 0;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        let value = arr[index];\n        if value < 1 || value > 9 {\n  \
    \          index = index + 1\n            continue;\n        }\n        let mut\
    \ reversed_value = value;\n        while reversed_value > 0 {\n            reversed.push(reversed_value\
    \ % 10);\n            reversed_value /= 10;\n        }\n        reversed.reverse();\n\
    \        for digit in reversed {\n            result.push(by_digit(digit));\n\
    \        }\n        index = index + 1\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `continue`\n  --> /tmp/tmp_v4jxaqj.rs:25:30\n\
    \   |\n25 |             index = index + 1\n   |                              ^\
    \ help: add `;` here\n26 |             continue;\n   |             -------- unexpected\
    \ token\n\nerror[E0425]: cannot find function `by_digit` in this scope\n  -->\
    \ /tmp/tmp_v4jxaqj.rs:35:25\n   |\n35 |             result.push(by_digit(digit));\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    arr.sort_by_key(|x|\
    \ x.cmp(&1));\n    arr.reverse();\n    let mut result = vec![];\n    for i in\
    \ arr {\n        let mut s = String::new();\n        let mut digit = i;\n    \
    \    while digit > 9 {\n            s.push_str(&format!(\"{}\", digit % 10));\n\
    \            digit /= 10;\n        }\n        s.push_str(&format!(\"{}\", digit));\n\
    \        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"3\", \"2\", \"8\", \"5\", \"4\", \"2\", \"1\", \"1\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmpzihe7607.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n\
    \            continue;\n        }\n        let mut j = i;\n        while j < arr.len()\
    \ {\n            if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n    \
    \            continue;\n            }\n            if arr[j] == arr[i] {\n   \
    \             i += 1;\n                j += 1;\n                continue;\n  \
    \          }\n            if arr[j] > arr[i] {\n                result.push(by_length(vec![arr[i],\
    \ arr[j]]));\n                i += 1;\n                j += 1;\n             \
    \   continue;\n            }\n            if arr[j] < arr[i] {\n             \
    \   result.push(by_length(vec![arr[j], arr[i]]));\n                j += 1;\n \
    \               continue;\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps_g5lzn2.rs:49:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    49 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    arr.sort();\n    arr.reverse();\n\
    \    arr.iter().map(|x| {\n        match x {\n            1 => \"One\",\n    \
    \        2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\"\
    ,\n            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"\
    Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\",\n          \
    \  _ => panic!(\"Invalid number: {}\", x),\n        }\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpox8muzrl.rs:34:8\n     |\n34 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut ten_thousands = vec![];\n\
    \    let mut hundred_thousands = vec![];\n    let mut millions = vec![];\n   \
    \ let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut quadrillions\
    \ = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions = vec![];\n\
    \    let mut septillions = vec![];\n    let mut octillions = vec![];\n    let\
    \ mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut undecillions\
    \ = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions =\
    \ vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut thousands_tens =\
    \ vec![];\n    let mut thousands_hundreds = vec![];\n    let mut millions_tens\
    \ = vec![];\n    let mut millions_hundreds = vec![];\n    let mut billions_tens\
    \ = vec![];\n    let mut billions_hundreds = vec![];\n    let mut trillions_tens\
    \ = vec![];\n    let mut trillions_hundreds = vec![];\n    let mut quadrillions_ten\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiwyrbmqo.rs:62:29\n   |\n\
    62 |     let mut quadrillions_ten\n   |                             ^ help: add\
    \ `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpiwyrbmqo.rs:17:34\n   |\n17 | fn by_length(arr: Vec<isize>) ->\
    \ Vec<String> {\n   |    ---------                     ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut i = 0;\n   \
    \ while i < arr.len() {\n        if arr[i] > 9 {\n            result.push(by_length(arr[i..i\
    \ + 9]));\n            i += 9;\n        } else {\n            result.push(by_name(arr[i]));\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpemvvl8wp.rs:25:25\n\
    \   |\n25 |             result.push(by_name(arr[i]));\n   |                  \
    \       ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpemvvl8wp.rs:22:35\n   |\n22 |             result.push(by_length(arr[i..i\
    \ + 9]));\n   |                                   ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                                   |\n\
    \   |                                   expected struct `Vec`, found slice `[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpemvvl8wp.rs:29:5\n   |\n17 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n29 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reversed = Vec::new();\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            reversed.push(arr[j]);\n\
    \            j -= 1;\n        }\n        reversed.push(arr[j]);\n        result.push(by_name(reversed));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpds33_t33.rs:28:21\n\
    \   |\n28 |         result.push(by_name(reversed));\n   |                    \
    \ ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        let mut j = i;\n        while j < len {\n      \
    \      if arr[j] < 1 || arr[j] > 9 {\n                break;\n            }\n\
    \            j = j + 1;\n        }\n        if j - i > 1 {\n            result.push(format!(\"\
    {}\", arr[len - i - 1]));\n        }\n        i = j;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"3\"]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]`', /tmp/tmp1wqyq6hs.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    let mut len = arr.len();\n    let mut i =\
    \ 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n           \
    \ i += 1;\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n        swap(&mut\
    \ arr[j], &mut arr[i]);\n        i += 1;\n    }\n    let mut result = vec![];\n\
    \    for i in 0..len {\n        let mut j = i;\n        while j > 0 && arr[j -\
    \ 1] > arr[j] {\n            j -= 1;\n        }\n        result.push(names[j]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmph56u92th.rs:33:9\n\
    \   |\n33 |         swap(&mut arr[j], &mut arr[i]);\n   |         ^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot\
    \ find value `names` in this scope\n  --> /tmp/tmph56u92th.rs:42:21\n   |\n42\
    \ |         result.push(names[j]);\n   |                     ^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut digits = arr.clone();\n    let mut reversed\
    \ = arr.clone();\n    let mut i = 0;\n    while i < digits.len() {\n        if\
    \ digits[i] >= 1 && digits[i] <= 9 {\n            reversed.swap(i, digits[i] -\
    \ 1);\n            i += 1;\n        } else {\n            result.push(by_digit(digits[i\
    \ .. i + 1]));\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp_bvw2t1s.rs:30:25\n\
    \   |\n30 |             result.push(by_digit(digits[i .. i + 1]));\n   |     \
    \                    ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_bvw2t1s.rs:27:30\n   |\n27 |             reversed.swap(i,\
    \ digits[i] - 1);\n   |                              ^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n27 |             reversed.swap(i,\
    \ (digits[i] - 1).try_into().unwrap());\n   |                              + \
    \            +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reverse_arr = arr;\n\
    \    reverse_arr.reverse();\n    for i in reverse_arr {\n        let mut index\
    \ = i;\n        while index > 0 {\n            index = index / 10;\n         \
    \   result.push(by_digit(index));\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpymwypn7r.rs:25:25\n\
    \   |\n25 |             result.push(by_digit(index));\n   |                  \
    \       ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut reverse_arr\
    \ = arr.clone();\n    reverse_arr.reverse();\n    for i in reverse_arr.iter()\
    \ {\n        let mut index = i;\n        let mut digit = String::new();\n    \
    \    while index > 0 {\n            digit = digit.to_string();\n            digit\
    \ = digit.chars().nth(index as usize).unwrap().to_string();\n            result.push(digit);\n\
    \            index -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejwz3jdi.rs:24:23\n   |\n\
    24 |         while index > 0 {\n   |                       ^\n   |           \
    \            |\n   |                       expected `&isize`, found integer\n\
    \   |                       help: consider borrowing here: `&0`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `&isize`\n  --> /tmp/tmpejwz3jdi.rs:28:13\n\
    \   |\n28 |             index -= 1;\n   |             -----^^^^^\n   |       \
    \      |\n   |             cannot use `-=` on type `&isize`\n   |\nhelp: `-=`\
    \ can be used on `isize`, you can dereference `index`\n   |\n28 |            \
    \ *index -= 1;\n   |             +\n\nerror[E0606]: casting `&isize` as `usize`\
    \ is invalid\n  --> /tmp/tmpejwz3jdi.rs:26:39\n   |\n26 |             digit =\
    \ digit.chars().nth(index as usize).unwrap().to_string();\n   |              \
    \                         -----^^^^^^^^^\n   |                               \
    \        |\n   |                                       cannot cast `&isize` as\
    \ `usize`\n   |                                       help: dereference the expression:\
    \ `*index`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0368, E0606.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        if arr[i] > 9 {\n          \
    \  result.push(by_length(arr[i..i + 1]));\n            i += 1;\n        } else\
    \ {\n            result.push(by_name(arr[i]));\n            i += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp3gvtal42.rs:26:25\n\
    \   |\n26 |             result.push(by_name(arr[i]));\n   |                  \
    \       ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp3gvtal42.rs:23:35\n   |\n23 |             result.push(by_length(arr[i..i\
    \ + 1]));\n   |                                   ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                                   |\n\
    \   |                                   expected struct `Vec`, found slice `[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3gvtal42.rs:30:5\n   |\n17 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n30 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n\n    for n in arr {\n        match n {\n      \
    \      1 => ones.push(String::from(\"One\")),\n            2 => twos.push(String::from(\"\
    Two\")),\n            3 => threes.push(String::from(\"Three\")),\n           \
    \ 4 => fours.push(String::from(\"Four\")),\n            5 => fives.push(String::from(\"\
    Five\")),\n            6 => sixes.push(String::from(\"Six\")),\n            7\
    \ => sevens.push(String::from(\"Seven\")),\n            8 => eights.push(String::from(\"\
    Eight\")),\n            9 => nines.push(String::from(\"Nine\")),\n           \
    \ _ => continue,\n        }\n    }\n\n    for n in arr {\n        match n {\n\
    \            1 => result.push(ones.pop()),\n            2 => result.push(twos.pop()),\n\
    \            3 => result.push(threes.pop()),\n            4 => result.push(fours.pop()),\n\
    \            5 => result.push(fives.pop()),\n            6 => result.push(sixes.pop()),\n\
    \            7 => result.push(sevens.pop()),\n            8 => result.push(eights.pop()),\n\
    \            9 => result.push(nines.pop()),\n            _ => continue,\n    \
    \    }\n    }\n\n    for n in arr {\n        match n {\n            1 => result.push(ones.pop()),\n\
    \            2 => result.push(twos.pop()),\n            3 => result.push(threes.pop()),\n\
    \            4 => result.push(fours.pop()),\n            5 => result.push(fives.pop()),\n\
    \            6 => result.push(sixes.pop()),\n            7 => result.push(sevens.pop()),\n\
    \            8 => result.push(eights.pop()),\n            9 => result.push(nines.pop()),\n\
    \            _ => continue,\n        }\n    }\n\n    for n in arr {\n        match\
    \ n {\n            1 => result.push(ones.pop()),\n            2 => result.push(twos.pop()),\n\
    \            3 => result.push(threes.pop()),\n            4 => result.push(fours.pop()),\n\
    \            5 => result.push(fives.pop()),\n\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuk1rp2fw.rs:92:3\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n75 |     for n in\
    \ arr {\n   |                  - unclosed delimiter\n76 |         match n {\n\
    \   |                 - this delimiter might not be properly closed...\n...\n\
    83 | }\n   | - ...as it matches this but it has different indentation\n...\n92\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuk1rp2fw.rs:75:5\n\
    \   |\n17 |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n75 | /     for n in arr {\n76 | |         match n {\n77 | |     \
    \        1 => result.push(ones.pop()),\n78 | |             2 => result.push(twos.pop()),\n\
    ...  |\n91 | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n92 | | }\n   | |__^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n \
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        let mut j = i;\n        while j < arr.len() && arr[j]\
    \ < 10 {\n            j += 1\n        }\n        result.push(format!(\"{}\", arr[i..j]));\n\
    \        i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpvf0wn7rx.rs:33:35\n    |\n33  |         result.push(format!(\"\
    {}\", arr[i..j]));\n    |                                   ^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n    |\n    = help: the trait `Sized` is not\
    \ implemented for `[isize]`\nnote: required by a bound in `ArgumentV1::<'a>::new_display`\n\
    \    = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ `[isize]` doesn't implement `std::fmt::Display`\n  --> /tmp/tmpvf0wn7rx.rs:33:35\n\
    \   |\n33 |         result.push(format!(\"{}\", arr[i..j]));\n   |           \
    \                        ^^^^^^^^^ `[isize]` cannot be formatted with the default\
    \ formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented\
    \ for `[isize]`\n   = note: in format strings you may be able to use `{:?}` (or\
    \ {:#?} for pretty-print) instead\n   = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 0;\n    let mut i = 0;\n    while i < arr.len() {\n   \
    \     if arr[i] >= 1 && arr[i] <= 9 {\n            reversed.push(arr[i]);\n  \
    \          i += 1;\n        } else {\n            counter = counter + 1;\n   \
    \     }\n    }\n    if counter > 0 {\n        while counter > 0 {\n          \
    \  let mut j = reversed.len() - 1;\n            while j >= 0 && reversed[j] ==\
    \ 0 {\n                j -= 1;\n            }\n            if j >= 0 {\n     \
    \           result.push(by_name(reversed[j]));\n                reversed.pop();\n\
    \                counter -= 1;\n            } else {\n                break;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmppfmwbpn3.rs:37:29\n\
    \   |\n37 |                 result.push(by_name(reversed[j]));\n   |         \
    \                    ^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut reversed_idx = vec![];\n    let mut reversed_idx_idx = vec![];\n\
    \    let mut reversed_idx_idx_idx = vec![];\n    let mut reversed_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut reversed_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5zh8160v.rs:43:94\n   |\n\
    43 |     let mut reversed_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    \   |                                                                        \
    \                      ^ help: add `;` here\n44 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5zh8160v.rs:17:34\n   |\n17 |\
    \ fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------          \
    \           ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |   \
    \ implicitly returns `()` as its body has no tail or `return` expression\n   |\n\
    \   = note: expected struct `Vec<String>`\n           found unit type `()`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    if len == 0 {\n        return result;\n    }\n    let mut i = 0;\n    while\
    \ i < len {\n        let mut j = i;\n        while j < len {\n            if arr[j]\
    \ < 1 {\n                j += 1;\n                continue;\n            }\n \
    \           if arr[j] > 9 {\n                j += 1;\n                continue;\n\
    \            }\n            if arr[j] == 1 {\n                result.push(\"One\"\
    );\n                i += 1;\n                break;\n            }\n         \
    \   if arr[j] == 2 {\n                result.push(\"Two\");\n                i\
    \ += 1;\n                break;\n            }\n            if arr[j] == 3 {\n\
    \                result.push(\"Three\");\n                i += 1;\n          \
    \      break;\n            }\n            if arr[j] == 4 {\n                result.push(\"\
    Four\");\n                i += 1;\n                break;\n            }\n   \
    \         if arr[j] == 5 {\n                result.push(\"Five\");\n         \
    \       i += 1;\n                break;\n            }\n            if arr[j]\
    \ == 6 {\n                result.push(\"Six\");\n                i += 1;\n   \
    \             break;\n            }\n            if arr[j] == 7 {\n          \
    \      result.push(\"Seven\");\n                i += 1;\n                break;\n\
    \            }\n            if arr[j] == 8 {\n                result.push(\"Eight\"\
    );\n                i += 1;\n                break;\n            }\n         \
    \   if arr[j] == 9 {\n                result.push(\"Nine\");\n               \
    \ i += 1;\n                break;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:36:29\n   |\n\
    36 |                 result.push(\"One\");\n   |                             ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \           |\n   |                             expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:41:29\n\
    \   |\n41 |                 result.push(\"Two\");\n   |                      \
    \       ^^^^^- help: try using a conversion method: `.to_string()`\n   |     \
    \                        |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:46:29\n\
    \   |\n46 |                 result.push(\"Three\");\n   |                    \
    \         ^^^^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                            |\n   |                             expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:51:29\n\
    \   |\n51 |                 result.push(\"Four\");\n   |                     \
    \        ^^^^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                          |\n   |                             expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:56:29\n\
    \   |\n56 |                 result.push(\"Five\");\n   |                     \
    \        ^^^^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                          |\n   |                             expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:61:29\n\
    \   |\n61 |                 result.push(\"Six\");\n   |                      \
    \       ^^^^^- help: try using a conversion method: `.to_string()`\n   |     \
    \                        |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7p20is7v.rs:66:29\n\
    \   |\n66 |                 result.push(\"Seven\");\n   |                    \
    \         ^^^^^^^- help: try using a conversion meth"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n            i +=\
    \ 1;\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] > arr[j + 1] {\n                let tmp = arr[j];\n\
    \                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n   \
    \         }\n            j += 1;\n        }\n        let mut tmp: Vec<String>\
    \ = vec![];\n        for &n in arr {\n            tmp.push(format!(\"{}\", n));\n\
    \        }\n        result.push(tmp.iter().rev().collect::<String>().to_owned());\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgthl05h5.rs:39:13\n   |\n\
    39 |         for &n in arr {\n   |             ^^    --- this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `n`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror[E0277]: a value of type `String` cannot be built from an iterator over\
    \ elements of type `&String`\n    --> /tmp/tmpgthl05h5.rs:42:38\n     |\n42  \
    \ |         result.push(tmp.iter().rev().collect::<String>().to_owned());\n  \
    \   |                                      ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `String`\n     = help:\
    \ the following other types implement trait `FromIterator<A>`:\n             \
    \  <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut len = arr.len();\n    let mut i = 0;\n\
    \    while i < len {\n        let mut j = i;\n        while j < len {\n      \
    \      if arr[j] < 10 {\n                result.push(\"One\");\n             \
    \   break;\n            }\n            if arr[j] < 100 {\n                result.push(\"\
    Two\");\n                break;\n            }\n            if arr[j] < 1000 {\n\
    \                result.push(\"Three\");\n                break;\n           \
    \ }\n            if arr[j] < 10000 {\n                result.push(\"Four\");\n\
    \                break;\n            }\n            if arr[j] < 100000 {\n   \
    \             result.push(\"Five\");\n                break;\n            }\n\
    \            if arr[j] < 1000000 {\n                result.push(\"Six\");\n  \
    \              break;\n            }\n            if arr[j] < 10000000 {\n   \
    \             result.push(\"Seven\");\n                break;\n            }\n\
    \            if arr[j] < 100000000 {\n                result.push(\"Eight\");\n\
    \                break;\n            }\n            if arr[j] < 1000000000 {\n\
    \                result.push(\"Nine\");\n                break;\n            }\n\
    \            j += 1\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmbmdw8pn.rs:68:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    68 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut reversed_index = vec![];\n    let mut reversed_index_map = vec![];\n\
    \    let mut reversed_index_map_reversed = vec![];\n    let mut reversed_index_map_reversed_index\
    \ = vec![];\n    let mut reversed_index_map_reversed_index2 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index3 = vec![];\n    let mut reversed_index_map_reversed_index4\
    \ = vec![];\n    let mut reversed_index_map_reversed_index5 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index6 = vec![];\n    let mut reversed_index_map_reversed_index7\
    \ = vec![];\n    let mut reversed_index_map_reversed_index8 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index9 = vec![];\n    let mut reversed_index_map_reversed_index10\
    \ = vec![];\n    let mut reversed_index_map_reversed_index11 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index12 = vec![];\n    let mut reversed_index_map_reversed_index13\
    \ = vec![];\n    let mut reversed_index_map_reversed_index14 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index15 = vec![];\n    let mut reversed_index_map_reversed_index16\
    \ = vec![];\n    let mut reversed_index_map_reversed_index17 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index18 = vec![];\n    let mut reversed_index_map_reversed_index19\
    \ = vec![];\n    let mut reversed_index_map_reversed_index20 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index21 = vec![];\n    let mut reversed_index_map_reversed_index22\
    \ = vec![];\n    let mut reversed_index_map_reversed_index23 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index24 = vec![];\n    let mut reversed_index_map_reversed_index25\
    \ = vec![];\n    let mut reversed_index_map_reversed_index26 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index27 = vec![];\n    let mut reversed_index_map_reversed_index28\
    \ = vec![];\n    let mut reversed_index_map_reversed_index29 = vec![];\n    let\
    \ mut reversed_index_map_reversed_index\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp43gt76l4.rs:52:46\n   |\n\
    52 |     let mut reversed_index_map_reversed_index\n   |                     \
    \                         ^ help: add `;` here\n53 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp43gt76l4.rs:17:34\n   |\n17 |\
    \ fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------          \
    \           ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |   \
    \ implicitly returns `()` as its body has no tail or `return` expression\n   |\n\
    \   = note: expected struct `Vec<String>`\n           found unit type `()`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut i = 0;\n   \
    \ while i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n\
    \            if arr[j] < 10 {\n                result.push(\"One\");\n       \
    \         break;\n            }\n            if arr[j] < 100 {\n             \
    \   result.push(\"Two\");\n                break;\n            }\n           \
    \ if arr[j] < 1000 {\n                result.push(\"Three\");\n              \
    \  break;\n            }\n            if arr[j] < 10000 {\n                result.push(\"\
    Four\");\n                break;\n            }\n            if arr[j] < 100000\
    \ {\n                result.push(\"Five\");\n                break;\n        \
    \    }\n            if arr[j] < 1000000 {\n                result.push(\"Six\"\
    );\n                break;\n            }\n            if arr[j] < 10000000 {\n\
    \                result.push(\"Seven\");\n                break;\n           \
    \ }\n            if arr[j] < 100000000 {\n                result.push(\"Eight\"\
    );\n                break;\n            }\n            if arr[j] < 1000000000\
    \ {\n                result.push(\"Nine\");\n                break;\n        \
    \    }\n            if arr[j] < 10000000000 {\n                result.push(\"\
    Ten\");\n                break;\n            }\n            if arr[j] < 100000000000\
    \ {\n                result.push(\"Eleven\");\n                break;\n      \
    \      }\n            if arr[j] < 1000000000000 {\n                result.push(\"\
    Twelve\");\n                break;\n            }\n            if arr[j] < 10000000000000\
    \ {\n                result.push(\"Thirteen\");\n                break;\n    \
    \        }\n            if arr[j] < 100000000000000 {\n                result.push(\"\
    Fourteen\");\n                break;\n            }\n            if arr[j] < 1000000000000000\
    \ {\n                result.push(\"Fifteen\");\n                break;\n     \
    \       }\n            if arr[j] < 10000000000000000 {\n                result.push(\"\
    Sixteen\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Seventeen\");\n                break;\n   \
    \         }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Eighteen\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Nineteen\");\n                break;\n    \
    \        }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Twenty one\");\n                break;\n  \
    \          }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty two\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Twenty three\");\n     \
    \           break;\n            }\n            if arr[j] < 10000000000000000\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp42dodfry.rs:125:3\n\
    \    |\n17  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n20  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n21  | \
    \        let mut j = i;\n22  |         while j < arr.len() {\n    |          \
    \                   - this delimiter might not be properly closed...\n...\n116\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n125\
    \ | }\n    |   ^\n\nerror: expected `{`, found `}`\n   --> /tmp/tmp42dodfry.rs:116:1\n\
    \    |\n115 |             if arr[j] < 10000000000000000\n    |             --\
    \ this `if` expression has a condition, but no block\n116 | }\n    | ^ expected\
    \ `{`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp42dodfry.rs:20:5\n   \
    \ |\n17  |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n20  | /     while i < arr.len() {\n21  | |         let mut j = i;\n\
    22  | |         while j < arr.len() {\n23  | |             if arr[j] < 10 {\n\
    ...   |\n124 | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n125 | | }\n    |\
    \ |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<String>`\n\
    \            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut ones = vec![];\n    let mut twos = vec![];\n    let mut threes =\
    \ vec![];\n    let mut fours = vec![];\n    let mut fives = vec![];\n    let mut\
    \ sixes = vec![];\n    let mut sevens = vec![];\n    let mut eights = vec![];\n\
    \    let mut nines = vec![];\n    let mut tens = vec![];\n    let mut hundreds\
    \ = vec![];\n    let mut thousands = vec![];\n    let mut millions = vec![];\n\
    \    let mut billions = vec![];\n    let mut trillions = vec![];\n    let mut\
    \ quadrillions = vec![];\n    let mut quintillions = vec![];\n    let mut sextillions\
    \ = vec![];\n    let mut septillions = vec![];\n    let mut octillions = vec![];\n\
    \    let mut nonillions = vec![];\n    let mut decillions = vec![];\n    let mut\
    \ undecillions = vec![];\n    let mut duodecillions = vec![];\n    let mut tredecillions\
    \ = vec![];\n    let mut quattuordecillions = vec![];\n    let mut quindecillions\
    \ = vec![];\n    let mut sexdecillions = vec![];\n    let mut septendecillions\
    \ = vec![];\n    let mut octodecillions = vec![];\n    let mut novemdecillions\
    \ = vec![];\n    let mut vigintillions = vec![];\n    let mut unvigintillions\
    \ = vec![];\n    let mut duovigintillions = vec![];\n    let mut trevigintillions\
    \ = vec![];\n    let mut quattuorvigintillions = vec![];\n    let mut quinvigintillions\
    \ = vec![];\n    let mut sexvigintillions = vec![];\n    let mut septemvigintillions\
    \ = vec![];\n    let mut octovigintillions = vec![];\n    let mut novemvigintillions\
    \ = vec![];\n    let mu\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpadmwhsy8.rs:61:11\n   |\n\
    61 |     let mu\n   |           ^ help: add `;` here\n62 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpadmwhsy8.rs:17:34\n \
    \  |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    --------- \
    \                    ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    let mut len = arr.len();\n    let mut i =\
    \ 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n           \
    \ i += 1;\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] > arr[j + 1] {\n                swap(&mut arr[j],\
    \ &mut arr[j + 1]);\n            }\n            j += 1;\n        }\n        i\
    \ += 1;\n    }\n    let mut result = vec![];\n    for i in 0..len {\n        if\
    \ arr[i] < 1 || arr[i] > 9 {\n            continue;\n        }\n        result.push(by_digit(arr[i]));\n\
    \    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpsp4g2qsk.rs:32:17\n\
    \   |\n32 |                 swap(&mut arr[j], &mut arr[j + 1]);\n   |        \
    \         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpsp4g2qsk.rs:43:21\n\
    \   |\n43 |         result.push(by_digit(arr[i]));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reverse_arr = arr;\n\
    \    reverse_arr.reverse();\n    for i in reverse_arr {\n        let mut index\
    \ = i;\n        while index > 0 {\n            let digit = index % 10;\n     \
    \       index = index / 10;\n            result.push(by_digit(digit));\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n \
    \   assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpvwh8z632.rs:26:25\n\
    \   |\n26 |             result.push(by_digit(digit));\n   |                  \
    \       ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut one = vec![\"One\"];\n    let mut two = vec![\"Two\"];\n    let mut\
    \ three = vec![\"Three\"];\n    let mut four = vec![\"Four\"];\n    let mut five\
    \ = vec![\"Five\"];\n    let mut six = vec![\"Six\"];\n    let mut seven = vec![\"\
    Seven\"];\n    let mut eight = vec![\"Eight\"];\n    let mut nine = vec![\"Nine\"\
    ];\n    let mut ten = vec![\"Ten\"];\n    let mut eleven = vec![\"Eleven\"];\n\
    \    let mut twelve = vec![\"Twelve\"];\n    let mut thirteen = vec![\"Thirteen\"\
    ];\n    let mut fourteen = vec![\"Fourteen\"];\n    let mut fifteen = vec![\"\
    Fifteen\"];\n    let mut sixteen = vec![\"Sixteen\"];\n    let mut seventeen =\
    \ vec![\"Seventeen\"];\n    let mut eighteen = vec![\"Eighteen\"];\n    let mut\
    \ nineteen = vec![\"Nineteen\"];\n    let mut twenty = vec![\"Twenty\"];\n   \
    \ let mut twenty_one = vec![\"Twenty One\"];\n    let mut twenty_two = vec![\"\
    Twenty Two\"];\n    let mut twenty_three = vec![\"Twenty Three\"];\n    let mut\
    \ twenty_four = vec![\"Twenty Four\"];\n    let mut twenty_five = vec![\"Twenty\
    \ Five\"];\n    let mut twenty_six = vec![\"Twenty Six\"];\n    let mut twenty_seven\
    \ = vec![\"Twenty Seven\"];\n    let mut twenty_eight = vec![\"Twenty Eight\"\
    ];\n    let mut twenty_nine = vec![\"Twenty Nine\"];\n    let mut twenty_ten =\
    \ vec![\"Twenty Ten\"];\n    let mut twenty_twenty = vec![\"Twenty Twenty\"];\n\
    \    let mut twenty_thirty = vec![\"Twenty Thirty\"];\n    let mut twenty_forty\
    \ = vec![\"Twenty Forty\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpoxmlhjj6.rs:61:110\n\
    \   |\n61 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n   |  ______________________________________________________________________________________________________________^\n\
    62 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] >= 1 && arr[j] <= 9 {\n                result.push(format!(\"\
    {}\", arr[j]));\n                j += 1;\n            } else {\n             \
    \   break;\n            }\n        }\n        i = j;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"3\", \"2\", \"8\", \"5\", \"4\", \"1\", \"1\", \"2\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmptxhbf7fp.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(format!(\"\
    {}\", arr[j]));\n                j += 1;\n            } else {\n             \
    \   break;\n            }\n        }\n        reversed.push(arr[i]);\n       \
    \ i += 1;\n    }\n    reversed.reverse();\n    for i in 0..result.len() {\n  \
    \      if result[i] == \"\" {\n            result[i] = \"One\";\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprf6lrygc.rs:37:25\n   |\n\
    37 |             result[i] = \"One\";\n   |             ---------   ^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |             |          \
    \ |\n   |             |           expected struct `String`, found `&str`\n   |\
    \             expected due to the type of this binding\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n\n\
    \    let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n\n    let\
    \ mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n      \
    \  let mut j = i;\n        while j < arr.len() && arr[j] < 10 {\n            j\
    \ += 1\n        }\n        result.push(format!(\"{}\", arr[i]));\n        i =\
    \ j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"8\"]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]`', /tmp/tmpaqx87wh0.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut counter = 0;\n    for num in arr {\n        if num > 9 {\n      \
    \      reversed.push(num % 10);\n            counter += 1;\n        } else {\n\
    \            result.push(&names[num % 10]);\n        }\n    }\n    if counter\
    \ > 0 {\n        result.push(&names[counter]);\n    }\n    reversed.reverse();\n\
    \    for num in reversed {\n        result.push(&names[num]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp8p4f_orn.rs:26:26\n\
    \   |\n26 |             result.push(&names[num % 10]);\n   |                 \
    \         ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `names`\
    \ in this scope\n  --> /tmp/tmp8p4f_orn.rs:30:22\n   |\n30 |         result.push(&names[counter]);\n\
    \   |                      ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `names` in this scope\n  --> /tmp/tmp8p4f_orn.rs:34:22\n   |\n34\
    \ |         result.push(&names[num]);\n   |                      ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len {\n            if arr[j] < 10 {\n                result.push(\"One\"\
    );\n                break;\n            }\n            if arr[j] < 100 {\n   \
    \             result.push(\"Two\");\n                break;\n            }\n \
    \           if arr[j] < 1000 {\n                result.push(\"Three\");\n    \
    \            break;\n            }\n            if arr[j] < 10000 {\n        \
    \        result.push(\"Four\");\n                break;\n            }\n     \
    \       if arr[j] < 100000 {\n                result.push(\"Five\");\n       \
    \         break;\n            }\n            if arr[j] < 1000000 {\n         \
    \       result.push(\"Six\");\n                break;\n            }\n       \
    \     if arr[j] < 10000000 {\n                result.push(\"Seven\");\n      \
    \          break;\n            }\n            if arr[j] < 100000000 {\n      \
    \          result.push(\"Eight\");\n                break;\n            }\n  \
    \          if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_lankxav.rs:64:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    64 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut reversed = vec![];\n    let mut sorted = vec![];\n    let mut i =\
    \ 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < arr.len() {\n    \
    \    if arr[i] < 9 {\n            sorted.push(format!(\"{}\", arr[i]));\n    \
    \        i += 1;\n        } else {\n            reversed.push(format!(\"{}\",\
    \ arr[i]));\n            i += 1;\n        }\n    }\n    while j < sorted.len()\
    \ {\n        if sorted[j] < '0' {\n            reversed.push(format!(\"{}\", sorted[j]));\n\
    \            i += 1;\n        } else {\n            reversed.push(format!(\"{}\"\
    , sorted[j]));\n            i += 1;\n        }\n    }\n    while k < reversed.len()\
    \ {\n        if reversed[k] < '0' {\n            reversed.push(format!(\"{}\"\
    , reversed[k]));\n            i += 1;\n        } else {\n            reversed.push(format!(\"\
    {}\", reversed[k]));\n            i += 1;\n        }\n    }\n    return reversed\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2mlraqyj.rs:36:24\n   |\n\
    36 |         if sorted[j] < '0' {\n   |                        ^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                        |\n \
    \  |                        expected struct `String`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2mlraqyj.rs:45:26\n   |\n45 |         if reversed[k]\
    \ < '0' {\n   |                          ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                          |\n   |                      \
    \    expected struct `String`, found `char`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = vec![];\n    let mut digits\
    \ = vec![];\n    let mut counter = 0;\n    let mut digits_counter = 0;\n    let\
    \ mut digits_length = 0;\n    let mut digits_length_reversed = 0;\n    let mut\
    \ digits_length_reversed_reversed = 0;\n    let mut digits_length_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed = 0;\n \
    \   let mut digits_length_reversed_reversed_reversed_reversed_reversed = 0;\n\
    \    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n    let mut digits_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0;\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp59re2js.rs:17:34\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------       \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_owned();\n    let mut len = arr.len();\n    let mut i\
    \ = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n         \
    \   i += 1;\n            continue;\n        }\n        let mut j = i;\n      \
    \  while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n    \
    \    swap(&mut arr[j], &mut arr[i]);\n        i += 1;\n    }\n    let mut result\
    \ = vec![];\n    for i in 0..len {\n        result.push(format!(\"{}\", arr[i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp9zx9urf2.rs:33:9\n\
    \   |\n33 |         swap(&mut arr[j], &mut arr[i]);\n   |         ^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut digits = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() {\n            if arr[j]\
    \ < 10 {\n                reversed.push(arr[j]);\n                digits.insert(0,\
    \ String::from(\"0\".to_string()));\n            } else {\n                reversed.push(arr[j]\
    \ - 10);\n                digits.insert(0, String::from(\"1\".to_string()));\n\
    \            }\n            j += 1\n        }\n        let mut j = 0;\n      \
    \  while j < reversed.len() {\n            result.push(&digits[j]);\n        \
    \    j += 1\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjapzfdhk.rs:41:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    41 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len && arr[j] < 10 {\n            j = j + 1;\n        }\n        let mut\
    \ k = j;\n        while k < len && arr[k] > 9 {\n            k = k + 1;\n    \
    \    }\n        let mut temp = arr[i];\n        arr[i] = arr[j];\n        arr[j]\
    \ = temp;\n        i = j;\n    }\n    for i in 0..len {\n        result.push(format!(\"\
    {}\", arr[i]));\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9wlmacir.rs:19:9\n\
    \   |\n19 |     let mut len = arr.len();\n   |         ----^^^\n   |         |\n\
    \   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp9wlmacir.rs:30:13\n\
    \   |\n30 |         let mut temp = arr[i];\n   |             ----^^^^\n   |  \
    \           |\n   |             help: remove this `mut`\n\nerror[E0596]: cannot\
    \ borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmp9wlmacir.rs:31:9\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \ --- help: consider changing this to be mutable: `mut arr`\n...\n31 |       \
    \  arr[i] = arr[j];\n   |         ^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmp9wlmacir.rs:32:9\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \ --- help: consider changing this to be mutable: `mut arr`\n...\n32 |       \
    \  arr[j] = temp;\n   |         ^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let mut j = i;\n        while\
    \ j < len && arr[j] < 10 {\n            j += 1\n        }\n        let mut temp\
    \ = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        result.push(&arr[i\
    \ .. j]);\n        i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw9bamajp.rs:32:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    32 |     result\n   |     ^^^^^^ expected struct `String`, found `&[isize]`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&[isize]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut arr = arr.to_owned();\n    let mut len = arr.len();\n\
    \    let mut result = Vec::new();\n    while len > 0 {\n        let mut i = 0;\n\
    \        let mut j = 0;\n        while i < len {\n            if arr[i] < 1 ||\
    \ arr[i] > 9 {\n                i += 1;\n                continue;\n         \
    \   }\n            if j == 0 {\n                result.push(format!(\"One\", arr[i]));\n\
    \                i += 1;\n                continue;\n            }\n         \
    \   if j == 1 {\n                result.push(format!(\"Two\", arr[i]));\n    \
    \            i += 1;\n                continue;\n            }\n            if\
    \ j == 2 {\n                result.push(format!(\"Three\", arr[i]));\n       \
    \         i += 1;\n                continue;\n            }\n            if j\
    \ == 3 {\n                result.push(format!(\"Four\", arr[i]));\n          \
    \      i += 1;\n                continue;\n            }\n            if j ==\
    \ 4 {\n                result.push(format!(\"Five\", arr[i]));\n             \
    \   i += 1;\n                continue;\n            }\n            if j == 5 {\n\
    \                result.push(format!(\"Six\", arr[i]));\n                i +=\
    \ 1;\n                continue;\n            }\n            if j == 6 {\n    \
    \            result.push(format!(\"Seven\", arr[i]));\n                i += 1;\n\
    \                continue;\n            }\n            if j == 7 {\n         \
    \       result.push(format!(\"Eight\", arr[i]));\n                i += 1;\n  \
    \              continue;\n            }\n            if j == 8 {\n           \
    \     result.push(format!(\"Nine\", arr[i]));\n                i += 1;\n     \
    \           continue;\n            }\n            i += 1;\n            j += 1;\n\
    \        }\n        len -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpem3fxxij.rs:30:44\n   |\n30 |\
    \                 result.push(format!(\"One\", arr[i]));\n   |               \
    \                      -----  ^^^^^^ argument never used\n   |               \
    \                      |\n   |                                     formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpem3fxxij.rs:35:44\n\
    \   |\n35 |                 result.push(format!(\"Two\", arr[i]));\n   |     \
    \                                -----  ^^^^^^ argument never used\n   |     \
    \                                |\n   |                                     formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpem3fxxij.rs:40:46\n\
    \   |\n40 |                 result.push(format!(\"Three\", arr[i]));\n   |   \
    \                                  -------  ^^^^^^ argument never used\n   | \
    \                                    |\n   |                                 \
    \    formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpem3fxxij.rs:45:45\n\
    \   |\n45 |                 result.push(format!(\"Four\", arr[i]));\n   |    \
    \                                 ------  ^^^^^^ argument never used\n   |   \
    \                                  |\n   |                                   \
    \  formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpem3fxxij.rs:50:45\n\
    \   |\n50 |                 result.push(format!(\"Five\", arr[i]));\n   |    \
    \                                 ------  ^^^^^^ argument never used\n   |   \
    \                                  |\n   |                                   \
    \  formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpem3fxxij.rs:55:44\n\
    \   |\n55 |                 result.push(format!(\"Six\", arr[i]));\n   |     \
    \                                -----  ^^^^^^ argument never used\n   |     \
    \                                |\n   |                                     formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpem3fxxij.rs:60:46\n\
    \   |\n60 |                 result.push(format!(\"Seven\", arr[i]));\n   |   \
    \                                  -------  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_owned();\n    arr.sort_unstable();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 10 {\n            result.push(\"One\");\n        } else if\
    \ arr[i] < 100 {\n            result.push(\"Two\");\n        } else if arr[i]\
    \ < 1000 {\n            result.push(\"Three\");\n        } else if arr[i] < 10000\
    \ {\n            result.push(\"Four\");\n        } else if arr[i] < 100000 {\n\
    \            result.push(\"Five\");\n        } else if arr[i] < 1000000 {\n  \
    \          result.push(\"Six\");\n        } else if arr[i] < 10000000 {\n    \
    \        result.push(\"Seven\");\n        } else if arr[i] < 100000000 {\n   \
    \         result.push(\"Eight\");\n        } else if arr[i] < 1000000000 {\n \
    \           result.push(\"Nine\");\n        } else {\n            result.push(\"\
    Ten\");\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6n_cgw4.rs:50:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    50 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    let mut i = 0;\n   \
    \ while i < arr.len() {\n        let mut j = i;\n        while j < arr.len() {\n\
    \            if arr[j] < 10 {\n                result.push(\"One\");\n       \
    \         break;\n            }\n            if arr[j] < 100 {\n             \
    \   result.push(\"Two\");\n                break;\n            }\n           \
    \ if arr[j] < 1000 {\n                result.push(\"Three\");\n              \
    \  break;\n            }\n            if arr[j] < 10000 {\n                result.push(\"\
    Four\");\n                break;\n            }\n            if arr[j] < 100000\
    \ {\n                result.push(\"Five\");\n                break;\n        \
    \    }\n            if arr[j] < 1000000 {\n                result.push(\"Six\"\
    );\n                break;\n            }\n            if arr[j] < 10000000 {\n\
    \                result.push(\"Seven\");\n                break;\n           \
    \ }\n            if arr[j] < 100000000 {\n                result.push(\"Eight\"\
    );\n                break;\n            }\n            if arr[j] < 1000000000\
    \ {\n                result.push(\"Nine\");\n                break;\n        \
    \    }\n            j += 1\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4oiiy6hp.rs:63:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    63 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    sorted_arr.reverse();\n\
    \    let mut reversed_arr = sorted_arr.clone();\n    reversed_arr.reverse();\n\
    \    let mut result = vec![];\n    for i in 0..(reversed_arr.len() - 1) {\n  \
    \      let mut index = i;\n        let mut digit = reversed_arr[i];\n        while\
    \ index > 0 && digit > 9 {\n            index -= 1;\n            digit /= 10;\n\
    \        }\n        result.push(by_digit(digit).unwrap());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpxr29mxn6.rs:34:21\n\
    \   |\n34 |         result.push(by_digit(digit).unwrap());\n   |             \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    let mut reversed = arr\n        .iter()\n  \
    \      .cloned()\n        .enumerate()\n        .map(|(i, &x)| {\n           \
    \ if x < 10 {\n                let mut result = String::new();\n             \
    \   result.push_str(&format!(\"{}\", x));\n                result.push_str(\"\
    One\");\n                result.push_str(\"Two\");\n                result.push_str(\"\
    Three\");\n                result.push_str(\"Four\");\n                result.push_str(\"\
    Five\");\n                result.push_str(\"Six\");\n                result.push_str(\"\
    Seven\");\n                result.push_str(\"Eight\");\n                result.push_str(\"\
    Nine\");\n                result.push_str(\"Zero\");\n                result.push_str(\"\
    One\");\n                result.push_str(\"Two\");\n                result.push_str(\"\
    Three\");\n                result.push_str(\"Four\");\n                result.push_str(\"\
    Five\");\n                result.push_str(\"Six\");\n                result.push_str(\"\
    Seven\");\n                result.push_str(\"Eight\");\n                result.push_str(\"\
    Nine\");\n                result.push_str(\"Zero\");\n                result.push_str(\"\
    One\");\n                result.push_str(\"Two\");\n                result.push_str(\"\
    Three\");\n                result.push_str(\"Four\");\n                result.push_str(\"\
    Five\");\n                result.push_str(\"Six\");\n                result.push_str(\"\
    Seven\");\n                result.push_str(\"Eight\");\n                result.push_str(\"\
    Nine\");\n                result.push_str(\"Zero\");\n                result.push_str(\"\
    One\");\n                result.push_str(\"Two\");\n                result.push_str(\"\
    Three\");\n                result.push_str(\"Four\");\n                result.push_str(\"\
    Five\");\n                result.push_str(\"Six\");\n                result.push_str(\"\
    Seven\");\n                result.push_str(\"Eight\");\n                result.push_str(\"\
    Nine\");\n                result.push_str(\"Zero\");\n                result.push_str(\"\
    One\");\n                result.push_str(\"Two\");\n                result.push_str(\"\
    Three\");\n                result.push_str(\"Four\");\n                result.push_str(\"\
    Five\");\n                result.push_str(\"Six\");\n                result.push_str(\"\
    Seven\");\n                result.push_str(\"Eight\");\n                result.push_str(\"\
    Nine\");\n                result.push_str(\"Zero\");\n                result.push_str(\"\
    One\");\n                result.push_str(\"Two\");\n                result.push_str(\"\
    Three\");\n                result.push_str(\"Four\");\n                result.push_str(\"\
    Five\");\n                result.push_str(\"Six\");\n                result.push_str(\"\
    Seven\");\n                result.push_str(\"Eight\");\n\n}\n\nfn main() {\n \
    \   let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5wyphk_7.rs:98:3\n\
    \   |\n17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n26 |         .map(|(i,\
    \ &x)| {\n   |             -          - unclosed delimiter\n   |             |\n\
    \   |             unclosed delimiter\n27 |             if x < 10 {\n   |     \
    \                  - this delimiter might not be properly closed...\n...\n89 |\
    \ }\n   | - ...as it matches this but it has different indentation\n...\n98 |\
    \ }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmp5wyphk_7.rs:98:3\n   |\n98 | }\n   |   ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_vec();\n    arr.sort();\n    let mut result = vec![];\n\
    \    for i in 0..arr.len() {\n        let mut j = i;\n        while j > 0 && arr[j\
    \ - 1] > arr[j] {\n            j -= 1;\n        }\n        result.push(name_to_num(&arr[j]));\n\
    \    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `name_to_num` in this scope\n  --> /tmp/tmpdr8jg7cs.rs:29:21\n\
    \   |\n29 |         result.push(name_to_num(&arr[j]));\n   |                 \
    \    ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.clone();\n    arr.sort_unstable();\n    arr.reverse();\n\
    \    let mut result = vec![];\n    for i in arr {\n        if i < 1 || i > 9 {\n\
    \            continue;\n        }\n        result.push(by_digit(i));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp3amjkzdu.rs:29:21\n\
    \   |\n29 |         result.push(by_digit(i));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut one = vec![\"One\"];\n    let mut two = vec![\"Two\"];\n    let mut\
    \ three = vec![\"Three\"];\n    let mut four = vec![\"Four\"];\n    let mut five\
    \ = vec![\"Five\"];\n    let mut six = vec![\"Six\"];\n    let mut seven = vec![\"\
    Seven\"];\n    let mut eight = vec![\"Eight\"];\n    let mut nine = vec![\"Nine\"\
    ];\n    let mut ten = vec![\"Ten\"];\n    let mut eleven = vec![\"Eleven\"];\n\
    \    let mut twelve = vec![\"Twelve\"];\n    let mut thirteen = vec![\"Thirteen\"\
    ];\n    let mut fourteen = vec![\"Fourteen\"];\n    let mut fifteen = vec![\"\
    Fifteen\"];\n    let mut sixteen = vec![\"Sixteen\"];\n    let mut seventeen =\
    \ vec![\"Seventeen\"];\n    let mut eighteen = vec![\"Eighteen\"];\n    let mut\
    \ nineteen = vec![\"Nineteen\"];\n    let mut twenty = vec![\"Twenty\"];\n   \
    \ let mut twenty_one = vec![\"Twenty One\"];\n    let mut twenty_two = vec![\"\
    Twenty Two\"];\n    let mut twenty_three = vec![\"Twenty Three\"];\n    let mut\
    \ twenty_four = vec![\"Twenty Four\"];\n    let mut twenty_five = vec![\"Twenty\
    \ Five\"];\n    let mut twenty_six = vec![\"Twenty Six\"];\n    let mut twenty_seven\
    \ = vec![\"Twenty Seven\"];\n    let mut twenty_eight = vec![\"Twenty Eight\"\
    ];\n    let mut twenty_nine = vec![\"Twenty Nine\"];\n    let mut twenty_ten =\
    \ vec![\"Twenty Ten\"];\n    let mut twenty_eleven = vec![\"Twenty Eleven\"];\n\
    \    let mut twenty_twelve = vec![\"Twenty Twelve\"];\n    let mut twenty_thirteen\
    \ = vec![\"Twenty Thir\n}\n\nfn main() {\n    let candidate = by_length;\n   \
    \ assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpzlchq6_m.rs:61:110\n\
    \   |\n61 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n   |  ______________________________________________________________________________________________________________^\n\
    62 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut arr = arr.to_owned();\n    arr.sort();\n    arr.reverse();\n    let\
    \ mut result = vec![];\n    for i in arr {\n        let mut s = String::new();\n\
    \        if i < 10 {\n            s.push_str(&format!(\"One\", i));\n        }\
    \ else if i < 20 {\n            s.push_str(&format!(\"Two\", i));\n        } else\
    \ if i < 30 {\n            s.push_str(&format!(\"Three\", i));\n        } else\
    \ if i < 40 {\n            s.push_str(&format!(\"Four\", i));\n        } else\
    \ if i < 50 {\n            s.push_str(&format!(\"Five\", i));\n        } else\
    \ if i < 60 {\n            s.push_str(&format!(\"Six\", i));\n        } else if\
    \ i < 70 {\n            s.push_str(&format!(\"Seven\", i));\n        } else if\
    \ i < 80 {\n            s.push_str(&format!(\"Eight\", i));\n        } else if\
    \ i < 90 {\n            s.push_str(&format!(\"Nine\", i));\n        } else {\n\
    \            s.push_str(&format!(\"Ten\", i));\n        }\n        result.push(s);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmppz4_gldq.rs:28:40\n   |\n28 |\
    \             s.push_str(&format!(\"One\", i));\n   |                        \
    \         -----  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmppz4_gldq.rs:30:40\n   |\n30 |             s.push_str(&format!(\"\
    Two\", i));\n   |                                 -----  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmppz4_gldq.rs:32:42\n\
    \   |\n32 |             s.push_str(&format!(\"Three\", i));\n   |            \
    \                     -------  ^ argument never used\n   |                   \
    \              |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmppz4_gldq.rs:34:41\n   |\n34 |    \
    \         s.push_str(&format!(\"Four\", i));\n   |                           \
    \      ------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmppz4_gldq.rs:36:41\n   |\n36 |             s.push_str(&format!(\"\
    Five\", i));\n   |                                 ------  ^ argument never used\n\
    \   |                                 |\n   |                                \
    \ formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmppz4_gldq.rs:38:40\n\
    \   |\n38 |             s.push_str(&format!(\"Six\", i));\n   |              \
    \                   -----  ^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmppz4_gldq.rs:40:42\n   |\n40 |    \
    \         s.push_str(&format!(\"Seven\", i));\n   |                          \
    \       -------  ^ argument never used\n   |                                 |\n\
    \   |                                 formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut reversed = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(format!(\"\
    {}\", arr[j]));\n                reversed.push(format!(\"{}\", arr[j]));\n   \
    \             j += 1;\n            } else {\n                break;\n        \
    \    }\n        }\n        i += 1;\n    }\n    for i in reversed.iter_mut() {\n\
    \        *i = format!(\"{}\", i);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"2\", \"1\", \"1\", \"4\", \"5\", \"8\", \"2\", \"3\", \"1\", \"1\", \"4\"\
    , \"5\", \"8\", \"2\", \"3\", \"1\", \"4\", \"5\", \"8\", \"2\", \"3\", \"4\"\
    , \"5\", \"8\", \"2\", \"3\", \"5\", \"8\", \"2\", \"3\", \"8\", \"2\", \"3\"\
    , \"2\", \"3\", \"3\"]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\",\
    \ \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmpw6t_io0i.rs:42:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
    \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
    \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
    \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n\
    /// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n    let mut result = vec![];\n    let mut len = arr.len();\n\
    \    while len > 0 {\n        let mut i = 0;\n        let mut j = 0;\n       \
    \ while i < len {\n            if arr[i] > 9 {\n                i += 1;\n    \
    \            continue;\n            }\n            if arr[i] < 1 {\n         \
    \       i += 1;\n                continue;\n            }\n            if arr[i]\
    \ == 1 {\n                result.push(\"One\");\n                i += 1;\n   \
    \             continue;\n            }\n            if arr[i] == 2 {\n       \
    \         result.push(\"Two\");\n                i += 1;\n                continue;\n\
    \            }\n            if arr[i] == 3 {\n                result.push(\"Three\"\
    );\n                i += 1;\n                continue;\n            }\n      \
    \      if arr[i] == 4 {\n                result.push(\"Four\");\n            \
    \    i += 1;\n                continue;\n            }\n            if arr[i]\
    \ == 5 {\n                result.push(\"Five\");\n                i += 1;\n  \
    \              continue;\n            }\n            if arr[i] == 6 {\n      \
    \          result.push(\"Six\");\n                i += 1;\n                continue;\n\
    \            }\n            if arr[i] == 7 {\n                result.push(\"Seven\"\
    );\n                i += 1;\n                continue;\n            }\n      \
    \      if arr[i] == 8 {\n                result.push(\"Eight\");\n           \
    \     i += 1;\n                continue;\n            }\n            if arr[i]\
    \ == 9 {\n                result.push(\"Nine\");\n                i += 1;\n  \
    \              continue;\n            }\n            i += 1;\n        }\n    \
    \    len = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoy783_3z.rs:81:5\n   |\n\
    17 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    81 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
