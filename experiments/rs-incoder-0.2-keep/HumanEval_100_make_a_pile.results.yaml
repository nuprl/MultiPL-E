name: HumanEval_100_make_a_pile
language: rust
results:
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 1;\n  \
    \  let mut stones = n;\n    while stones > 0 {\n        if stones % 2 == 0 {\n\
    \            pile.push(stones);\n            stones /= 2;\n        } else {\n\
    \            pile.push(stones);\n            stones /= 2;\n            pile.push(stones);\n\
    \            stones /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp1zjqv954.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut next_odd_stones\
    \ = if n % 2 == 1 {\n        n - 1\n    } else {\n        n\n    };\n    let mut\
    \ next_even_stones = if n % 2 == 0 {\n        n - 1\n    } else {\n        n\n\
    \    };\n    while next_odd_stones > 0 {\n        stones.push(next_odd_stones);\n\
    \        next_odd_stones -= 2;\n    }\n    while next_even_stones > 0 {\n    \
    \    stones.push(next_even_stones);\n        next_even_stones -= 2;\n    }\n \
    \   stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpzjbiap_y.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut stones = n;\n \
    \   while stones > 0 {\n        if stones % 2 == 0 {\n            pile.push(stones);\n\
    \            stones /= 2;\n        } else {\n            pile.push(stones);\n\
    \            stones /= 2;\n            pile.push(stones);\n            stones\
    \ /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp8m48ngkl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for _ in 1..n {\n       \
    \ pile[pile.len() - 1] += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9rpkjh60.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2);\n    }\n  \
    \  pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmp_12e0eh4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n / 2);\n    } else {\n        pile.push(n / 2\
    \ + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpgas5vc0_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2] as\
    \ isize;\n        } else {\n            pile[i] = pile[i / 2 + 1] as isize;\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3bws1b5g.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3bws1b5g.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i / 2] as isize;\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3bws1b5g.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i / 2] as isize;\n   |                       ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3bws1b5g.rs:18:13\n   |\n18 |  \
    \           pile[i] = pile[i / 2 + 1] as isize;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3bws1b5g.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i / 2 + 1] as isize;\n   |                       ^^^^^^^^^^^^^^^\
    \ slice indices are of type "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz6r2c7yh.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpz6r2c7yh.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpz6r2c7yh.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpz6r2c7yh.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = (n / 2).ceil() as isize;\n    pile[2] = n / 2;\n    pile[3..].iter().cloned().for_each(|&i|\
    \ {\n        if i % 2 == 0 {\n            pile[2] += i as isize;\n        } else\
    \ {\n            pile[1] += i as isize;\n        }\n    });\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxm6qe3dw.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `ceil` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpxm6qe3dw.rs:14:23\n   |\n\
    14 |     pile[1] = (n / 2).ceil() as isize;\n   |                       ^^^^ help:\
    \ there is an associated function with a similar name: `div_ceil`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxm6qe3dw.rs:16:41\n   |\n16 |     pile[3..].iter().cloned().for_each(|&i|\
    \ {\n   |                                         ^--\n   |                  \
    \                       ||\n   |                                         |expected\
    \ due to this\n   |                                         expected `isize`,\
    \ found reference\n   |                                         help: did you\
    \ mean `i`: `&isize`\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        pile.push((n / 2) + 1);\n    }\n    for i in 1..n\
    \ {\n        pile.push((i + 1) * pile[i - 2]);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpofpfip7q.rs:19:29\n\
    \   |\n19 |         pile.push((i + 1) * pile[i - 2]);\n   |                  \
    \           ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut levels = Vec::new();\n\
    \    stones.push(1);\n    levels.push(n);\n    while stones.len() > 0 {\n    \
    \    let mut new_levels = Vec::new();\n        for level in levels.clone() {\n\
    \            let mut new_stones = Vec::new();\n            for stone in stones.clone()\
    \ {\n                if level % 2 == 0 {\n                    new_stones.push(stone\
    \ + 1);\n                } else {\n                    new_stones.push(stone);\n\
    \                }\n            }\n            new_levels.push(new_stones.len());\n\
    \        }\n        stones = new_stones;\n        levels = new_levels;\n    }\n\
    \    levels.clone()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `new_stones` in this scope\n  --> /tmp/tmpvdhygya_.rs:29:18\n\
    \   |\n29 |         stones = new_stones;\n   |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvdhygya_.rs:30:18\n\
    \   |\n13 |     let mut levels = Vec::new();\n   |                      ----------\
    \ expected due to this value\n...\n30 |         levels = new_levels;\n   |   \
    \               ^^^^^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 0 {\n     \
    \   pile.push(n - 1);\n    } else {\n        let mut odd = 1;\n        let mut\
    \ even = n;\n        while even > 0 {\n            pile.push(even % 2);\n    \
    \        even /= 2;\n        }\n        while odd > 0 {\n            pile.push(odd\
    \ % 2);\n            odd /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpya20b6nu.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += 2;\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulhqi0r8.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpulhqi0r8.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpulhqi0r8.rs:18:13\n   |\n18 |  \
    \           pile[i] += 2;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut level = 0;\n\
    \    while stones.len() < n {\n        if n % 2 == 0 {\n            stones.push(stones.len()\
    \ as isize);\n            stones.push(stones.len() as isize);\n        } else\
    \ {\n            stones.push(stones.len() as isize);\n        }\n        stones.sort();\n\
    \        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n \
    \       stones.dedup();\n        stones.dedup();\n        stones.dedup();\n  \
    \      stones.dedup();\n        stones.dedup();\n        stones.dedup();\n   \
    \     stones.dedup();\n        stones.dedup();\n        stones.dedup();\n    \
    \    stones.dedup();\n        stones.dedup();\n        stones.dedup();\n     \
    \   stones.dedup();\n        stones.dedup();\n        stones.dedup();\n      \
    \  stones.dedup();\n        stones.dedup();\n        stones.dedup();\n       \
    \ stones.dedup();\n        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n\
    \        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n \
    \       stones.dedup();\n        stones.dedup();\n        stones.dedup();\n  \
    \      stones.dedup();\n        stones.dedup();\n        stones.dedup();\n   \
    \     stones.dedup();\n        stones.dedup();\n        stones.dedup();\n    \
    \    stones.dedup();\n        stones.dedup();\n        stones.dedup();\n     \
    \   stones.dedup();\n        stones.dedup();\n        stones.dedup();\n      \
    \  stones.dedup();\n        stones.dedup();\n        stones.dedup();\n       \
    \ stones.dedup();\n        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n\
    \        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n \
    \       stones.dedup();\n        stones.dedup();\n        stones.dedup();\n  \
    \      stones.dedup();\n        stones.dedup();\n        stones.dedup();\n   \
    \     stones.dedup();\n        stones.dedup();\n        stones.dedup();\n    \
    \    stones.dedup();\n        stone\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpq1wxz38w.rs:95:3\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \                     - unclosed delimiter\n...\n14 |     while stones.len() <\
    \ n {\n   |                            - this delimiter might not be properly\
    \ closed...\n...\n86 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n95 | }\n   |   ^\n\nerror[E0425]: cannot find value `stone` in this scope\n\
    \  --> /tmp/tmpq1wxz38w.rs:85:9\n   |\n85 |         stone\n   |         ^^^^^\
    \ help: a local variable with a similar name exists: `stones`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq1wxz38w.rs:14:26\n   |\n14 |     while stones.len()\
    \ < n {\n   |                          ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |     while stones.len() < n.try_into().unwrap() {\n \
    \  |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq1wxz38w.rs:11:29\n   |\n11 | fn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n   |    -----------              ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(1);\n   \
    \ if n % 2 == 0 {\n        stones.push(2);\n    }\n    if n % 3 == 0 {\n     \
    \   stones.push(3);\n    }\n    if n % 5 == 0 {\n        stones.push(5);\n   \
    \ }\n    if n % 7 == 0 {\n        stones.push(7);\n    }\n    stones\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpyusq58xw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    for i in 1..n {\n\
    \        pile.push(i + pile[i - 1]);\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr5arrcu4.rs:19:23\n\
    \   |\n19 |         pile.push(i + pile[i - 1]);\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        pile.push(n / 2 + 1);\n    }\n    for i in 1..n\
    \ {\n        pile.push(i + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp2j3z13f2.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmppwvri1r1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 0;\n  \
    \  while n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n  \
    \          n /= 2;\n        } else {\n            pile.push(level + 1);\n    \
    \        n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpkn_drb98.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpkn_drb98.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 1] + 1;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjq4ugbg2.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjq4ugbg2.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjq4ugbg2.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjq4ugbg2.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjq4ugbg2.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 1] + 1;\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut next_odd_stones\
    \ = if n % 2 == 0 {\n        n - 1\n    } else {\n        n\n    };\n    let mut\
    \ next_even_stones = n;\n    for i in 0..n {\n        stones.push(next_odd_stones);\n\
    \        next_odd_stones -= next_odd_stones % 2;\n        next_even_stones -=\
    \ next_even_stones % 2;\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpnjjjnxod.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    }\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp2bs905ng.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut n = 0;\n  \
    \  while n <= n {\n        pile[n] += 1;\n        if n % 2 == 0 {\n          \
    \  pile[n + 1] += 1;\n        }\n        n += 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb1a807ih.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            pile.push(n - i);\n        } else\
    \ {\n            pile.push((i + 1) + (n - i) / 2);\n        }\n        i += 1;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpc0htiwqh.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        pile[i] = i + 1;\n        if i % 2 == 0 {\n        \
    \    i += 1;\n        } else {\n            i += 2;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfot8_28.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpvfot8_28.rs:15:9\n   |\n15 |         pile[i]\
    \ = i + 1;\n   |         ^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        let mut odd_n = n;\n        odd_n += 1;\n     \
    \   while odd_n % 2 == 0 {\n            odd_n += 1;\n        }\n        pile.push(odd_n\
    \ - 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[3, 5, 7]`', /tmp/tmp9nvijqc0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpty5msog0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut n = n;\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            pile.push(n - 1);\n        } else\
    \ {\n            pile.push(n - 2);\n        }\n        n /= 2;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1]`,\n right: `[3, 5, 7]`', /tmp/tmp1wiz6waj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[2] +=\
    \ n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg31kobdj.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp2c0ch9iy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x % 2 == 0 {\n        \
    \    pile[0] += 1;\n        } else {\n            pile[0] += 2;\n        }\n \
    \   });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp93hyuwq6.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpicu452h8.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_odd() {\n        \
    \    pile[2] += x;\n        } else {\n            pile[2] += x;\n            pile[3]\
    \ += x;\n        }\n    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjjveypmv.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpjjveypmv.rs:15:14\n   |\n\
    15 |         if x.is_odd() {\n   |              ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i);\n        } else {\n            pile.push(i\
    \ + 1);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp50c89cgw.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 0 {\n     \
    \   pile.push(n / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push((i +\
    \ 1) * 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpglo7amyd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut stones = n;\n    while\
    \ stones > 0 {\n        if stones % 2 == 0 {\n            pile.push(stones);\n\
    \            stones /= 2;\n        } else {\n            pile.push(stones);\n\
    \            stones /= 2;\n            pile.push(stones);\n            stones\
    \ /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpevmvg6bx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    if\
    \ n % 2 == 0 {\n        pile[1] = pile[0] + 1;\n    } else {\n        pile[1]\
    \ = pile[0];\n    }\n    for i in 2..=n {\n        pile[i] = pile[i - 1] + if\
    \ i % 2 == 0 {\n            1\n        } else {\n            -1\n        };\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj9a00cy9.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpj9a00cy9.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpj9a00cy9.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            pile[i] = n / 2;\n           \
    \ i += 1;\n        } else {\n            pile[i] = n - 1;\n            i += 1;\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa_mngvjv.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa_mngvjv.rs:16:13\n\
    \   |\n16 |             pile[i] = n / 2;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpa_mngvjv.rs:19:13\n   |\n19 |  \
    \           pile[i] = n - 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7a6td0_.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n / 2);\n\
    \    if n % 2 == 0 {\n        stones.push(n / 2);\n    } else {\n        stones.push(n\
    \ / 2 + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpdzg3i71j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd_level = 0;\n\
    \    let mut next_even_level = 0;\n    for _ in 0..n {\n        if n % 2 == 0\
    \ {\n            next_even_level += 1;\n        } else {\n            next_odd_level\
    \ += 1;\n        }\n        pile.push(next_odd_level);\n        pile.push(next_even_level);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 2, 0, 3, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpngs2nzlt.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for i in 2..=n {\n      \
    \  if i % 2 == 0 {\n            pile[i] += 1;\n        } else {\n            pile[i]\
    \ += pile[i - 1];\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvygmu91r.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpvygmu91r.rs:19:13\n   |\n19 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpvygmu91r.rs:21:13\n   |\n21 |  \
    \           pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpvygmu91r.rs:21:24\n   |\n21 |  \
    \           pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push((n - 1) / 2);\n    }\n    for i in 0..n\
    \ {\n        pile.push((i + 1) * pile[pile.len() - 1]);\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 6]`,\n right: `[3, 5, 7]`', /tmp/tmp5kf3v_ya.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    while\
    \ pile.len() > 1 {\n        let n = pile.pop();\n        let m = pile.pop();\n\
    \        if n % 2 == 0 {\n            pile.push(m + n);\n        } else {\n  \
    \          pile.push(m + n);\n            pile.push(m);\n        }\n    }\n  \
    \  pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `Option<isize>` by `{integer}`\n  --> /tmp/tmpas8z8rlr.rs:17:14\n\
    \   |\n17 |         if n % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            Option<isize>\n\nerror[E0369]: cannot add `Option<isize>`\
    \ to `Option<isize>`\n  --> /tmp/tmpas8z8rlr.rs:18:25\n   |\n18 |            \
    \ pile.push(m + n);\n   |                       - ^ - Option<isize>\n   |    \
    \                   |\n   |                       Option<isize>\n\nerror[E0369]:\
    \ cannot add `Option<isize>` to `Option<isize>`\n  --> /tmp/tmpas8z8rlr.rs:20:25\n\
    \   |\n20 |             pile.push(m + n);\n   |                       - ^ - Option<isize>\n\
    \   |                       |\n   |                       Option<isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpas8z8rlr.rs:21:23\n   |\n21 |             pile.push(m);\n\
    \   |                       ^ expected `isize`, found enum `Option`\n   |\n  \
    \ = note: expected type `isize`\n              found enum `Option<isize>`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn7oz__c5.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn7oz__c5.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn7oz__c5.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn7oz__c5.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn7oz__c5.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(1);\n        }\n    } else {\n        for\
    \ _ in 0..n {\n            pile.push(0);\n        }\n    }\n    for _ in 0..n\
    \ {\n        pile.push(pile.len() + 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyv0e1joo.rs:25:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n25 |     pile\n\
    \   |     ^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    let mut next_odd = 1;\n    let mut next_even = 1;\n    while stones.len()\
    \ < n {\n        if n % 2 == 0 {\n            stones.push(next_even);\n      \
    \      next_even += 2;\n        } else {\n            stones.push(next_odd);\n\
    \            next_odd += 2;\n        }\n        n -= 1;\n    }\n    stones\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsfzdb0cx.rs:16:26\n   |\n\
    16 |     while stones.len() < n {\n   |                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     while stones.len() < n.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push((n - 1) / 2);\n    }\n    for i in 1..n\
    \ {\n        pile.push((n - i) / 2);\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpzjc_5rxp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n            pile[i -\
    \ 1] + 2\n        } else {\n            pile[i - 1]\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzfeqs_dv.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzfeqs_dv.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpzfeqs_dv.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzfeqs_dv.rs:23:13\n\
    \   |\n23 |             pile[i - 1]\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmplbl5ltbh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0] + 1\n\
    \    };\n    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n           \
    \ pile[i - 1] + 2\n        } else {\n            pile[i - 1] + 1\n        };\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqwvh_4xl.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqwvh_4xl.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpqwvh_4xl.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqwvh_4xl.rs:23:13\n\
    \   |\n23 |             pile[i - 1] + 1\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut level = 0;\n\
    \    while stones.len() < n {\n        if n % 2 == 0 {\n            stones.push(stones.len());\n\
    \        }\n        stones.push(stones.len() + 1);\n        stones.sort();\n \
    \       stones.dedup();\n        stones.dedup();\n        stones.dedup();\n  \
    \      stones.dedup();\n        stones.dedup();\n        stones.dedup();\n   \
    \     stones.dedup();\n        stones.dedup();\n        stones.dedup();\n    \
    \    stones.dedup();\n        stones.dedup();\n        stones.dedup();\n     \
    \   stones.dedup();\n        stones.dedup();\n        stones.dedup();\n      \
    \  stones.dedup();\n        stones.dedup();\n        stones.dedup();\n       \
    \ stones.dedup();\n        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n\
    \        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n \
    \       stones.dedup();\n        stones.dedup();\n        stones.dedup();\n  \
    \      stones.dedup();\n        stones.dedup();\n        stones.dedup();\n   \
    \     stones.dedup();\n        stones.dedup();\n        stones.dedup();\n    \
    \    stones.dedup();\n        stones.dedup();\n        stones.dedup();\n     \
    \   stones.dedup();\n        stones.dedup();\n        stones.dedup();\n      \
    \  stones.dedup();\n        stones.dedup();\n        stones.dedup();\n       \
    \ stones.dedup();\n        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n\
    \        stones.dedup();\n        stones.dedup();\n        stones.dedup();\n \
    \       stones.dedup();\n        stones.dedup();\n        stones.dedup();\n  \
    \      stones.dedup();\n        stones.dedup();\n        stones.dedup();\n   \
    \     stones.dedup();\n        stones.dedup();\n        stones.dedup();\n    \
    \    stones.dedup();\n        stones.dedup();\n        stones.dedup();\n     \
    \   stones.dedup();\n        stones.dedup();\n        stones.dedup();\n      \
    \  stones.\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpup8yx1qf.rs:95:3\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \                     - unclosed delimiter\n...\n14 |     while stones.len() <\
    \ n {\n   |                            - this delimiter might not be properly\
    \ closed...\n...\n86 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n95 | }\n   |   ^\n\nerror: unexpected token: `}`\n  --> /tmp/tmpup8yx1qf.rs:86:1\n\
    \   |\n86 | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpup8yx1qf.rs:14:26\n\
    \   |\n14 |     while stones.len() < n {\n   |                          ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     while stones.len()\
    \ < n.try_into().unwrap() {\n   |                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpup8yx1qf.rs:85:9\n   |\n14 | /\
    \     while stones.len() < n {\n15 | |         if n % 2 == 0 {\n16 | |       \
    \      stones.push(stones.len());\n17 | |         }\n...  |\n85 | |         stones.\n\
    \   | |         ^^^^^^ expected `()`, found struct `Vec`\n86 | | }\n   | |_- expected\
    \ this to be `()`\n   |\n   = note: expected unit type `()`\n                \
    \ found struct `Vec<usize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpup8yx1qf.rs:11:29\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------    \
    \          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpht1gb_e6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpa3x9oqs8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ n >= level {\n        pile.push(level);\n        level += 1;\n        if n %\
    \ 2 == 0 {\n            level += 1;\n        }\n        n -= level;\n    }\n \
    \   pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbjhdvsew.rs:20:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |         n -= level;\n\
    \   |         ^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(1);\n    if n\
    \ % 2 == 0 {\n        for _ in 0..n / 2 {\n            pile.push(pile.last().unwrap()\
    \ + 1);\n        }\n    } else {\n        for _ in 0..n / 2 {\n            pile.push(pile.last().unwrap()\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpj_lu56o0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 0;\n  \
    \  while n != 0 {\n        if n % 2 == 0 {\n            pile.push(level + 1);\n\
    \            n /= 2;\n        } else {\n            pile.push(level);\n      \
    \      n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpowldn_xo.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpowldn_xo.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpplsru6u6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    let mut current_level_size = 0;\n    while current_level_size < n {\n   \
    \     if n % 2 == 0 {\n            current_level_size += 1;\n        } else {\n\
    \            current_level_size += 2;\n        }\n        pile.push(current_level_size);\n\
    \        current_level += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4]`,\n right: `[3, 5, 7]`', /tmp/tmphc8mtrrj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut n = n;\n    while\
    \ n > 0 {\n        pile.push(n);\n        if n % 2 == 0 {\n            n = n /\
    \ 2;\n        } else {\n            n = (3 * n) + 1;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp1n60neik.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push((n - 1) / 2);\n    }\n    for i in 0..n\
    \ {\n        pile.push((i + 1) * pile[n - i]);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphjeuwsp0.rs:19:29\n\
    \   |\n19 |         pile.push((i + 1) * pile[n - i]);\n   |                  \
    \           ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppxfehw32.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for &n in &mut pile {\n \
    \       *n += *n % 2 == 0 ? 1 : -1;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpcfkdqi3k.rs:18:29\n   |\n18 |         *n += *n % 2 == 0 ? 1 : -1;\n\
    \   |                             ^ expected one of `.`, `;`, `?`, `}`, or an\
    \ operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcfkdqi3k.rs:12:28\n\
    \   |\n12 |     let mut pile = vec![0; n + 1];\n   |                         \
    \   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut pile = vec![0; (n + 1).try_into().unwrap()];\n   |                     \
    \       +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcfkdqi3k.rs:17:9\n\
    \   |\n17 |     for &n in &mut pile {\n   |         ^^    --------- this expression\
    \ has type `Option<&mut {integer}>`\n   |         |\n   |         types differ\
    \ in mutability\n   |         help: you can probably remove the explicit borrow:\
    \ `n`\n   |\n   = note: expected mutable reference `&mut {integer}`\n        \
    \              found reference `&_`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd_level = 0;\n\
    \    let mut next_even_level = 0;\n    for _ in 0..n {\n        if n % 2 == 0\
    \ {\n            next_even_level += 1;\n        } else {\n            next_odd_level\
    \ += 1;\n        }\n        pile.push(next_odd_level);\n        pile.push(next_even_level);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 2, 0, 3, 0]`,\n right: `[3, 5, 7]`', /tmp/tmptu2vmoyq.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n / 2);\n    }\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpcn14jesh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ pile[1..].iter().cloned().for_each(|&x| {\n        if x % 2 == 0 {\n       \
    \     pile[2] += 1;\n        } else {\n            pile[3] += 1;\n        }\n\
    \    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppoeatqle.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppoeatqle.rs:14:41\n\
    \   |\n14 |     pile[1..].iter().cloned().for_each(|&x| {\n   |              \
    \                           ^--\n   |                                        \
    \ ||\n   |                                         |expected due to this\n   |\
    \                                         expected integer, found reference\n\
    \   |                                         help: did you mean `x`: `&{integer}`\n\
    \   |\n   = note:   expected type `{integer}`\n           found reference `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        pile.push(num_stones);\n        if num_stones\
    \ % 2 == 0 {\n            num_stones = num_stones / 2;\n        } else {\n   \
    \         num_stones = num_stones * 3 + 1;\n        }\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 1;\n  \
    \  while level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n\
    \            level += 1;\n        } else {\n            pile.push(level - 1);\n\
    \            level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmpvfiszveg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7vaayic1.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp7vaayic1.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7vaayic1.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7vaayic1.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_even() {\n       \
    \     pile[0] += x;\n        } else {\n            pile[0] += x.next_odd();\n\
    \        }\n    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4acal463.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_even` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmp4acal463.rs:15:14\n   |\n\
    15 |         if x.is_even() {\n   |              ^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `next_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp4acal463.rs:18:26\n   |\n18 |             pile[0] += x.next_odd();\n\
    \   |                          ^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 1);\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpqvm7zz79.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut next_odd_num =\
    \ if n % 2 == 1 {\n        n + 1\n    } else {\n        n\n    };\n    let mut\
    \ next_even_num = if n % 2 == 0 {\n        n + 1\n    } else {\n        n\n  \
    \  };\n    for i in 0..n {\n        pile.push(i);\n        if i % 2 == 0 {\n \
    \           next_even_num += 1;\n        } else {\n            next_odd_num +=\
    \ 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpg96hl35k.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n        pile[2] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaqgr0cwz.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.push(n - 1);\n    } else {\n        stones.push(n - 1);\n       \
    \ stones.push(n - 2);\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp_rle8i0d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2];\n\
    \        } else {\n            pile[i] = pile[i / 2] + 1;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppnimgk32.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmppnimgk32.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i / 2];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmppnimgk32.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i / 2];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmppnimgk32.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmppnimgk32.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 0;\n  \
    \  while n != 0 {\n        if n % 2 == 0 {\n            pile.push(level + 1);\n\
    \            n /= 2;\n        } else {\n            pile.push(level);\n      \
    \      n /= 2;\n            level += 1;\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg2459ubt.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpg2459ubt.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        let mut odd_count = 0;\n        let mut even_count\
    \ = 0;\n        for i in 0..n {\n            if i % 2 == 0 {\n               \
    \ even_count += 1;\n            } else {\n                odd_count += 1;\n  \
    \          }\n            pile.push((even_count + odd_count) as isize);\n    \
    \    }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpxusit6cj.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0] + 1\n\
    \    };\n    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n           \
    \ pile[i - 1] + 2\n        } else {\n            pile[i - 1] + 1\n        };\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpklhemtiv.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpklhemtiv.rs:20:9\n\
    \   |\n20 |         pile[i] = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpklhemtiv.rs:21:13\n   |\n21 |            \
    \ pile[i - 1] + 2\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpklhemtiv.rs:23:13\n   |\n23 |            \
    \ pile[i - 1] + 1\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n            pile.push(i\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpi5w07uyt.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.push(n % 2);\n    }\n    for _ in 0..n / 2 {\n        stones.push(stones.last().unwrap()\
    \ + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp5kv9fwfd.rs:17:35\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp6xgc6n3d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpawhx7qhw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp4zyiy3qb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        if n % 2 == 0 {\n            pile[i] = pile[i / 2] +\
    \ 1;\n        } else {\n            pile[i] = pile[i / 2] + 2;\n        }\n  \
    \      i += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpupydbrxu.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpupydbrxu.rs:16:13\n   |\n16 |         \
    \    pile[i] = pile[i / 2] + 1;\n   |             ^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpupydbrxu.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i / 2] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpupydbrxu.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i / 2] + 2;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpupydbrxu.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[i / 2] + 2;\n   |                     \
    \  ^^^^^^^^^^^ slice indices are "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0] + 1\n\
    \    };\n    for i in 2..=n {\n        pile[i] = pile[i - 1] + if i % 2 == 0 {\n\
    \            1\n        } else {\n            -1\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcx97g8z5.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcx97g8z5.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcx97g8z5.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 1;\n  \
    \  while n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n  \
    \          n /= 2;\n        } else {\n            pile.push((level + 1) * 2);\n\
    \            n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpiqo9vk4i.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpiqo9vk4i.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    if n % 2 == 0 {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap()\
    \ + 1);\n        }\n    } else {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap());\n\
    \        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp706i1yuh.rs:20:25\n   |\n\
    20 |             stones.push(stones.last().unwrap());\n   |                  \
    \       ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |             stones.push(*stones.last().unwrap());\n\
    \   |                         +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpo_sc2cji.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for &n in &mut pile[2..] {\n        *n += *n % 2 != 0;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1jsy8exh.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1jsy8exh.rs:19:9\n\
    \   |\n19 |     for &n in &mut pile[2..] {\n   |         ^^    --------------\
    \ this expression has type `Option<&mut isize>`\n   |         |\n   |        \
    \ types differ in mutability\n   |         help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note: expected mutable reference `&mut isize`\n    \
    \                  found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    stones.push(n / 2 as isize);\n    stones.push(n % 2 as isize);\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpfbu7drvh.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp81emvipi.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81emvipi.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81emvipi.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81emvipi.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81emvipi.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        pile[i] += if n % 2 == 0 {\n            pile[i as\
    \ usize]\n        } else {\n            pile[i as usize] + 1\n        };\n   \
    \ }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmy7blknx.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpmy7blknx.rs:15:9\n   |\n15 |         pile[i]\
    \ += if n % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut next_odd =\
    \ 1;\n    let mut next_even = 1;\n    for i in 0..n {\n        if i % 2 == 0 {\n\
    \            pile[i] = next_even;\n            next_even += 2;\n        } else\
    \ {\n            pile[i] = next_odd;\n            next_odd += 2;\n        }\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxt1vgueb.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpxt1vgueb.rs:17:13\n   |\n17 |         \
    \    pile[i] = next_even;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxt1vgueb.rs:20:13\n   |\n20 |  \
    \           pile[i] = next_odd;\n   |             ^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    if n % 2 == 0 {\n        stones.push(n / 2 as isize);\n    }\n    for _ in\
    \ 0..(n - 1) {\n        stones.push(stones.last().unwrap() + stones.last().unwrap()\
    \ as isize);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpq67c9hns.rs:18:46\n\
    \   |\n18 |         stones.push(stones.last().unwrap() + stones.last().unwrap()\
    \ as isize);\n   |                                              ----------------------^^^^^^^^^\n\
    \   |                                              |\n   |                   \
    \                           cannot cast `&isize` as `isize`\n   |            \
    \                                  help: dereference the expression: `*stones.last().unwrap()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut levels = Vec::new();\n\
    \    let mut current_level = 0;\n    let mut current_stones = 0;\n    while current_stones\
    \ < n {\n        if n % 2 == 0 {\n            stones.push(current_stones);\n \
    \           current_stones += 1;\n        } else {\n            current_stones\
    \ += 2;\n        }\n        levels.push(current_stones);\n        current_stones\
    \ += 1;\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmp1st3zpg4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n - 1);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmp8vr3fe9h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] += n;\n    if n\
    \ % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[2] += n /\
    \ 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpngez9zra.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxepvxcs.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpkxepvxcs.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkxepvxcs.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkxepvxcs.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd_num = if n\
    \ % 2 == 0 {\n        n - 1\n    } else {\n        n + 1\n    };\n    let mut\
    \ next_even_num = if n % 2 == 0 {\n        n + 1\n    } else {\n        n\n  \
    \  };\n    for i in 0..n {\n        pile.push(next_odd_num);\n        next_odd_num\
    \ = next_odd_num + 2;\n        pile.push(next_even_num);\n        next_even_num\
    \ = next_even_num + 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 6, 5, 8, 7]`,\n right: `[3, 5, 7]`', /tmp/tmp7wkc5814.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpodnu0239.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpodnu0239.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpodnu0239.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpodnu0239.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     for _ in 0..n {\n            stones.push(stones.len());\n        }\n   \
    \ } else {\n        for _ in 0..n {\n            stones.push(stones.len() + 1);\n\
    \        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphma2h_rn.rs:22:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n22 |     stones\n\
    \   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 0 {\n     \
    \   pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push((i + 1) * 2);\n    }\n    for i in 1..n /\
    \ 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 1..n / 2 {\n \
    \       pile.push((i + 1) * 2 + 2);\n    }\n    for i in 1..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 3);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 4);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 5);\n\
    \    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 6);\n    }\n\
    \    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 7);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 8);\n    }\n    for i in 1..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 9);\n    }\n    for i in 1..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 10);\n    }\n    for i in 1..n / 2 {\n      \
    \  pile.push((i + 1) * 2 + 11);\n    }\n    for i in 1..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 12);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 13);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 14);\n\
    \    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 15);\n    }\n\
    \    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 16);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 17);\n    }\n    for i in 1..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 18);\n    }\n    for i in 1..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 19);\n    }\n    for i in 1..n / 2 {\n      \
    \  pile.push((i + 1) * 2 + 20);\n    }\n    for i in 1..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 21);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 22);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 23);\n\
    \    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 + 24);\n\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpe747qes7.rs:102:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n90  |     for i in 1..n /\
    \ 2 {\n    |                       - this delimiter might not be properly closed...\n\
    ...\n93  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n102 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe747qes7.rs:11:29\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------    \
    \          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for i in 2..n+1 {\n     \
    \   pile[i] += pile[i - 1];\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe42c47s6.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpe42c47s6.rs:18:9\n   |\n18 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpe42c47s6.rs:18:20\n   |\n18 |         pile[i] += pile[i\
    \ - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for _ in 1..n {\n       \
    \ pile[pile.len() - 1] += 1;\n        if pile.len() % 2 == 0 {\n            pile[pile.len()\
    \ - 1] += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1kcsn6da.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += 2;\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy_j7vjk3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy_j7vjk3.rs:16:13\n   |\n16 |            \
    \ pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpy_j7vjk3.rs:18:13\n   |\n18 |             pile[i] += 2;\n   | \
    \            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg3chccr3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpg3chccr3.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpg3chccr3.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpg3chccr3.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpg3chccr3.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm_mjeko7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpm_mjeko7.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpm_mjeko7.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpm_mjeko7.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n         \
    \   n /= 2;\n        } else {\n            pile.push(level + 1);\n           \
    \ n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpiqsv5_jj.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpiqsv5_jj.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut current_level\
    \ = 1;\n    while stones.len() < n {\n        if n % 2 == 0 {\n            stones.push(current_level);\n\
    \            current_level += 1;\n        } else {\n            stones.push(current_level\
    \ - stones.len());\n            current_level += 1;\n        }\n        n /= 2;\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpszclree1.rs:14:26\n   |\n\
    14 |     while stones.len() < n {\n   |                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while stones.len() < n.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpszclree1.rs:24:5\n   |\n11 | fn make_a_pile(n: isize) ->\
    \ Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n24 |     stones\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut next_odd = 1;\n\
    \    let mut next_even = 1;\n    for _ in 0..n {\n        if n % 2 == 0 {\n  \
    \          stones.push(next_even);\n            next_even += 1;\n        } else\
    \ {\n            stones.push(next_odd);\n            next_odd += 1;\n        }\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpnkvghw46.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpn09f6snh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.push(n - 1);\n    } else {\n        stones.push(n - 1);\n       \
    \ stones.push(n - 2);\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpms2du36w.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 1];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz42anik9.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpz42anik9.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpz42anik9.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpz42anik9.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpz42anik9.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmpjyau5bh3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_even() {\n       \
    \     pile[0] += x;\n        } else {\n            pile[0] += x + x;\n       \
    \ }\n    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph8uh9nml.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_even` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmph8uh9nml.rs:15:14\n   |\n\
    15 |         if x.is_even() {\n   |              ^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut i = 0;\n    while i\
    \ < n {\n        if n % 2 == 0 {\n            pile.push(i as isize);\n       \
    \     i += 1;\n        } else {\n            i += 2;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmppbv_g0zv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        pile.push(level);\n        if n % 2 == 0 {\n          \
    \  level += 1;\n        } else {\n            level += 2;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmp1_60dgg7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut last_level = 0;\n\
    \    let mut next_level = 0;\n    while n != 0 {\n        if n % 2 == 0 {\n  \
    \          pile.push(next_level);\n            next_level += 1;\n        } else\
    \ {\n            pile.push(next_level);\n            next_level += 2;\n      \
    \  }\n        last_level = next_level;\n        n /= 2;\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable `last_level` is assigned to, but never used\n  --> /tmp/tmpuh3wyosj.rs:13:13\n\
    \   |\n13 |     let mut last_level = 0;\n   |             ^^^^^^^^^^\n   |\n \
    \  = note: `#[warn(unused_variables)]` on by default\n   = note: consider using\
    \ `_last_level` instead\n\nwarning: value assigned to `last_level` is never read\n\
    \  --> /tmp/tmpuh3wyosj.rs:23:9\n   |\n23 |         last_level = next_level;\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by\
    \ default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpuh3wyosj.rs:24:9\n  \
    \ |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n24 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error; 2 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 0;\n  \
    \  while level < n {\n        if n % 2 == 0 {\n            pile.push(level + 1);\n\
    \        } else {\n            pile.push(level + 2);\n        }\n        level\
    \ += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmppv2rghcx.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_even() {\n       \
    \     pile[0] += x;\n        } else {\n            pile[0] += x;\n           \
    \ pile[0] += x;\n        }\n    });\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpftqydiar.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_even` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpftqydiar.rs:15:14\n   |\n\
    15 |         if x.is_even() {\n   |              ^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for i in 2..=n {\n      \
    \  pile[i] += pile[i - 1];\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1seszhxc.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp1seszhxc.rs:18:9\n   |\n18 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp1seszhxc.rs:18:20\n   |\n18 |         pile[i] += pile[i\
    \ - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(1);\n   \
    \ if n % 2 == 0 {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap()\
    \ + 1);\n        }\n    } else {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap());\n\
    \        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxj6sfo4j.rs:20:25\n   |\n\
    20 |             stones.push(stones.last().unwrap());\n   |                  \
    \       ^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `&{integer}`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n20 |             stones.push(*stones.last().unwrap());\n\
    \   |                         +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n - 1);\n        }\n    } else {\n      \
    \  for _ in 0..n {\n            pile.push(n - 1);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpftfvph6b.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|&x| {\n        if x.is_odd() {\n       \
    \     pile[0] += 1;\n        } else {\n            pile[0] += 2;\n        }\n\
    \    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphy3cs0xv.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphy3cs0xv.rs:14:41\n\
    \   |\n14 |     pile[1..].iter().cloned().for_each(|&x| {\n   |              \
    \                           ^--\n   |                                        \
    \ ||\n   |                                         |expected due to this\n   |\
    \                                         expected `isize`, found reference\n\
    \   |                                         help: did you mean `x`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n - 1);\n        }\n    } else {\n      \
    \  for _ in 0..n {\n            pile.push(n - 1);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpe5uldnra.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for i in 2..=n {\n        pile[i] = pile[i - 1] + if i % 2 == 0 {\n     \
    \       2\n        } else {\n            1\n        };\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzjx812be.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzjx812be.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzjx812be.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i as isize);\n        } else {\n       \
    \     pile.push((i + 1) & !i);\n        }\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpin51ln2i.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        let mut odd = 1;\n        for _ in 0..n {\n   \
    \         odd *= 2;\n            pile.push(odd);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 8]`,\n right: `[3, 5, 7]`', /tmp/tmpppkol03a.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp5delwm8e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpe77jrvax.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwu2rq985.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpwu2rq985.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpwu2rq985.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpwu2rq985.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd = if n % 2\
    \ == 0 {\n        n / 2\n    } else {\n        (n - 1) / 2\n    };\n    let mut\
    \ next_even = if n % 2 == 0 {\n        (n - 1) / 2\n    } else {\n        n /\
    \ 2\n    };\n    for i in 0..n {\n        if i % 2 == 0 {\n            pile.push(next_even);\n\
    \            next_even += 2;\n        } else {\n            pile.push(next_odd);\n\
    \            next_odd += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp08hea2r0.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut num_stones\
    \ = 1;\n    let mut odd_num = 0;\n    let mut even_num = 0;\n    for i in 0..n\
    \ {\n        if i % 2 == 0 {\n            even_num += 1;\n        } else {\n \
    \           odd_num += 1;\n        }\n        pile[i] = num_stones;\n        num_stones\
    \ += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsek894s2.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpsek894s2.rs:22:9\n   |\n22 |         pile[i]\
    \ = num_stones;\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] += n;\n    pile[1..].iter().cloned().for_each(|x|\
    \ {\n        if x % 2 == 0 {\n            pile[0] += 1;\n        } else {\n  \
    \          pile[0] += 2;\n        }\n    });\n    pile\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn16wbq1k.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0] + 3\n\
    \    };\n    for i in 2..=n {\n        pile[i] = pile[i - 1] + if i % 2 == 0 {\n\
    \            2\n        } else {\n            3\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3xcyokpq.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3xcyokpq.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3xcyokpq.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut next_odd_num =\
    \ 0;\n    let mut next_even_num = 0;\n    for i in 0..n {\n        if i % 2 ==\
    \ 0 {\n            pile[i] = next_even_num;\n            next_even_num += 1;\n\
    \        } else {\n            pile[i] = next_odd_num;\n            next_odd_num\
    \ += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqr_22ai6.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqr_22ai6.rs:17:13\n\
    \   |\n17 |             pile[i] = next_even_num;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqr_22ai6.rs:20:13\n\
    \   |\n20 |             pile[i] = next_odd_num;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n / 2);\n            n -= n / 2;\n      \
    \  }\n    } else {\n        for _ in 0..n {\n            pile.push(n);\n     \
    \       n -= n;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9f2hmbsg.rs:16:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp9f2hmbsg.rs:21:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n21 |             n -= n;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpr6ydzgke.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] = n;\n    pile[1]\
    \ = (n - 1) + (n % 2 == 0);\n    for i in 2..n {\n        pile[i] = pile[i - 1]\
    \ + 2 * (i & 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn60nbrhu.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: cannot add `bool` to `isize`\n  --> /tmp/tmpn60nbrhu.rs:14:23\n\
    \   |\n14 |     pile[1] = (n - 1) + (n % 2 == 0);\n   |                      \
    \ ^ no implementation for `isize + bool`\n   |\n   = help: the trait `Add<bool>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpn60nbrhu.rs:16:9\n   |\n16 |         pile[i] = pile[i\
    \ - 1] + 2 * (i & 1);\n   |         ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn60nbrhu.rs:16:19\n   |\n16 |         pile[i]\
    \ = pile[i - 1] + 2 * (i & 1);\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277,"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut stones = n;\n    while\
    \ stones > 0 {\n        if stones % 2 == 1 {\n            pile.push(stones);\n\
    \        }\n        stones /= 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmph20plksi.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    let mut next_odd = 0;\n    let mut next_even = 0;\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            next_even += stones.len() as isize;\n  \
    \      } else {\n            next_odd += stones.len() as isize;\n        }\n \
    \       stones.push(next_odd + (next_even as isize));\n    }\n    stones\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp82_6ob_t.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_odd() {\n        \
    \    pile[2] += x;\n        } else {\n            pile[2] += x.inverse();\n  \
    \      }\n    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpms_osfyr.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpms_osfyr.rs:15:14\n   |\n\
    15 |         if x.is_odd() {\n   |              ^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `inverse` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpms_osfyr.rs:18:26\n   |\n18 |             pile[2] += x.inverse();\n\
    \   |                          ^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    let mut i = 0;\n    while\
    \ stones.len() < n {\n        if n % 2 == 0 {\n            stones.push(stones.len());\n\
    \            i += 1;\n        } else {\n            stones.push(stones.len() +\
    \ 1);\n            i += 2;\n        }\n        n /= 2;\n    }\n    stones\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp38g209vu.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp38g209vu.rs:14:26\n   |\n14 |\
    \     while stones.len() < n {\n   |                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while stones.len() < n.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp38g209vu.rs:24:5\n   |\n11 | fn make_a_pile(n: isize) ->\
    \ Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n24 |     stones\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ pile[n / 2] += n / 2;\n    for i in 1..n {\n        pile[i] += pile[i - 1];\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnz18qntd.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpnz18qntd.rs:14:5\n   |\n14 |     pile[n\
    \ / 2] += n / 2;\n   |     ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpnz18qntd.rs:16:9\n   |\n16 |         pile[i] += pile[i\
    \ - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpnz18qntd.rs:16:20\n\
    \   |\n16 |         pile[i] += pile[i - 1];\n   |                    ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpjthjmsvi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 1] + 1;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbh8vsim1.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbh8vsim1.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbh8vsim1.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbh8vsim1.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbh8vsim1.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 1] + 1;\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    if\
    \ n % 2 == 0 {\n        pile[1] = pile[0] + 1;\n    } else {\n        pile[1]\
    \ = pile[0];\n    }\n    for i in 2..=n {\n        pile[i] = pile[i - 1] + if\
    \ i % 2 == 0 {\n            pile[i / 2]\n        } else {\n            pile[i\
    \ / 2] + 1\n        };\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdcc7_ojr.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdcc7_ojr.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdcc7_ojr.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdcc7_ojr.rs:21:13\n   |\n21 |            \
    \ pile[i / 2]\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdcc7_ojr.rs:23:13\n   |\n23 |            \
    \ pile[i / 2] + 1\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    if n % 2 == 0 {\n        stones.push(stones.last().unwrap() + 1);\n    }\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpd3u5auyb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut i = 0;\n    while\
    \ i < n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2] as isize\
    \ + 1;\n        } else {\n            pile[i] = pile[i / 2] as isize;\n      \
    \  }\n        i += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf7z1liz8.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf7z1liz8.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i / 2] as isize + 1;\n   |            \
    \ ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf7z1liz8.rs:16:23\n\
    \   |\n16 |             pile[i] = pile[i / 2] as isize + 1;\n   |            \
    \           ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf7z1liz8.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i / 2] as isize;\n   |             ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf7z1liz8.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[i / 2] as isize;\n   |                \
    \       ^^^^^^^^^^^ slice indi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n            pile.push(i\
    \ + 1 + (i / 2));\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpday3fa4z.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    let mut next_odd_stones\
    \ = if n % 2 == 0 {\n        stones.len()\n    } else {\n        stones.len()\
    \ + 1\n    };\n    let mut next_even_stones = stones.len();\n    for i in 0..stones.len()\
    \ {\n        stones[i] = stones[i] - next_odd_stones - next_even_stones;\n   \
    \     next_odd_stones = stones[i] - next_odd_stones;\n        next_even_stones\
    \ = stones[i] - next_even_stones;\n    }\n    stones\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2j65b1oi.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2j65b1oi.rs:24:5\n   |\n11 | fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n24 |     stones\n   |   \
    \  ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd = n;\n   \
    \ let mut next_even = n;\n    while next_odd > 0 {\n        pile.push(next_odd);\n\
    \        next_odd -= next_odd % 2;\n    }\n    while next_even > 0 {\n       \
    \ pile.push(next_even);\n        next_even -= next_even % 2;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[2] +=\
    \ n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnkm7zboo.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * i);\n   \
    \ }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpp4jboc6f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    let mut next_odd = 1;\n    let mut next_even = 1;\n    while stones.len()\
    \ > 0 {\n        if stones.len() % 2 == 0 {\n            next_even = stones.pop()\
    \ as isize;\n        } else {\n            next_odd = stones.pop() as isize;\n\
    \        }\n        stones.push(next_odd + (next_even as isize));\n    }\n   \
    \ stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmp18oi4sal.rs:18:25\n\
    \   |\n18 |             next_even = stones.pop() as isize;\n   |             \
    \            ^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror[E0605]:\
    \ non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmp18oi4sal.rs:20:24\n\
    \   |\n20 |             next_odd = stones.pop() as isize;\n   |              \
    \          ^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2] as\
    \ isize + 1;\n        } else {\n            pile[i] = pile[i / 2] as isize + 2;\n\
    \        }\n        i += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkujm2ey.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmphkujm2ey.rs:16:13\n   |\n16 |         \
    \    pile[i] = pile[i / 2] as isize + 1;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphkujm2ey.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i / 2] as isize + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphkujm2ey.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i / 2] as isize + 2;\n   |            \
    \ ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphkujm2ey.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[i / 2] as isize + 2;\n   |            \
    \     "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut n = n;\n    while n\
    \ > 0 {\n        if n % 2 == 0 {\n            pile.push(n % 2);\n            n\
    \ /= 2;\n        } else {\n            pile.push((n - 1) / 2);\n            n\
    \ /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpkcaiz389.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        if n % 2 == 0 {\n            pile[i] = pile[n - 1];\n\
    \        } else {\n            pile[i] = pile[n - 1] + 1;\n        }\n       \
    \ i += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr1yso_1v.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpr1yso_1v.rs:16:13\n   |\n16 |         \
    \    pile[i] = pile[n - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpr1yso_1v.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[n - 1];\n   |                       ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpr1yso_1v.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[n - 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpr1yso_1v.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[n - 1] + 1;\n   |                     \
    \  ^^^^^^^^^^^ slice indices are of type "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += 2;\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ishx4i7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp1ishx4i7.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1ishx4i7.rs:18:13\n   |\n18 |  \
    \           pile[i] += 2;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0] + 1\n\
    \    };\n    for i in 2..n {\n        pile[i] = if i % 2 == 0 {\n            pile[i\
    \ - 1] + 2\n        } else {\n            pile[i - 1] + 1\n        };\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfsvs8z70.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfsvs8z70.rs:20:9\n\
    \   |\n20 |         pile[i] = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpfsvs8z70.rs:21:13\n   |\n21 |            \
    \ pile[i - 1] + 2\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpfsvs8z70.rs:23:13\n   |\n23 |            \
    \ pile[i - 1] + 1\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    stones[0] = stones[1]\
    \ = stones[2] = n;\n    for i in 1..stones.len() {\n        if i % 2 == 0 {\n\
    \            stones[i] += stones[i - 1];\n        } else {\n            stones[i]\
    \ += stones[i - 1] + 1;\n        }\n    }\n    stones\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu5y_qviz.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu5y_qviz.rs:13:29\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = n;\n   |                 ---------\
    \   ^^^^^^^^^^^^^ expected `isize`, found `()`\n   |                 |\n   | \
    \                expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu5y_qviz.rs:13:17\n   |\n13 |     stones[0] = stones[1]\
    \ = stones[2] = n;\n   |     ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `()`\n   |     |\n   |     expected due to the type of this binding\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(1);\n   \
    \ if n % 2 == 0 {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap()\
    \ + 1);\n        }\n    } else {\n        for _ in 0..n / 2 {\n            stones.push(stones.last().unwrap());\n\
    \        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3zvl9_1c.rs:20:25\n   |\n\
    20 |             stones.push(stones.last().unwrap());\n   |                  \
    \       ^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `&{integer}`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n20 |             stones.push(*stones.last().unwrap());\n\
    \   |                         +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 1;\n\
    \    while current_level < n {\n        if n % 2 == 0 {\n            pile.push(current_level);\n\
    \            current_level += 1;\n        } else {\n            pile.push(current_level\
    \ - 1);\n            current_level += 2;\n        }\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmpgy6cyhft.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    for i in 2..=n {\n  \
    \      pile[i] += pile[i - 1];\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr9s3znxx.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpr9s3znxx.rs:18:9\n   |\n18 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpr9s3znxx.rs:18:20\n   |\n18 |         pile[i] += pile[i - 1];\n\
    \   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|&n| {\n        if n % 2 == 0 {\n       \
    \     pile[0] += n;\n        } else {\n            pile[1] += n;\n        }\n\
    \    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwggd7qq0.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwggd7qq0.rs:14:41\n\
    \   |\n14 |     pile[1..].iter().cloned().for_each(|&n| {\n   |              \
    \                           ^--\n   |                                        \
    \ ||\n   |                                         |expected due to this\n   |\
    \                                         expected `isize`, found reference\n\
    \   |                                         help: did you mean `n`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for _ in 1..n {\n       \
    \ pile[pile.len() - 1] += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoqawex9_.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 1] + 1;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjj_s7329.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjj_s7329.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjj_s7329.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjj_s7329.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjj_s7329.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 1] + 1;\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ if n % 2 == 0 {\n        pile[1] += 1;\n    }\n    for i in 2..=n {\n      \
    \  pile[i] += pile[i - 1];\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3i15x9w7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp3i15x9w7.rs:18:9\n   |\n18 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp3i15x9w7.rs:18:20\n   |\n18 |         pile[i] += pile[i\
    \ - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2dmdpike.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp2dmdpike.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2dmdpike.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2dmdpike.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n            pile.push(n\
    \ - i);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp0b19jfi3.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut next_odd_stones\
    \ = if n % 2 == 1 {\n        n / 2\n    } else {\n        n + 1\n    };\n    let\
    \ mut next_even_stones = if n % 2 == 0 {\n        n / 2\n    } else {\n      \
    \  n + 1\n    };\n    for i in 0..n {\n        stones.push(next_odd_stones);\n\
    \        next_odd_stones += 2;\n        stones.push(next_even_stones);\n     \
    \   next_even_stones += 2;\n    }\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 3, 6, 5, 8]`,\n right: `[3, 5, 7]`', /tmp/tmpjrcpmf7_.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp99fg3b_z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ n != 0 {\n        pile.push(level);\n        n -= (level % 2 == 0 ? 1 : 2);\n\
    \        level += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n\
    \  --> /tmp/tmp1y3a3h_6.rs:16:32\n   |\n16 |         n -= (level % 2 == 0 ? 1\
    \ : 2);\n   |                                ^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`,\
    \ `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`,\
    \ `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found `2`\n\
    \  --> /tmp/tmp1y3a3h_6.rs:16:36\n   |\n16 |         n -= (level % 2 == 0 ? 1\
    \ : 2);\n   |                                    ^ expected one of 26 possible\
    \ tokens\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0] + 1\n\
    \    };\n    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n           \
    \ pile[i - 1] + 2\n        } else {\n            pile[i - 1] + 1\n        };\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr7v6cl03.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpr7v6cl03.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpr7v6cl03.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr7v6cl03.rs:23:13\n\
    \   |\n23 |             pile[i - 1] + 1\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut next_odd_level\
    \ = 0;\n    let mut next_even_level = 0;\n    let mut level = 0;\n    while level\
    \ < n {\n        if n % 2 == 0 {\n            next_even_level = next_even_level\
    \ + n;\n        } else {\n            next_odd_level = next_odd_level + n;\n \
    \       }\n        pile.push(next_odd_level);\n        pile.push(next_even_level);\n\
    \        level = level + 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0, 6, 0, 9, 0]`,\n right: `[3, 5, 7]`', /tmp/tmp6h69xc20.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    let mut next_level_stones = n;\n    while next_level_stones > 0 {\n     \
    \   if next_level_stones % 2 == 0 {\n            next_level_stones /= 2;\n   \
    \     } else {\n            next_level_stones /= 2;\n            next_level_stones\
    \ += 1;\n        }\n        pile.push(next_level_stones);\n        current_level\
    \ += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpry8gdczn.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpry8gdczn.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpry8gdczn.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpry8gdczn.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpry8gdczn.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut levels = vec![];\n\
    \    let mut next_level = 0;\n    let mut next_odd = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut next_even = 0;\n    let mut next_even\
    \ = 0;\n    let mut next_even = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpklva0z4q.rs:85:1\n\
    \   |\n85 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp1wrjgtm.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpp1wrjgtm.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp1wrjgtm.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp1wrjgtm.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_odd() {\n        \
    \    pile[2] += x;\n        } else {\n            pile[2] += x;\n            pile[3]\
    \ += x;\n        }\n    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiml2_puf.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpiml2_puf.rs:15:14\n   |\n\
    15 |         if x.is_odd() {\n   |              ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 1 {\n            pile[i] = pile[i] + 1;\n     \
    \   } else {\n            pile[i] = pile[i] + 2;\n        }\n        i += 1;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplqnljf4i.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplqnljf4i.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplqnljf4i.rs:16:23\n\
    \   |\n16 |             pile[i] = pile[i] + 1;\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplqnljf4i.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i] + 2;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplqnljf4i.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[i] + 2;\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n         \
    \   n /= 2;\n        } else {\n            pile.push((level + 1) * 2);\n     \
    \       n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp62ffu07e.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp62ffu07e.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        let mut next_odd = n / 2;\n        while next_odd\
    \ % 2 == 0 {\n            next_odd /= 2;\n        }\n        pile.push(next_odd);\n\
    \    }\n    for i in 0..n {\n        pile.push(i + 1);\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp64md162u.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            pile.push(n - i);\n        } else\
    \ {\n            pile.push((n - i) / 2);\n        }\n        i += 1;\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpd3s96o9i.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    for i in 0..n {\n     \
    \   if i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n       \
    \     pile.push(i + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmptxttm8gg.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 1);\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpn3626l6p.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_odd() {\n        \
    \    pile[2] += 1;\n        } else {\n            pile[2] += 2;\n        }\n \
    \   });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk9a32a9n.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmpk9a32a9n.rs:15:14\n\
    \   |\n15 |         if x.is_odd() {\n   |              ^^^^^^ method not found\
    \ in `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 1);\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpjepp0kqb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut current_level =\
    \ 0;\n    let mut next_level_stones = n;\n    while next_level_stones > 0 {\n\
    \        if next_level_stones % 2 == 0 {\n            pile.push(next_level_stones);\n\
    \            next_level_stones /= 2;\n        } else {\n            next_level_stones\
    \ /= 2;\n            pile.push(next_level_stones);\n        }\n        current_level\
    \ += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpg_vo9if7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcjgmp5bt.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcjgmp5bt.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcjgmp5bt.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcjgmp5bt.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcjgmp5bt.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|&x| {\n        if x % 2 == 0 {\n       \
    \     pile[0] += 1;\n        } else {\n            pile[0] += 2;\n        }\n\
    \    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfof56mex.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfof56mex.rs:14:41\n\
    \   |\n14 |     pile[1..].iter().cloned().for_each(|&x| {\n   |              \
    \                           ^--\n   |                                        \
    \ ||\n   |                                         |expected due to this\n   |\
    \                                         expected `isize`, found reference\n\
    \   |                                         help: did you mean `x`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n        pile[2] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp762i5o53.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            pile[i] = pile[i] + n;\n     \
    \   } else {\n            pile[i] = pile[i] + n / 2;\n        }\n        i +=\
    \ 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv8iuhxkd.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv8iuhxkd.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i] + n;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv8iuhxkd.rs:16:23\n\
    \   |\n16 |             pile[i] = pile[i] + n;\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv8iuhxkd.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i] + n / 2;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv8iuhxkd.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[i] + n / 2;\n   |                     \
    \  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut num_stones = n;\n\
    \    while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpbqwyqsh_.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n);\n   \
    \ if n % 2 == 0 {\n        stones.push(stones.last().unwrap() + 1);\n    }\n \
    \   stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp1aiip8h2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 0 {\n     \
    \   pile.push(n - 1);\n    } else {\n        pile.push(n - 1);\n        pile.push(n\
    \ - 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp8jon8okz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![];\n    let mut level = 1;\n    while\
    \ stones.len() < n {\n        if n % 2 == 0 {\n            stones.push(level);\n\
    \        }\n        level += 2;\n        n /= 2;\n    }\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhwph1mu.rs:14:26\n   |\n\
    14 |     while stones.len() < n {\n   |                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while stones.len() < n.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmphpq513h_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    if\
    \ n % 2 == 0 {\n        pile[1] = n / 2;\n    } else {\n        pile[1] = n /\
    \ 2 + 1;\n    }\n    for i in 2..=n {\n        pile[i] = pile[i - 1] + pile[i\
    \ - 2];\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp135k4wex.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp135k4wex.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + pile[i - 2];\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp135k4wex.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + pile[i - 2];\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp135k4wex.rs:20:33\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + pile[i - 2];\n   |                                 ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
