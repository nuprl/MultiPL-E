name: HumanEval_106_f
language: rust
results:
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6wts7wmf.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6wts7wmf.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6wts7wmf.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6wts7wmf.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6wts7wmf.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhl5xwhm.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot multiply `&std::ops::Range<isize>`\
    \ by `&std::ops::Range<isize>`\n  --> /tmp/tmplhl5xwhm.rs:12:37\n   |\n12 |  \
    \       vec![1..n].iter().map(|x| x * x).collect()\n   |                     \
    \              - ^ - &std::ops::Range<isize>\n   |                           \
    \        |\n   |                                   &std::ops::Range<isize>\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj57qrzy0.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot multiply `&std::ops::Range<isize>`\
    \ by `&std::ops::Range<isize>`\n  --> /tmp/tmpj57qrzy0.rs:12:37\n   |\n12 |  \
    \       vec![1..n].iter().map(|x| x * x).collect()\n   |                     \
    \              - ^ - &std::ops::Range<isize>\n   |                           \
    \        |\n   |                                   &std::ops::Range<isize>\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa5bu8ffc.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpa5bu8ffc.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpa5bu8ffc.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa5bu8ffc.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa5bu8ffc.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp2f_30k6g.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpustcqau8.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpustcqau8.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpustcqau8.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpustcqau8.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpustcqau8.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyj5g9gji.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpyj5g9gji.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpyj5g9gji.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpyj5g9gji.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpyj5g9gji.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplhl9dxej.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhl9dxej.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhl9dxej.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhl9dxej.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhl9dxej.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ij10u69.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4ij10u69.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4ij10u69.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4ij10u69.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4ij10u69.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp6b2cjo9t.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        result[i] = if i % 2 == 0 {\n            factorial(i)\n    \
    \    } else {\n            result[i - 1] + i\n        };\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmplf5ii14j.rs:12:13\n\
    \   |\n12 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmplf5ii14j.rs:9:35\n\
    \  |\n9 |     let mut result = vec![1isize; n];\n  |                         \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let\
    \ mut result = vec![1isize; n.try_into().unwrap()];\n  |                     \
    \               ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmplf5ii14j.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplf5ii14j.rs:14:13\n   |\n14 |            \
    \ result[i - 1] + i\n   |             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpphnm1nkl.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgtg1apj2.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgtg1apj2.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgtg1apj2.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgtg1apj2.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe7hx_cyd.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe7hx_cyd.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe7hx_cyd.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe7hx_cyd.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd5gyjb4g.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpd5gyjb4g.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpd5gyjb4g.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpd5gyjb4g.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpp8n3hq0c.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpq9f3zkle.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe9yze45i.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpe9yze45i.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpe9yze45i.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpe9yze45i.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpe9yze45i.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzlpk8zu2.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzlpk8zu2.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzlpk8zu2.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzlpk8zu2.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzlpk8zu2.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result.push(result.last() * i);\n  \
    \      } else {\n            result.push(i * result.last());\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmpbjiws4n0.rs:12:39\n\
    \   |\n12 |             result.push(result.last() * i);\n   |                \
    \         ------------- ^ - isize\n   |                         |\n   |      \
    \                   Option<&isize>\n\nerror[E0277]: cannot multiply `isize` by\
    \ `Option<&isize>`\n  --> /tmp/tmpbjiws4n0.rs:14:27\n   |\n14 |             result.push(i\
    \ * result.last());\n   |                           ^ no implementation for `isize\
    \ * Option<&isize>`\n   |\n   = help: the trait `Mul<Option<&isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpqr7qwrhs.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_pmtjkyq.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_pmtjkyq.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_pmtjkyq.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_pmtjkyq.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_pmtjkyq.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpp5hy6m94.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8vkd7f36.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8vkd7f36.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8vkd7f36.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8vkd7f36.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8vkd7f36.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpo5t_cle2.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result.push(i * result.last().unwrap());\n\
    \        } else {\n            result.push(result.last().unwrap() + i);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 7, 28]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpc7hzqwwq.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9_q19_38.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9_q19_38.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9_q19_38.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9_q19_38.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9_q19_38.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4or9wr3f.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4or9wr3f.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4or9wr3f.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4or9wr3f.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4or9wr3f.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        result[i] = result[i]\
    \ * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3d4etpy1.rs:14:9\n\
    \   |\n14 |         result[i] = result[i] * i;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3d4etpy1.rs:14:21\n   |\n14 |         result[i]\
    \ = result[i] * i;\n   |                     ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5sstjs75.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5sstjs75.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5sstjs75.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5sstjs75.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5sstjs75.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgm71ahia.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgm71ahia.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgm71ahia.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgm71ahia.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgm71ahia.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3t9kus1.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz3t9kus1.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz3t9kus1.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz3t9kus1.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz3t9kus1.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqhkn5rsk.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqhkn5rsk.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqhkn5rsk.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqhkn5rsk.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqhkn5rsk.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm9jbd0ya.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm9jbd0ya.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm9jbd0ya.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm9jbd0ya.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm9jbd0ya.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplxszokn1.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplxszokn1.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplxszokn1.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplxszokn1.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplxszokn1.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp35dnl67n.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp35dnl67n.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp35dnl67n.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp35dnl67n.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp35dnl67n.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy0gbhfwb.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy0gbhfwb.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy0gbhfwb.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy0gbhfwb.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy0gbhfwb.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4g30x_wv.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4g30x_wv.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4g30x_wv.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4g30x_wv.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..=n {\n        result[i] = result[i]\
    \ * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpb3ekbmik.rs:14:9\n\
    \   |\n14 |         result[i] = result[i] * i;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpb3ekbmik.rs:14:21\n   |\n14 |         result[i]\
    \ = result[i] * i;\n   |                     ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmph5k8tusl.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz9i6dw6v.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot multiply `&std::ops::Range<isize>`\
    \ by `&std::ops::Range<isize>`\n  --> /tmp/tmpz9i6dw6v.rs:12:37\n   |\n12 |  \
    \       vec![1..n].iter().map(|x| x * x).collect()\n   |                     \
    \              - ^ - &std::ops::Range<isize>\n   |                           \
    \        |\n   |                                   &std::ops::Range<isize>\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp6mkwadjy.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmbkgt62k.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpmbkgt62k.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpmbkgt62k.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpmbkgt62k.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpmbkgt62k.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result.push(result.last() * i);\n  \
    \      } else {\n            result.push(i * result.last());\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmpkyr16t84.rs:12:39\n\
    \   |\n12 |             result.push(result.last() * i);\n   |                \
    \         ------------- ^ - isize\n   |                         |\n   |      \
    \                   Option<&isize>\n\nerror[E0277]: cannot multiply `isize` by\
    \ `Option<&isize>`\n  --> /tmp/tmpkyr16t84.rs:14:27\n   |\n14 |             result.push(i\
    \ * result.last());\n   |                           ^ no implementation for `isize\
    \ * Option<&isize>`\n   |\n   = help: the trait `Mul<Option<&isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu3zd834t.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpu3zd834t.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpu3zd834t.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpu3zd834t.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpu3zd834t.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg1uctf0n.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpg1uctf0n.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpg1uctf0n.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpg1uctf0n.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpg1uctf0n.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp288rulcl.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp288rulcl.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp288rulcl.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp288rulcl.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp288rulcl.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziajd_4x.rs:15:13\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziajd_4x.rs:15:25\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziajd_4x.rs:17:13\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpziajd_4x.rs:17:25\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmprsxpuef5.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb50ll512.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpb50ll512.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpb50ll512.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpb50ll512.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpb50ll512.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(result.last().unwrap()\
    \ + i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmplh5b9cc6.rs:17:39\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpn6b1g4ga.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        result[i] = result[i]\
    \ * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqrtrqx3h.rs:14:9\n\
    \   |\n14 |         result[i] = result[i] * i;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqrtrqx3h.rs:14:21\n   |\n14 |         result[i]\
    \ = result[i] * i;\n   |                     ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc0xfi657.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpc0xfi657.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpc0xfi657.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpc0xfi657.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpc0xfi657.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpf4cy3j6i.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![];\n    for i in 1..=n {\n  \
    \      if i % 2 == 0 {\n            res.push(i * i);\n        } else {\n     \
    \       res.push(i + 1);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpp786v0kj.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoq6p3hcr.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoq6p3hcr.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoq6p3hcr.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoq6p3hcr.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoq6p3hcr.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxcvu858n.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpxcvu858n.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxcvu858n.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxcvu858n.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxcvu858n.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphjqb4oy6.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphjqb4oy6.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphjqb4oy6.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphjqb4oy6.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphjqb4oy6.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpft3ic9m1.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpft3ic9m1.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpft3ic9m1.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpft3ic9m1.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpft3ic9m1.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_rm47s83.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_rm47s83.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_rm47s83.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_rm47s83.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpebdpoimv.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpkueay5g6.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuitjiab2.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpuitjiab2.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpuitjiab2.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpuitjiab2.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn9wz5d7m.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn9wz5d7m.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpn9wz5d7m.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn9wz5d7m.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn9wz5d7m.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkqj_qnmz.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkqj_qnmz.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkqj_qnmz.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkqj_qnmz.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkqj_qnmz.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpow0mlelq.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpow0mlelq.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpow0mlelq.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpow0mlelq.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpow0mlelq.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2yxwchim.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp2yxwchim.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2yxwchim.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2yxwchim.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp8gfnrfjd.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoogy3264.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot multiply `&std::ops::Range<isize>`\
    \ by `&std::ops::Range<isize>`\n  --> /tmp/tmpoogy3264.rs:12:37\n   |\n12 |  \
    \       vec![1..n].iter().map(|x| x * x).collect()\n   |                     \
    \              - ^ - &std::ops::Range<isize>\n   |                           \
    \        |\n   |                                   &std::ops::Range<isize>\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp81velqlo.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81velqlo.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81velqlo.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81velqlo.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp81velqlo.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppibq5up1.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmppibq5up1.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmppibq5up1.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmppibq5up1.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo8nr4nc9.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo8nr4nc9.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpo8nr4nc9.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpo8nr4nc9.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpo8nr4nc9.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            factorial(i)\n        }\
    \ else {\n            result[i - 1] + i\n        };\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4fodn5d6.rs:12:13\n\
    \   |\n12 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4fodn5d6.rs:9:30\n\
    \  |\n9 |     let mut result = vec![1; n + 1];\n  |                          \
    \    ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let\
    \ mut result = vec![1; (n + 1).try_into().unwrap()];\n  |                    \
    \          +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4fodn5d6.rs:11:9\n   |\n11 |   \
    \      result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4fodn5d6.rs:14:13\n   |\n14 |  \
    \           result[i - 1] + i\n   |             ^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpscsp03kh.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n \
    \           result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpewy69y6j.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprb54ffla.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprb54ffla.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprb54ffla.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprb54ffla.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprb54ffla.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            (i * result[i-1])\n    \
    \    } else {\n            result[i-1] + i;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpk7yrj3_d.rs:12:13\n\
    \   |\n12 |             (i * result[i-1])\n   |             ^               ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n12 -             (i * result[i-1])\n12 +             i * result[i-1]\n\
    \   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpk7yrj3_d.rs:9:30\n  |\n\
    9 |     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpk7yrj3_d.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpk7yrj3_d.rs:12:18\n   |\n12 |  \
    \           (i * result[i-1])\n   |                  ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpk7yrj3_d.rs:14:13\n   |\n14 |  \
    \           result[i-1] + i;\n   |             ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptkvu1_om.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptkvu1_om.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptkvu1_om.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptkvu1_om.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpf703lc_k.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp9y2bqwf6.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt6knhmvc.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpt6knhmvc.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpt6knhmvc.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt6knhmvc.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt6knhmvc.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu1y1vqq8.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpu1y1vqq8.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpu1y1vqq8.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpu1y1vqq8.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpu1y1vqq8.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphy79hj2s.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphy79hj2s.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphy79hj2s.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphy79hj2s.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphy79hj2s.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl264l17i.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpl264l17i.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpl264l17i.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpl264l17i.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpl264l17i.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp40mj08if.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp40mj08if.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp40mj08if.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp40mj08if.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp3ol1uio4.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpp4mjbwhf.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpxro0jvn2.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        result[i] = result[i]\
    \ * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf1tmk2zd.rs:14:9\n\
    \   |\n14 |         result[i] = result[i] * i;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpf1tmk2zd.rs:14:21\n   |\n14 |         result[i]\
    \ = result[i] * i;\n   |                     ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         result.push(i * i);\n        } else {\n            result.push(i + 1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp3n5ti_ns.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpab68ylvx.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpab68ylvx.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpab68ylvx.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpab68ylvx.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpane34itv.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpzavegfen.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpixpdx8if.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpixpdx8if.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpixpdx8if.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpixpdx8if.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpixpdx8if.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpjqunrfu9.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8oacpkyb.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp8oacpkyb.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8oacpkyb.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8oacpkyb.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8oacpkyb.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdqevvo5k.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdqevvo5k.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdqevvo5k.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdqevvo5k.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdqevvo5k.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpgzfhiu19.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuj9wfgiq.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot multiply `&std::ops::Range<isize>`\
    \ by `&std::ops::Range<isize>`\n  --> /tmp/tmpuj9wfgiq.rs:12:37\n   |\n12 |  \
    \       vec![1..n].iter().map(|x| x * x).collect()\n   |                     \
    \              - ^ - &std::ops::Range<isize>\n   |                           \
    \        |\n   |                                   &std::ops::Range<isize>\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprgnxvpab.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprgnxvpab.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprgnxvpab.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprgnxvpab.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprgnxvpab.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpagqoiblk.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpux_j3z6r.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpux_j3z6r.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpux_j3z6r.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpux_j3z6r.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpux_j3z6r.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpb6pft5ab.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmphro8qrug.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpj6hdt1fn.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        result[i] = if i % 2 == 0 {\n            (i * i).to_string()\n\
    \        } else {\n            (i * (i - 1)).to_string()\n        };\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp28pvmls4.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp28pvmls4.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpn8rfi33h.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5l3lu_kp.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5l3lu_kp.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5l3lu_kp.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5l3lu_kp.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5l3lu_kp.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpi4dgbfts.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4_qkin3y.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_qkin3y.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_qkin3y.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_qkin3y.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_qkin3y.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            (i * result[i-1])\n    \
    \    } else {\n            result[i-1] + i;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmp4vbj_448.rs:12:13\n\
    \   |\n12 |             (i * result[i-1])\n   |             ^               ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n12 -             (i * result[i-1])\n12 +             i * result[i-1]\n\
    \   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmp4vbj_448.rs:9:30\n  |\n\
    9 |     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4vbj_448.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4vbj_448.rs:12:18\n   |\n12 |  \
    \           (i * result[i-1])\n   |                  ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4vbj_448.rs:14:13\n   |\n14 |  \
    \           result[i-1] + i;\n   |             ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpulnpl51b.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp0s8ljx3y.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxb9do2r_.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpxb9do2r_.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxb9do2r_.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxb9do2r_.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxb9do2r_.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8buaw02e.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp8buaw02e.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8buaw02e.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8buaw02e.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj_0i04pm.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpj_0i04pm.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpj_0i04pm.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpj_0i04pm.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpj_0i04pm.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpl8dy16i_.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![];\n    for i in 1..=n {\n  \
    \      if i % 2 == 0 {\n            res.push(i * i);\n        } else {\n     \
    \       res.push(i + 1);\n        }\n    }\n    return res;\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp9qw28e8u.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgif64j4j.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgif64j4j.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgif64j4j.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgif64j4j.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmph4hiu_i6.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprkjo_x1q.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprkjo_x1q.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprkjo_x1q.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprkjo_x1q.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![];\n    for i in 1..n {\n        if i % 2 == 0 {\n  \
    \          result.push(result.last().unwrap() * i);\n        } else {\n      \
    \      result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 12]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp68zms2jq.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpud3kmm25.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpud3kmm25.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpud3kmm25.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpud3kmm25.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpjq_5oh7v.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph1ke2nr3.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmph1ke2nr3.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph1ke2nr3.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmph1ke2nr3.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmph1ke2nr3.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1isize; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            res[i] = res[i] * i;\n        } else\
    \ {\n            res[i] = res[i] + i;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpib6l9x6z.rs:9:32\n  |\n9 |\
    \     let mut res = vec![1isize; n];\n  |                                ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut res = vec![1isize;\
    \ n.try_into().unwrap()];\n  |                                 ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpib6l9x6z.rs:12:13\n\
    \   |\n12 |             res[i] = res[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpib6l9x6z.rs:12:22\n   |\n12 |            \
    \ res[i] = res[i] * i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpib6l9x6z.rs:14:13\n   |\n14 |            \
    \ res[i] = res[i] + i;\n   |             ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpib6l9x6z.rs:14:22\n   |\n14 |            \
    \ res[i] = res[i] + i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0sk4hl_j.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0sk4hl_j.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0sk4hl_j.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0sk4hl_j.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0sk4hl_j.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmplymxyxc6.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp352whaw1.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp352whaw1.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp352whaw1.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp352whaw1.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsj1d3ylb.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpsj1d3ylb.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsj1d3ylb.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsj1d3ylb.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp76y6aljs.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8nj7lo7h.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp8nj7lo7h.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8nj7lo7h.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8nj7lo7h.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8nj7lo7h.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpswy6d82l.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprgxd56mw.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprgxd56mw.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprgxd56mw.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprgxd56mw.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i - 1] = result[i - 1] * i;\n        } else {\n          \
    \  result[i - 1] = result[i - 1] + i;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp40wz2hky.rs:15:13\n\
    \   |\n15 |             result[i - 1] = result[i - 1] * i;\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp40wz2hky.rs:15:29\n\
    \   |\n15 |             result[i - 1] = result[i - 1] * i;\n   |             \
    \                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp40wz2hky.rs:17:13\n   |\n17 |             result[i - 1] = result[i\
    \ - 1] + i;\n   |             ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp40wz2hky.rs:17:29\n   |\n17 |            \
    \ result[i - 1] = result[i - 1] + i;\n   |                             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp_rktovqa.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmphfz44vij.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpod9_y3dp.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpod9_y3dp.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpod9_y3dp.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpod9_y3dp.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpod9_y3dp.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp87bxghao.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps5gnl2xq.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmps5gnl2xq.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmps5gnl2xq.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmps5gnl2xq.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmps5gnl2xq.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplt1p7bxs.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplt1p7bxs.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplt1p7bxs.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplt1p7bxs.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplt1p7bxs.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpeol5vm6l.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = i * result[i];\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvgktiwfe.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvgktiwfe.rs:12:13\n\
    \   |\n12 |             result[i] = i * result[i];\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvgktiwfe.rs:12:29\n\
    \   |\n12 |             result[i] = i * result[i];\n   |                     \
    \        ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvgktiwfe.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvgktiwfe.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usiz"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5pxm18lh.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5pxm18lh.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5pxm18lh.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5pxm18lh.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxnc85ycj.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxnc85ycj.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxnc85ycj.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxnc85ycj.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxnc85ycj.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ilzftyc.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_ilzftyc.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_ilzftyc.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_ilzftyc.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_ilzftyc.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeic5jx99.rs:15:13\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeic5jx99.rs:15:25\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeic5jx99.rs:17:13\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeic5jx99.rs:17:25\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp_0g2n4gx.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg11_9y03.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpg11_9y03.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpg11_9y03.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpg11_9y03.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpg11_9y03.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpx644gdg8.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpkfjty4_e.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjvh6qvgl.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjvh6qvgl.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjvh6qvgl.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjvh6qvgl.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjvh6qvgl.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw5f4ysu5.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpw5f4ysu5.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpw5f4ysu5.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpw5f4ysu5.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpw5f4ysu5.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpjs5ao2xw.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpa1jh_zti.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp2vzepr1t.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1isize; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            res[i] = res[i] * i;\n        } else\
    \ {\n            res[i] = res[i] + i;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwvi7i8po.rs:9:32\n  |\n9 |\
    \     let mut res = vec![1isize; n];\n  |                                ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut res = vec![1isize;\
    \ n.try_into().unwrap()];\n  |                                 ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwvi7i8po.rs:12:13\n\
    \   |\n12 |             res[i] = res[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpwvi7i8po.rs:12:22\n   |\n12 |            \
    \ res[i] = res[i] * i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpwvi7i8po.rs:14:13\n   |\n14 |            \
    \ res[i] = res[i] + i;\n   |             ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpwvi7i8po.rs:14:22\n   |\n14 |            \
    \ res[i] = res[i] + i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphlf3_6_c.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphlf3_6_c.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphlf3_6_c.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphlf3_6_c.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9x7honb7.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9x7honb7.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9x7honb7.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9x7honb7.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9x7honb7.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result.push(result.last() * i);\n        } else {\n            result.push(i\
    \ * result.last());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmpjqilj753.rs:15:39\n\
    \   |\n15 |             result.push(result.last() * i);\n   |                \
    \         ------------- ^ - isize\n   |                         |\n   |      \
    \                   Option<&isize>\n\nerror[E0277]: cannot multiply `isize` by\
    \ `Option<&isize>`\n  --> /tmp/tmpjqilj753.rs:17:27\n   |\n17 |             result.push(i\
    \ * result.last());\n   |                           ^ no implementation for `isize\
    \ * Option<&isize>`\n   |\n   = help: the trait `Mul<Option<&isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n   \
    \     } else {\n            result[i] + i\n        };\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe7tytvo6.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpe7tytvo6.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpe7tytvo6.rs:12:13\n   |\n12 |            \
    \ result[i] * i\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpe7tytvo6.rs:14:13\n   |\n14 |            \
    \ result[i] + i\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp515nmfvz.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![];\n    for i in 1..=n {\n  \
    \      if i % 2 == 0 {\n            res.push(i * i);\n        } else {\n     \
    \       res.push(i + 1);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmphxq37cgk.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9rwo6mvx.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot multiply `&std::ops::Range<isize>`\
    \ by `&std::ops::Range<isize>`\n  --> /tmp/tmp9rwo6mvx.rs:12:37\n   |\n12 |  \
    \       vec![1..n].iter().map(|x| x * x).collect()\n   |                     \
    \              - ^ - &std::ops::Range<isize>\n   |                           \
    \        |\n   |                                   &std::ops::Range<isize>\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy9y4l3i9.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy9y4l3i9.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpy9y4l3i9.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy9y4l3i9.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy9y4l3i9.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpcpq782ts.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfc19ag3q.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpfc19ag3q.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpfc19ag3q.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpfc19ag3q.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpfc19ag3q.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo2efuc8v.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo2efuc8v.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo2efuc8v.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo2efuc8v.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo2efuc8v.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmph20fti4k.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcpln37bx.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcpln37bx.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcpln37bx.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcpln37bx.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcpln37bx.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdxh2w3vf.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdxh2w3vf.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdxh2w3vf.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdxh2w3vf.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdxh2w3vf.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpzxkmyjkp.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpfyfqqf8a.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpqy72lmlw.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm88q9iyk.rs:15:13\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm88q9iyk.rs:15:25\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm88q9iyk.rs:17:13\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm88q9iyk.rs:17:25\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp5196h1wi.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzbh3ftao.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpzbh3ftao.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzbh3ftao.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzbh3ftao.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(result.clone());\n        }\n\
    \        result[result.len() - 1] *= i;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpriorzk7s.rs:12:25\n   |\n\
    12 |             result.push(result.clone());\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         cyclic type of infinite\
    \ size\n   |                         help: try using a conversion method: `result.to_vec()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_63hjeo6.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_63hjeo6.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_63hjeo6.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_63hjeo6.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_63hjeo6.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgs2as9yq.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgs2as9yq.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgs2as9yq.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgs2as9yq.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgs2as9yq.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn4gnkc53.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn4gnkc53.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn4gnkc53.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn4gnkc53.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpn4gnkc53.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp6ng9liyu.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyqm5xnzu.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyqm5xnzu.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyqm5xnzu.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyqm5xnzu.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyqm5xnzu.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1; n];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            result[i] = result[i] * i;\n        } else {\n            result[i]\
    \ = result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkm4yjq0r.rs:12:30\n   |\n\
    12 |     let mut result = vec![1; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut result\
    \ = vec![1; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkm4yjq0r.rs:15:13\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkm4yjq0r.rs:15:25\n\
    \   |\n15 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkm4yjq0r.rs:17:13\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkm4yjq0r.rs:17:25\n\
    \   |\n17 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type "
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6bei0vj7.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6bei0vj7.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6bei0vj7.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6bei0vj7.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6bei0vj7.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1isize; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            res[i] = res[i] * i;\n        } else\
    \ {\n            res[i] = res[i] + i;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2a7ppxdz.rs:9:32\n  |\n9 |\
    \     let mut res = vec![1isize; n];\n  |                                ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut res = vec![1isize;\
    \ n.try_into().unwrap()];\n  |                                 ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2a7ppxdz.rs:12:13\n\
    \   |\n12 |             res[i] = res[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp2a7ppxdz.rs:12:22\n   |\n12 |            \
    \ res[i] = res[i] * i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp2a7ppxdz.rs:14:13\n   |\n14 |            \
    \ res[i] = res[i] + i;\n   |             ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp2a7ppxdz.rs:14:22\n   |\n14 |            \
    \ res[i] = res[i] + i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            (i * result[i-1])\n    \
    \    } else {\n            result[i-1] + i;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpgkadpmoz.rs:12:13\n\
    \   |\n12 |             (i * result[i-1])\n   |             ^               ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n12 -             (i * result[i-1])\n12 +             i * result[i-1]\n\
    \   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpgkadpmoz.rs:9:30\n  |\n\
    9 |     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgkadpmoz.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgkadpmoz.rs:12:18\n   |\n12 |  \
    \           (i * result[i-1])\n   |                  ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgkadpmoz.rs:14:13\n   |\n14 |  \
    \           result[i-1] + i;\n   |             ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvpetaoa6.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvpetaoa6.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvpetaoa6.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvpetaoa6.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpvpetaoa6.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp39gomqeb.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp39gomqeb.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp39gomqeb.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp39gomqeb.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp39gomqeb.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            res[i] = res[i] * i;\n        } else\
    \ {\n            res[i] = res[i] + i;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0wqi4yk2.rs:9:27\n  |\n9 |\
    \     let mut res = vec![1; n + 1];\n  |                           ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut res = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0wqi4yk2.rs:12:13\n\
    \   |\n12 |             res[i] = res[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0wqi4yk2.rs:12:22\n   |\n12 |  \
    \           res[i] = res[i] * i;\n   |                      ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0wqi4yk2.rs:14:13\n   |\n14 |  \
    \           res[i] = res[i] + i;\n   |             ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0wqi4yk2.rs:14:22\n   |\n14 |  \
    \           res[i] = res[i] + i;\n   |                      ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp995zd3oz.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp995zd3oz.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp995zd3oz.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp995zd3oz.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbfes4d0x.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbfes4d0x.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbfes4d0x.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbfes4d0x.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbfes4d0x.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n  \
    \      } else {\n            result[i] = result[i] + i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpukwg0n0_.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpukwg0n0_.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpukwg0n0_.rs:12:25\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpukwg0n0_.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpukwg0n0_.rs:14:25\n   |\n14 |            \
    \ result[i] = result[i] + i;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6upc1llk.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp6upc1llk.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6upc1llk.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6upc1llk.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6upc1llk.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp223vaxr4.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n  \
    \          result.push(i * i);\n        } else {\n            result.push(i +\
    \ 1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp0fxosyqq.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1je2hf5q.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp1je2hf5q.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1je2hf5q.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1je2hf5q.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1je2hf5q.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n        }\
    \ else {\n            result[i] + i\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkakui374.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkakui374.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkakui374.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkakui374.rs:14:13\n   |\n14 |  \
    \           result[i] + i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp80qubaeb.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp80qubaeb.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp80qubaeb.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp80qubaeb.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp80qubaeb.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
