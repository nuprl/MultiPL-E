name: HumanEval_142_sum_squares
language: rust
results:
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 4 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4vqvuzbe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp49ebo3w7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmppv0ttcoe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp3_qnzcom.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpxnzqfrly.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        } else if x % 4 == 0 {\n            sum += x * x;\n     \
    \   } else {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp5fy8ejfn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp989nzq7o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpc0jukiue.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpchbsnp2z.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxsrxahkf.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmphbork396.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8mc0344s.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpmekvxu72.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpn4y3fj10.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpodxv7atk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpl181rgzs.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9mt0rf_q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp79pcf274.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp198jt0_e.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        } else if x % 4 == 0 {\n            sum += x * x;\n     \
    \   } else {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpmx0ge02a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 4 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmphd15m03l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmphjgx17kq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpczrai52c.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpzx0gmxn6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp281a3k6k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpae385p9q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        } else if x % 4 == 0 {\n            sum += x * x * x;\n \
    \       } else {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpyp04um5g.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp7087mquq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpkgsqfa_1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpayyguvjm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpmtfyvkj2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpke2n8hp9.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpouha_10n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpq8rly1ci.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry;\n        }\n        if entry % 4 == 0 {\n            sum\
    \ += entry;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp3jyswyxk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpaayj5tvg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp2oxp3w70.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkmqg5p4v.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp54xl7_2n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp7w80hqdp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 4 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpdarp2shy.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3s6771ke.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpwvzx4bn6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpvpdqdrpy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry.is_multiple_of_three()\
    \ {\n            sum += entry.squared();\n        } else if entry.is_multiple_of_four()\
    \ {\n            sum += entry.cubed();\n        } else {\n            sum += entry;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of_three` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpp1lnadyt.rs:12:18\n   |\n12 |         if\
    \ entry.is_multiple_of_three() {\n   |                  ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `squared` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpp1lnadyt.rs:13:26\n   |\n13 |  \
    \           sum += entry.squared();\n   |                          ^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `is_multiple_of_four`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpp1lnadyt.rs:14:25\n\
    \   |\n14 |         } else if entry.is_multiple_of_four() {\n   |            \
    \             ^^^^^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `cubed` found for type `isize` in the current scope\n  --> /tmp/tmpp1lnadyt.rs:15:26\n\
    \   |\n15 |             sum += entry.cubed();\n   |                          ^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpmd3ijpw9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpxt7pbrrb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp6jtrhoea.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpb1o6na_f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfny9rcdy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmprjm_1g79.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry;\n        }\n        if entry % 4 == 0 {\n            sum\
    \ += entry;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpu34q10f2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp45ync5aj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        } else if x % 4 == 0 {\n            sum += x * x;\n     \
    \   } else {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmps_quskwg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmppy_3cast.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpv2ejo5di.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9f89ch86.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpbe758n1j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpg44010lu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        }\n        if x % 4 == 0 {\n            sum += x * x;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpj4aqichx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp05pf06v9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry;\n        }\n        if entry % 4 == 0 {\n            sum\
    \ += entry;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp6cpdt6q9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmptqn92gkg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpaastkcdu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpllt3c2ll.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpwu24bfgv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n \
    \       } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprs4bpyws.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp3juco2ve.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmprlbrqtv5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp_vklyzt1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpkeopg82g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp2xwx4fpv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp54dptyx8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpcsjzx5xs.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkoe55j9r.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpt3uw2bdb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpnd2e5vyk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp0zx4u18w.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp_1huix3a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpw6zdj7mh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpca59nhn2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp6z_kec5h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpma1tt27z.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpjr341rql.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpgo9h2yks.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpibe7637g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpc2x7on3o.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i * i;\n\
    \        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn95odrtl.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpz9wnpma2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        } else if x % 4 == 0 {\n            sum += x * x;\n     \
    \   } else {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpgwp0un06.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp0thsn01u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp2dtt5t1f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpopt8je9j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpgucwktf5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpepu8y4gv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp_7cy0_9k.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpemgv9pt3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpevjkuyx7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmph4nrtik9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmplgertqrg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpxirt40qb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpdm6kd253.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9f8jesa_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp5p9vzffg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8v5dn24q.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpt7qs3kob.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp69o89uxu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpf5p9_xl2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp4hrl57_p.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpzjfo3rhe.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpif6i1lqg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp0y45xmjc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp6ni1krpg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbq91z_sc.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpni2e0w2d.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppil_zg9z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp8cmuw812.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 4 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpelekt_gs.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9ugdw4ij.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp__70bhn1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp7386i1au.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpwukzcu4a.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpx68nizcs.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmphaswfbqz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp9q_0bpu5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpb3tgzukx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpi0b8zhcf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp5ycoay_y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpw9nw0ozt.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpcrmjgldb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpg5bfnvjz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i * i;\n        } else {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpwdrq8hsf.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpdgqvgfuo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpxvg7fh3q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp0qjx09mn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n \
    \       } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqwy2nvuj.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpxoqn_bhs.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpqd_i08eg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n\
    \            sum += x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp7w66t38w.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpgx7c0ui1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for n in lst {\n        if n % 3 == 0 {\n            sum\
    \ += n * n;\n        } else if n % 4 == 0 {\n            sum += n * n * n;\n \
    \       } else {\n            sum += n;\n        }\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmptpr_vlen.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpa9mace74.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpxxt2k5uh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpn4526ga3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpj5cpm3at.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp0egk21w5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry;\n        }\n        if entry % 4 == 0 {\n            sum\
    \ += entry;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpe7joxex8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcfstbzgj.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpvhp1cjv_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 && entry\
    \ % 4 == 0 {\n            sum += entry;\n        } else {\n            sum *=\
    \ entry;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpflk2c936.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpmepfy7tc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpy977w5cp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmphzaog75u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp0czoqhje.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpwhkg8znv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp9v53r18s.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpqot06v0v.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp9b1knzjv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpc3agc3l2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp8tm_i6pe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i;\n        }\n        if i % 4 == 0 {\n            sum += i;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv1867pb_.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpw7moos2g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp1gs2z3vq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry.is_multiple_of_three()\
    \ {\n            sum += entry.squared();\n        } else if entry.is_multiple_of_four()\
    \ {\n            sum += entry.cubed();\n        } else {\n            sum += entry;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of_three` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpc99dqrtz.rs:12:18\n   |\n12 |         if\
    \ entry.is_multiple_of_three() {\n   |                  ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `squared` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpc99dqrtz.rs:13:26\n   |\n13 |  \
    \           sum += entry.squared();\n   |                          ^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `is_multiple_of_four`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpc99dqrtz.rs:14:25\n\
    \   |\n14 |         } else if entry.is_multiple_of_four() {\n   |            \
    \             ^^^^^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `cubed` found for type `isize` in the current scope\n  --> /tmp/tmpc99dqrtz.rs:15:26\n\
    \   |\n15 |             sum += entry.cubed();\n   |                          ^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for n in lst {\n        if n % 3 == 0 && n % 4 == 0 {\n\
    \            sum += n * n;\n        } else if n % 3 == 0 {\n            sum +=\
    \ n * n;\n        } else if n % 4 == 0 {\n            sum += n * n;\n        }\
    \ else {\n            sum += n;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp8iu3gf3r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp54rkuems.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpxgz4qn01.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry.is_multiple_of_three()\
    \ {\n            sum += entry.square();\n        } else if entry.is_multiple_of_four()\
    \ {\n            sum += entry.cube();\n        } else {\n            sum += entry;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of_three` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpq627nycd.rs:12:18\n   |\n12 |         if\
    \ entry.is_multiple_of_three() {\n   |                  ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `square` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpq627nycd.rs:13:26\n   |\n13 |  \
    \           sum += entry.square();\n   |                          ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `is_multiple_of_four`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpq627nycd.rs:14:25\n\
    \   |\n14 |         } else if entry.is_multiple_of_four() {\n   |            \
    \             ^^^^^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `cube` found for type `isize` in the current scope\n  --> /tmp/tmpq627nycd.rs:15:26\n\
    \   |\n15 |             sum += entry.cube();\n   |                          ^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpf3cisvex.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        }\n        if entry % 4 == 0 {\n     \
    \       sum += entry * entry;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpiemcrele.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpg6maodtb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i * i;\n\
    \        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3j9_lph7.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpi7fwrud4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnfdrnson.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppltrckc2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpux6yyrt2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp5kquk_mf.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry.is_multiple_of_three()\
    \ {\n            sum += entry.squared();\n        }\n        if entry.is_multiple_of_four()\
    \ {\n            sum += entry.cubed();\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of_three` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpdcjp5012.rs:12:18\n   |\n12 |         if\
    \ entry.is_multiple_of_three() {\n   |                  ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `squared` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpdcjp5012.rs:13:26\n   |\n13 |  \
    \           sum += entry.squared();\n   |                          ^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `is_multiple_of_four`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpdcjp5012.rs:15:18\n\
    \   |\n15 |         if entry.is_multiple_of_four() {\n   |                  ^^^^^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `cubed` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpdcjp5012.rs:16:26\n   |\n16\
    \ |             sum += entry.cubed();\n   |                          ^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp4uy31omz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmprhh4msw9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for x in lst {\n        if x % 3 == 0 {\n            sum\
    \ += x * x;\n        } else if x % 4 == 0 {\n            sum += x * x * x;\n \
    \       } else {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp_c9puo8k.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpuvyfri3i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpi2xmhd7j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry % 3 == 0 {\n    \
    \        sum += entry * entry;\n        } else if entry % 4 == 0 {\n         \
    \   sum += entry * entry;\n        } else {\n            sum += entry;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpan84i4_f.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n \
    \       } else {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp57bxflda.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        }\n        if i % 4 == 0 {\n            sum += *i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpqf5hhwbo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpxv0_xk7m.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += *i;\n        } else if i % 4 == 0 {\n            sum += *i;\n \
    \       } else {\n            sum += *i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9`,\n right: `-3`', /tmp/tmp8k0ero2b.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for entry in lst {\n        if entry.is_multiple_of_three()\
    \ {\n            sum += entry.square();\n        }\n        if entry.is_multiple_of_four()\
    \ {\n            sum += entry.cube();\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of_three` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpx0qlvebe.rs:12:18\n   |\n12 |         if\
    \ entry.is_multiple_of_three() {\n   |                  ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `square` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpx0qlvebe.rs:13:26\n   |\n13 |  \
    \           sum += entry.square();\n   |                          ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `is_multiple_of_four`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpx0qlvebe.rs:15:18\n\
    \   |\n15 |         if entry.is_multiple_of_four() {\n   |                  ^^^^^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `cube` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpx0qlvebe.rs:16:26\n   |\n16\
    \ |             sum += entry.cube();\n   |                          ^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for &i in lst {\n        if i % 3 == 0 {\n           \
    \ sum += i;\n        }\n        if i % 4 == 0 {\n            sum += i;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxxev8hg0.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpyy0hyymm.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpvbjmm8wo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        }\n        if i % 4 == 0 {\n            sum += i * i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpcwk1jf8z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmph7jkkpek.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n\
    \            sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpz1vw5wzh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpgp2x7g82.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 && i % 4\
    \ == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n\
    \    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpi6nk9oat.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfhdmfles.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst {\n        if i % 3 == 0 {\n            sum\
    \ += i * i;\n        } else if i % 4 == 0 {\n            sum += i * i;\n     \
    \   } else {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpyfo_q147.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfn sum_squares(lst: Vec<isize>) -> isize {\n   \
    \ let mut sum = 0;\n    for i in lst.iter() {\n        if i % 3 == 0 {\n     \
    \       sum += i * i;\n        } else if i % 4 == 0 {\n            sum += i *\
    \ i;\n        } else {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpaguqnnr8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
