name: HumanEval_102_choose_num
language: rust
results:
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            z = z * 2 + 1;\n        }\n        z\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpqzrkrbhk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    let\
    \ mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize = 0;\n  \
    \  while x < y {\n        z = x + y;\n        if z % 2 == 0 {\n            x =\
    \ z;\n        } else {\n            y = z;\n        }\n    }\n    if x == y {\n\
    \        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `x` is never read\n --> /tmp/tmphc4lx3os.rs:9:10\n\
    \  |\n9 |         (x, y) = (y, x)\n  |          ^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n --> /tmp/tmphc4lx3os.rs:9:13\n  |\n9 |\
    \         (x, y) = (y, x)\n  |             ^\n  |\n  = help: maybe it is overwritten\
    \ before being read?\n\nwarning: value assigned to `z` is never read\n  --> /tmp/tmphc4lx3os.rs:13:13\n\
    \   |\n13 |     let mut z: isize = 0;\n   |             ^\n   |\n   = help: maybe\
    \ it is overwritten before being read?\n\nerror[E0384]: cannot assign to immutable\
    \ argument `x`\n --> /tmp/tmphc4lx3os.rs:9:10\n  |\n7 | fn choose_num(x: isize,\
    \ y: isize) -> isize {\n  |               - help: consider making this binding\
    \ mutable: `mut x`\n8 |     if x > y {\n9 |         (x, y) = (y, x)\n  |     \
    \     ^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to\
    \ immutable argument `y`\n --> /tmp/tmphc4lx3os.rs:9:13\n  |\n7 | fn choose_num(x:\
    \ isize, y: isize) -> isize {\n  |                         - help: consider making\
    \ this binding mutable: `mut y`\n8 |     if x > y {\n9 |         (x, y) = (y,\
    \ x)\n  |             ^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors; 3 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        choose_num(y, x)\n    } else\
    \ {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        let mut z = 1;\n    \
    \    while z < y {\n            if x % z == 0 {\n                x /= z;\n   \
    \         } else {\n                y /= z;\n            }\n            z <<=\
    \ 1;\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmpf_eq19nf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            z = z * 2;\n        }\n        if z == y {\n            x\n\
    \        } else {\n            z\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpspivkz27.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut result = x;\n    let mut x = x;\n    let mut\
    \ y = y;\n    while x >= y {\n        if x % 2 == 0 {\n            x = x / 2;\n\
    \        } else {\n            y = y / 2;\n        }\n    }\n    while y > x {\n\
    \        if y % 2 == 0 {\n            y = y / 2;\n        } else {\n         \
    \   x = x / 2;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ 0;\n        while z < x {\n            z += y;\n        }\n        z\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpnzac13op.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = x;\n        let mut y: isize = y;\n        while x\
    \ > y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmp4fbg8dv5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        while x > y {\n  \
    \          x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpp9szgwu4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    let mut even:\
    \ isize = 0;\n    let mut odd: isize = 1;\n    while x >= y {\n        if x %\
    \ 2 == 0 {\n            even += 1;\n            x /= 2;\n        } else {\n  \
    \          odd += 1;\n            x /= 2;\n        }\n    }\n    if even > odd\
    \ {\n        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpgjsrlyxv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y > x {\n \
    \       -1\n    } else {\n        let mut num: isize = 0;\n        let mut even:\
    \ isize = 0;\n        let mut odd: isize = 0;\n        while num < y {\n     \
    \       if even < x {\n                even += 1;\n                num += 1;\n\
    \            } else {\n                odd += 1;\n                num += 1;\n\
    \            }\n        }\n        if even > x {\n            even = even * 2;\n\
    \        }\n        if odd > x {\n            odd = odd * 2;\n        }\n    \
    \    even\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpvzihujjt.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut even: isize = 0;\n     \
    \   let mut odd: isize = 0;\n        while x <= y {\n            if x % 2 == 0\
    \ {\n                even += 1;\n            } else {\n                odd +=\
    \ 1;\n            }\n            x /= 2;\n        }\n        if even > odd {\n\
    \            even\n        } else {\n            odd\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgwaztzm9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            z = z * 2;\n        }\n        z /= 2;\n        if z == x\
    \ {\n            x\n        } else {\n            y\n        }\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmph5170a24.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            -1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp3wdad0i9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        while x > y {\n     \
    \       x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpcxv58_3c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x // 2\n        } else {\n            choose_num(y\
    \ - 1, x + 1)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpqjrmmdkw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize = y;\n\
    \    loop {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x;\n  \
    \      }\n        x /= 2;\n        y /= 2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp0p2cl8nc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        while x > y {\n     \
    \       x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpkyp4wo0l.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            -1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2alsvhm8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num = y;\n \
    \   while max_num - min_num > 2 {\n        let mut max_num = max_num / 2;\n  \
    \      let mut min_num = min_num / 2;\n        if max_num == min_num {\n     \
    \       return max_num;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpfg01qeiq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut even = 1;\n        while\
    \ even > 0 {\n            if x % 2 == 0 {\n                x /= 2;\n         \
    \       even += 1;\n            } else {\n                y /= 2;\n          \
    \      even += 1;\n            }\n        }\n        if x == y {\n           \
    \ x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp0vylq1mm.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut even: isize = 0;\n     \
    \   while x <= y {\n            if x % 2 == 0 {\n                even += 1;\n\
    \            }\n            x += 1;\n        }\n        even\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmptteg54x8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x // 2\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut num: isize = 0;\n    let mut x: isize = x;\n\
    \    let mut y: isize = y;\n    loop {\n        if x % 2 == 0 && y % 2 == 0 {\n\
    \            num = x;\n            x = y;\n            y = num;\n        }\n \
    \       else {\n            num = x;\n            x = y;\n            y = num;\n\
    \        }\n        if x == y {\n            break;\n        }\n    }\n    num\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num = y;\n \
    \   while max_num > min_num {\n        if max_num % 2 == 0 {\n            max_num\
    \ -= 1;\n        } else {\n            max_num += 1;\n        }\n    }\n    if\
    \ max_num == min_num {\n        return -1;\n    }\n    return max_num;\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp81joww7q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ 0;\n        while z < x {\n            z = z * 2 + y;\n            y = y - 1;\n\
    \        }\n        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpv7m27ims.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        while x > y {\n  \
    \          x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp1ldr4hai.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num = y;\n \
    \   while max_num < min_num {\n        max_num += 2;\n        min_num -= 2;\n\
    \    }\n    while max_num % 2 == 0 {\n        max_num -= 2;\n    }\n    while\
    \ min_num % 2 == 0 {\n        min_num -= 2;\n    }\n    if max_num == min_num\
    \ {\n        max_num += 1;\n    }\n    max_num\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ 0;\n        while z < x {\n            z = z * 2 + y;\n            y = y - 1;\n\
    \        }\n        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpvqsvbhcz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut i = x;\n        let mut j = y;\n        while i <= j {\n            if i\
    \ % 2 == 0 {\n                i += 1;\n            } else {\n                j\
    \ -= 1;\n            }\n        }\n        i\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmplvgyjvtr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y > x {\n \
    \       choose_num(y, x)\n    } else {\n        x + (y - x) / 2\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpcn6_wn6y.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = x;\n        let mut y: isize = y;\n        let mut\
    \ z: isize = 0;\n        while z < x {\n            if x % 2 == 0 {\n        \
    \        x /= 2;\n                y /= 2;\n            } else {\n            \
    \    x /= 2;\n            }\n            z += 1\n        }\n        if x == y\
    \ {\n            x\n        } else {\n            -1\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpz_8fm3zy.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    if\
    \ x == y {\n        x\n    } else {\n        let mut x = x;\n        let mut y\
    \ = y;\n        let mut z = x;\n        while z < y {\n            z = z * 2 +\
    \ 1;\n        }\n        if z == y {\n            x\n        } else {\n      \
    \      x\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp3n9ml1ob.rs:14:13\n\
    \   |\n14 |         let mut x = x;\n   |             ----^\n   |             |\n\
    \   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp3n9ml1ob.rs:15:13\n\
    \   |\n15 |         let mut y = y;\n   |             ----^\n   |             |\n\
    \   |             help: remove this `mut`\n\nerror[E0384]: cannot assign to immutable\
    \ argument `x`\n --> /tmp/tmp3n9ml1ob.rs:9:10\n  |\n7 | fn choose_num(x: isize,\
    \ y: isize) -> isize {\n  |               - help: consider making this binding\
    \ mutable: `mut x`\n8 |     if x > y {\n9 |         (x, y) = (y, x)\n  |     \
    \     ^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to\
    \ immutable argument `y`\n --> /tmp/tmp3n9ml1ob.rs:9:13\n  |\n7 | fn choose_num(x:\
    \ isize, y: isize) -> isize {\n  |                         - help: consider making\
    \ this binding mutable: `mut y`\n8 |     if x > y {\n9 |         (x, y) = (y,\
    \ x)\n  |             ^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ x;\n        while z < y {\n            if z % 2 == 0 {\n                z =\
    \ z + 2;\n            } else {\n                z = z + 1;\n            }\n  \
    \      }\n        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpfy7yotnj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        let mut z2: isize = 0;\n        let mut z3: isize = 0;\n\
    \        let mut z4: isize = 0;\n        let mut z5: isize = 0;\n        let mut\
    \ z6: isize = 0;\n        let mut z7: isize = 0;\n        let mut z8: isize =\
    \ 0;\n        let mut z9: isize = 0;\n        let mut z10: isize = 0;\n      \
    \  let mut z11: isize = 0;\n        let mut z12: isize = 0;\n        let mut z13:\
    \ isize = 0;\n        let mut z14: isize = 0;\n        let mut z15: isize = 0;\n\
    \        let mut z16: isize = 0;\n        let mut z17: isize = 0;\n        let\
    \ mut z18: isize = 0;\n        let mut z19: isize = 0;\n        let mut z20: isize\
    \ = 0;\n        let mut z21: isize = 0;\n        let mut z22: isize = 0;\n   \
    \     let mut z23: isize = 0;\n        let mut z24: isize = 0;\n        let mut\
    \ z25: isize = 0;\n        let mut z26: isize = 0;\n        let mut z27: isize\
    \ = 0;\n        let mut z28: isize = 0;\n        let mut z29: isize = 0;\n   \
    \     let mut z30: isize = 0;\n        let mut z31: isize = 0;\n        let mut\
    \ z32: isize = 0;\n        let mut z33: isize = 0;\n        let mut z34: isize\
    \ = 0;\n        let mut z35: isize = 0;\n        let mut z36: isize = 0;\n   \
    \     let mut z37: isize = 0;\n        let mut z38: isize = 0;\n        let mut\
    \ z39: isize = 0;\n        let mut z40: isize = 0;\n        let mut z41: isize\
    \ = 0;\n        let mut z42: isize = 0;\n        let mut z43: isize = 0;\n   \
    \     let mut z44: isize = 0;\n        let mut z45: isize = 0;\n        let mut\
    \ z46: isize = 0;\n        let mut z47: isize = 0;\n        let mut z48: isize\
    \ = 0;\n        let mut z49: i\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn_106sav.rs:74:3\n\
    \   |\n7  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n10 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n62 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n74 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpn_106sav.rs:61:23\n\
    \   |\n61 |         let mut z49: i\n   |                       ^ help: add `;`\
    \ here\n62 | }\n   | - unexpected token\n\nerror[E0412]: cannot find type `i`\
    \ in this scope\n  --> /tmp/tmpn_106sav.rs:61:22\n   |\n61 |         let mut z49:\
    \ i\n   |                      ^ help: a builtin type with a similar name exists:\
    \ `i8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_106sav.rs:9:9\n   |\n\
    8  | /     if x < y {\n9  | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n10 | |     } else {\n11 | |         let mut x:\
    \ isize = 0;\n...  |\n61 | |         let mut z49: i\n62 | | }\n   | |_- expected\
    \ this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n9  |   \
    \      choose_num(y, x);\n   |                         +\nhelp: consider using\
    \ a semicolon here\n   |\n62 | };\n   |  +\nhelp: you might have meant to return\
    \ this value\n   |\n9  |         return choose_num(y, x);\n   |         ++++++\
    \                 +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn_106sav.rs:7:38\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |    ----------    \
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0412.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut max_num = x;\n        let mut min_num = y;\n        let mut counter = 0;\n\
    \        while max_num - min_num > 1 {\n            if max_num % 2 == 0 {\n  \
    \              max_num -= 1;\n            } else {\n                min_num +=\
    \ 1;\n            }\n            counter += 1;\n        }\n        if counter\
    \ == 0 {\n            -1\n        } else {\n            max_num\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmplh4inplg.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n           \
    \ x\n        } else {\n            y\n        }\n    } else {\n        if y %\
    \ 2 == 0 {\n            y\n        } else {\n            x\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq6zzm0io.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut result = x;\n    let mut remainder = y;\n\
    \    while remainder > 0 {\n        if remainder % 2 == 0 {\n            result\
    \ = result + 1;\n        }\n        remainder = remainder / 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpr9cj524a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    if\
    \ x == y {\n        x\n    } else {\n        let mut x = x;\n        let mut y\
    \ = y;\n        while x > y {\n            if x % 2 == 0 {\n                x\
    \ /= 2;\n            } else {\n                y /= 2;\n            }\n      \
    \  }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpsarxp9ge.rs:9:10\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n8 |     if x > y {\n9 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpsarxp9ge.rs:9:13\n  |\n\
    7 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n8 |     if x > y {\n\
    9 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            -1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpfn_86oaq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    \n\
    \    let mut result = x;\n    \n    while result < y {\n        if result % 2\
    \ == 0 {\n            result = result + 1;\n        } else {\n            result\
    \ = result + 2;\n        }\n    }\n    \n    result\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp3emv1yvo.rs:9:10\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n8 |     if x > y {\n9 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp3emv1yvo.rs:9:13\n  |\n\
    7 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n8 |     if x > y {\n\
    9 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    let\
    \ mut max_num = x;\n    let mut min_num = y;\n    let mut i = 1;\n    while i\
    \ <= y {\n        if max_num % i == 0 {\n            max_num = max_num / i;\n\
    \        } else {\n            min_num = min_num / i;\n        }\n        i +=\
    \ 2;\n    }\n    if max_num == min_num {\n        max_num\n    } else {\n    \
    \    -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp9oqyydt_.rs:9:10\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n8 |     if x > y {\n9 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmp9oqyydt_.rs:9:13\n  |\n\
    7 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n8 |     if x > y {\n\
    9 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            if z % 2 == 0 {\n                z = z * 3 + 1;\n       \
    \     } else {\n                z = z * 3;\n            }\n        }\n       \
    \ if z == y {\n            x\n        } else {\n            -1\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpput51bq1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            if z % 2 == 0 {\n                z = z + 2;\n           \
    \ } else {\n                z = z + 1;\n            }\n        }\n        x\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpv53ny6yf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    while x >\
    \ y {\n        if x % 2 == 0 {\n            x = x / 2;\n        } else {\n   \
    \         y = y / 2;\n        }\n    }\n    if x == y {\n        x\n    } else\
    \ {\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n   \
    \ assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp0uok8m2b.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n           \
    \ x\n        } else {\n            y\n        }\n    } else {\n        if y %\
    \ 2 == 0 {\n            y\n        } else {\n            x\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp85ypr65e.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num = y;\n \
    \   while max_num < min_num {\n        let mut max_num = max_num * 2 + 1;\n  \
    \      let mut min_num = min_num * 2 - 1;\n        if max_num < min_num {\n  \
    \          return -1;\n        }\n    }\n    while max_num % 2 == 0 {\n      \
    \  max_num = max_num / 2;\n    }\n    while min_num % 2 == 0 {\n        min_num\
    \ = min_num / 2;\n    }\n    while max_num < min_num {\n        max_num = max_num\
    \ * 2 + 1;\n        min_num = min_num * 2 - 1;\n    }\n    max_num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpu1h5y7d4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut even: isize = 0;\n     \
    \   let mut odd: isize = 0;\n        while x > y {\n            if x % 2 == 0\
    \ {\n                even += 1;\n                x /= 2;\n            } else {\n\
    \                odd += 1;\n                y /= 2;\n            }\n        }\n\
    \        if even > odd {\n            even\n        } else {\n            odd\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpllztz57f.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut z: isize =\
    \ 0;\n        let mut z2: isize = 0;\n        let mut z3: isize = 0;\n       \
    \ let mut z4: isize = 0;\n        let mut z5: isize = 0;\n        let mut z6:\
    \ isize = 0;\n        let mut z7: isize = 0;\n        let mut z8: isize = 0;\n\
    \        let mut z9: isize = 0;\n        let mut z10: isize = 0;\n        let\
    \ mut z11: isize = 0;\n        let mut z12: isize = 0;\n        let mut z13: isize\
    \ = 0;\n        let mut z14: isize = 0;\n        let mut z15: isize = 0;\n   \
    \     let mut z16: isize = 0;\n        let mut z17: isize = 0;\n        let mut\
    \ z18: isize = 0;\n        let mut z19: isize = 0;\n        let mut z20: isize\
    \ = 0;\n        let mut z21: isize = 0;\n        let mut z22: isize = 0;\n   \
    \     let mut z23: isize = 0;\n        let mut z24: isize = 0;\n        let mut\
    \ z25: isize = 0;\n        let mut z26: isize = 0;\n        let mut z27: isize\
    \ = 0;\n        let mut z28: isize = 0;\n        let mut z29: isize = 0;\n   \
    \     let mut z30: isize = 0;\n        let mut z31: isize = 0;\n        let mut\
    \ z32: isize = 0;\n        let mut z33: isize = 0;\n        let mut z34: isize\
    \ = 0;\n        let mut z35: isize = 0;\n        let mut z36: isize = 0;\n   \
    \     let mut z37: isize = 0;\n        let mut z38: isize = 0;\n        let mut\
    \ z39: isize = 0;\n        let mut z40: isize = 0;\n        let mut z41: isize\
    \ = 0;\n        let mut z42: isize = 0;\n        let mut z43: isize = 0;\n   \
    \     let mut z44: isize = 0;\n        let mut z45: isize = 0;\n        let mut\
    \ z46: isize = 0;\n        let mut z47: isize = 0;\n        let mut z48: isize\
    \ = 0;\n        let mut z49: isize = 0;\n        let \n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvm8un8uc.rs:75:3\n\
    \   |\n7  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n10 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n63 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n75 | }\n\
    \   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpvm8un8uc.rs:63:1\n\
    \   |\n63 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpvm8un8uc.rs:9:9\n   |\n8  | /     if x <= y {\n9  | |         -1\n \
    \  | |         ^^ expected `()`, found integer\n10 | |     } else {\n11 | |  \
    \       let mut x: isize = 0;\n...  |\n62 | |         let \n63 | | }\n   | |_-\
    \ expected this to be `()`\n   |\nhelp: you might have meant to return this value\n\
    \   |\n9  |         return -1;\n   |         ++++++   +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvm8un8uc.rs:7:38\n  |\n7 | fn choose_num(x: isize, y: isize)\
    \ -> isize {\n  |    ----------                        ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n           \
    \ x\n        } else {\n            y\n        }\n    } else {\n        if y %\
    \ 2 == 0 {\n            y\n        } else {\n            x\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpi03nr0xl.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(x\
    \ / 2, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp2xs5yk4x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x > y {\n \
    \       x\n    } else {\n        y + (x % y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpo_8nlzwu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y)\n    } else {\n       \
    \ (y, x)\n    }\n    .iter()\n    .fold(-1, |a, b| {\n        if a % 2 == 0 {\n\
    \            a\n        } else {\n            b\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpesljukga.rs:13:6\n   |\n13 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        choose_num(y, x)\n    } else\
    \ {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    while y >\
    \ x {\n        if x % 2 == 0 {\n            x = x + 1;\n        } else {\n   \
    \         x = x - 1;\n        }\n    }\n    while y > x {\n        if y % 2 ==\
    \ 0 {\n            y = y - 1;\n        } else {\n            y = y + 1;\n    \
    \    }\n    }\n    if x == y {\n        x\n    } else {\n        -1\n    }\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n           \
    \ x\n        } else {\n            y\n        }\n    } else {\n        if y %\
    \ 2 == 0 {\n            y\n        } else {\n            x\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpzpdl3_mp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            -1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpvm2v42vw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        let mut z = x;\n    \
    \    while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2xe9r_4x.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num = y;\n \
    \   while max_num > min_num {\n        if max_num % 2 == 0 {\n            max_num\
    \ -= 1;\n        } else {\n            min_num += 1;\n        }\n    }\n    if\
    \ max_num == min_num {\n        max_num\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpozhn9amt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y > x {\n \
    \       x\n    } else {\n        y + (x % y)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpdwsa_rjg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ 0;\n        while z < x || z < y {\n            if z < x {\n               \
    \ x -= 1;\n            } else {\n                y -= 1;\n            }\n    \
    \        z += 1\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpl2yyhgxp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            if z % 2 == 0 {\n                z = z + 2;\n           \
    \ } else {\n                z = z + 1;\n            }\n        }\n        x\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmprss2pybd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        (x, y)\n    } else {\n      \
    \  (y, x)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5089bx92.rs:9:9\n  |\n7 |\
    \ fn choose_num(x: isize, y: isize) -> isize {\n  |                          \
    \            ----- expected `isize` because of return type\n8 |     if x <= y\
    \ {\n9 |         (x, y)\n  |         ^^^^^^ expected `isize`, found tuple\n  |\n\
    \  = note: expected type `isize`\n            found tuple `(isize, isize)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5089bx92.rs:11:9\n   |\n7  | fn\
    \ choose_num(x: isize, y: isize) -> isize {\n   |                            \
    \          ----- expected `isize` because of return type\n...\n11 |         (y,\
    \ x)\n   |         ^^^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ type `isize`\n             found tuple `(isize, isize)`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        while x < y {\n            z = x + y;\n            if\
    \ z % 2 == 0 {\n                y = z;\n            } else {\n               \
    \ x = z;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpcz9t93bg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        choose_num(y, x)\n    } else\
    \ {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n        \
    \    x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpn_yq30ju.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut result = x;\n    let mut remainder = y;\n\
    \    while remainder > 0 {\n        if remainder % 2 == 0 {\n            result\
    \ = result + 1;\n        }\n        remainder = remainder / 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpyq6go_0w.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 1;\n        let mut y: isize = 1;\n        while x\
    \ < y {\n            if x % 2 == 0 {\n                x += 1;\n            } else\
    \ {\n                y += 1;\n            }\n        }\n        x\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmp0j0p11sd.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ 0;\n        while z < x {\n            if x % z == 0 {\n                z +=\
    \ y;\n            } else {\n                z += x;\n            }\n        }\n\
    \        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpcvu5l_rt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = 1;\n        while z\
    \ < y {\n            if x % z == 0 {\n                x /= z;\n            } else\
    \ {\n                y /= z;\n            }\n            z <<= 1;\n        }\n\
    \        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpjxes7wqd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        while x <= y {\n            if x\
    \ % 2 == 0 {\n                x /= 2;\n            } else {\n                y\
    \ /= 2;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpiduyxmcz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        let mut c: isize = 0;\n        let mut d: isize = 0;\n\
    \        let mut e: isize = 0;\n        let mut f: isize = 0;\n        let mut\
    \ g: isize = 0;\n        let mut h: isize = 0;\n        let mut i: isize = 0;\n\
    \        let mut j: isize = 0;\n        let mut k: isize = 0;\n        let mut\
    \ l: isize = 0;\n        let mut m: isize = 0;\n        let mut n: isize = 0;\n\
    \        let mut o: isize = 0;\n        let mut p: isize = 0;\n        let mut\
    \ q: isize = 0;\n        let mut r: isize = 0;\n        let mut s: isize = 0;\n\
    \        let mut t: isize = 0;\n        let mut u: isize = 0;\n        let mut\
    \ v: isize = 0;\n        let mut w: isize = 0;\n        let mut x: isize = 0;\n\
    \        let mut y: isize = 0;\n        let mut z: isize = 0;\n        let mut\
    \ c: isize = 0;\n        let mut d: isize = 0;\n        let mut e: isize = 0;\n\
    \        let mut f: isize = 0;\n        let mut g: isize = 0;\n        let mut\
    \ h: isize = 0;\n        let mut i: isize = 0;\n        let mut j: isize = 0;\n\
    \        let mut k: isize = 0;\n        let mut l: isize = 0;\n        let mut\
    \ m: isize = 0;\n        let mut n: isize = 0;\n        let mut o: isize = 0;\n\
    \        let mut p: isize = 0;\n        let mut q: isize = 0;\n        let mut\
    \ r: isize = 0;\n        let mut s: isize = 0;\n        let mut t: isize = 0;\n\
    \        let mut u: isize = 0;\n        let mut v: isize = 0;\n        let mut\
    \ w: isize = 0;\n        let mut x: isize = 0;\n        let mut y: isize = 0;\n\
    \        let mut z: isize = 0;\n        let mut c: isize = 0;\n        let mut\
    \ d: isize = 0;\n        let mut e: isize = 0;\n        let mut f: isize = 0;\n\
    \        let mut g: isize = 0;\n        let mut h: isize = 0;\n        let mut\
    \ i: isize = 0;\n        let mut j: isize = 0;\n        let mut k: isize = 0;\n\
    \        let mu\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv6a3b_i8.rs:84:3\n\
    \   |\n7  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n10 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n72 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n84 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpv6a3b_i8.rs:71:15\n\
    \   |\n71 |         let mu\n   |               ^ help: add `;` here\n72 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv6a3b_i8.rs:9:9\n\
    \   |\n8  | /     if x < y {\n9  | |         choose_num(y, x)\n   | |        \
    \ ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n10 | |     } else {\n11 | | \
    \        let mut x: isize = 0;\n...  |\n71 | |         let mu\n72 | | }\n   |\
    \ |_- expected this to be `()`\n   |\nhelp: consider using a semicolon here\n\
    \   |\n9  |         choose_num(y, x);\n   |                         +\nhelp: consider\
    \ using a semicolon here\n   |\n72 | };\n   |  +\nhelp: you might have meant to\
    \ return this value\n   |\n9  |         return choose_num(y, x);\n   |       \
    \  ++++++                 +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpv6a3b_i8.rs:7:38\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |    ----------    \
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize = y;\n\
    \    while x > y {\n        if x % 2 == 0 {\n            x = x / 2;\n        }\
    \ else {\n            y = y / 2;\n        }\n    }\n    if x == y {\n        x\n\
    \    } else {\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpy4ep2f9y.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x;\n        }\n    \
    \    x /= 2;\n        y /= 2;\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpoeiskizm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize =\
    \ 0;\n        while z < x {\n            z += y;\n        }\n        z\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpj2czq13e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = x;\n        while z\
    \ < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n        \
    \    x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp59734t67.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num: isize = -1;\n    let mut min_num:\
    \ isize = x;\n    loop {\n        if min_num > y {\n            break;\n     \
    \   }\n        if max_num < x {\n            max_num = x;\n        }\n       \
    \ if max_num < min_num {\n            max_num = min_num;\n        }\n        if\
    \ max_num % 2 == 0 {\n            max_num += 1;\n        }\n        min_num -=\
    \ 1;\n    }\n    max_num\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    let\
    \ mut x = x;\n    let mut y = y;\n    let mut even: isize = 0;\n    let mut odd:\
    \ isize = 0;\n    while x >= y {\n        if x % 2 == 0 {\n            even +=\
    \ 1;\n            x /= 2;\n        } else {\n            odd += 1;\n         \
    \   x /= 2;\n        }\n    }\n    if even > odd {\n        even\n    } else {\n\
    \        odd\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmparqzl60j.rs:12:9\n\
    \   |\n12 |     let mut y = y;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmparqzl60j.rs:9:10\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n8 |     if x > y {\n9 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmparqzl60j.rs:9:13\n  |\n\
    7 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n8 |     if x > y {\n\
    9 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop {\n \
    \       if x % 2 == 0 {\n            x /= 2;\n        } else {\n            y\
    \ /= 2;\n        }\n        if x < y {\n            return x;\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmprfj43vh5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        while x > y {\n            x = x\
    \ - y;\n            y = y + x;\n        }\n        x\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpusr4f92_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        while x < y {\n            z = x + y;\n            if\
    \ z % 2 == 0 {\n                y = z;\n            } else {\n               \
    \ x = z;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmps21hbfmv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize = y;\n\
    \    while x < y {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x;\n        }\n        x += 1;\n        y += 1;\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        while x < y {\n            z = x + y;\n            if\
    \ z % 2 == 0 {\n                y = z;\n            } else {\n               \
    \ x = z;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp0x09j5ue.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y > x {\n \
    \       x\n    } else {\n        y + (x - y) / 2\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpb5h865h3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize = y;\n\
    \    while x < y {\n        if x % 2 == 0 {\n            x = x + 1;\n        }\
    \ else {\n            y = y - 1;\n        }\n    }\n    if x == y {\n        x\n\
    \    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `14`', /tmp/tmpybfluc4g.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        let mut z: isize = 0;\n\
    \        while x < y {\n            if x % 2 == 0 {\n                x += 1;\n\
    \            } else {\n                z += 1;\n                x -= 1;\n    \
    \        }\n        }\n        z\n    }\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp4t7cqyzd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        let mut z = x;\n    \
    \    while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpssy7mex3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut num: isize = 1;\n        let mut x: isize = x;\n        while x <= y {\n\
    \            if x % 2 == 0 {\n                num += 1;\n            }\n     \
    \       x += 1;\n        }\n        num\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp3e5puo2a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x = x;\n        let mut y = y;\n        let mut z = x;\n    \
    \    while z < y {\n            if z % 2 == 0 {\n                z = z + 2;\n\
    \            } else {\n                z = z + 1;\n            }\n        }\n\
    \        if z == y {\n            x\n        } else {\n            -1\n      \
    \  }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp84scs2lg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(y\
    \ - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = x;\n        let mut y: isize = y;\n        loop {\n\
    \            if x % 2 == 0 {\n                x /= 2;\n                y += 1;\n\
    \            } else {\n                x /= 2;\n                y -= 1;\n    \
    \        }\n            if x == y {\n                return x;\n            }\n\
    \        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyij67n3m.rs:9:9\n   |\n8\
    \  | /     if x < y {\n9  | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n10 | |     } else {\n11 | |         let mut x:\
    \ isize = x;\n...  |\n24 | |         }\n25 | |     }\n   | |_____- expected this\
    \ to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n9  |        \
    \ choose_num(y, x);\n   |                         +\nhelp: consider using a semicolon\
    \ here\n   |\n25 |     };\n   |      +\nhelp: you might have meant to return this\
    \ value\n   |\n9  |         return choose_num(y, x);\n   |         ++++++    \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        (x, y)\n    } else {\n      \
    \  (y, x)\n    }\n    .iter()\n    .fold(-1, |a, b| {\n        if a % 2 == 0 {\n\
    \            a\n        } else {\n            b\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpo4_fyba0.rs:13:6\n   |\n13 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        while x\
    \ < y {\n            if x % 2 == 0 {\n                x += 1;\n            } else\
    \ {\n                y -= 1;\n            }\n        }\n        x\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp9yji3id2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        if x % 2 == 0 {\n            x\n        } else {\n            choose_num(x\
    \ / 2, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpof2wr05f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        let mut z2: isize = 0;\n        let mut z3: isize = 0;\n\
    \        let mut z4: isize = 0;\n        let mut z5: isize = 0;\n        let mut\
    \ z6: isize = 0;\n        let mut z7: isize = 0;\n        let mut z8: isize =\
    \ 0;\n        let mut z9: isize = 0;\n        let mut z10: isize = 0;\n      \
    \  let mut z11: isize = 0;\n        let mut z12: isize = 0;\n        let mut z13:\
    \ isize = 0;\n        let mut z14: isize = 0;\n        let mut z15: isize = 0;\n\
    \        let mut z16: isize = 0;\n        let mut z17: isize = 0;\n        let\
    \ mut z18: isize = 0;\n        let mut z19: isize = 0;\n        let mut z20: isize\
    \ = 0;\n        let mut z21: isize = 0;\n        let mut z22: isize = 0;\n   \
    \     let mut z23: isize = 0;\n        let mut z24: isize = 0;\n        let mut\
    \ z25: isize = 0;\n        let mut z26: isize = 0;\n        let mut z27: isize\
    \ = 0;\n        let mut z28: isize = 0;\n        let mut z29: isize = 0;\n   \
    \     let mut z30: isize = 0;\n        let mut z31: isize = 0;\n        let mut\
    \ z32: isize = 0;\n        let mut z33: isize = 0;\n        let mut z34: isize\
    \ = 0;\n        let mut z35: isize = 0;\n        let mut z36: isize = 0;\n   \
    \     let mut z37: isize = 0;\n        let mut z38: isize = 0;\n        let mut\
    \ z39: isize = 0;\n        let mut z40: isize = 0;\n        let mut z41: isize\
    \ = 0;\n        let mut z42: isize = 0;\n        let mut z43: isize = 0;\n   \
    \     let mut z44: isize = 0;\n        let mut z45: isize = 0;\n        let mut\
    \ z46: isize = 0;\n        let mut z47: isize = 0;\n        let mut z48: isize\
    \ = 0;\n        let mut z49: i\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmps09wpzl9.rs:74:3\n\
    \   |\n7  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n10 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n62 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n74 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmps09wpzl9.rs:61:23\n\
    \   |\n61 |         let mut z49: i\n   |                       ^ help: add `;`\
    \ here\n62 | }\n   | - unexpected token\n\nerror[E0412]: cannot find type `i`\
    \ in this scope\n  --> /tmp/tmps09wpzl9.rs:61:22\n   |\n61 |         let mut z49:\
    \ i\n   |                      ^ help: a builtin type with a similar name exists:\
    \ `i8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps09wpzl9.rs:9:9\n   |\n\
    8  | /     if x < y {\n9  | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n10 | |     } else {\n11 | |         let mut x:\
    \ isize = 0;\n...  |\n61 | |         let mut z49: i\n62 | | }\n   | |_- expected\
    \ this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n9  |   \
    \      choose_num(y, x);\n   |                         +\nhelp: consider using\
    \ a semicolon here\n   |\n62 | };\n   |  +\nhelp: you might have meant to return\
    \ this value\n   |\n9  |         return choose_num(y, x);\n   |         ++++++\
    \                 +\n\nerror[E0308]: mismatched types\n --> /tmp/tmps09wpzl9.rs:7:38\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |    ----------    \
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0412.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        while x > y {\n            x -=\
    \ y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp5532pt7h.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num = y;\n \
    \   while max_num < min_num {\n        if max_num % 2 == 0 {\n            max_num\
    \ += 1;\n        } else {\n            max_num -= 1;\n        }\n    }\n    if\
    \ max_num == min_num {\n        max_num\n    } else {\n        max_num\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut\
    \ z: isize = 0;\n        while x < y {\n            z = x + y;\n            if\
    \ z % 2 == 0 {\n                y = z;\n            } else {\n               \
    \ x = z;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp86ig62je.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut x = x;\n        let mut y = y;\n        let mut z = 1;\n        while z\
    \ < y {\n            z = z * x + y;\n            y = y - 1;\n        }\n     \
    \   z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp95uyphm1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut result = x;\n    let mut remainder = y;\n\
    \    while remainder > 0 {\n        if remainder % 2 == 0 {\n            result\
    \ = result + 1;\n        }\n        remainder = remainder / 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp839o51hh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut result = x;\n    let mut x = x;\n    let mut\
    \ y = y;\n    while x >= y {\n        if x % 2 == 0 {\n            x /= 2;\n \
    \       } else {\n            y /= 2;\n        }\n    }\n    while y > x {\n \
    \       if y % 2 == 0 {\n            y /= 2;\n        } else {\n            x\
    \ /= 2;\n        }\n    }\n    while x > y {\n        if x % 2 == 0 {\n      \
    \      x /= 2;\n        } else {\n            y /= 2;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut even = x;\n    let mut odd = y;\n    while\
    \ even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            even /= 2;\n\
    \        } else {\n            odd /= 2;\n        }\n    }\n    if even > 0 {\n\
    \        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpfwdjboq2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    \n\
    \    let mut result = x;\n    \n    while result < y {\n        if result % 2\
    \ == 0 {\n            result = result + 1;\n        } else {\n            result\
    \ = result + 2;\n        }\n    }\n    \n    result\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpqypb10ae.rs:9:10\n\
    \  |\n7 | fn choose_num(x: isize, y: isize) -> isize {\n  |               - help:\
    \ consider making this binding mutable: `mut x`\n8 |     if x > y {\n9 |     \
    \    (x, y) = (y, x)\n  |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n --> /tmp/tmpqypb10ae.rs:9:13\n  |\n\
    7 | fn choose_num(x: isize, y: isize) -> isize {\n  |                        \
    \ - help: consider making this binding mutable: `mut y`\n8 |     if x > y {\n\
    9 |         (x, y) = (y, x)\n  |             ^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n        let\
    \ mut max_num = x;\n        let mut min_num = y;\n        while max_num < min_num\
    \ {\n            max_num += 2;\n            min_num -= 2;\n        }\n       \
    \ max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpy9hktpvc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize = y;\n\
    \    loop {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x;\n  \
    \      }\n        x /= 2;\n        y /= 2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp6niwuslw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize,\
    \ y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
