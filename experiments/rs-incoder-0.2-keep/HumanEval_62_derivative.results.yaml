name: HumanEval_62_derivative
language: rust
results:
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmp6gu86_i8.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphx5osx6m.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpfemmh_5w.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3skogl8a.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpi2y7g2qj.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpfrqh9yfg.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x).clone());\n\
    \    }\n    for &x in result {\n        *x = *x + (*x).clone();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmbulrw8x.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < xs.len() {\n        let\
    \ mut j = i;\n        while j < xs.len() {\n            result.append(xs[j] -\
    \ xs[i] - xs[j] * xs[i]);\n            j += 1\n        }\n        i += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp26ut1vp0.rs:14:27\n   |\n\
    14 |             result.append(xs[j] - xs[i] - xs[j] * xs[i]);\n   |         \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<_>`, found\
    \ `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n       \
    \                    found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_4t4ixxm.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgh03vzey.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb9qe3vr2.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(1);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpkrgd7e_2.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuzhn31h4.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y / x);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqvjbfh5a.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp0rr52rcj.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpd9ffpgc3.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_cwzsicw.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmo784vs6.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    let mut z\
    \ = 1;\n    let mut xs = xs.clone();\n    while xs.len() > 0 {\n        let mut\
    \ x = 0;\n        let mut y = 0;\n        let mut z = 0;\n        for &x in xs\
    \ {\n            let mut x2 = x * x;\n            let mut y2 = y * y;\n      \
    \      let mut z2 = z * z;\n            x += x2;\n            y += y2;\n     \
    \       z += z2;\n        }\n        result.push((z * z - x * y) / (x * x));\n\
    \        xs.pop();\n        y /= x;\n        z /= x;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphcqaif64.rs:18:13\n   |\n\
    18 |         for &x in xs {\n   |             ^^    -- this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `x`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphqrs3s57.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpd5v5ftt4.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptmhqi8ja.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo1adtte_.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpss8qw097.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        result.push(y * (x - 1));\n        y *= x;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj409gb6n.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpijk0921a.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpetgz9y__.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `reverse` on type `Vec<isize>`\n\
    \   --> /tmp/tmpfcz3upe5.rs:109:8\n    |\n109 |     dx.reverse\n    |        ^^^^^^^\
    \ method, not a field\n    |\nhelp: use parentheses to call the method\n    |\n\
    109 |     dx.reverse()\n    |               ++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4zu4fs4h.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpyr4ymz4j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpuln8hseu.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpump_6e6s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpq82l84ol.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push((x\
    \ * (xs.len() - 1)).into());\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wmd7rrk.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpacy4cb6k.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x\
    \ - x) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe90t_9ur.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &i in xs {\n        result.push((x\
    \ - i) / x);\n        x = i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9d7hr_ct.rs:11:9\n   |\n\
    11 |     for &i in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpz__4htxn.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9s818ru5.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n       \
    \ result.push((x * (i - 1)) as isize);\n        x = i;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmti7u7fr.rs:13:13\n   |\n\
    10 |     let mut x = 1;\n   |                 - expected due to this value\n...\n\
    13 |         x = i;\n   |             ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n13 |         x = *i;\n   |    \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4rg0kvmd.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in xs.iter() {\n        ys.push((xs.len() - i) *\
    \ i);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptb540kt0.rs:11:29\n   |\n\
    11 |         ys.push((xs.len() - i) * i);\n   |                             ^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from\
    \ `usize`\n  --> /tmp/tmptb540kt0.rs:11:27\n   |\n11 |         ys.push((xs.len()\
    \ - i) * i);\n   |                           ^ no implementation for `usize -\
    \ &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptb540kt0.rs:11:34\n   |\n11 |         ys.push((xs.len()\
    \ - i) * i);\n   |                                  ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot multiply `usize` by `&isize`\n  --> /tmp/tmptb540kt0.rs:11:32\n\
    \   |\n11 |         ys.push((xs.len() - i) * i);\n   |                       \
    \         ^ no implementation for `usize * &isize`\n   |\n   = help: the trait\
    \ `Mul<&isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptb540kt0.rs:13:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     ys\n   |     ^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 5 pre"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpby_oaet7.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpr9v4cno9.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpcs9o2hcq.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &i in xs.iter() {\n      \
    \  result.push((x * i).floor());\n        x += i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpz7tgma9y.rs:12:29\n   |\n12 |         result.push((x *\
    \ i).floor());\n   |                             ^^^^^ help: there is an associated\
    \ function with a similar name: `div_floor`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe8_kpdlq.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjddwdwyw.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzlo9doa4.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe9sj5xv_.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmprh2zan73.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    let mut x2 = xs.clone();\n    let mut x1 = xs.clone();\n\
    \    let mut x3 = xs.clone();\n    let mut x4 = xs.clone();\n    let mut x5 =\
    \ xs.clone();\n    let mut x6 = xs.clone();\n    let mut x7 = xs.clone();\n  \
    \  let mut x8 = xs.clone();\n    let mut x9 = xs.clone();\n    let mut x10 = xs.clone();\n\
    \    let mut x11 = xs.clone();\n    let mut x12 = xs.clone();\n    let mut x13\
    \ = xs.clone();\n    let mut x14 = xs.clone();\n    let mut x15 = xs.clone();\n\
    \    let mut x16 = xs.clone();\n    let mut x17 = xs.clone();\n    let mut x18\
    \ = xs.clone();\n    let mut x19 = xs.clone();\n    let mut x20 = xs.clone();\n\
    \    let mut x21 = xs.clone();\n    let mut x22 = xs.clone();\n    let mut x23\
    \ = xs.clone();\n    let mut x24 = xs.clone();\n    let mut x25 = xs.clone();\n\
    \    let mut x26 = xs.clone();\n    let mut x27 = xs.clone();\n    let mut x28\
    \ = xs.clone();\n    let mut x29 = xs.clone();\n    let mut x30 = xs.clone();\n\
    \    let mut x31 = xs.clone();\n    let mut x32 = xs.clone();\n    let mut x33\
    \ = xs.clone();\n    let mut x34 = xs.clone();\n    let mut x35 = xs.clone();\n\
    \    let mut x36 = xs.clone();\n    let mut x37 = xs.clone();\n    let mut x38\
    \ = xs.clone();\n    let mut x39 = xs.clone();\n    let mut x40 = xs.clone();\n\
    \    let mut x41 = xs.clone();\n    let mut x42 = xs.clone();\n    let mut x43\
    \ = xs.clone();\n    let mut x44 = xs.clone();\n    let mut x45 = xs.clone();\n\
    \    let mut x46 = xs.clone();\n    let mut x47 = xs.clone();\n    let mut x48\
    \ = xs.clone();\n    let mut x49 = xs.clone();\n    let mut x50 = xs.clone();\n\
    \    let mut x51 = xs.clone();\n    let mut x52 = xs.clone();\n    let mut x53\
    \ = xs.clone();\n    let mut x54 = xs.clone();\n    let mut x55 = xs.clone();\n\
    \    let mut x56 = x\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjogrsze_.rs:65:20\n   |\n\
    65 |     let mut x56 = x\n   |                    ^ help: add `;` here\n66 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `x` in this scope\n\
    \  --> /tmp/tmpjogrsze_.rs:65:19\n   |\n65 |     let mut x56 = x\n   |       \
    \            ^ help: a local variable with a similar name exists: `x1`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpjogrsze_.rs:8:34\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ----------                    ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y *= x;\n        result.push((y - x) / x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1stv29ly.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ - xs[result.len() - 1]) / xs[result.len() - 1]);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjaw7ateu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphygp2_pw.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpuk6al4js.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ygvx7af.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpma_erc6e.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push((x\
    \ * (xs.len() - 1) - x) / 2);\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ky9qd9e.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmp92hldhdu.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp0xx793my.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(1);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmplp1jab9x.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpyuj2jw70.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3a4j2bd4.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpymbz3jw7.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2wo92n4n.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_s9_lbqu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n       \
    \ result.push((x * (i + 1)));\n        x = x * i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 6, 9, 30, 144]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5jfo0dz1.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n       \
    \ result.push((x * (i - 1)));\n        x = i;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmp7jmqb0pu.rs:12:21\n\
    \   |\n12 |         result.push((x * (i - 1)));\n   |                     ^  \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n12 -         result.push((x * (i - 1)));\n12 +    \
    \     result.push(x * (i - 1));\n   | \n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7jmqb0pu.rs:13:13\n   |\n10 |     let mut x = 1;\n   |             \
    \    - expected due to this value\n...\n13 |         x = i;\n   |            \
    \ ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n13 |         x = *i;\n   |             +\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpb095ibzy.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmptn2sit2d.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqlqkolsy.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpisf4nzuh.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdbg6fq4c.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0fl5bbji.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzng4agge.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmprnrdyzhf.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmppxkbeosn.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmp32eromc5.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    let mut y = 0;\n    let mut z\
    \ = 0;\n    for &x in xs {\n        y += x;\n        z = z * x + y;\n        result.push(z);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplvej1ec9.rs:13:9\n   |\n\
    13 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4cfnwitl.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpa56rt5t7.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5pnwdu4p.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgr_rq6wf.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp59jtix11.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push(x\
    \ / x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuk7v3oxs.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpovta2opr.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ - 1) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppugvonhs.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpz0jjlvxa.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpcqdy5rjp.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y += x;\n        result.push((y - x) / x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvej3ez9.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y += x;\n        result.push((y - x) / x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpreat_ghe.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmps1xk46kc.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push((x\
    \ * (x - 1)) / 2);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy20rril8.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx730btk8.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3rl17u7s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4cn5l2j.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n       \
    \ result.push((x * (i - 1)));\n        x = i;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpg2i8p45o.rs:12:21\n\
    \   |\n12 |         result.push((x * (i - 1)));\n   |                     ^  \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n12 -         result.push((x * (i - 1)));\n12 +    \
    \     result.push(x * (i - 1));\n   | \n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg2i8p45o.rs:13:13\n   |\n10 |     let mut x = 1;\n   |             \
    \    - expected due to this value\n...\n13 |         x = i;\n   |            \
    \ ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n13 |         x = *i;\n   |             +\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        result.push(y * (x - 1));\n        y *= x;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulu4k3ju.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpewcex176.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    let mut y = 0;\n    for &x in\
    \ xs {\n        y += x;\n        result.push((y - x) / x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1jjgudbq.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n       \
    \ result.push(i * x);\n        x *= i;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 6, 24, 120]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphv3c8y8y.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpw9pqwg2b.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5ca8s9eq.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpabq7mscm.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp1h84xmbe.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5czxoy0h.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpntpmr4_f.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmplz2evc9h.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwh16ltdl.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for i in xs.iter()\
    \ {\n        y += x;\n        result.push((y - i) / x);\n        x = i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa1bdp8tx.rs:15:13\n   |\n\
    10 |     let mut x = 1;\n   |                 - expected due to this value\n...\n\
    15 |         x = i;\n   |             ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n15 |         x = *i;\n   |    \
    \         +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpwoejrs5t.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp04qaeeu7.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp87plcjz3.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push((xs[i] -\
    \ xs[i - 1]) / (xs[i] - xs[i - 1]));\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpxug83gc5.rs:11:22\n\
    \   |\n11 |         result.push((xs[i] - xs[i - 1]) / (xs[i] - xs[i - 1]));\n\
    \   |                      ^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpxug83gc5.rs:11:30\n   |\n11 |         result.push((xs[i] - xs[i\
    \ - 1]) / (xs[i] - xs[i - 1]));\n   |                              ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpxug83gc5.rs:11:44\n   |\n11 | \
    \        result.push((xs[i] - xs[i - 1]) / (xs[i] - xs[i - 1]));\n   |       \
    \                                     ^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpxug83gc5.rs:11:52\n   |\n11 |         result.push((xs[i]\
    \ - xs[i - 1]) / (xs[i] - xs[i - 1]));\n   |                                 \
    \                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu47uoq0g.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ - xs[result.len() - 1]) / xs[result.len() - 1]);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsb32ddsz.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ndalvp0.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpy6acsep_.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpvw62mzn0.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp33nuvptj.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpckhm4i00.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp57qp3rzp.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmp78_mxgn0.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxgm2dafi.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = 0;\n    for i in xs.iter() {\n        x +=\
    \ i;\n        result.push(x);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4o8hphdt.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qxdyhks.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7e6pce9.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe23o63mr.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    let mut z\
    \ = 1;\n    for &x in xs {\n        result .= x * y;\n        y *= x;\n    }\n\
    \    result .= z;\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `=`\n  --> /tmp/tmpol81jt0y.rs:14:17\n   |\n14\
    \ |         result .= x * y;\n   |                 ^\n\nerror: unexpected token:\
    \ `=`\n  --> /tmp/tmpol81jt0y.rs:17:13\n   |\n17 |     result .= z;\n   |    \
    \         ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpol81jt0y.rs:13:9\n\
    \   |\n13 |     for &x in xs {\n   |         ^^    -- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpol81jt0y.rs:17:15\n   |\n9  |     let mut result\
    \ = Vec::new();\n   |                      ---------- expected due to this value\n\
    ...\n17 |     result .= z;\n   |               ^ expected struct `Vec`, found\
    \ integer\n   |\n   = note: expected struct `Vec<_>`\n                found type\
    \ `{integer}`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y *= x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuyileawy.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpa8wavc6i.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for i in xs.iter() {\n       \
    \ result.push((x - xs.len() * x) / i);\n        x = i;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd157x65u.rs:12:42\n   |\n\
    12 |         result.push((x - xs.len() * x) / i);\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ divide `usize` by `&isize`\n  --> /tmp/tmpd157x65u.rs:12:40\n   |\n12 |    \
    \     result.push((x - xs.len() * x) / i);\n   |                             \
    \           ^ no implementation for `usize / &isize`\n   |\n   = help: the trait\
    \ `Div<&isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd157x65u.rs:13:13\n   |\n10 |     let mut x = 1;\n   |        \
    \         - expected due to this value\n...\n13 |         x = i;\n   |       \
    \      ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd157x65u.rs:15:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n15 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpf3bj4fd1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &i in xs.iter() {\n      \
    \  result .= x * i;\n        x += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: unexpected token: `=`\n  --> /tmp/tmppfqwuh4g.rs:12:17\n   |\n12\
    \ |         result .= x * i;\n   |                 ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppfqwuh4g.rs:12:19\n   |\n9  |     let mut result = Vec::new();\n\
    \   |                      ---------- expected due to this value\n...\n12 |  \
    \       result .= x * i;\n   |                   ^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<_>`\n                found\
    \ type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmps84erupj.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3rnd2y6v.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpacm8aqus.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x).clone());\n\
    \    }\n    for &x in result {\n        *x /= result.len();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg20ibshs.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp729lw_ek.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbn5_zjm6.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jzl01zt.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmp4ubtvh91.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        let mut x =\
    \ xs[i];\n        let mut y = xs[i + 1];\n        let mut pow = 1;\n        while\
    \ y != 0 {\n            if y % 2 == 1 {\n                result.push((x * pow)\
    \ / y);\n            }\n            pow *= x;\n            y /= 2;\n         \
    \   x /= 2;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0, 0, 0, 8]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpqbn_deik.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpfxykiirr.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push((x\
    \ * (x - 1)) / 2);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo8j3cpdw.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp72djr6z2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpxlvzp7a9.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpeh8zgp4t.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7n0z7p9n.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpuby5vaj7.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpke0j45jm.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_x97xngk.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdn0t6ih2.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push((xs[i]\
    \ - xs[i + 1]) / (xs[i + 1]));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4rogst8z.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpelblgz00.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdxajz8ha.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj6703lth.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp70lh49vv.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x).clone());\n\
    \    }\n    for &x in result {\n        *x = *x + (*x).clone();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6j046s3w.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpjt6qfms9.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmpm55x_4.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn78cs9cv.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfgoc2fy7.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpkf22837v.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsylo6_bg.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &i in xs.iter() {\n      \
    \  x += i;\n        result.push(x);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 7, 11, 16]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpwss104jz.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y / x);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp69gj4o4d.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyu5_dmtv.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp21m00x47.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp15r395y5.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm9qftz36.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpeaq0xgp5.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y *= x;\n        result.push((y - x) / x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe20g6uya.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppsc7vupv.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpoa2lq4vj.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in 1..xs.len() {\n        result.push(xs[i - 1]\
    \ * i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy2g9ttfo.rs:11:33\n   |\n\
    11 |         result.push(xs[i - 1] * i);\n   |                               \
    \  ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `usize`\n  --> /tmp/tmpy2g9ttfo.rs:11:31\n   |\n11 |         result.push(xs[i\
    \ - 1] * i);\n   |                               ^ no implementation for `isize\
    \ * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    let mut y = 0;\n    for i in xs.iter()\
    \ {\n        x += i;\n        y += 1;\n        result.push(y as isize);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5opi1pdn.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmapiwv6t.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfsbaat2h.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpxq2hcdbg.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbywgihr0.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpzoznn_ek.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    ys.resize(xs.len(), 0);\n    for i in 0..(xs.len() - 1)\
    \ {\n        ys[i] = xs[i + 1] - xs[i] * ys[i] / xs[i];\n    }\n    ys\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp8ewlf_34.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmpyggdcp05.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx8pt9ycs.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    ys.extend_from_slice(xs.iter().cloned());\n    ys.iter_mut().enumerate().for_each(|(i,\
    \ &x)| {\n        if i == 0 {\n            ys[i] = x;\n        } else {\n    \
    \        ys[i] = ys[i - 1] * x;\n        }\n    });\n    ys\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr5yozwpx.rs:10:26\n   |\n\
    10 |     ys.extend_from_slice(xs.iter().cloned());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `&[_]`, found struct `Cloned`\n   |\n   = note:\
    \ expected reference `&[_]`\n                 found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr5yozwpx.rs:11:45\n\
    \   |\n11 |     ys.iter_mut().enumerate().for_each(|(i, &x)| {\n   |         \
    \                                    ^^- expected due to this\n   |          \
    \                                   |\n   |                                  \
    \           types differ in mutability\n   |                                 \
    \            help: you can probably remove the explicit borrow: `x`\n   |\n  \
    \ = note: expected mutable reference `&mut _`\n                      found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpt3p_aq6c.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5bye48u0.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmmre04lc.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp0hmjnuq3.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n   \
    \ dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n \
    \   dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n  \
    \  dx.pop();\n    dx.pop();\n    dx.pop\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `pop` on type `Vec<isize>`\n\
    \   --> /tmp/tmp_4q6uha9.rs:109:8\n    |\n109 |     dx.pop\n    |        ^^^ method,\
    \ not a field\n    |\nhelp: use parentheses to call the method\n    |\n109 | \
    \    dx.pop()\n    |           ++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ - 1) * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr_6hle91.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpqknu636i.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for i in xs.iter() {\n       \
    \ x += i;\n        result.push(x);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpakmprobo.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4qt2oi8u.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        let mut x =\
    \ xs[i];\n        let mut y = xs[i + 1];\n        let mut d = 0;\n        while\
    \ y != 0 {\n            d += 1;\n            y /= x;\n        }\n        result.push(d);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgrscy3u5.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for i in xs.iter() {\n       \
    \ result.push((*i).clone());\n        x += (*i).clone();\n    }\n    for i in\
    \ result.iter_mut() {\n        *i /= x;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp0qwmxitu.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpwqjeiia7.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
