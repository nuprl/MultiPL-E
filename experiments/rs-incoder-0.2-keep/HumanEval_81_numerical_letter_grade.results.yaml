name: HumanEval_81_numerical_letter_grade
language: rust
results:
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade_div: f64 = total_grade / grades.len();\n    for\
    \ grade in grades {\n        let grade_div: f64 = grade / total_grade_div;\n \
    \       let grade_div_mod: f64 = grade_div % 1;\n        let grade_div_mod_floor:\
    \ f64 = grade_div_mod * grades.len();\n        let grade_div_mod_ceil: f64 = grade_div_mod_floor\
    \ + 1;\n        let grade_div_mod_ceil: f64 = grade_div_mod_ceil - 1;\n      \
    \  if grade_div_mod_ceil == 0 {\n            grades_vec.push(format!(\"{}\", grade_div_mod_floor));\n\
    \        } else {\n            grades_vec.push(format!(\"{}\", grade_div_mod_floor));\n\
    \            grades_vec.push(format!(\"{}\", grade_div_mod_ceil));\n        }\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpn_ptym9c.rs:28:48\n\
    \   |\n28 |     let mut total_grade_div: f64 = total_grade / grades.len();\n \
    \  |                                                ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot mod `f64` by `{integer}`\n  --> /tmp/tmpn_ptym9c.rs:31:44\n   |\n31 |\
    \         let grade_div_mod: f64 = grade_div % 1;\n   |                      \
    \                      ^ no implementation for `f64 % {integer}`\n   |\n   = help:\
    \ the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n31 |         let grade_div_mod:\
    \ f64 = grade_div % 1.0;\n   |                                               ++\n\
    \nerror[E0277]: cannot multiply `f64` by `usize`\n  --> /tmp/tmpn_ptym9c.rs:32:54\n\
    \   |\n32 |         let grade_div_mod_floor: f64 = grade_div_mod * grades.len();\n\
    \   |                                                      ^ no implementation\
    \ for `f64 * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    while current_grade != 0.0 {\n        if current_grade < current_grade\
    \ {\n            current_letter_grade_index += 1;\n            current_letter_grade_index2\
    \ += 1;\n        }\n        if current_grade > current_grade {\n            current_letter_grade_index\
    \ -= 1;\n            current_letter_grade_index2 -= 1;\n        }\n        if\
    \ current_grade == 0.0 {\n            letter_grades.push(current_letter_grade.to_string());\n\
    \            current_letter_grade = String::new();\n            current_letter_grade_index\
    \ = 0;\n            current_letter_grade_index2 = 0;\n        }\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade -= current_grade;\n        current_grade\
    \ -= current_grade;\n        current_grade \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3d7wonya.rs:98:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n29 |     while current_grade != 0.0 {\n   |                             \
    \   - this delimiter might not be properly closed...\n...\n88 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n98 | }\n   |   ^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp3d7wonya.rs:87:9\n   |\n29 | / \
    \    while current_grade != 0.0 {\n30 | |         if current_grade < current_grade\
    \ {\n31 | |             current_letter_grade_index += 1;\n32 | |             current_letter_grade_index2\
    \ += 1;\n...  |\n87 | |         current_grade \n   | |         ^^^^^^^^^^^^^ expected\
    \ `()`, found `f64`\n88 | | }\n   | |_- expected this to be `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3d7wonya.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"A+\";\n        } else if grade > 2.7 {\n      \
    \      letter_grade += \"B+\";\n        } else if grade > 2.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade > 1.3 {\n            letter_grade += \"\
    C+\";\n        } else if grade > 1.0 {\n            letter_grade += \"C-\";\n\
    \        } else if grade > 0.7 {\n            letter_grade += \"D+\";\n      \
    \  } else if grade > 0.3 {\n            letter_grade += \"D-\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D\";\n        } else {\n   \
    \         letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C+\", \"C+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpy3ln1_be.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_string = \"\";\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_index = 0;\n    while current_grade != 0.0 {\n        if\
    \ current_grade > grades_copy[current_index] {\n            grades_string += \"\
    +\";\n            current_grade -= grades_copy[current_index];\n            current_index\
    \ += 1;\n        } else {\n            grades_string += \"-\";\n            current_grade\
    \ -= grades_copy[current_index];\n            current_index += 1;\n        }\n\
    \    }\n    grades_string += grades_copy[grades_copy.len() - 1];\n    grades_string.chars().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp58canrih.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&str`\n  --> /tmp/tmp58canrih.rs:30:13\n   |\n30 |             grades_string\
    \ += \"+\";\n   |             -------------^^^^^^^\n   |             |\n   | \
    \            cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp58canrih.rs:34:13\n\
    \   |\n34 |             grades_string += \"-\";\n   |             -------------^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp58canrih.rs:39:5\n\
    \   |\n39 |     grades_string += grades_copy[grades_copy.len() - 1];\n   |   \
    \  -------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot\
    \ use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp58canrih.rs:40:5\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n40 |     grades_string.chars().collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `char`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<char>`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut max_grade\
    \ = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_index\
    \ = min_grade_index;\n    while current_index < max_grade_index {\n        let\
    \ current_grade = grades[current_index];\n        let current_index = grades.iter().position(|x|\
    \ x == current_grade).unwrap();\n        let current_grade = grades[current_index];\n\
    \        let current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \        let current_grade = grades[current_index];\n        let current_index\
    \ = grades.iter().position(|x| x == current_grade).unwrap();\n        let current_grade\
    \ = grades[current_index];\n        let current_index = grades.iter().position(|x|\
    \ x == current_grade).unwrap();\n        let current_grade = grades[current_index];\n\
    \        let current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \        let current_grade = grades[current_index];\n        let current_index\
    \ = grades.iter().position(|x| x == current_grade).unwrap();\n        let current_grade\
    \ = grades[current_index];\n        let current_index = grades.iter().position(|x|\
    \ x == current_grade).unwrap();\n        let current_grade = grades[current_index];\n\
    \        let current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \        let current_grade = grades[current_index];\n        let current_index\
    \ = grades.iter().position(|x| x == current_grade).unwrap();\n        let current_grade\
    \ = grades[current_index];\n        let current_index = grades.iter().position(|x|\
    \ x == current_grade).unwrap();\n        let current_grade = grades[current_index];\n\
    \        let current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \        let current_grade = grades[current_index];\n        let current_index\
    \ = grades.iter().position(|x| x == current_grade).unwrap();\n        let current_grade\
    \ = grades[current_index];\n        let current_index = grades.iter().position(|x|\
    \ x == current_grade).unwrap();\n        let current_grade = grades[current_index];\n\
    \        let current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \        let current_grade = grades[current_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpf_dp7cde.rs:70:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n30 |     while current_index < max_grade_index {\n   |                  \
    \                         - this delimiter might not be properly closed...\n...\n\
    60 | }\n   | - ...as it matches this but it has different indentation\n...\n70\
    \ | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpf_dp7cde.rs:60:1\n   |\n60 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpf_dp7cde.rs:59:35\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n59 |     \
    \    let current_grade = grades[current_\n   |                               \
    \    ^ unclosed delimiter\n60 | }\n   | ^ mismatched closing delimiter\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpf_dp7cde.rs:24:39\n\
    \     |\n24   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpf_dp7cde.rs:25:39\n\
    \     |\n25   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i12"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut gpa = grades.iter().sum();\n    let mut letter_grade: String;\n    \n  \
    \  while gpa > 0.0 {\n        let mut grade: String;\n        \n        if gpa\
    \ >= 4.0 {\n            grade = \"A+\";\n            gpa -= 4.0;\n        }\n\
    \        \n        if gpa >= 3.7 {\n            grade = \"A\";\n            gpa\
    \ -= 3.7;\n        }\n        \n        if gpa >= 3.3 {\n            grade = \"\
    A-\";\n            gpa -= 3.3;\n        }\n        \n        if gpa >= 3.0 {\n\
    \            grade = \"B+\";\n            gpa -= 3.0;\n        }\n        \n \
    \       if gpa >= 2.7 {\n            grade = \"B\";\n            gpa -= 2.7;\n\
    \        }\n        \n        if gpa >= 2.3 {\n            grade = \"B-\";\n \
    \           gpa -= 2.3;\n        }\n        \n        if gpa >= 2.0 {\n      \
    \      grade = \"C+\";\n            gpa -= 2.0;\n        }\n        \n       \
    \ if gpa >= 1.7 {\n            grade = \"C\";\n            gpa -= 1.7;\n     \
    \   }\n        \n        if gpa >= 1.3 {\n            grade = \"C-\";\n      \
    \      gpa -= 1.3;\n        }\n        \n        if gpa >= 1.0 {\n           \
    \ grade = \"D+\";\n            gpa -= 1.0;\n        }\n        \n        if gpa\
    \ >= 0.7 {\n            grade = \"D\";\n            gpa -= 0.7;\n        }\n \
    \       \n        if gpa >= 0.0 {\n            grade = \"D-\";\n            gpa\
    \ -= 0.0;\n        }\n        \n        if gpa < 0.0 {\n            grade = \"\
    E\";\n            gpa -= 0.0;\n        }\n        \n        grades_vec.push(grade);\n\
    \    }\n    \n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl48a1as2.rs:31:21\n   |\n\
    28 |         let mut grade: String;\n   |                        ------ expected\
    \ due to this type\n...\n31 |             grade = \"A+\";\n   |              \
    \       ^^^^- help: try using a conversion method: `.to_string()`\n   |      \
    \               |\n   |                     expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl48a1as2.rs:36:21\n   |\n28 |\
    \         let mut grade: String;\n   |                        ------ expected\
    \ due to this type\n...\n36 |             grade = \"A\";\n   |               \
    \      ^^^- help: try using a conversion method: `.to_string()`\n   |        \
    \             |\n   |                     expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl48a1as2.rs:41:21\n   |\n28 |\
    \         let mut grade: String;\n   |                        ------ expected\
    \ due to this type\n...\n41 |             grade = \"A-\";\n   |              \
    \       ^^^^- help: try using a conversion method: `.to_string()`\n   |      \
    \               |\n   |                     expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl48a1as2.rs:46:21\n   |\n28 |\
    \         let mut grade: String;\n   |                        ------ expected\
    \ due to this type\n...\n46 |             grade = \"B+\";\n   |              \
    \       ^^^^- help: try using a conversion method: `.to_string()`\n   |      \
    \               |\n   |                     expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl48a1as2.rs:51:21\n   |\n28 |\
    \         let mut grade: String;\n   |                        ------ expected\
    \ due to this type\n...\n51 |             grade = \"B\";\n   |               \
    \      ^^^- help: try using a conversion method: `.to_string()`\n   |        \
    \             |\n   |                     expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl48a1as2.rs:56:21\n   |\n28 |\
    \         let mut grade: String;\n   |                        ------ expected\
    \ due to this type\n...\n56 |    "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut current_grade: f64 = 0.0;\n    let mut\
    \ current_letter_grade: String;\n    for grade in grades {\n        total_grade\
    \ += grade;\n        current_grade += grade;\n        if current_grade > 3.0 {\n\
    \            current_letter_grade = \"B+\";\n        } else if current_grade >\
    \ 2.7 {\n            current_letter_grade = \"B\";\n        } else if current_grade\
    \ > 2.3 {\n            current_letter_grade = \"B-\";\n        } else if current_grade\
    \ > 1.3 {\n            current_letter_grade = \"C+\";\n        } else if current_grade\
    \ > 1.0 {\n            current_letter_grade = \"C\";\n        } else if current_grade\
    \ > 0.7 {\n            current_letter_grade = \"C-\";\n        } else if current_grade\
    \ > 0.3 {\n            current_letter_grade = \"D+\";\n        } else if current_grade\
    \ > 0.0 {\n            current_letter_grade = \"D\";\n        } else if current_grade\
    \ > -0.3 {\n            current_letter_grade = \"D-\";\n        } else if current_grade\
    \ > -0.7 {\n            current_letter_grade = \"E\";\n        } else {\n    \
    \        current_letter_grade = \"E\";\n        }\n        grades_vec.push(current_letter_grade);\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxor_dz9c.rs:31:36\n   |\n\
    26 |     let mut current_letter_grade: String;\n   |                         \
    \          ------ expected due to this type\n...\n31 |             current_letter_grade\
    \ = \"B+\";\n   |                                    ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxor_dz9c.rs:33:36\n   |\n26 |     let mut current_letter_grade:\
    \ String;\n   |                                   ------ expected due to this\
    \ type\n...\n33 |             current_letter_grade = \"B\";\n   |            \
    \                        ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                    |\n   |                             \
    \       expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxor_dz9c.rs:35:36\n   |\n26 |     let mut current_letter_grade:\
    \ String;\n   |                                   ------ expected due to this\
    \ type\n...\n35 |             current_letter_grade = \"B-\";\n   |           \
    \                         ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                    |\n   |                             \
    \       expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxor_dz9c.rs:37:36\n   |\n26 |     let mut current_letter_grade:\
    \ String;\n   |                                   ------ expected due to this\
    \ type\n...\n37 |             current_letter_grade = \"C+\";\n   |           \
    \                         ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                    |\n   |                             \
    \       expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxor_dz9c.rs:39:36\n   |\n26 |     let mut current_letter_grade:\
    \ String;\n   |                                   ------ expected due to this\
    \ type\n...\n39 |             current_letter"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    let mut current_letter_grade_index3 = 0;\n    let mut current_letter_grade_index4\
    \ = 0;\n    let mut current_letter_grade_index5 = 0;\n    let mut current_letter_grade_index6\
    \ = 0;\n    let mut current_letter_grade_index7 = 0;\n    let mut current_letter_grade_index8\
    \ = 0;\n    let mut current_letter_grade_index9 = 0;\n    let mut current_letter_grade_index10\
    \ = 0;\n    let mut current_letter_grade_index11 = 0;\n    let mut current_letter_grade_index12\
    \ = 0;\n    let mut current_letter_grade_index13 = 0;\n    let mut current_letter_grade_index14\
    \ = 0;\n    let mut current_letter_grade_index15 = 0;\n    let mut current_letter_grade_index16\
    \ = 0;\n    let mut current_letter_grade_index17 = 0;\n    let mut current_letter_grade_index18\
    \ = 0;\n    let mut current_letter_grade_index19 = 0;\n    let mut current_letter_grade_index20\
    \ = 0;\n    let mut current_letter_grade_index21 = 0;\n    let mut current_letter_grade_index22\
    \ = 0;\n    let mut current_letter_grade_index23 = 0;\n    let mut current_letter_grade_index24\
    \ = 0;\n    let mut current_letter_grade_index25 = 0;\n    let mut current_letter_grade_index26\
    \ = 0;\n    let mut current_letter_grade_index27 = 0;\n    let mut current_letter_grade_index28\
    \ = 0;\n    let mut current_letter_grade_index29 = 0;\n    let mut current_letter_grade_index30\
    \ = 0;\n    let mut current_letter_grade_index31 = 0;\n    let mut current_letter_grade_index32\
    \ = 0;\n    let mut current_letter_grade_index33 = 0;\n    let mut current_letter_grade_index34\
    \ = 0;\n    let mut current_letter_grade_index35 = 0;\n    let mut current_letter_grade_index36\
    \ = 0;\n    let mut current_letter_grade_index37 = 0;\n    let mut current_letter_grade_index38\
    \ = 0;\n    let mut current_letter_grade_index39 = 0;\n    let mut current_letter_grade_index40\
    \ = 0;\n    let mut current_letter_grade_index41 = 0;\n    let mut current_letter_grade_index42\
    \ = 0;\n    let mut current_letter_grade_index43 = 0;\n    let mut current_letter_grade_index44\
    \ = 0;\n    let mut current_letter_grade_index45 = 0;\n    let mut current_letter_grade_index46\
    \ = 0;\n    let mut current_letter_grade_index47 = 0;\n    let mut current_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpukiwdq2h.rs:74:21\n   |\n\
    74 |     let mut current_\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpukiwdq2h.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut current_grade\
    \ = grades.first();\n    let mut current_letter_grade = String::new();\n    for\
    \ grade in grades {\n        if grade > current_grade {\n            current_letter_grade\
    \ += \"A\";\n        } else if grade > current_grade - 0.3 {\n            current_letter_grade\
    \ += \"A-\";\n        } else if grade > current_grade - 0.2 {\n            current_letter_grade\
    \ += \"B+\";\n        } else if grade > current_grade - 0.1 {\n            current_letter_grade\
    \ += \"B\";\n        } else if grade > current_grade + 0.1 {\n            current_letter_grade\
    \ += \"B-\";\n        } else if grade > current_grade + 0.2 {\n            current_letter_grade\
    \ += \"C+\";\n        } else if grade > current_grade + 0.3 {\n            current_letter_grade\
    \ += \"C\";\n        } else if grade > current_grade + 0.4 {\n            current_letter_grade\
    \ += \"C-\";\n        } else if grade > current_grade + 0.5 {\n            current_letter_grade\
    \ += \"D+\";\n        } else if grade > current_grade + 0.6 {\n            current_letter_grade\
    \ += \"D\";\n        } else if grade > current_grade + 0.7 {\n            current_letter_grade\
    \ += \"D-\";\n        } else if grade > current_grade + 0.8 {\n            current_letter_grade\
    \ += \"E\";\n        } else {\n            current_letter_grade += \"F\";\n  \
    \      }\n        current_grade = grade;\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp11e92ode.rs:27:20\n   |\n\
    27 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0369]: cannot subtract `{float}`\
    \ from `Option<&f64>`\n  --> /tmp/tmp11e92ode.rs:29:41\n   |\n29 |         } else\
    \ if grade > current_grade - 0.3 {\n   |                           -------------\
    \ ^ --- {float}\n   |                           |\n   |                      \
    \     Option<&f64>\n\nerror[E0369]: cannot subtract `{float}` from `Option<&f64>`\n\
    \  --> /tmp/tmp11e92ode.rs:31:41\n   |\n31 |         } else if grade > current_grade\
    \ - 0.2 {\n   |                           ------------- ^ --- {float}\n   |  \
    \                         |\n   |                           Option<&f64>\n\nerror[E0369]:\
    \ cannot subtract `{float}` from `Option<&f64>`\n  --> /tmp/tmp11e92ode.rs:33:41\n\
    \   |\n33 |         } else if grade > current_grade - 0.1 {\n   |            \
    \               ------------- ^ --- {float}\n   |                           |\n\
    \   |                           Option<&f64>\n\nerror[E0369]: cannot add `{float}`\
    \ to `Option<&f64>`\n  --> /tmp/tmp11e92ode.rs:35:41\n   |\n35 |         } else\
    \ if grade > current_grade + 0.1 {\n   |                           -------------\
    \ ^ --- {float}\n   |                           |\n   |                      \
    \     Option<&f64>\n\nerror[E0369]: cannot add `{float}` to `Option<&f64>`\n \
    \ --> /tmp/tmp11e92ode.rs:37:41\n   |\n37 |         } else if grade > current_grade\
    \ + 0.2 {\n   |                           ------------- ^ --- {float}\n   |  \
    \                         |\n   |                           Option<&f64>\n\nerror[E0369]:\
    \ cannot add `{float}` to `Option<&f64>`\n  --> /tmp/tmp11e92ode.rs:39:41\n  \
    \ |\n39 |         } else if grade > current_grade + 0.3 {\n   |              \
    \             ------------- ^ --- {float}\n   |                           |\n\
    \   |                           Option<&f64>\n\nerror[E0369]: cannot add `{float}`\
    \ to `Option<&f64>`\n  --> /tmp/tmp11e92ode.rs:41:41\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_iter.next();\n    let mut\
    \ current_letter_grade = String::new();\n    while let Some(grade) = current_grade\
    \ {\n        if grade > 3.0 {\n            current_letter_grade += \"A\";\n  \
    \      } else if grade > 2.0 {\n            current_letter_grade += \"B\";\n \
    \       } else if grade > 1.0 {\n            current_letter_grade += \"C\";\n\
    \        } else if grade > 0.0 && grade < 3.0 {\n            current_letter_grade\
    \ += \"D\";\n        } else if grade < 2.0 {\n            current_letter_grade\
    \ += \"E\";\n        } else {\n            current_letter_grade += \"F\";\n  \
    \      }\n        current_grade = grades_iter.next();\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplquoc6hw.rs:28:20\n   |\n\
    28 |         if grade > 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplquoc6hw.rs:30:27\n   |\n30 |         } else\
    \ if grade > 2.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplquoc6hw.rs:32:27\n   |\n32 |\
    \         } else if grade > 1.0 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplquoc6hw.rs:34:27\n\
    \   |\n34 |         } else if grade > 0.0 && grade < 3.0 {\n   |             \
    \              ^^^\n   |                           |\n   |                   \
    \        expected `&f64`, found floating-point number\n   |                  \
    \         help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplquoc6hw.rs:34:42\n   |\n34 |         } else if grade > 0.0 &&\
    \ grade < 3.0 {\n   |                                          ^^^\n   |     \
    \                                     |\n   |                                \
    \          expected `&f64`, found floating-point number\n   |                \
    \                          help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplquoc6hw.rs:36:27\n   |\n36 |         } else\
    \ if grade < 2.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.0`\n\
    \nerror: aborting due to 6 previous errors\n\nFor more information about this\
    \ error"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    for grade in grades {\n        let grade = grade / total_grade;\n\
    \        let letter_grade = match grade {\n            0.0 => \"D\",\n       \
    \     1.0 => \"D\",\n            2.0 => \"C\",\n            3.0 => \"C\",\n  \
    \          4.0 => \"C\",\n            5.0 => \"C+\",\n            6.0 => \"C+\"\
    ,\n            7.0 => \"C+\",\n            8.0 => \"C+\",\n            9.0 =>\
    \ \"C+\",\n            10.0 => \"C+\",\n            11.0 => \"C+\",\n        \
    \    12.0 => \"C+\",\n            13.0 => \"C+\",\n            14.0 => \"C+\"\
    ,\n            15.0 => \"C+\",\n            16.0 => \"C+\",\n            17.0\
    \ => \"C+\",\n            18.0 => \"C+\",\n            19.0 => \"C+\",\n     \
    \       20.0 => \"C+\",\n            21.0 => \"C+\",\n            22.0 => \"C+\"\
    ,\n            23.0 => \"C+\",\n            24.0 => \"C+\",\n            25.0\
    \ => \"C+\",\n            26.0 => \"C+\",\n            27.0 => \"C+\",\n     \
    \       28.0 => \"C+\",\n            29.0 => \"C+\",\n            30.0 => \"C+\"\
    ,\n            31.0 => \"C+\",\n            32.0 => \"C+\",\n            33.0\
    \ => \"C+\",\n            34.0 => \"C+\",\n            35.0 => \"C+\",\n     \
    \       36.0 => \"C+\",\n            37.0 => \"C+\",\n            38.0 => \"C+\"\
    ,\n            39.0 => \"C+\",\n            40.0 => \"C+\",\n            41.0\
    \ => \"C+\",\n            42.0 => \"C+\",\n            43.0 => \"C+\",\n     \
    \       44.0 => \"C+\",\n            45.0 => \"C+\",\n            46.0 => \"C+\"\
    ,\n            47.0 => \"C+\",\n            48.0 => \"C+\",\n            49.0\
    \ => \"C+\",\n            50.0 => \"C+\",\n            51.0 => \"C+\",\n     \
    \       52.0 => \"C+\",\n            53.0 => \"C+\",\n            54.0 => \"C+\"\
    ,\n            55.\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpav1z1zpb.rs:97:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    29 |         let grade = grade / total_grade;\n30 |         let letter_grade =\
    \ match grade {\n   |                                        - this delimiter\
    \ might not be properly closed...\n...\n87 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n97 | }\n   |   ^\n\nerror: expected one of\
    \ `...`, `..=`, `..`, `=>`, `if`, or `|`, found `}`\n  --> /tmp/tmpav1z1zpb.rs:87:1\n\
    \   |\n86 |             55.\n   |                - expected one of `...`, `..=`,\
    \ `..`, `=>`, `if`, or `|`\n87 | }\n   | ^ unexpected token\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found keyword `fn`\n  --> /tmp/tmpav1z1zpb.rs:89:1\n\
    \   |\n87 | }\n   |  - expected one of `.`, `;`, `?`, `else`, or an operator\n\
    88 | \n89 | fn main() {\n   | ^^ unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpav1z1zpb.rs:28:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n28 | /\
    \     for grade in grades {\n29 | |         let grade = grade / total_grade;\n\
    30 | |         let letter_grade = match grade {\n31 | |             0.0 => \"\
    D\",\n...  |\n96 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n97 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    A\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    C-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    D-\");\n        } else {\n            grades_string.push_str(\"E\");\n       \
    \ }\n    }\n    grades_string.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp53as888q.rs:53:19\n    |\n53\
    \  |       grades_string.into_iter().collect()\n    |                     ^^^^^^^^^\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_copy.first();\n    let mut\
    \ current_letter_grade = String::new();\n    let mut current_gpa : f64 = grades_copy.first();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa :\
    \ f64 = grades_copy.first();\n    let mut current_letter_grade = String::new();\n\
    \    let mut current_gpa : f64 = grades_copy.first();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa : f64 = grades_copy.first();\n   \
    \ let mut current_letter_grade = String::new();\n    let mut current_gpa : f64\
    \ = grades_copy.first();\n    let mut current_letter_grade = String::new();\n\
    \    let mut current_gpa : f64 = grades_copy.first();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa : f64 = grades_copy.first();\n   \
    \ let mut current_letter_grade = String::new();\n    let mut current_gpa : f64\
    \ = grades_copy.first();\n    let mut current_letter_grade = String::new();\n\
    \    let mut current_gpa : f64 = grades_copy.first();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa : f64 = grades_copy.first();\n   \
    \ let mut current_letter_grade = String::new();\n    let mut current_gpa : f64\
    \ = grades_copy.first();\n    let mut current_letter_grade = String::new();\n\
    \    let mut current_gpa : f64 = grades_copy.first();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa : f64 = grades_copy.first();\n   \
    \ let mut current_letter_grade = String::new();\n    let mut current_gpa : f64\
    \ = grades_copy.first();\n    let mut current_letter_grade = String::new();\n\
    \    let mut current_gpa : f64 = grades_copy.first();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa : f64 = grades_copy.first();\n   \
    \ let mut current_letter_grade = String::new();\n    let mut current_gpa : f64\
    \ = grades_copy.first();\n    let mut \n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp1ro0diui.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1ro0diui.rs:27:33\n   |\n27 |     let mut current_gpa : f64 = grades_copy.first();\n\
    \   |                           ---   ^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ enum `Option`\n   |                           |\n   |                      \
    \     expected due to this\n   |\n   = note: expected type `f64`\n           \
    \   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1ro0diui.rs:29:33\n\
    \   |\n29 |     let mut current_gpa : f64 = grades_copy.first();\n   |       \
    \                    ---   ^^^^^^^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n\
    \   |                           |\n   |                           expected due\
    \ to this\n   |\n   = note: expected type `f64`\n              found enum `Option<&f64>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1ro0diui.rs:31:33\n   |\n31 |\
    \     let mut current_gpa : f64 = grades_copy.first();\n   |                 \
    \          ---   ^^^^^^^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\
    \                           |\n   |                           expected due to\
    \ this\n   |\n   = note: expected type `f64`\n              found enum `Option<&f64>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1ro0diui.rs:33:33\n   |\n33 |\
    \     let mut current_gpa : f64 = grades_copy.first();\n   |                 \
    \          ---   ^^^^^^^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\
    \                           |\n   |                           expected due to\
    \ this\n   |\n   = note: expected type `f64`\n              found enum `Option<&f64>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1ro0diui.rs:35:33\n   |\n35 |\
    \     let mut current_gpa : f64 = grades_copy.first();\n   |                 \
    \          ---   ^^^^^^^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\
    \                           |\n   |                           expected due to\
    \ this\n   |\n   = note: expected type `f64`\n              found enum `Option<&f64>`\n\
    \nerror[E0308]: mismatched types\n  -"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut current_grade: f64 = 0.0;\n    let mut\
    \ current_letter_grade: String = String::new();\n    for grade in grades {\n \
    \       total_grade += grade;\n    }\n    for grade in grades {\n        current_grade\
    \ += grade;\n        if current_grade >= total_grade {\n            current_letter_grade\
    \ = \"A+\";\n        } else if current_grade >= total_grade - 0.3 {\n        \
    \    current_letter_grade = \"A\";\n        } else if current_grade >= total_grade\
    \ - 0.2 {\n            current_letter_grade = \"A-\";\n        } else if current_grade\
    \ >= total_grade - 0.1 {\n            current_letter_grade = \"B+\";\n       \
    \ } else if current_grade >= total_grade - 0.05 {\n            current_letter_grade\
    \ = \"B\";\n        } else if current_grade >= total_grade - 0.03 {\n        \
    \    current_letter_grade = \"B-\";\n        } else if current_grade >= total_grade\
    \ - 0.01 {\n            current_letter_grade = \"C+\";\n        } else if current_grade\
    \ >= total_grade - 0.005 {\n            current_letter_grade = \"C\";\n      \
    \  } else if current_grade >= total_grade - 0.003 {\n            current_letter_grade\
    \ = \"C-\";\n        } else if current_grade >= total_grade - 0.001 {\n      \
    \      current_letter_grade = \"D+\";\n        } else if current_grade >= total_grade\
    \ - 0.0005 {\n            current_letter_grade = \"D\";\n        } else if current_grade\
    \ >= total_grade - 0.0003 {\n            current_letter_grade = \"D-\";\n    \
    \    } else {\n            current_letter_grade = \"E\";\n        }\n        grades_vec.push(current_letter_grade);\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3z00n4ep.rs:33:36\n   |\n\
    26 |     let mut current_letter_grade: String = String::new();\n   |         \
    \                          ------ expected due to this type\n...\n33 |       \
    \      current_letter_grade = \"A+\";\n   |                                  \
    \  ^^^^- help: try using a conversion method: `.to_string()`\n   |           \
    \                         |\n   |                                    expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3z00n4ep.rs:35:36\n\
    \   |\n26 |     let mut current_letter_grade: String = String::new();\n   |  \
    \                                 ------ expected due to this type\n...\n35 |\
    \             current_letter_grade = \"A\";\n   |                            \
    \        ^^^- help: try using a conversion method: `.to_string()`\n   |      \
    \                              |\n   |                                    expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3z00n4ep.rs:37:36\n\
    \   |\n26 |     let mut current_letter_grade: String = String::new();\n   |  \
    \                                 ------ expected due to this type\n...\n37 |\
    \             current_letter_grade = \"A-\";\n   |                           \
    \         ^^^^- help: try using a conversion method: `.to_string()`\n   |    \
    \                                |\n   |                                    expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3z00n4ep.rs:39:36\n\
    \   |\n26 |     let mut current_letter_grade: String = String::new();\n   |  \
    \                                 ------ expected due to this type\n...\n39 |\
    \             current_letter_grade = \"B+\";\n   |                           \
    \         ^^^^- help: try using a conversion method: `.to_string()`\n   |    \
    \                                |\n   |                                    expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3z00n4ep.rs:41:36\n\
    \   |\n26 |     let mut current_letter_grade: String = String::new();\n   |  \
    \                     "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade_rounded: f64 = total_grade as f64;\n    let mut\
    \ total_grade_rounded_rounded: f64 = total_grade_rounded as f64;\n    let mut\
    \ total_grade_rounded_rounded_rounded: f64 = total_grade_rounded_rounded as f64;\n\
    \    let mut total_grade_rounded_rounded_rounded_rounded: f64 = total_grade_rounded_rounded_rounded\
    \ as f64;\n    let mut total_grade_rounded_rounded_rounded_rounded_rounded: f64\
    \ = total_grade_rounded_rounded_rounded_rounded as f64;\n    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ f64 = total_grade_rounded_rounded_rounded_rounded_rounded as f64;\n    let mut\
    \ total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded: f64 = total_grade_rounded_rounded_rounded_rounded_rounded_rounded\
    \ as f64;\n    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ f64 = total_grade_rounded_rounded_rounded_rounded_rounded_rounded as f64;\n\
    \    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ f64 = total_grade_rounded_rounded_rounded_rounded_rounded_rounded as f64;\n\
    \    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ f64 = total_grade_rounded_rounded_rounded_rounded_rounded_rounded as f64;\n\
    \    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ f64 = total_grade_rounded_rounded_rounded_rounded_rounded_rounded as f64;\n\
    \    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ f64 = total_grade_rounded_rounded_rounded_rounded_rounded_rounded as f64;\n\
    \    let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm8jy_qrp.rs:40:89\n   |\n\
    40 |     let mut total_grade_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_\n\
    \   |                                                                        \
    \                 ^ help: add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm8jy_qrp.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    grades.iter().for_each(|grade|\
    \ {\n        if grade > gpa {\n            letter_grade = \"A+\";\n        } else\
    \ if grade < gpa {\n            letter_grade = \"A-\";\n        } else if grade\
    \ == gpa {\n            letter_grade = \"A\";\n        } else {\n            letter_grade\
    \ = \"B+\";\n        }\n        gpa -= grade;\n        grades_vec.push(letter_grade);\n\
    \    });\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxwzm8aqu.rs:27:20\n   |\n\
    27 |         if grade > gpa {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found `f64`\n   |        \
    \            help: consider borrowing here: `&gpa`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxwzm8aqu.rs:28:28\n   |\n25 |     let mut letter_grade:\
    \ String;\n   |                           ------ expected due to this type\n...\n\
    28 |             letter_grade = \"A+\";\n   |                            ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \          |\n   |                            expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxwzm8aqu.rs:29:27\n\
    \   |\n29 |         } else if grade < gpa {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found `f64`\n   |                           help: consider borrowing here: `&gpa`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxwzm8aqu.rs:30:28\n   |\n25 |\
    \     let mut letter_grade: String;\n   |                           ------ expected\
    \ due to this type\n...\n30 |             letter_grade = \"A-\";\n   |       \
    \                     ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxwzm8aqu.rs:32:28\n\
    \   |\n25 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n32 |             letter_grade = \"A\"\
    ;\n   |                            ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxwzm8aqu.rs:34:28\n\
    \   |\n25 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n34 |             letter_grade = \"B+\"\
    ;\n   |                            ^^^^- h"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n    let\
    \ mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    \n    while\
    \ min_grade != 0.0 {\n        letter_grades.push(format!(\"{}+\", grades_copy[min_grade_index]));\n\
    \        min_grade_index += 1;\n        min_grade = grades_copy[min_grade_index];\n\
    \    }\n    \n    while max_grade != 0.0 {\n        letter_grades.push(format!(\"\
    {}\", grades_copy[max_grade_index]));\n        max_grade_index -= 1;\n       \
    \ max_grade = grades_copy[max_grade_index];\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpk061p9vl.rs:25:44\n\
    \     |\n25   |     let mut min_grade = grades_copy.iter().min().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpk061p9vl.rs:26:44\n\
    \     |\n26   |     let mut max_grade = grades_copy.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpk061p9vl.rs:30:21\n\
    \   |\n30 |     while min_grade != 0.0 {\n   |                     ^^ no implementation\
    \ for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk061p9vl.rs:33:21\n   |\n25 |     let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \   |                         --------------------------------- expected due to\
    \ this value\n...\n33 |         min"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_grade\
    \ = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n  \
    \  let mut current_grade = grades.iter().sum();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade\
    \ = String::new();\n    for grade in grades {\n        if grade < total_grade\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_letter_grade\
    \ = String::new();\n            current_letter_grade_index = 0;\n        }\n \
    \       if grade == total_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::new();\n            current_letter_grade_index\
    \ = 0;\n        }\n        if grade > total_grade {\n            current_letter_grade\
    \ += &format!(\"{}\", grades[current_letter_grade_index]);\n            current_letter_grade_index\
    \ += 1;\n        }\n        total_grade -= grade;\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpbcm4eoqc.rs:26:9\n\
    \   |\n26 |     let mut current_grade = grades.iter().sum();\n   |         ^^^^^^^^^^^^^^^^^\
    \ consider giving `current_grade` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade: f64 =\
    \ grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n   \
    \ let mut max_grade_index: usize = 0;\n    let mut current_grade: f64 = grades.iter().sum().unwrap();\n\
    \    let mut current_grade_index: usize = 0;\n    let mut current_grade_index2:\
    \ usize = 0;\n    let mut current_grade_index3: usize = 0;\n    let mut current_grade_index4:\
    \ usize = 0;\n    let mut current_grade_index5: usize = 0;\n    let mut current_grade_index6:\
    \ usize = 0;\n    let mut current_grade_index7: usize = 0;\n    let mut current_grade_index8:\
    \ usize = 0;\n    let mut current_grade_index9: usize = 0;\n    let mut current_grade_index10:\
    \ usize = 0;\n    let mut current_grade_index11: usize = 0;\n    let mut current_grade_index12:\
    \ usize = 0;\n    let mut current_grade_index13: usize = 0;\n    let mut current_grade_index14:\
    \ usize = 0;\n    let mut current_grade_index15: usize = 0;\n    let mut current_grade_index16:\
    \ usize = 0;\n    let mut current_grade_index17: usize = 0;\n    let mut current_grade_index18:\
    \ usize = 0;\n    let mut current_grade_index19: usize = 0;\n    let mut current_grade_index20:\
    \ usize = 0;\n    let mut current_grade_index21: usize = 0;\n    let mut current_grade_index22:\
    \ usize = 0;\n    let mut current_grade_index23: usize = 0;\n    let mut current_grade_index24:\
    \ usize = 0;\n    let mut current_grade_index25: usize = 0;\n    let mut current_grade_index26:\
    \ usize = 0;\n    let mut current_grade_index27: usize = 0;\n    let mut current_grade_index28:\
    \ usize = 0;\n    let mut current_grade_index29: usize = 0;\n    let mut current_grade_index30:\
    \ usize = 0;\n    let mut current_grade_index31: usize = 0;\n    let mut current_grade_index32:\
    \ usize = 0;\n    let mut current_grade_index33: usize = 0;\n    let mut current_grade_index34:\
    \ usize = 0;\n    let mut current_grade_index35: usize = 0;\n    let mut current_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbtpol_ag.rs:64:26\n   |\n\
    64 |     let mut current_grade\n   |                          ^ help: add `;`\
    \ here\n65 | }\n   | - unexpected token\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n    --> /tmp/tmpbtpol_ag.rs:24:44\n     |\n24   |   \
    \  let mut min_grade: f64 = grades.iter().min().unwrap();\n     |            \
    \                                ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbtpol_ag.rs:24:30\n   |\n24 |\
    \     let mut min_grade: f64 = grades.iter().min().unwrap();\n   |           \
    \             ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n\
    \   |                        |\n   |                        expected due to this\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n24 |     let mut min_grade:\
    \ f64 = *grades.iter().min().unwrap();\n   |                              +\n\n\
    error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpbtpol_ag.rs:25:44\n\
    \     |\n25   |     let mut max_grade: f64 = grades.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbtpol_ag.rs:25:30\n   |\n25 |\
    \     let mut max_grade: f64 = gra"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n    }\n    let mut total_grade = total_grade / grades.len();\n  \
    \  for grade in grades {\n        let grade = grade / total_grade;\n        let\
    \ letter_grade = match grade {\n            0.0 => \"E\",\n            1.0 =>\
    \ \"D+\",\n            1.1 => \"D\",\n            1.2 => \"D-\",\n           \
    \ 1.3 => \"C-\",\n            1.4 => \"C\",\n            1.5 => \"C-\",\n    \
    \        1.6 => \"C\",\n            1.7 => \"C+\",\n            1.8 => \"B+\"\
    ,\n            1.9 => \"B\",\n            2.0 => \"B-\",\n            2.1 => \"\
    B\",\n            2.2 => \"B-\",\n            2.3 => \"B\",\n            2.4 =>\
    \ \"B+\",\n            2.5 => \"A+\",\n            2.6 => \"A\",\n           \
    \ 2.7 => \"A-\",\n            2.8 => \"A\",\n            2.9 => \"A-\",\n    \
    \        3.0 => \"A\",\n            3.1 => \"A+\",\n            3.2 => \"A\",\n\
    \            3.3 => \"A\",\n            3.4 => \"A\",\n            3.5 => \"A\"\
    ,\n            3.6 => \"A\",\n            3.7 => \"A\",\n            3.8 => \"\
    A\",\n            3.9 => \"A\",\n            4.0 => \"A+\",\n            _ =>\
    \ \"\".to_string(),\n        };\n        grades_vec.push(letter_grade);\n    }\n\
    \    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmps6xt_v8z.rs:28:39\n\
    \   |\n28 |     let mut total_grade = total_grade / grades.len();\n   |      \
    \                                 ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n  --> /tmp/tmps6xt_v8z.rs:64:18\n   |\n31 |  \
    \         let letter_grade = match grade {\n   |  ____________________________-\n\
    32 | |             0.0 => \"E\",\n33 | |             1.0 => \"D+\",\n34 | |  \
    \           1.1 => \"D\",\n...  |\n63 | |             4.0 => \"A+\",\n   | | \
    \                   ---- this and all prior arms are found to be of type `&str`\n\
    64 | |             _ => \"\".to_string(),\n   | |                  ^^^^^^^^^^^^^^\n\
    \   | |                  |\n   | |                  expected `&str`, found struct\
    \ `String`\n   | |                  help: consider borrowing here: `&\"\".to_string()`\n\
    65 | |         };\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpsitstwvb.rs:47:1\n   |\n46 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    47 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n46 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    for grade in grades {\n        let grade = grade / total_grade;\n\
    \        let grade = grade * 100.0;\n        let grade = grade.round() as f64;\n\
    \        let grade = grade / 100.0;\n        let grade = grade * 4.0;\n      \
    \  let grade = grade + 4.0;\n        let grade = grade as f64;\n        let grade\
    \ = grade as char;\n        grades_vec.push(grade.to_string());\n    }\n    grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0604]: only `u8` can be cast as `char`, not `f64`\n  --> /tmp/tmpcn6vujz1.rs:36:21\n\
    \   |\n36 |         let grade = grade as char;\n   |                     ^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpcn6vujz1.rs:36:21\n   |\n36 |         let grade = grade as char;\n \
    \  |                     ^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0604`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade = total_grade / grades.len();\n    let mut grade_index\
    \ = 0;\n    while total_grade > 0.0 {\n        let mut letter_grade: String =\
    \ String::new();\n        if total_grade < 3.0 {\n            letter_grade +=\
    \ \"F\";\n            total_grade = total_grade - 3.0;\n        } else {\n   \
    \         if total_grade < 3.3 {\n                letter_grade += \"D\";\n   \
    \             total_grade = total_grade - 3.3;\n            } else {\n       \
    \         if total_grade < 3.7 {\n                    letter_grade += \"C\";\n\
    \                    total_grade = total_grade - 3.7;\n                } else\
    \ {\n                    if total_grade < 4.0 {\n                        letter_grade\
    \ += \"B\";\n                        total_grade = total_grade - 4.0;\n      \
    \              } else {\n                        if total_grade < 4.3 {\n    \
    \                        letter_grade += \"A\";\n                            total_grade\
    \ = total_grade - 4.3;\n                        } else {\n                   \
    \         if total_grade < 4.7 {\n                                letter_grade\
    \ += \"A+\";\n                                total_grade = total_grade - 4.7;\n\
    \                            } else {\n                                if total_grade\
    \ < 5.0 {\n                                    letter_grade += \"A\";\n      \
    \                              total_grade = total_grade - 5.0;\n            \
    \                    } else {\n                                    if total_grade\
    \ < 5.3 {\n                                        letter_grade += \"A-\";\n \
    \                                       total_grade = total_grade - 5.3;\n   \
    \                                 } else {\n                                 \
    \       if total_grade < 5.7 {\n                                            letter_grade\
    \ += \"B+\";\n                                            total_grade = total_grade\
    \ - 5.7;\n                                        } else {\n                 \
    \                           if total_grade < 6.0 {\n                         \
    \                       letter_grade += \"B\";\n                             \
    \                   total_grade = total_grade - 6.0;\n                       \
    \                     } else {\n                                             \
    \   if total_grade < 6.3 {\n                                                 \
    \   letter_grade += \"B-\";\n                                                \
    \    total_grade = total_grade - 6.3;\n                                      \
    \          } else {\n                                                    if total_grade\
    \ < 6.7 {\n                                                        letter_grade\
    \ += \"C+\";\n                                                        total_grade\
    \ = total_grade - 6.7;\n                                                    }\
    \ else {\n                                                        if total_grade\
    \ < 7.0 {\n                                                            letter_grade\
    \ += \"C\";\n                                                            total_grade\
    \ = total_grade - 7.0;\n                                                     \
    \   } else {\n                                                            if total_grade\
    \ < 7.3 {\n                                                                letter_grade\
    \ += \"C-\";\n                                                               \
    \ total_grade = total_grade - 7.3;\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpho27q6af.rs:98:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n30 |     while total_grade > 0.0 {\n   |                             - unclosed\
    \ delimiter\n...\n35 |         } else {\n   |                - unclosed delimiter\n\
    ...\n39 |             } else {\n   |                    - unclosed delimiter\n\
    ...\n43 |                 } else {\n   |                        - unclosed delimiter\n\
    ...\n47 |                     } else {\n   |                            - unclosed\
    \ delimiter\n...\n51 |                         } else {\n   |                \
    \                - unclosed delimiter\n...\n55 |                             }\
    \ else {\n   |                                    - unclosed delimiter\n...\n\
    59 |                                 } else {\n   |                          \
    \              - unclosed delimiter\n...\n63 |                               \
    \      } else {\n   |                                            - unclosed delimiter\n\
    ...\n67 |                                         } else {\n   |             \
    \                                   - unclosed delimiter\n...\n71 |          \
    \                                   } else {\n   |                           \
    \                         - unclosed delimiter\n...\n75 |                    \
    \                             } else {\n   |                                 \
    \                       - unclosed delimiter\n...\n79 |                      \
    \                               } else {\n   |                               \
    \                             - unclosed delimiter\n...\n83 |                \
    \                                         } else {\n   |                     \
    \                                           - unclosed delimiter\n84 |       \
    \                                                      if total_grade < 7.3 {\n\
    \   |                                                                        \
    \          - this delimiter might not be properly closed...\n.."
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"A+\";\n        } else if grade > 2.0 {\n      \
    \      letter_grade += \"A\";\n        } else if grade > 1.0 {\n            letter_grade\
    \ += \"A-\";\n        } else if grade > 0.7 {\n            letter_grade += \"\
    B+\";\n        } else if grade > 0.3 {\n            letter_grade += \"B\";\n \
    \       } else if grade > 0.1 {\n            letter_grade += \"B-\";\n       \
    \ } else if grade > 0.0 {\n            letter_grade += \"C+\";\n        } else\
    \ if grade > -0.7 {\n            letter_grade += \"C\";\n        } else if grade\
    \ > -0.3 {\n            letter_grade += \"C-\";\n        } else if grade > -0.1\
    \ {\n            letter_grade += \"D+\";\n        } else if grade > -0.0 {\n \
    \           letter_grade += \"D\";\n        } else {\n            letter_grade\
    \ += \"D-\";\n        }\n        grades_string.push(letter_grade);\n    }\n  \
    \  grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A\", \"A-\", \"A-\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpwoqf_qet.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_len\
    \ = grades.len();\n    let mut grades_sum = 0.0;\n    let mut grades_average =\
    \ 0.0;\n    let mut grades_min_value = grades[0];\n    let mut grades_max_value\
    \ = grades[0];\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos =\
    \ 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let\
    \ mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvqj5bvrk.rs:79:11\n   |\n\
    79 |     let mu\n   |           ^ help: add `;` here\n80 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvqj5bvrk.rs:22:48\n \
    \  |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade_index47\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmyssulx7.rs:75:1\n  \
    \ |\n75 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_sum: f64 = grades.iter().sum();\n    let\
    \ mut grades_average: f64 = grades_sum / grades_length;\n    let mut grades_min_average:\
    \ f64 = grades_average;\n    let mut grades_max_average: f64 = grades_average;\n\
    \    let mut grades_min_grade: f64 = grades.iter().min().unwrap();\n    let mut\
    \ grades_max_grade: f64 = grades.iter().max().unwrap();\n    let mut grades_min_grade_length\
    \ = grades_min_grade - grades_average;\n    let mut grades_max_grade_length =\
    \ grades_max_grade - grades_average;\n    let mut grades_min_grade_average: f64\
    \ = grades_min_grade - grades_average;\n    let mut grades_max_grade_average:\
    \ f64 = grades_max_grade - grades_average;\n    let mut grades_min_grade_grade:\
    \ f64 = grades.iter().filter(|&x| x > grades_average).min().unwrap();\n    let\
    \ mut grades_max_grade_grade: f64 = grades.iter().filter(|&x| x > grades_average).max().unwrap();\n\
    \    let mut grades_min_grade_grade_length = grades_min_grade_grade - grades_average;\n\
    \    let mut grades_max_grade_grade_length = grades_max_grade_grade - grades_average;\n\
    \    let mut grades_min_grade_grade_average: f64 = grades_min_grade_grade - grades_average;\n\
    \    let mut grades_max_grade_grade_average: f64 = grades_max_grade_grade - grades_average;\n\
    \    let mut grades_min_grade_grade_grade: f64 = grades.iter().filter(|&x| x >\
    \ grades_average).filter(|&x| x < grades_min_grade_grade).min().unwrap();\n  \
    \  let mut grades_max_grade_grade_grade: f64 = grades.iter().filter(|&x| x > grades_average).filter(|&x|\
    \ x < grades_min_grade_grade).max().unwrap();\n    let mut grades_min_grade_grade_grade_length\
    \ = grades_min_grade_grade_grade - grades_average;\n    let mut grades_\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmo8h2w6_.rs:44:20\n   |\n\
    44 |     let mut grades_\n   |                    ^ help: add `;` here\n45 | }\n\
    \   | - unexpected token\n\nerror[E0277]: cannot divide `f64` by `usize`\n  -->\
    \ /tmp/tmpmo8h2w6_.rs:26:46\n   |\n26 |     let mut grades_average: f64 = grades_sum\
    \ / grades_length;\n   |                                              ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n   \
    \ --> /tmp/tmpmo8h2w6_.rs:29:51\n     |\n29   |     let mut grades_min_grade:\
    \ f64 = grades.iter().min().unwrap();\n     |                                \
    \                   ^^^ the trait `Ord` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Ord`:\n             \
    \  i128\n               i16\n               i32\n               i64\n        \
    \       i8\n               isize\n               u128\n               u16\n  \
    \           and 4 others\n     = note: required because of the requirements on\
    \ the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmo8h2w6_.rs:29:37\n   |\n29 |\
    \     let mut grades_min_grade: f64 = grades.iter().min().unwrap();\n   |    \
    \                           ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `&f64`\n   |                               |\n   |                   \
    \            expected due to this\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |     let mut grades_min_grade: f64 = *grades.iter().min().unwrap();\n\
    \   |                                     +\n\nerror[E0277]: the trait bound `f64"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    let mut total_gpa_sum:\
    \ f64 = 0.0;\n    let mut total_gpa_sum2: f64 = 0.0;\n    let mut total_gpa_sum3:\
    \ f64 = 0.0;\n    let mut total_gpa_sum4: f64 = 0.0;\n    let mut total_gpa_sum5:\
    \ f64 = 0.0;\n    let mut total_gpa_sum6: f64 = 0.0;\n    let mut total_gpa_sum7:\
    \ f64 = 0.0;\n    let mut total_gpa_sum8: f64 = 0.0;\n    let mut total_gpa_sum9:\
    \ f64 = 0.0;\n    let mut total_gpa_sum10: f64 = 0.0;\n    let mut total_gpa_sum11:\
    \ f64 = 0.0;\n    let mut total_gpa_sum12: f64 = 0.0;\n    let mut total_gpa_sum13:\
    \ f64 = 0.0;\n    let mut total_gpa_sum14: f64 = 0.0;\n    let mut total_gpa_sum15:\
    \ f64 = 0.0;\n    let mut total_gpa_sum16: f64 = 0.0;\n    let mut total_gpa_sum17:\
    \ f64 = 0.0;\n    let mut total_gpa_sum18: f64 = 0.0;\n    let mut total_gpa_sum19:\
    \ f64 = 0.0;\n    let mut total_gpa_sum20: f64 = 0.0;\n    let mut total_gpa_sum21:\
    \ f64 = 0.0;\n    let mut total_gpa_sum22: f64 = 0.0;\n    let mut total_gpa_sum23:\
    \ f64 = 0.0;\n    let mut total_gpa_sum24: f64 = 0.0;\n    let mut total_gpa_sum25:\
    \ f64 = 0.0;\n    let mut total_gpa_sum26: f64 = 0.0;\n    let mut total_gpa_sum27:\
    \ f64 = 0.0;\n    let mut total_gpa_sum28: f64 = 0.0;\n    let mut total_gpa_sum29:\
    \ f64 = 0.0;\n    let mut total_gpa_sum30: f64 = 0.0;\n    let mut total_gpa_sum31:\
    \ f64 = 0.0;\n    let mut total_gpa_sum32: f64 = 0.0;\n    let mut total_gpa_sum33:\
    \ f64 = 0.0;\n    let mut total_gpa_sum34: f64 = 0.0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp16fk1927.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp16fk1927.rs:22:48\n \
    \  |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letter_grades.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            letter_grades.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            letter_grades.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grades.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            letter_grades.push(\"C\");\n        } else if grade\
    \ > 1.3 {\n            letter_grades.push(\"C-\");\n        } else if grade >\
    \ 1.0 {\n            letter_grades.push(\"D+\");\n        } else if grade > 0.7\
    \ {\n            letter_grades.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkevzwrf9.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut min_grade = grades_copy[0];\n    let mut max_grade =\
    \ grades_copy[0];\n    let mut current_grade = grades_copy[0];\n    let mut current_index\
    \ = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n    let mut\
    \ current_index2 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index3 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index4 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index5 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index6 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index7 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index8 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index9 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index10 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index11 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index12 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index13 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index14 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index15 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index16 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index17 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index18 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index19 = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n\
    \    let mut current_index20 = grades_copy.iter().position(|&x\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmpa4vtkswz.rs:48:1\n\
    \   |\n47 |     let mut current_index20 = grades_copy.iter().position(|&x\n  \
    \ |                                                              - expected one\
    \ of `:`, `@`, or `|`\n48 | }\n   | ^ unexpected token\n\nerror: mismatched closing\
    \ delimiter: `}`\n  --> /tmp/tmpa4vtkswz.rs:47:58\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n47 |     let\
    \ mut current_index20 = grades_copy.iter().position(|&x\n   |                \
    \                                          ^ unclosed delimiter\n48 | }\n   |\
    \ ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut total_gpa: f64 = 0.0;\n    for grade in grades {\n        total_gpa += grade;\n\
    \    }\n    let mut total_gpa_div: f64 = total_gpa / grades.len();\n    let mut\
    \ total_gpa_div_floor: f64 = total_gpa_div as f64;\n    let mut total_gpa_div_ceil:\
    \ f64 = total_gpa_div_floor + 1.0;\n    for grade in grades {\n        if grade\
    \ > total_gpa_div_ceil {\n            grades_vec.push(\"D-\");\n            break;\n\
    \        }\n        if grade < total_gpa_div_floor {\n            grades_vec.push(\"\
    D+\");\n            break;\n        }\n        if grade == total_gpa_div_floor\
    \ {\n            grades_vec.push(\"D\");\n            break;\n        }\n    \
    \    if grade == total_gpa_div_ceil {\n            grades_vec.push(\"C\");\n \
    \           break;\n        }\n        if grade < total_gpa_div_floor {\n    \
    \        grades_vec.push(\"B-\");\n            break;\n        }\n        if grade\
    \ > total_gpa_div_ceil {\n            grades_vec.push(\"B+\");\n            break;\n\
    \        }\n        if grade < total_gpa_div_floor {\n            grades_vec.push(\"\
    B-\");\n            break;\n        }\n        if grade > total_gpa_div_ceil {\n\
    \            grades_vec.push(\"B+\");\n            break;\n        }\n       \
    \ if grade < total_gpa_div_floor {\n            grades_vec.push(\"B-\");\n   \
    \         break;\n        }\n        if grade > total_gpa_div_ceil {\n       \
    \     grades_vec.push(\"B+\");\n            break;\n        }\n        if grade\
    \ < total_gpa_div_floor {\n            grades_vec.push(\"B-\");\n            break;\n\
    \        }\n        if grade > total_gpa_div_ceil {\n            grades_vec.push(\"\
    B+\");\n            break;\n        }\n        if grade < total_gpa_div_floor\
    \ {\n            grades_vec.push(\"B-\");\n            break;\n        }\n   \
    \     if grade > total_gpa_div_ceil {\n            grades_vec.push(\"B+\");\n\
    \            break;\n        }\n        if grade < total_gpa_div_floor {\n   \
    \         grades_vec.push(\"B-\");\n            break;\n        }\n        if\
    \ grade > total_gpa_div_ceil {\n            grades_vec.push(\"B+\");\n       \
    \     break;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpm3or4613.rs:105:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n31  |     for grade in grades {\n    |                         - unclosed\
    \ delimiter\n...\n92  |         if grade > total_gpa_div_ceil {\n    |       \
    \                                - this delimiter might not be properly closed...\n\
    ...\n95  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n105 | }\n    |   ^\n\nerror[E0277]: cannot divide `f64` by `usize`\n  -->\
    \ /tmp/tmpm3or4613.rs:28:44\n   |\n28 |     let mut total_gpa_div: f64 = total_gpa\
    \ / grades.len();\n   |                                            ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3or4613.rs:33:29\n\
    \   |\n33 |             grades_vec.push(\"D-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3or4613.rs:37:29\n\
    \   |\n37 |             grades_vec.push(\"D+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3or4613.rs:41:29\n\
    \   |\n41 |             grades_vec.push(\"D\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_stri"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade_div: f64 = total_grade / grades.len();\n    for\
    \ grade in grades {\n        let grade_div: f64 = grade / total_grade_div;\n \
    \       let grade_div_mod: f64 = grade_div % 1;\n        if grade_div_mod == 0.0\
    \ {\n            grades_vec.push(\"D-\");\n        } else {\n            grades_vec.push(\"\
    D+\");\n        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp2kt5phh2.rs:28:48\n\
    \   |\n28 |     let mut total_grade_div: f64 = total_grade / grades.len();\n \
    \  |                                                ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot mod `f64` by `{integer}`\n  --> /tmp/tmp2kt5phh2.rs:31:44\n   |\n31 |\
    \         let grade_div_mod: f64 = grade_div % 1;\n   |                      \
    \                      ^ no implementation for `f64 % {integer}`\n   |\n   = help:\
    \ the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n31 |         let grade_div_mod:\
    \ f64 = grade_div % 1.0;\n   |                                               ++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2kt5phh2.rs:33:29\n   |\n33 |\
    \             grades_vec.push(\"D-\");\n   |                             ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \           |\n   |                             expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2kt5phh2.rs:35:29\n\
    \   |\n35 |             grades_vec.push(\"D+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades_copy.len();\n    let mut grades_index = 0;\n    let mut grades_sum\
    \ = 0.0;\n    let mut grades_average = 0.0;\n    let mut grades_letter_grades\
    \ = Vec::new();\n    \n    while grades_index < grades_len {\n        grades_sum\
    \ += grades_copy[grades_index];\n        grades_index += 1;\n    }\n    grades_average\
    \ = grades_sum / grades_len;\n    \n    while grades_index < grades_len {\n  \
    \      let grade = grades_copy[grades_index];\n        let grades_letter_grade\
    \ = if grade >= grades_average {\n            grades_copy[grades_index - 1].to_string()\n\
    \        } else {\n            grades_copy[grades_index + 1].to_string()\n   \
    \     };\n        grades_letter_grades.push(grades_letter_grade);\n        grades_index\
    \ += 1;\n    }\n    grades_letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpejv8rqt0.rs:34:33\n\
    \   |\n34 |     grades_average = grades_sum / grades_len;\n   |              \
    \                   ^ no implementation for `f64 / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ min_grade: f64 = grades[0];\n    let mut max_grade: f64 = grades[0];\n    let\
    \ mut min_grade_index: usize = 0;\n    let mut max_grade_index: usize = 0;\n \
    \   for grade in grades {\n        if grade < min_grade {\n            min_grade\
    \ = grade;\n            min_grade_index = grades.len();\n        }\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n            max_grade_index\
    \ = grades.len();\n        }\n    }\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades[0];\n    let mut max_grade: f64 = grades[0];\n\
    \    let mut min_grade_index: usize = 0;\n    let mut max_grade_index: usize =\
    \ 0;\n    for grade in grades {\n        if grade < min_grade {\n            min_grade\
    \ = grade;\n            min_grade_index = grades.len();\n        }\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n            max_grade_index\
    \ = grades.len();\n        }\n    }\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades[0];\n    let mut max_grade: f64 = grades[0];\n\
    \    let mut min_grade_index: usize = 0;\n    let mut max_grade_index: usize =\
    \ 0;\n    for grade in grades {\n        if grade < min_grade {\n            min_grade\
    \ = grade;\n            min_grade_index = grades.len();\n        }\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n            max_grade_index\
    \ = grades.len();\n        }\n    }\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades[0];\n    let mut max_grade: f64 = grades[0];\n\
    \    let mut min_grade_index: usize = 0;\n    let mut max_grade_index: usize =\
    \ 0;\n    for grade in grades {\n        if grade < min_grade {\n            min_grade\
    \ = grade;\n            min_grade_index = grades.len();\n        }\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n            max_grade_index\
    \ = grades.len();\n        }\n    }\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades[0];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4qzpozw_.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ grades_sum: f64 = grades.iter().sum();\n    let mut grades_count: usize = 0;\n\
    \    for grade in grades {\n        if grade > grades_sum {\n            grades_sum\
    \ += grade;\n            grades_count += 1;\n        }\n    }\n    for grade in\
    \ grades {\n        if grade > grades_sum {\n            grades_sum += grade;\n\
    \            grades_count += 1;\n        }\n    }\n    for grade in grades {\n\
    \        if grade > grades_sum {\n            grades_sum += grade;\n         \
    \   grades_count += 1;\n        }\n    }\n    for grade in grades {\n        if\
    \ grade > grades_sum {\n            grades_sum += grade;\n            grades_count\
    \ += 1;\n        }\n    }\n    for grade in grades {\n        if grade > grades_sum\
    \ {\n            grades_sum += grade;\n            grades_count += 1;\n      \
    \  }\n    }\n    for grade in grades {\n        if grade > grades_sum {\n    \
    \        grades_sum += grade;\n            grades_count += 1;\n        }\n   \
    \ }\n    for grade in grades {\n        if grade > grades_sum {\n            grades_sum\
    \ += grade;\n            grades_count += 1;\n        }\n    }\n    for grade in\
    \ grades {\n        if grade > grades_sum {\n            grades_sum += grade;\n\
    \            grades_count += 1;\n        }\n    }\n    for grade in grades {\n\
    \        if grade > grades_sum {\n            grades_sum += grade;\n         \
    \   grades_count += 1;\n        }\n    }\n    for grade in grades {\n        if\
    \ grade > grades_sum {\n            grades_sum += grade;\n            grades_count\
    \ += 1;\n        }\n    }\n    for grade in grades {\n        if grade > grades_sum\
    \ {\n            grades_sum += grade;\n            grades_count += 1;\n      \
    \  }\n    }\n    for grade in grades {\n        if grade > grades_sum {\n    \
    \        grades_sum += grade;\n            grades_count += 1;\n        }\n   \
    \ }\n    for grade in grades {\n        if grade > grades_sum {\n            grades_sum\
    \ += grade;\n            grades_count += 1;\n        }\n    }\n    for grade in\
    \ grades {\n        if grade > grades_sum {\n            grades_sum += grade;\n\
    \            grades_count \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpyhxuqzxj.rs:118:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n104 |     for grade in grades {\n    |                         - unclosed\
    \ delimiter\n105 |         if grade > grades_sum {\n    |                    \
    \           - this delimiter might not be properly closed...\n...\n108 | }\n \
    \   | - ...as it matches this but it has different indentation\n...\n118 | }\n\
    \    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpyhxuqzxj.rs:107:13\n\
    \    |\n105 | /         if grade > grades_sum {\n106 | |             grades_sum\
    \ += grade;\n107 | |             grades_count \n    | |             ^^^^^^^^^^^^\
    \ expected `()`, found `usize`\n108 | | }\n    | |_- expected this to be `()`\n\
    \nerror[E0308]: mismatched types\n   --> /tmp/tmpyhxuqzxj.rs:104:5\n    |\n22\
    \  |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    |   \
    \                                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n104 | /     for grade in grades {\n105 | |    \
    \     if grade > grades_sum {\n106 | |             grades_sum += grade;\n107 |\
    \ |             grades_count \n...   |\n117 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n118 | | }\n    | |__^\
    \ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<String>`\n\
    \            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    \n    while\
    \ current_grade != 0.0 {\n        let mut current_letter_grade_index = 0;\n  \
    \      while current_grade > grades_copy[current_letter_grade_index] {\n     \
    \       current_letter_grade_index += 1;\n        }\n        \n        letter_grades.push(current_letter_grade.to_string());\n\
    \        current_grade -= grades_copy[current_letter_grade_index];\n        current_letter_grade\
    \ = String::new();\n        for _ in 0..current_letter_grade_index {\n       \
    \     current_letter_grade += &'A';\n        }\n    }\n    \n    letter_grades.push(current_letter_grade.to_string());\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw00rw7u0.rs:39:37\n   |\n\
    39 |             current_letter_grade += &'A';\n   |                         \
    \            ^^^^ expected `str`, found `char`\n   |\n   = note: expected reference\
    \ `&str`\n              found reference `&char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_sum: f64 = 0.0;\n    let mut grades_average:\
    \ f64 = 0.0;\n    let mut grades_min_value: f64 = 0.0;\n    let mut grades_max_value:\
    \ f64 = 0.0;\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_min_value: f64 = grades[0];\n    let mut grades_max_value:\
    \ f64 = grades[0];\n    let mut grades_min_index: usize = 0;\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9y5s9471.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    let mut grades_string_reversed\
    \ = String::new();\n    let mut grades_string_sorted = String::new();\n    let\
    \ mut grades_string_sorted_reversed = String::new();\n    let mut grades_string_sorted_reversed_2\
    \ = String::new();\n    let mut grades_string_sorted_reversed_3 = String::new();\n\
    \    let mut grades_string_sorted_reversed_4 = String::new();\n    let mut grades_string_sorted_reversed_5\
    \ = String::new();\n    let mut grades_string_sorted_reversed_6 = String::new();\n\
    \    let mut grades_string_sorted_reversed_7 = String::new();\n    let mut grades_string_sorted_reversed_8\
    \ = String::new();\n    let mut grades_string_sorted_reversed_9 = String::new();\n\
    \    let mut grades_string_sorted_reversed_10 = String::new();\n    let mut grades_string_sorted_reversed_11\
    \ = String::new();\n    let mut grades_string_sorted_reversed_12 = String::new();\n\
    \    let mut grades_string_sorted_reversed_13 = String::new();\n    let mut grades_string_sorted_reversed_14\
    \ = String::new();\n    let mut grades_string_sorted_reversed_15 = String::new();\n\
    \    let mut grades_string_sorted_reversed_16 = String::new();\n    let mut grades_string_sorted_reversed_17\
    \ = String::new();\n    let mut grades_string_sorted_reversed_18 = String::new();\n\
    \    let mut grades_string_sorted_reversed_19 = String::new();\n    let mut grades_string_sorted_reversed_20\
    \ = String::new();\n    let mut grades_string_sorted_reversed_21 = String::new();\n\
    \    let mut grades_string_sorted_reversed_22 = String::new();\n    let mut grades_string_sorted_reversed_23\
    \ = String::new();\n    let mut grades_string_sorted_reversed_24 = String::new();\n\
    \    let mut grades_string_sorted_reversed_25 = String::new();\n    let mut grades_string_sorted_reversed_26\
    \ = String::new();\n    let mut grades_string_sorted_reversed_27 = String::new();\n\
    \    let mut grades_string_sorted_reversed_28 = String::new();\n    let mut grades_string_sorted_reversed_29\
    \ = String::new();\n    let mut grades_string_sorted_reversed_30 = String::new();\n\
    \    let mut grades_string_sorted_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8kpv51bd.rs:56:34\n   |\n\
    56 |     let mut grades_string_sorted_\n   |                                 \
    \ ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8kpv51bd.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    A\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade > 0.7 { \n            grades_string.push_str(\"\
    B+\");\n        } else if grade > 0.3 { \n            grades_string.push_str(\"\
    B\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    C+\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    C\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    C-\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    D+\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    D\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    D-\");\n        } else if grade > 0.0 { \n            grades_string.push_str(\"\
    E\");\n        } else {\n            grades_string.push_str(\"F\");\n        }\n\
    \    }\n    grades_string.to_string()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7xsfxgm.rs:55:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n55 |     grades_string.to_string()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `String`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().collect::<Vec<f64>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_sorted_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::new();\n    \n    while let Some(grade)\
    \ = grades_sorted_iter.next() {\n        if grade > current_grade {\n        \
    \    letter_grades.push(current_letter_grade);\n            current_letter_grade\
    \ = String::new();\n            current_grade = grade;\n        }\n        current_letter_grade\
    \ += &format!(\"{}\", grade - current_grade);\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpo4bduucc.rs:24:19\n\
    \     |\n24   |     grades_sorted.sort_unstable();\n     |                   ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            grades_string.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            grades_string.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            grades_string.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            grades_string.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            grades_string.push(\"C\");\n        } else if grade\
    \ > 1.3 {\n            grades_string.push(\"C-\");\n        } else if grade >\
    \ 1.0 {\n            grades_string.push(\"D+\");\n        } else if grade > 0.7\
    \ {\n            grades_string.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            grades_string.push(\"D-\");\n        } else {\n            grades_string.push(\"\
    E\");\n        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp67rvnmyc.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     grades_string\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_vec.push(\"B+\");\n\
    \        } else if grade > 2.7 {\n            grades_vec.push(\"B\");\n      \
    \  } else if grade > 2.3 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            grades_vec.push(\"C+\");\n        } else if grade\
    \ > 1.7 {\n            grades_vec.push(\"C\");\n        } else if grade > 1.3\
    \ {\n            grades_vec.push(\"C-\");\n        } else if grade > 1.0 {\n \
    \           grades_vec.push(\"D+\");\n        } else if grade > 0.7 {\n      \
    \      grades_vec.push(\"D\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"\
    D-\");\n        } else {\n            grades_vec.push(\"E\");\n        }\n   \
    \ }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:26:29\n   |\n\
    26 |             grades_vec.push(\"B+\");\n   |                             ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \           |\n   |                             expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:28:29\n\
    \   |\n28 |             grades_vec.push(\"B\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:30:29\n\
    \   |\n30 |             grades_vec.push(\"B-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:32:29\n\
    \   |\n32 |             grades_vec.push(\"C+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:34:29\n\
    \   |\n34 |             grades_vec.push(\"C\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:36:29\n\
    \   |\n36 |             grades_vec.push(\"C-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13pyhq_j.rs:38:29\n\
    \   |\n38 |             grades_vec.push(\"D+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    let mut current_letter_grade_index3 = 0;\n    let mut current_letter_grade_index4\
    \ = 0;\n    let mut current_letter_grade_index5 = 0;\n    let mut current_letter_grade_index6\
    \ = 0;\n    let mut current_letter_grade_index7 = 0;\n    let mut current_letter_grade_index8\
    \ = 0;\n    let mut current_letter_grade_index9 = 0;\n    let mut current_letter_grade_index10\
    \ = 0;\n    let mut current_letter_grade_index11 = 0;\n    let mut current_letter_grade_index12\
    \ = 0;\n    let mut current_letter_grade_index13 = 0;\n    let mut current_letter_grade_index14\
    \ = 0;\n    let mut current_letter_grade_index15 = 0;\n    let mut current_letter_grade_index16\
    \ = 0;\n    let mut current_letter_grade_index17 = 0;\n    let mut current_letter_grade_index18\
    \ = 0;\n    let mut current_letter_grade_index19 = 0;\n    let mut current_letter_grade_index20\
    \ = 0;\n    let mut current_letter_grade_index21 = 0;\n    let mut current_letter_grade_index22\
    \ = 0;\n    let mut current_letter_grade_index23 = 0;\n    let mut current_letter_grade_index24\
    \ = 0;\n    let mut current_letter_grade_index25 = 0;\n    let mut current_letter_grade_index26\
    \ = 0;\n    let mut current_letter_grade_index27 = 0;\n    let mut current_letter_grade_index28\
    \ = 0;\n    let mut current_letter_grade_index29 = 0;\n    let mut current_letter_grade_index30\
    \ = 0;\n    let mut current_letter_grade_index31 = 0;\n    let mut current_letter_grade_index32\
    \ = 0;\n    let mut current_letter_grade_index33 = 0;\n    let mut current_letter_grade_index34\
    \ = 0;\n    let mut current_letter_grade_index35 = 0;\n    let mut current_letter_grade_index36\
    \ = 0;\n    let mut current_letter_grade_index37 = 0;\n    let mut current_letter_grade_index38\
    \ = 0;\n    let mut current_letter_grade_index39 = 0;\n    let mut current_letter_grade_index40\
    \ = 0;\n    let mut current_letter_grade_index41 = 0;\n    let mut current_letter_grade_index42\
    \ = 0;\n    let mut current_letter_grade_index43 = 0;\n    let mut current_letter_grade_index44\
    \ = 0;\n    let mut current_letter_grade_index45 = 0;\n    let mut current_letter_grade_index46\
    \ = 0;\n    let mut current_letter_grade_index47 = 0;\n    let mut current_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk5oco0z7.rs:74:21\n   |\n\
    74 |     let mut current_\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk5oco0z7.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut letter_grade = String::new();\n    while gpa > 0.0 {\n        if\
    \ gpa > 3.0 {\n            letter_grade += \"A+\";\n            gpa -= 3.0;\n\
    \        } else if gpa > 2.7 {\n            letter_grade += \"B+\";\n        \
    \    gpa -= 2.7;\n        } else if gpa > 2.3 {\n            letter_grade += \"\
    B-\";\n            gpa -= 2.3;\n        } else if gpa > 1.7 {\n            letter_grade\
    \ += \"C+\";\n            gpa -= 1.7;\n        } else if gpa > 1.3 {\n       \
    \     letter_grade += \"C-\";\n            gpa -= 1.3;\n        } else if gpa\
    \ > 1.0 {\n            letter_grade += \"D+\";\n            gpa -= 1.0;\n    \
    \    } else if gpa > 0.7 {\n            letter_grade += \"D\";\n            gpa\
    \ -= 0.7;\n        } else if gpa > 0.0 {\n            letter_grade += \"D-\";\n\
    \            gpa -= 0.0;\n        } else {\n            letter_grade += \"E\"\
    ;\n            gpa -= 0.0;\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpj9iabk3u.rs:24:9\n\
    \   |\n24 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade_index\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2c_9b48h.rs:74:39\n   |\n\
    74 |     let mut current_letter_grade_index\n   |                            \
    \           ^ help: add `;` here\n75 | }\n   | - unexpected token\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp2c_9b48h.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c_9b48h.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.1 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.1 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -1.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -1.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -2.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -3.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -3.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -4.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -4.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -5.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -5.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -6.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -6.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -7.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -7.7 {\n            grades_string.push_str(\"\
    B-\");\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpq6hf0puy.rs:90:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_string = String::new();\n24 |     for grade in grades\
    \ {\n   |                         - unclosed delimiter\n...\n77 |         } else\
    \ if grade > -7.7 {\n   |                                - this delimiter might\
    \ not be properly closed...\n...\n80 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n90 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq6hf0puy.rs:24:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n23 |      \
    \ let mut grades_string = String::new();\n24 | /     for grade in grades {\n25\
    \ | |         if grade > 3.0 {\n26 | |             grades_string.push_str(\"B-\"\
    );\n27 | |         } else if grade > 2.7 {\n...  |\n89 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n90 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_copy\
    \ = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n   \
    \ let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpemkeoplx.rs:69:32\n   |\n\
    69 |     let mut grades_copy = grade\n   |                                ^ help:\
    \ add `;` here\n70 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `grade` in this scope\n  --> /tmp/tmpemkeoplx.rs:69:27\n   |\n69 |     let mut\
    \ grades_copy = grade\n   |                           ^^^^^ help: a local variable\
    \ with a similar name exists: `grades`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpemkeoplx.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n    }\n    let mut total_grade_div: f64 = total_grade / grades.len();\n\
    \    let mut total_grade_div_2: f64 = total_grade_div * total_grade_div;\n   \
    \ let mut total_grade_div_3: f64 = total_grade_div_2 * total_grade_div;\n    let\
    \ mut total_grade_div_4: f64 = total_grade_div_3 * total_grade_div;\n    let mut\
    \ total_grade_div_5: f64 = total_grade_div_4 * total_grade_div;\n    let mut total_grade_div_6:\
    \ f64 = total_grade_div_5 * total_grade_div;\n    let mut total_grade_div_7: f64\
    \ = total_grade_div_6 * total_grade_div;\n    let mut total_grade_div_8: f64 =\
    \ total_grade_div_7 * total_grade_div;\n    let mut total_grade_div_9: f64 = total_grade_div_8\
    \ * total_grade_div;\n    let mut total_grade_div_10: f64 = total_grade_div_9\
    \ * total_grade_div;\n    let mut total_grade_div_11: f64 = total_grade_div_10\
    \ * total_grade_div;\n    let mut total_grade_div_12: f64 = total_grade_div_11\
    \ * total_grade_div;\n    let mut total_grade_div_13: f64 = total_grade_div_12\
    \ * total_grade_div;\n    let mut total_grade_div_14: f64 = total_grade_div_13\
    \ * total_grade_div;\n    let mut total_grade_div_15: f64 = total_grade_div_14\
    \ * total_grade_div;\n    let mut total_grade_div_16: f64 = total_grade_div_15\
    \ * total_grade_div;\n    let mut total_grade_div_17: f64 = total_grade_div_16\
    \ * total_grade_div;\n    let mut total_grade_div_18: f64 = total_grade_div_17\
    \ * total_grade_div;\n    let mut total_grade_div_19: f64 = total_grade_div_18\
    \ * total_grade_div;\n    let mut total_grade_div_20: f64 = total_grade_div_19\
    \ * total_grade_div;\n    let mut \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmprpw0fxyg.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected identifier\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n  --> /tmp/tmprpw0fxyg.rs:28:48\n   |\n28 |     let mut total_grade_div:\
    \ f64 = total_grade / grades.len();\n   |                                    \
    \            ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut gpa_sum = 0;\n    let mut gpa_sum2 = 0;\n    let mut gpa_sum3 = 0;\n\
    \    let mut gpa_sum4 = 0;\n    let mut gpa_sum5 = 0;\n    let mut gpa_sum6 =\
    \ 0;\n    let mut gpa_sum7 = 0;\n    let mut gpa_sum8 = 0;\n    let mut gpa_sum9\
    \ = 0;\n    let mut gpa_sum10 = 0;\n    let mut gpa_sum11 = 0;\n    let mut gpa_sum12\
    \ = 0;\n    let mut gpa_sum13 = 0;\n    let mut gpa_sum14 = 0;\n    let mut gpa_sum15\
    \ = 0;\n    let mut gpa_sum16 = 0;\n    let mut gpa_sum17 = 0;\n    let mut gpa_sum18\
    \ = 0;\n    let mut gpa_sum19 = 0;\n    let mut gpa_sum20 = 0;\n    let mut gpa_sum21\
    \ = 0;\n    let mut gpa_sum22 = 0;\n    let mut gpa_sum23 = 0;\n    let mut gpa_sum24\
    \ = 0;\n    let mut gpa_sum25 = 0;\n    let mut gpa_sum26 = 0;\n    let mut gpa_sum27\
    \ = 0;\n    let mut gpa_sum28 = 0;\n    let mut gpa_sum29 = 0;\n    let mut gpa_sum30\
    \ = 0;\n    let mut gpa_sum31 = 0;\n    let mut gpa_sum32 = 0;\n    let mut gpa_sum33\
    \ = 0;\n    let mut gpa_sum34 = 0;\n    let mut gpa_sum35 = 0;\n    let mut gpa_sum36\
    \ = 0;\n    let mut gpa_sum37 = 0;\n    let mut gpa_sum38 = 0;\n    let mut gpa_sum39\
    \ = 0;\n    let mut gpa_sum40 = 0;\n    let mut gpa_sum41 = 0;\n    let mut gpa_sum42\
    \ = 0;\n    let mut gpa_sum43 = 0;\n    let mut gpa_sum44 = 0;\n    let mut gpa_sum45\
    \ = 0;\n    let mut gpa_sum46 = 0;\n    let mut gpa_sum47 = 0;\n    let mut gpa_sum48\
    \ = 0;\n    let mut gpa_sum49 = 0;\n    let mut gpa_sum50 = 0;\n    let mut gpa_sum51\
    \ = 0;\n    let mut gpa_sum52 = 0;\n    let mut gpa_sum53 = 0;\n    let mut gpa_sum54\
    \ = 0;\n    let mut gpa_sum55 = 0;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3mzty1m.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"A\";\n        } else if grade > 2.7 {\n       \
    \     letter_grade += \"B\";\n        } else if grade > 2.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade > 1.7 && grade < 2.0 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.3 && grade < 1.7 {\n            letter_grade\
    \ += \"C-\";\n        } else if grade > 1.0 {\n            letter_grade += \"\
    D\";\n        } else if grade > 0.7 {\n            letter_grade += \"D+\";\n \
    \       } else {\n            letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"D\", \"D\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpvxa0gvr9.rs:50:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_grade\
    \ = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n  \
    \  let mut current_grade = grades.iter().sum();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade = String\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkak3ffno.rs:65:42\n   |\n\
    65 |     let mut current_letter_grade = String\n   |                         \
    \                 ^ help: add `;` here\n66 | }\n   | - unexpected token\n\nerror[E0423]:\
    \ expected value, found struct `String`\n   --> /tmp/tmpkak3ffno.rs:65:36\n  \
    \  |\n65  |       let mut current_letter_grade = String\n    |               \
    \                       ^^^^^^ help: use struct literal syntax instead: `String\
    \ { vec: val }`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkak3ffno.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0423.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpa =\
    \ grades.iter().sum();\n    while gpa > 0.0 {\n        let letter_grade = match\
    \ gpa % 10.0 {\n            0.0 => \"E\",\n            0.1 => \"D-\", \n     \
    \       0.2 => \"D+\",\n            0.3 => \"D\",\n            0.4 => \"C-\",\n\
    \            0.5 => \"C+\",\n            0.6 => \"C\",\n            0.7 => \"\
    B-\",\n            0.8 => \"B+\",\n            0.9 => \"B\",\n            1.0\
    \ => \"A-\",\n            1.1 => \"A+\",\n            1.2 => \"A\",\n        \
    \    1.3 => \"A+\",\n            1.4 => \"A\",\n            1.5 => \"A+\",\n \
    \           1.6 => \"A\",\n            1.7 => \"A+\",\n            1.8 => \"A\"\
    ,\n            1.9 => \"A+\",\n            2.0 => \"A\",\n            2.1 => \"\
    A+\",\n            2.2 => \"A\",\n            2.3 => \"A+\",\n            2.4\
    \ => \"A\",\n            2.5 => \"A+\",\n            2.6 => \"A\",\n         \
    \   2.7 => \"A+\",\n            2.8 => \"A\",\n            2.9 => \"A+\",\n  \
    \          3.0 => \"A\",\n            3.1 => \"A+\",\n            3.2 => \"A\"\
    ,\n            3.3 => \"A+\",\n            3.4 => \"A\",\n            3.5 => \"\
    A+\",\n            3.6 => \"A\",\n            3.7 => \"A+\",\n            3.8\
    \ => \"A\",\n            3.9 => \"A+\",\n            4.0 => \"A\",\n         \
    \   4.1 => \"A+\",\n            4.2 => \"A\",\n            4.3 => \"A+\",\n  \
    \          4.4 => \"A\",\n            4.5 => \"A+\",\n            4.6 => \"A\"\
    ,\n            4.7 => \"A+\",\n            4.8 => \"A\",\n            4.9 => \"\
    A+\",\n            5.0 => \"A\",\n            5.1 => \"A+\",\n            5.2\
    \ => \"A\",\n            5.3 => \"A+\",\n            5.4 => \"A\",\n         \
    \   5.5 => \"A+\",\n            5.6 => \"A\",\n            5.7 => \"A+\",\n  \
    \          5.8 => \"A\",\n            5.9 => \"A+\",\n            _ => \"A\",\n\
    \        };\n        letter_grades.push(letter_grade);\n        gpa -= 10.0;\n\
    \    }\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppq3sc6ep.rs:25:5\n   |\n\
    22 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    \
    \                                              ----------- expected `Vec<String>`\
    \ because of return type\n...\n25 | /     while gpa > 0.0 {\n26 | |         let\
    \ letter_grade = match gpa % 10.0 {\n27 | |             0.0 => \"E\",\n28 | |\
    \             0.1 => \"D-\", \n...  |\n90 | |         gpa -= 10.0;\n91 | |   \
    \  }\n   | |_____^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    for grade\
    \ in grades {\n        total_grade += grade;\n        total_gpa += grade * 4.0;\n\
    \    }\n    let mut total_gpa = total_gpa / 4.0;\n    let mut total_grade = total_grade\
    \ / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n    let mut total_grade\
    \ = total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n \
    \   let mut total_grade = total_grade - total_gpa;\n    let mut total_grade =\
    \ total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n   \
    \ let mut total_grade = total_grade - total_gpa;\n    let mut total_grade = total_grade\
    \ + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n    let mut total_grade\
    \ = total_grade - total_gpa;\n    let mut total_grade = total_grade + total_gpa;\n\
    \    let mut total_grade = total_grade / 4.0;\n    let mut total_grade = total_grade\
    \ - total_gpa;\n    let mut total_grade = total_grade + total_gpa;\n    let mut\
    \ total_grade = total_grade / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n\
    \    let mut total_grade = total_grade + total_gpa;\n    let mut total_grade =\
    \ total_grade / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n   \
    \ let mut total_grade = total_grade + total_gpa;\n    let mut total_grade = total_grade\
    \ / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n    let mut total_grade\
    \ = total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n \
    \   let mut total_grade = total_grade - total_gpa;\n    let mut total_grade =\
    \ total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n   \
    \ let mut total_grade = total_grade - total_gpa;\n    let mut total_grade = total_grade\
    \ + total_gpa;\n    let mu\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpetcwju_i.rs:61:11\n   |\n\
    61 |     let mu\n   |           ^ help: add `;` here\n62 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpetcwju_i.rs:22:48\n \
    \  |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_iter.next().unwrap();\n  \
    \  let mut current_letter_grade = String::new();\n    \n    while let Some(grade)\
    \ = grades_iter.next() {\n        if grade > current_grade {\n            current_letter_grade\
    \ = current_grade.to_string();\n            current_grade = grade;\n        }\n\
    \        \n        if grade == current_grade {\n            current_letter_grade\
    \ += \"+\";\n        }\n        \n        if grade < current_grade {\n       \
    \     current_letter_grade += \"-\";\n        }\n        \n        letter_grades.push(current_letter_grade);\n\
    \    }\n    \n    letter_grades.push(current_grade.to_string());\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `current_letter_grade`\n  --> /tmp/tmpnrgdr5vf.rs:35:13\n\
    \   |\n26 |     let mut current_letter_grade = String::new();\n   |         ------------------------\
    \ move occurs because `current_letter_grade` has type `String`, which does not\
    \ implement the `Copy` trait\n...\n30 |             current_letter_grade = current_grade.to_string();\n\
    \   |             -------------------- this reinitialization might get skipped\n\
    ...\n35 |             current_letter_grade += \"+\";\n   |             ^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n...\n42 |         letter_grades.push(current_letter_grade);\n\
    \   |                            -------------------- value moved here, in previous\
    \ iteration of loop\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut letter_grade = String::new();\n    while gpa > 0.0 {\n        let\
    \ grade = gpa % 10.0;\n        gpa /= 10.0;\n        letter_grade += &format!(\"\
    {}\", grades[grade as usize]);\n    }\n    letter_grades.push(letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9trqdhm8.rs:29:47\n\
    \   |\n27 |         let grade = gpa % 10.0;\n   |             ----- consider giving\
    \ `grade` a type\n28 |         gpa /= 10.0;\n29 |         letter_grade += &format!(\"\
    {}\", grades[grade as usize]);\n   |                                         \
    \      ^^^^^ cannot infer type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_sum: f64 = grades.iter().sum();\n    let\
    \ mut grades_average: f64 = grades_sum / grades_length;\n    let mut grades_min_value:\
    \ f64 = grades.iter().min().unwrap();\n    let mut grades_max_value: f64 = grades.iter().max().unwrap();\n\
    \    let mut grades_min_grade: f64 = grades.iter().filter(|&x| x == grades_min_value).count();\n\
    \    let mut grades_max_grade: f64 = grades.iter().filter(|&x| x == grades_max_value).count();\n\
    \    let mut grades_min_grade_letter: String = String::new();\n    let mut grades_max_grade_letter:\
    \ String = String::new();\n    let mut grades_min_grade_letter_length: usize =\
    \ 0;\n    let mut grades_max_grade_letter_length: usize = 0;\n    let mut grades_min_grade_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_letter_letter_length: usize = 0;\n\
    \    let mut grades_min_grade_letter_letter_letter_length: usize = 0;\n    let\
    \ mut grades_max_grade_letter_letter_letter_length: usize = 0;\n    let mut grades_min_grade_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_min_grade_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_min_grade_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_min_grade_letter_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_letter_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_min_grade_letter_letter_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_letter_letter_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_min_grade_letter_letter_letter_letter_letter_letter_letter_letter_letter_length:\
    \ usize = 0;\n    let mut grades_max_grade_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa8bk1_l0.rs:50:30\n   |\n\
    50 |     let mut grades_max_grade_\n   |                              ^ help:\
    \ add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpa8bk1_l0.rs:26:46\n   |\n26 |     let mut grades_average:\
    \ f64 = grades_sum / grades_length;\n   |                                    \
    \          ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpa8bk1_l0.rs:27:51\n     |\n27   |     let mut grades_min_value:\
    \ f64 = grades.iter().min().unwrap();\n     |                                \
    \                   ^^^ the trait `Ord` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Ord`:\n             \
    \  i128\n               i16\n               i32\n               i64\n        \
    \       i8\n               isize\n               u128\n               u16\n  \
    \           and 4 others\n     = note: required because of the requirements on\
    \ the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa8bk1_l0.rs:27:37\n   |\n27 |\
    \     let mut grades_min_value: f64 = grades.iter().min().unwrap();\n   |    \
    \                           ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `&f64`\n   |                               |\n   |                   \
    \            expected due to this\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n27 |     let mut grades_min_value: f64 = *grades.iter().min().unwrap();\n\
    \   |                                     +\n\nerror[E0277]: "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            grades_string.push(\"B-\");\n     \
    \   } else if grade > 2.0 {\n            grades_string.push(\"B-\");\n       \
    \ } else if grade > 1.0 {\n            grades_string.push(\"B-\");\n        }\
    \ else if grade > 0.7 {\n            grades_string.push(\"B-\");\n        } else\
    \ if grade > 0.3 {\n            grades_string.push(\"B-\");\n        } else if\
    \ grade > 0.0 {\n            grades_string.push(\"B-\");\n        } else if grade\
    \ > -0.3 {\n            grades_string.push(\"B-\");\n        } else if grade >\
    \ -0.7 {\n            grades_string.push(\"B-\");\n        } else if grade > -1.0\
    \ {\n            grades_string.push(\"B-\");\n        } else if grade > -2.0 {\n\
    \            grades_string.push(\"B-\");\n        } else if grade > -3.0 {\n \
    \           grades_string.push(\"B-\");\n        } else if grade > -3.7 {\n  \
    \          grades_string.push(\"B-\");\n        } else if grade > -4.0 {\n   \
    \         grades_string.push(\"B-\");\n        } else if grade > -4.7 {\n    \
    \        grades_string.push(\"B-\");\n        } else if grade > -5.0 {\n     \
    \       grades_string.push(\"B-\");\n        } else if grade > -5.7 {\n      \
    \      grades_string.push(\"B-\");\n        } else if grade > -6.0 {\n       \
    \     grades_string.push(\"B-\");\n        } else if grade > -6.7 {\n        \
    \    grades_string.push(\"B-\");\n        } else if grade > -7.0 {\n         \
    \   grades_string.push(\"B-\");\n        } else if grade > -7.7 {\n          \
    \  grades_string.push(\"B-\");\n        } else if grade > -8.0 {\n           \
    \ grades_string.push(\"B-\");\n        } else if grade > -8.7 {\n            grades_string.push(\"\
    B-\");\n        } else if grade > -9.0 {\n            grades_string.push(\"B-\"\
    );\n        } else if grade > -9.7 {\n            grades_string.push(\"B-\");\n\
    \        } else if grade > -10.0 {\n            grades_string.push(\"B-\");\n\
    \        } else if grade > -10.7 {\n            grades_string.push(\"B-\");\n\
    \        } else if grade > -11.0 {\n            grades_\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpozc9vu4w.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_string = vec![];\n24 |     for grade in grades {\n   |\
    \                         - unclosed delimiter\n...\n77 |         } else if grade\
    \ > -11.0 {\n   |                                 - this delimiter might not be\
    \ properly closed...\n78 |             grades_\n79 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror[E0425]:\
    \ cannot find value `grades_` in this scope\n  --> /tmp/tmpozc9vu4w.rs:78:13\n\
    \   |\n78 |             grades_\n   |             ^^^^^^^ help: a local variable\
    \ with a similar name exists: `grades`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpozc9vu4w.rs:24:5\n   |\n22 |   fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                  -----------\
    \ expected `Vec<String>` because of return type\n23 |       let mut grades_string\
    \ = vec![];\n24 | /     for grade in grades {\n25 | |         if grade > 3.0 {\n\
    26 | |             grades_string.push(\"B-\");\n27 | |         } else if grade\
    \ > 2.0 {\n...  |\n88 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n89 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = Vec::new();\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsq9iy8ra.rs:74:33\n   |\n\
    74 |     let mut current_letter_grade\n   |                                 ^\
    \ help: add `;` here\n75 | }\n   | - unexpected token\n\nerror[E0277]: the trait\
    \ bound `f64: Ord` is not satisfied\n   --> /tmp/tmpsq9iy8ra.rs:24:17\n    |\n\
    24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord` is not\
    \ implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsq9iy8ra.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        grades_vec.push(match grade {\n            4.0 => \"A+\"\
    .to_string(),\n            > 3.7 => \"A\".to_string(),\n            > 3.3 => \"\
    A-\".to_string(),\n            > 3.0 => \"B+\".to_string(),\n            > 2.7\
    \ => \"B\".to_string(),\n            > 2.3 => \"B-\".to_string(),\n          \
    \  > 2.0 => \"C+\".to_string(),\n            > 1.7 => \"C\".to_string(),\n   \
    \         > 1.3 => \"C-\".to_string(),\n            > 1.0 => \"D+\".to_string(),\n\
    \            > 0.7 => \"D\".to_string(),\n            > 0.0 => \"D-\".to_string(),\n\
    \            _ => \"E\".to_string(),\n        });\n    }\n    grades_vec\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmp7tkxp4ex.rs:27:13\n \
    \  |\n27 |             > 3.7 => \"A\".to_string(),\n   |             ^ expected\
    \ pattern\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"B+\";\n        } else if grade > 2.7 {\n      \
    \      letter_grade += \"B\";\n        } else if grade > 2.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade > 1.3 {\n            letter_grade += \"\
    C+\";\n        } else if grade > 1.7 {\n            letter_grade += \"C\";\n \
    \       } else if grade > 1.0 {\n            letter_grade += \"C-\";\n       \
    \ } else if grade > 0.7 {\n            letter_grade += \"D+\";\n        } else\
    \ if grade > 0.3 {\n            letter_grade += \"D\";\n        } else if grade\
    \ > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n           \
    \ letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe1fah22_.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade: f64 =\
    \ grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n   \
    \ let mut max_grade_index: usize = 0;\n    let mut min_grade_index2: usize = 0;\n\
    \    let mut max_grade_index2: usize = 0;\n    let mut min_grade_index3: usize\
    \ = 0;\n    let mut max_grade_index3: usize = 0;\n    let mut min_grade_index4:\
    \ usize = 0;\n    let mut max_grade_index4: usize = 0;\n    let mut min_grade_index5:\
    \ usize = 0;\n    let mut max_grade_index5: usize = 0;\n    let mut min_grade_index6:\
    \ usize = 0;\n    let mut max_grade_index6: usize = 0;\n    let mut min_grade_index7:\
    \ usize = 0;\n    let mut max_grade_index7: usize = 0;\n    let mut min_grade_index8:\
    \ usize = 0;\n    let mut max_grade_index8: usize = 0;\n    let mut min_grade_index9:\
    \ usize = 0;\n    let mut max_grade_index9: usize = 0;\n    let mut min_grade_index10:\
    \ usize = 0;\n    let mut max_grade_index10: usize = 0;\n    let mut min_grade_index11:\
    \ usize = 0;\n    let mut max_grade_index11: usize = 0;\n    let mut min_grade_index12:\
    \ usize = 0;\n    let mut max_grade_index12: usize = 0;\n    let mut min_grade_index13:\
    \ usize = 0;\n    let mut max_grade_index13: usize = 0;\n    let mut min_grade_index14:\
    \ usize = 0;\n    let mut max_grade_index14: usize = 0;\n    let mut min_grade_index15:\
    \ usize = 0;\n    let mut max_grade_index15: usize = 0;\n    let mut min_grade_index16:\
    \ usize = 0;\n    let mut max_grade_index16: usize = 0;\n    let mut min_grade_index17:\
    \ usize = 0;\n    let mut max_grade_index17: usize = 0;\n    let mut min_grade_index18:\
    \ usize = 0;\n    let mut max_grade_index18: usize = 0;\n    let mut min_grade_index19:\
    \ usize = 0;\n    let mut max_grade_index19: usize = 0;\n    let mut min_grade_index20:\
    \ usize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp49h_3mol.rs:65:11\n   |\n\
    65 |     let mu\n   |           ^ help: add `;` here\n66 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    -->\
    \ /tmp/tmp49h_3mol.rs:24:44\n     |\n24   |     let mut min_grade: f64 = grades.iter().min().unwrap();\n\
    \     |                                            ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49h_3mol.rs:24:30\n\
    \   |\n24 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     let\
    \ mut min_grade: f64 = *grades.iter().min().unwrap();\n   |                  \
    \            +\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmp49h_3mol.rs:25:44\n     |\n25   |     let mut max_grade: f64\
    \ = grades.iter().max().unwrap();\n     |                                    \
    \        ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help:\
    \ the following other types implement trait `Ord`:\n               i128\n    \
    \           i16\n               i32\n               i64\n               i8\n \
    \              isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp49h_3mol.rs:25:30\n   |\n25 |     let mut max_grade:\
    \ f64 = grades.iter().max().unwrap();\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade > 2.7 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade > 2.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.3 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    D-\");\n        } else {\n            grades_string.push_str(\"E\");\n       \
    \ }\n    }\n    grades_string.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp15npuyqr.rs:45:19\n    |\n45\
    \  |       grades_string.into_iter().collect()\n    |                     ^^^^^^^^^\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            grades_string.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            grades_string.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            grades_string.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            grades_string.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            grades_string.push(\"C\");\n        } else if grade\
    \ > 1.3 {\n            grades_string.push(\"C-\");\n        } else if grade >\
    \ 1.0 {\n            grades_string.push(\"D+\");\n        } else if grade > 0.7\
    \ {\n            grades_string.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            grades_string.push(\"D-\");\n        } else {\n            grades_string.push(\"\
    E\");\n        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1nhv3sjn.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     grades_string\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    while current_grade\
    \ > 0.0 {\n        if current_grade < 3.0 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 3.3 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 3.7 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 4.0 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 4.3 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 4.7 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 5.0 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 5.3 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 5.7 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 6.0 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 6.3 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 6.7 {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"-\";\n            current_letter_grade_index\
    \ += 1;\n        } else if current_grade < 7.0 {\n            current_letter_grade\
    \ = current_letter_grade.to_string(\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz6asqsj1.rs:81:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n32 |     while current_grade > 0.0 {\n   |                              \
    \ - unclosed delimiter\n...\n69 |         } else if current_grade < 7.0 {\n  \
    \ |                                       - this delimiter might not be properly\
    \ closed...\n70 |             current_letter_grade = current_letter_grade.to_string(\n\
    71 | }\n   | - ...as it matches this but it has different indentation\n...\n81\
    \ | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpz6asqsj1.rs:70:66\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n70 |             current_letter_grade = current_letter_grade.to_string(\n\
    \   |                                                                  ^ unclosed\
    \ delimiter\n71 | }\n   | ^ mismatched closing delimiter\n\nerror[E0277]: the\
    \ trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpz6asqsj1.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz6asqsj1.rs:32:5\n\
    \   |\n22 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n32 | /     while current_grade > 0.0 {\n33 | |\
    \         if current_grade < 3.0 {\n34 | |             current_letter_grade =\
    \ current_letter_grade.to_string() + &\"-\";\n35 | |             current_letter_grade_ind"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_sorted\
    \ = grades_copy.clone();\n    grades_sorted.sort();\n    let mut grades_len =\
    \ grades_sorted.len();\n    let mut grades_index = 0;\n    let mut grades_sum\
    \ = 0;\n    let mut grades_average = 0;\n    let mut grades_letter_grade = Vec::new();\n\
    \    while grades_index < grades_len {\n        grades_sum += grades_sorted[grades_index];\n\
    \        grades_index += 1;\n    }\n    grades_average = grades_sum / grades_len;\n\
    \    let mut grades_letter_grade = Vec::new();\n    while grades_index < grades_len\
    \ {\n        let grade = grades_sorted[grades_index];\n        if grade > grades_average\
    \ {\n            grades_letter_grade.push(\"A+\");\n        } else if grade <\
    \ grades_average {\n            grades_letter_grade.push(\"A-\");\n        } else\
    \ {\n            grades_letter_grade.push(\"B+\");\n        }\n        grades_index\
    \ += 1;\n    }\n    grades_letter_grade\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpipoka51s.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpipoka51s.rs:32:20\n   |\n32 |         grades_sum += grades_sorted[grades_index];\n\
    \   |                    ^^ no implementation for `{integer} += f64`\n   |\n \
    \  = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \     <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n            \
    \ <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpipoka51s.rs:39:20\n   |\n39 |\
    \         if grade > grades_average {\n   |                    ^^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n39 |         if grade > grades_average as f64 {\n   |                 \
    \                  ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpipoka51s.rs:41:27\n\
    \   |\n41 |         } else if grade < grades_average {\n   |                 \
    \          ^^^^^^^^^^^^^^ expected `f64`, found `usize`\n   |\nhelp: you can cast\
    \ a `usize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n41 |         } else if grade < grades_average as\
    \ f64 {\n   |                                          ++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_gpa: f64 = 0.0;\n    for grade in grades {\n        total_gpa += grade;\n\
    \    }\n    let mut total_gpa_rounded: f64 = total_gpa.round();\n    let mut total_gpa_rounded_int:\
    \ i32 = total_gpa_rounded.round() as i32;\n    let mut total_gpa_rounded_int_div:\
    \ f64 = total_gpa_rounded_int / 10;\n    let mut total_gpa_rounded_int_div_int:\
    \ i32 = total_gpa_rounded_int_div.round() as i32;\n    let mut total_gpa_rounded_int_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_int / 10;\n    let mut total_gpa_rounded_int_div_div_div_int:\
    \ i32 = total_gpa_rounded_int_div_div_int.round() as i32;\n    let mut total_gpa_rounded_int_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_int.round() as i32;\n    let mut total_gpa_rounded_int_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_int.round() as i32;\n    let mut\
    \ total_gpa_rounded_int_div_div_div_div_div_div_int: f64 = total_gpa_rounded_int_div_div_div_div_div_div_int.round()\
    \ as i32;\n    let mut total_gpa_rounded_int_div_div_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_div_int.round() as i32;\n\
    \    let mut total_gpa_rounded_int_div_div_div_div_div_div_div_div_int: f64 =\
    \ total_gpa_rounded_int_div_div_div_div_div_div_div_div_int.round() as i32;\n\
    \    let mut total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_int.round()\
    \ as i32;\n    let mut total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_int.round()\
    \ as i32;\n    let mut total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp500arrxd.rs:41:144\n   |\n\
    41 |     let mut total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_\n   |                 \
    \                                                                            \
    \                                                   ^ help: add `;` here\n42 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `total_gpa_rounded_int_div_div_div_div_div_div_int`\
    \ in this scope\n  --> /tmp/tmp500arrxd.rs:36:70\n   |\n36 |     let mut total_gpa_rounded_int_div_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_int.round() as i32;\n  \
    \ |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `total_gpa_rounded_int_div_div_div_div_div_int`\n\
    \nerror[E0425]: cannot find value `total_gpa_rounded_int_div_div_div_div_div_div_div_int`\
    \ in this scope\n  --> /tmp/tmp500arrxd.rs:37:74\n   |\n37 | ...v_div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_div_int.round() as i32;\n\
    \   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `total_gpa_rounded_int_div_div_div_div_div_div_int`\n\
    \nerror[E0425]: cannot find value `total_gpa_rounded_int_div_div_div_div_div_div_div_div_int`\
    \ in this scope\n  --> /tmp/tmp500arrxd.rs:38:78\n   |\n38 | ...div_div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_div_div_div_div_div_int.round() as i32;\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `total_gpa_rounded_int_div_div_div_div_div_div_div_int`\n\
    \nerror[E0425]: cannot find value `total_gpa_rounded_int_div_div_div_div_div_div_div_div_div_div_int`\
    \ in this scope\n  --> /tmp/tmp500arrxd.rs:39:86\n   |\n39 | ...div_div_div_div_int:\
    \ f64 = total_gpa_rounded_int_div_div_div_"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut grades_vec: Vec<String> = grades.iter().map(|x| {\n        let mut grade:\
    \ String = String::new();\n        if x > 3.0 {\n            grade += \"B-\";\n\
    \        } else if x > 2.7 {\n            grade += \"B-\";\n        } else if\
    \ x > 2.3 {\n            grade += \"B-\";\n        } else if x > 2.0 {\n     \
    \       grade += \"B-\";\n        } else if x > 1.7 {\n            grade += \"\
    B-\";\n        } else if x > 1.3 {\n            grade += \"B-\";\n        } else\
    \ if x > 1.0 {\n            grade += \"B-\";\n        } else if x > 0.7 {\n  \
    \          grade += \"B-\";\n        } else if x > 0.0 {\n            grade +=\
    \ \"B-\";\n        } else if x > -3.0 {\n            grade += \"B-\";\n      \
    \  } else if x > -2.7 {\n            grade += \"B-\";\n        } else if x > -2.3\
    \ {\n            grade += \"B-\";\n        } else if x > -2.0 {\n            grade\
    \ += \"B-\";\n        } else if x > -1.7 {\n            grade += \"B-\";\n   \
    \     } else if x > -1.3 {\n            grade += \"B-\";\n        } else if x\
    \ > -1.0 {\n            grade += \"B-\";\n        } else if x > -0.7 {\n     \
    \       grade += \"B-\";\n        } else if x > 0.0 {\n            grade += \"\
    B-\";\n        } else if x > 3.0 {\n            grade += \"B-\";\n        } else\
    \ if x > 3.7 {\n            grade += \"B-\";\n        } else if x > 3.3 {\n  \
    \          grade += \"B-\";\n        } else if x > 3.0 {\n            grade +=\
    \ \"B-\";\n        } else if x > 2.7 {\n            grade += \"B-\";\n       \
    \ } else if x > 2.3 {\n            grade += \"B-\";\n        } else if x > 2.0\
    \ {\n            grade += \"B-\";\n        } else if x > 1.7 {\n            grade\
    \ += \"B-\";\n        } else if x > 1.3 {\n            grade += \"B-\";\n    \
    \    } else if x > 1.0 {\n            grade += \"B-\";\n        } else if x >\
    \ 0.7 {\n            grade += \"B-\";\n        } else if x > 0.0 {\n         \
    \   grade += \"B-\";\n        } else if x > -3.0 {\n            grade += \"B-\"\
    ;\n        } else if x > -2.7 {\n            grade += \"B-\";\n        } else\
    \ if x > -2.3 {\n            gra\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp2nmc69rq.rs:102:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    23  |     let mut grades_vec: Vec<String> = Vec::new();\n24  |     let mut grades_vec:\
    \ Vec<String> = grades.iter().map(|x| {\n    |                               \
    \                         -    - unclosed delimiter\n    |                   \
    \                                     |\n    |                               \
    \                         unclosed delimiter\n...\n90  |         } else if x >\
    \ -2.3 {\n    |                            - this delimiter might not be properly\
    \ closed...\n91  |             gra\n92  | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n102 | }\n    |   ^\n\nerror: expected one\
    \ of `.`, `;`, `?`, `else`, or an operator, found `}`\n   --> /tmp/tmp2nmc69rq.rs:102:3\n\
    \    |\n102 | }\n    |   ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = grades.iter().sum();\n    let mut total_grade_rounded: f64\
    \ = total_grade as f64;\n    let mut total_grade_rounded_int: i32 = total_grade_rounded.round()\
    \ as i32;\n    let mut total_grade_rounded_float = total_grade_rounded.round()\
    \ as f64;\n    let mut total_grade_rounded_float_int: i32 = total_grade_rounded_float.round()\
    \ as i32;\n    let mut total_grade_rounded_float_float = total_grade_rounded_float.round()\
    \ as f64;\n    let mut total_grade_rounded_float_float_int: i32 = total_grade_rounded_float_float.round()\
    \ as i32;\n    let mut total_grade_rounded_float_float_float = total_grade_rounded_float_float.round()\
    \ as f64;\n    let mut total_grade_rounded_float_float_float_int: i32 = total_grade_rounded_float_float_float.round()\
    \ as i32;\n    let mut total_grade_rounded_float_float_float_float = total_grade_rounded_float_float_float.round()\
    \ as f64;\n    let mut total_grade_rounded_float_float_float_float_int: i32 =\
    \ total_grade_rounded_float_float_float_float.round() as i32;\n    let mut total_grade_rounded_float_float_float_float_float\
    \ = total_grade_rounded_float_float_float_float.round() as f64;\n    let mut total_grade_rounded_float_float_float_float_float_int:\
    \ i32 = total_grade_rounded_float_float_float_float_float.round() as i32;\n  \
    \  let mut total_grade_rounded_float_float_float_float_float_float = total_grade_rounded_float_float_float_float_float.round()\
    \ as f64;\n    let mut total_grade_rounded_float_float_float_float_float_float_int:\
    \ i32 = total_grade_rounded_float_float_float_float_float_float.round() as i32;\n\
    \    let mut total_grade_rounded_float_float_float_float_float_float_float = total_grade_rounded_float_float_float_float_float_float.round()\
    \ as f64;\n    let mut total_grade_rounded_float_float_float_float_float_float_float_int:\
    \ i32 = total_grade_rounded_float_float_float_float_float_float_float.round()\
    \ as i32;\n    let mut total_grade_rounded_float_float_float_float_float_float_float_float_float\
    \ = total_grade_rounded_float_float_float_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsbqapeqn.rs:41:127\n   |\n\
    41 |     let mut total_grade_rounded_float_float_float_float_float_float_float_float_float\
    \ = total_grade_rounded_float_float_float_\n   |                             \
    \                                                                            \
    \                      ^ help: add `;` here\n42 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `total_grade_rounded_float_float_float_` in\
    \ this scope\n  --> /tmp/tmpsbqapeqn.rs:41:89\n   |\n41 |     let mut total_grade_rounded_float_float_float_float_float_float_float_float_float\
    \ = total_grade_rounded_float_float_float_\n   |                             \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `total_grade_rounded_float_float_float`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsbqapeqn.rs:22:48\n   |\n22 |\
    \ fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut gpa = grades_iter.next().unwrap();\n    let mut letter_grade\
    \ = String::new();\n    while let Some(grade) = grades_iter.next() {\n       \
    \ if grade > gpa {\n            letter_grade += \"A\";\n            letter_grade\
    \ += \"+\";\n            letter_grades.push(letter_grade);\n            gpa =\
    \ grade;\n            letter_grade = String::new();\n        }\n        if grade\
    \ < gpa {\n            letter_grade += \"B\";\n            letter_grade += \"\
    +\";\n            letter_grades.push(letter_grade);\n            gpa = grade;\n\
    \            letter_grade = String::new();\n        }\n        if grade == gpa\
    \ {\n            letter_grade += \"C\";\n            letter_grade += \"+\";\n\
    \            letter_grades.push(letter_grade);\n            gpa = grade;\n   \
    \         letter_grade = String::new();\n        }\n        if grade < gpa {\n\
    \            letter_grade += \"D\";\n            letter_grade += \"+\";\n    \
    \        letter_grades.push(letter_grade);\n            gpa = grade;\n       \
    \     letter_grade = String::new();\n        }\n        if grade > gpa {\n   \
    \         letter_grade += \"E\";\n            letter_grade += \"+\";\n       \
    \     letter_grades.push(letter_grade);\n            gpa = grade;\n          \
    \  letter_grade = String::new();\n        }\n    }\n    letter_grades.push(letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"C+\", \"B+\", \"C+\", \"A+\", \"C+\", \"A+\", \"C+\", \"\"]`,\n\
    \ right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp5pmbc0jb.rs:70:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut grade = grades_copy.iter().sum();\n    let mut current_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = String::new();\n\
    \    \n    while grade > 0.0 {\n        if grade < current_grade {\n         \
    \   current_letter_grade += &\"D-\";\n            current_grade = grade;\n   \
    \     }\n        \n        if grade == current_grade {\n            if grade <\
    \ current_grade {\n                current_letter_grade += &\"D+\";\n        \
    \        current_grade = grade;\n            }\n            \n            if grade\
    \ == current_grade {\n                if grade < current_grade {\n           \
    \         current_letter_grade += &\"D\";\n                    current_grade =\
    \ grade;\n                }\n                \n                if grade == current_grade\
    \ {\n                    if grade < current_grade {\n                        current_letter_grade\
    \ += &\"C\";\n                        current_grade = grade;\n               \
    \     }\n                    \n                    if grade == current_grade {\n\
    \                        if grade < current_grade {\n                        \
    \    current_letter_grade += &\"C+\";\n                            current_grade\
    \ = grade;\n                        }\n                        \n            \
    \            if grade == current_grade {\n                            if grade\
    \ < current_grade {\n                                current_letter_grade += &\"\
    B-\";\n                                current_grade = grade;\n              \
    \              }\n                            \n                            if\
    \ grade == current_grade {\n                                if grade < current_grade\
    \ {\n                                    current_letter_grade += &\"B+\";\n  \
    \                                  current_grade = grade;\n                  \
    \              }\n                                \n                         \
    \       if grade == current_grade {\n                                    if grade\
    \ < current_grade {\n                                        current_letter_grade\
    \ += &\"B\";\n                                        current_grade = grade;\n\
    \                                    }\n                                    \n\
    \                                    if grade == current_grade {\n           \
    \                             if grade < current_grade {\n                   \
    \                         current_letter_grade += &\"B-\";\n                 \
    \                           current_grade = grade;\n                         \
    \               }\n                                        \n                \
    \                        if grade == current_grade {\n                       \
    \                     if grade < current_grade {\n                           \
    \                     current_letter_grade += &\"B+\";\n                     \
    \                           current_grade = grade;\n                         \
    \                   }\n                                            \n        \
    \                                    if grade == current_grade {\n           \
    \                                     if grade < current_grade {\n           \
    \                                         current_letter_grade += &\"B\";\n  \
    \                                                  current_grade = grade;\n  \
    \                                              }\n                           \
    \                     \n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmprgecv9py.rs:106:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n29  |     while grade > 0.0 {\n    |                       - unclosed delimiter\n\
    ...\n35  |         if grade == current_grade {\n    |                        \
    \           - unclosed delimiter\n...\n41  |             if grade == current_grade\
    \ {\n    |                                       - unclosed delimiter\n...\n47\
    \  |                 if grade == current_grade {\n    |                      \
    \                     - unclosed delimiter\n...\n53  |                     if\
    \ grade == current_grade {\n    |                                            \
    \   - unclosed delimiter\n...\n59  |                         if grade == current_grade\
    \ {\n    |                                                   - unclosed delimiter\n\
    ...\n65  |                             if grade == current_grade {\n    |    \
    \                                                   - unclosed delimiter\n...\n\
    71  |                                 if grade == current_grade {\n    |     \
    \                                                      - unclosed delimiter\n\
    ...\n77  |                                     if grade == current_grade {\n \
    \   |                                                               - unclosed\
    \ delimiter\n...\n83  |                                         if grade == current_grade\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n89  |                                             if\
    \ grade == current_grade {\n    |                                            \
    \                           - this delimiter might not be properly closed...\n\
    ...\n96  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n106 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmprgecv9py.rs:29:5\n\
    \    |\n22  |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n\
    \    |                          "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut min_grade = grades_copy[0];\n    let mut max_grade =\
    \ grades_copy[0];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy[0];\n    let mut \n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptldbuf0p.rs:67:1\n\
    \   |\n67 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzak6f_iu.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut min_grade = grades_copy.iter().min();\n    let mut max_grade\
    \ = grades_copy.iter().max();\n    let mut min_grade_index = grades_copy.iter().position(|x|\
    \ x == min_grade).unwrap();\n    let mut max_grade_index = grades_copy.iter().position(|x|\
    \ x == max_grade).unwrap();\n    let mut current_grade = grades_copy[min_grade_index];\n\
    \    let mut current_index = min_grade_index;\n    while current_index < max_grade_index\
    \ {\n        if current_grade < grades_copy[current_index] {\n            current_grade\
    \ += 1;\n            current_index = grades_copy.iter().position(|x| x == current_grade).unwrap();\n\
    \        } else {\n            letter_grades.push(current_grade.to_string());\n\
    \            current_grade = grades_copy[current_index];\n            current_index\
    \ = grades_copy.iter().position(|x| x == current_grade).unwrap();\n        }\n\
    \    }\n    letter_grades.push(current_grade.to_string());\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpn__raqf4.rs:25:44\n\
    \     |\n25   |     let mut min_grade = grades_copy.iter().min();\n     |    \
    \                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpn__raqf4.rs:26:44\n\
    \     |\n26   |     let mut max_grade = grades_copy.iter().max();\n     |    \
    \                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpn__raqf4.rs:27:65\n\
    \   |\n27 |     let mut min_grade_index = grades_copy.iter().position(|x| x ==\
    \ min_grade).unwrap();\n   |                                                 \
    \                ^^ no implementation for `&f64 == Option<&f64>`\n   |\n   = help:\
    \ the trait `PartialEq<Option<&f64>>` is not implemented for `&f64`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpn__raqf4.rs:28:65\n\
    \   |\n28 |     let mut max_grade_index = grades_copy.ite"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpll6rcn2t.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades_copy.len();\n    let mut grades_sum = 0.0;\n    let mut grades_min_len\
    \ = grades_len;\n    let mut grades_max_len = grades_len;\n    let mut grades_min_sum\
    \ = 0.0;\n    let mut grades_max_sum = 0.0;\n    let mut grades_min_gpa = grades_copy[0];\n\
    \    let mut grades_max_gpa = grades_copy[0];\n    let mut grades_min_gpa_sum\
    \ = 0.0;\n    let mut grades_max_gpa_sum = 0.0;\n    let mut grades_min_gpa_len\
    \ = grades_len;\n    let mut grades_max_gpa_len = grades_len;\n    let mut grades_min_gpa_gpa\
    \ = grades_copy[0];\n    let mut grades_max_gpa_gpa = grades_copy[0];\n    let\
    \ mut grades_min_gpa_gpa_sum = 0.0;\n    let mut grades_max_gpa_gpa_sum = 0.0;\n\
    \    let mut grades_min_gpa_gpa_len = grades_len;\n    let mut grades_max_gpa_gpa_len\
    \ = grades_len;\n    let mut grades_min_gpa_gpa_gpa = grades_copy[0];\n    let\
    \ mut grades_max_gpa_gpa_gpa = grades_copy[0];\n    let mut grades_min_gpa_gpa_gpa_sum\
    \ = 0.0;\n    let mut grades_max_gpa_gpa_gpa_sum = 0.0;\n    let mut grades_min_gpa_gpa_gpa_len\
    \ = grades_len;\n    let mut grades_max_gpa_gpa_gpa_len = grades_len;\n    let\
    \ mut grades_min_gpa_gpa_gpa_gpa = grades_copy[0];\n    let mut grades_max_gpa_gpa_gpa_gpa\
    \ = grades_copy[0];\n    let mut grades_min_gpa_gpa_gpa_gpa_sum = 0.0;\n    let\
    \ mut grades_max_gpa_gpa_gpa_gpa_sum = 0.0;\n    let mut grades_min_gpa_gpa_gpa_gpa_len\
    \ = grades_len;\n    let mut grades_max_gpa_gpa_gpa_gpa_len = grades_len;\n  \
    \  let mut grades_min_gpa_gpa_gpa_gpa_gpa = grades_copy[0];\n    let mut grades_max_gpa_gpa_gpa_gpa_gpa\
    \ = grades_copy[0];\n    let mut grades_min_gpa_gpa_g\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpghvji8if.rs:56:33\n   |\n\
    56 |     let mut grades_min_gpa_gpa_g\n   |                                 ^\
    \ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpghvji8if.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmprqv18pns.rs:47:1\n   |\n46 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    47 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n46 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy.pop().unwrap();\n    let\
    \ mut current_letter_grade = String::new();\n    \n    while grades_copy.len()\
    \ > 0 {\n        let mut next_grade = grades_copy.pop().unwrap();\n        if\
    \ next_grade > current_grade {\n            current_letter_grade += \"A\";\n \
    \       } else if next_grade < current_grade {\n            current_letter_grade\
    \ += \"B\";\n        } else if next_grade == current_grade {\n            current_letter_grade\
    \ += \"C\";\n        } else if next_grade < current_grade {\n            current_letter_grade\
    \ += \"D\";\n        } else {\n            current_letter_grade += \"E\";\n  \
    \      }\n        current_grade = next_grade;\n    }\n    \n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"BBAA\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpbrs84jf2.rs:50:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade < 3.7 {\n            grades_string.push_str(\"\
    A\");\n        } else if grade < 4.0 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade < 4.7 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade < 5.0 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade < 5.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade < 6.0 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade < 6.7 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade < 7.0 {\n            grades_string.push_str(\"\
    C-\");\n        } else if grade < 7.7 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade < 8.0 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade < 8.7 {\n            grades_string.push_str(\"\
    D-\");\n        } else if grade < 9.0 {\n            grades_string.push_str(\"\
    E\");\n        } else {\n            grades_string.push_str(\"F\");\n        }\n\
    \    }\n    grades_string.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmprtcgdqu7.rs:55:19\n    |\n55\
    \  |       grades_string.into_iter().collect()\n    |                     ^^^^^^^^^\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        let grade = grade as f64;\n        if grade < 3.0 {\n           \
    \ grades_string.push(\"A+\");\n        } else if grade < 3.3 {\n            grades_string.push(\"\
    A\");\n        } else if grade < 3.7 {\n            grades_string.push(\"A-\"\
    );\n        } else if grade < 4.0 {\n            grades_string.push(\"B+\");\n\
    \        } else if grade < 4.3 {\n            grades_string.push(\"B\");\n   \
    \     } else if grade < 4.7 {\n            grades_string.push(\"B-\");\n     \
    \   } else if grade < 5.0 {\n            grades_string.push(\"C+\");\n       \
    \ } else if grade < 5.3 {\n            grades_string.push(\"C\");\n        } else\
    \ if grade < 5.7 {\n            grades_string.push(\"C-\");\n        } else if\
    \ grade < 6.0 {\n            grades_string.push(\"D+\");\n        } else if grade\
    \ < 6.3 {\n            grades_string.push(\"D\");\n        } else if grade < 6.7\
    \ {\n            grades_string.push(\"D-\");\n        } else {\n            grades_string.push(\"\
    E\");\n        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp69ajz5kp.rs:54:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n54 |     grades_string\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_gpa\
    \ = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n  \
    \  let mut current_letter_grade = String::new();\n    let mut current_gpa = grades.iter().sum();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa =\
    \ grades.iter().sum();\n    let mut current_letter_grade = String::new();\n  \
    \  let mut current_gpa = grades.iter().sum();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades.iter().sum();\n    let mut\
    \ current_letter_grade = String::new();\n    let mut current_gpa = grades.iter().sum();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa =\
    \ grades.iter().sum();\n    let mut current_letter_grade = String::new();\n  \
    \  let mut current_gpa = grades.iter().sum();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades.iter().sum();\n    let mut\
    \ current_letter_grade = String::new();\n    let mut current_gpa = grades.iter().sum();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa =\
    \ grades.iter().sum();\n    let mut current_letter_grade = String::new();\n  \
    \  let mut current_gpa = grades.iter().sum();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades.iter().sum();\n    let mut\
    \ current_letter_grade = String::new();\n    let mut current_gpa = grades.iter().sum();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa =\
    \ grades.iter().sum();\n    let mut current_letter_grade = String::new();\n  \
    \  let mut current_gpa = grades.iter().sum();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades.iter().sum();\n    let mut\
    \ current_letter_grade = String::new();\n    let mut current_gpa = grades.iter().sum();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa =\
    \ grades.iter().sum();\n    let mut current_letter_grade = String\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmuwbzvey.rs:62:42\n   |\n\
    62 |     let mut current_letter_grade = String\n   |                         \
    \                 ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0423]:\
    \ expected value, found struct `String`\n   --> /tmp/tmpmuwbzvey.rs:62:36\n  \
    \  |\n62  |       let mut current_letter_grade = String\n    |               \
    \                       ^^^^^^ help: use struct literal syntax instead: `String\
    \ { vec: val }`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmuwbzvey.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0423.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n    grades_sorted.sort();\n\
    \    let mut grades_reversed = grades_sorted.clone();\n    grades_reversed.reverse();\n\
    \    let mut grades_sum = 0.0;\n    let mut grades_average = 0.0;\n    let mut\
    \ grades_letter_grades = Vec::new();\n    for grade in grades_sorted {\n     \
    \   grades_sum += grade;\n    }\n    for grade in grades_sorted {\n        grades_average\
    \ += grade;\n    }\n    for grade in grades_sorted {\n        if grade > grades_average\
    \ {\n            grades_letter_grades.push('C');\n        } else if grade > grades_sum\
    \ {\n            grades_letter_grades.push('B');\n        } else if grade > grades_sum\
    \ {\n            grades_letter_grades.push('A');\n        } else {\n         \
    \   grades_letter_grades.push('A+');\n        }\n    }\n    for grade in grades_sorted\
    \ {\n        if grade < grades_average {\n            grades_letter_grades.push('C');\n\
    \        } else if grade < grades_sum {\n            grades_letter_grades.push('B');\n\
    \        } else if grade < grades_sum {\n            grades_letter_grades.push('A');\n\
    \        } else {\n            grades_letter_grades.push('A+');\n        }\n \
    \   }\n    for grade in grades_sorted {\n        if grade < grades_average {\n\
    \            grades_letter_grades.push('C');\n        } else if grade < grades_sum\
    \ {\n            grades_letter_grades.push('B');\n        } else if grade < grades_sum\
    \ {\n            grades_letter_grades.push('A');\n        } else {\n         \
    \   grades_letter_grades.push('A+');\n        }\n    }\n    for grade in grades_sorted\
    \ {\n        if grade < grades_average {\n            grades_letter_grades.push('C');\n\
    \        } else if grade < grades_sum {\n            grades_letter_grades.push('B');\n\
    \        } else if grade < grades_sum {\n            grades_letter_grades.push('A');\n\
    \        } else {\n            grades_letter_grades.push('A+');\n        }\n \
    \   }\n    for grade in grades_sorted {\n        if grade < grades_average {\n\
    \            grades_letter_grades.push('C');\n        } else if grade < grades_sum\
    \ {\n            grades_letter_grades.push('B');\n        } else if grade < grades_sum\
    \ {\n            grades_letter_grades.push('A');\n\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp4_hgzear.rs:44:42\n\
    \   |\n44 |             grades_letter_grades.push('A+');\n   |               \
    \                           ^^^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = Vec::new();\n    grades_copy.sort_unstable();\n    let mut current_grade =\
    \ grades_copy[0];\n    let mut current_letter_grade = String::new();\n    for\
    \ grade in grades_copy {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::new();\n\
    \        }\n        current_letter_grade += char::uppercase(grade - current_grade);\n\
    \    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpc4zl1uz6.rs:25:17\n\
    \     |\n25   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0599]: no function\
    \ or associated item named `uppercase` found for type `char` in the current scope\n\
    \  --> /tmp/tmpc4zl1uz6.rs:34:39\n   |\n34 |         current_letter_grade += char::uppercase(grade\
    \ - current_grade);\n   |                                       ^^^^^^^^^\n  \
    \ |                                       |\n   |                            \
    \           function or associated item not found in `char`\n   |            \
    \                           help: there is an associated function with a similar\
    \ name: `is_ascii_uppercase`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = Vec::new();\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    for grade in grades_copy {\n        if grade > current_grade {\n \
    \           current_letter_grade = &letter_grades[current_letter_grade_index];\n\
    \            current_grade = grade;\n            current_letter_grade_index +=\
    \ 1;\n        }\n    }\n    letter_grades.push(current_letter_grade.clone());\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp9yivfmhk.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9yivfmhk.rs:31:36\n\
    \   |\n27 |     let mut current_letter_grade = String::new();\n   |          \
    \                          ------------- expected due to this value\n...\n31 |\
    \             current_letter_grade = &letter_grades[current_letter_grade_index];\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found reference\n   |\n   = note: expected struct\
    \ `String`\n           found reference `&_`\nhelp: consider removing the borrow\n\
    \   |\n31 -             current_letter_grade = &letter_grades[current_letter_grade_index];\n\
    31 +             current_letter_grade = letter_grades[current_letter_grade_index];\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpa =\
    \ grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let mut\
    \ letter_grade = String::new();\n    \n    while grade != 0.0 {\n        if grade\
    \ < gpa {\n            letter_grade += \"+\";\n            grade -= gpa;\n   \
    \     } else {\n            letter_grade += \"-\";\n            grade -= gpa;\n\
    \        }\n        gpa += 0.1;\n    }\n    \n    letter_grades.push(letter_grade);\n\
    \    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp_m3hqzws.rs:24:9\n\
    \   |\n24 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            grades_string.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            grades_string.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            grades_string.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            grades_string.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            grades_string.push(\"C\");\n        } else if grade\
    \ > 1.3 {\n            grades_string.push(\"C-\");\n        } else if grade >\
    \ 1.0 {\n            grades_string.push(\"D+\");\n        } else if grade > 0.7\
    \ {\n            grades_string.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            grades_string.push(\"D-\");\n        } else {\n            grades_string.push(\"\
    E\");\n        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpda508pjg.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     grades_string\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_index = 0;\n    let mut grades_sum = 0.0;\n\
    \    let mut grades_average = 0.0;\n    let mut grades_letter_grade = String::new();\n\
    \    \n    while grades_index < grades_length {\n        grades_sum += grades[grades_index];\n\
    \        grades_average = grades_sum / grades_length;\n        grades_letter_grade\
    \ += if grades[grades_index] > grades_average {\n            \"A+\"\n        }\
    \ else if grades[grades_index] > grades_average - 0.3 {\n            \"A\"\n \
    \       } else if grades[grades_index] > grades_average - 0.2 {\n            \"\
    A-\"\n        } else if grades[grades_index] > grades_average - 0.1 {\n      \
    \      \"B+\"\n        } else if grades[grades_index] > grades_average - 0.05\
    \ {\n            \"B\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.03 {\n            \"B-\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.01 {\n            \"C+\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.005 {\n            \"C\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.003 {\n            \"C-\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.001 {\n            \"D+\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.00 {\n            \"D\"\n        } else if grades[grades_index] > grades_average\
    \ - 0.0005 {\n            \"D-\"\n        } else {\n            \"E\"\n      \
    \  };\n        grades_index += 1;\n    }\n    grades_letter_grade.to_string()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp0niges3o.rs:32:37\n\
    \   |\n32 |         grades_average = grades_sum / grades_length;\n   |       \
    \                              ^ no implementation for `f64 / usize`\n   |\n \
    \  = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0niges3o.rs:62:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n62 |   \
    \  grades_letter_grade.to_string()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    let mut current_letter_grade_index3 = 0;\n    let mut current_letter_grade_index4\
    \ = 0;\n    let mut current_letter_grade_index5 = 0;\n    let mut current_letter_grade_index6\
    \ = 0;\n    let mut current_letter_grade_index7 = 0;\n    let mut current_letter_grade_index8\
    \ = 0;\n    let mut current_letter_grade_index9 = 0;\n    let mut current_letter_grade_index10\
    \ = 0;\n    let mut current_letter_grade_index11 = 0;\n    let mut current_letter_grade_index12\
    \ = 0;\n    let mut current_letter_grade_index13 = 0;\n    let mut current_letter_grade_index14\
    \ = 0;\n    let mut current_letter_grade_index15 = 0;\n    let mut current_letter_grade_index16\
    \ = 0;\n    let mut current_letter_grade_index17 = 0;\n    let mut current_letter_grade_index18\
    \ = 0;\n    let mut current_letter_grade_index19 = 0;\n    let mut current_letter_grade_index20\
    \ = 0;\n    let mut current_letter_grade_index21 = 0;\n    let mut current_letter_grade_index22\
    \ = 0;\n    let mut current_letter_grade_index23 = 0;\n    let mut current_letter_grade_index24\
    \ = 0;\n    let mut current_letter_grade_index25 = 0;\n    let mut current_letter_grade_index26\
    \ = 0;\n    let mut current_letter_grade_index27 = 0;\n    let mut current_letter_grade_index28\
    \ = 0;\n    let mut current_letter_grade_index29 = 0;\n    let mut current_letter_grade_index30\
    \ = 0;\n    let mut current_letter_grade_index31 = 0;\n    let mut current_letter_grade_index32\
    \ = 0;\n    let mut current_letter_grade_index33 = 0;\n    let mut current_letter_grade_index34\
    \ = 0;\n    let mut current_letter_grade_index35 = 0;\n    let mut current_letter_grade_index36\
    \ = 0;\n    let mut current_letter_grade_index37 = 0;\n    let mut current_letter_grade_index38\
    \ = 0;\n    let mut current_letter_grade_index39 = 0;\n    let mut current_letter_grade_index40\
    \ = 0;\n    let mut current_letter_grade_index41 = 0;\n    let mut current_letter_grade_index42\
    \ = 0;\n    let mut current_letter_grade_index43 = 0;\n    let mut current_letter_grade_index44\
    \ = 0;\n    let mut current_letter_grade_index45 = 0;\n    let mut current_letter_grade_index46\
    \ = 0;\n    let mut current_letter_grade_index47 = 0;\n    let mut current_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2gi9au5y.rs:74:21\n   |\n\
    74 |     let mut current_\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2gi9au5y.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    for grade in\
    \ grades {\n        total_grade += grade;\n        total_gpa += grade * 4.0;\n\
    \    }\n    let mut total_gpa = total_gpa / 4.0;\n    let mut total_grade = total_grade\
    \ / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n    let mut total_grade\
    \ = total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n \
    \   let mut total_grade = total_grade - total_gpa;\n    let mut total_grade =\
    \ total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n   \
    \ let mut total_grade = total_grade - total_gpa;\n    let mut total_grade = total_grade\
    \ + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n    let mut total_grade\
    \ = total_grade - total_gpa;\n    let mut total_grade = total_grade + total_gpa;\n\
    \    let mut total_grade = total_grade / 4.0;\n    let mut total_grade = total_grade\
    \ - total_gpa;\n    let mut total_grade = total_grade + total_gpa;\n    let mut\
    \ total_grade = total_grade / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n\
    \    let mut total_grade = total_grade + total_gpa;\n    let mut total_grade =\
    \ total_grade / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n   \
    \ let mut total_grade = total_grade + total_gpa;\n    let mut total_grade = total_grade\
    \ / 4.0;\n    let mut total_grade = total_grade - total_gpa;\n    let mut total_grade\
    \ = total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n \
    \   let mut total_grade = total_grade - total_gpa;\n    let mut total_grade =\
    \ total_grade + total_gpa;\n    let mut total_grade = total_grade / 4.0;\n   \
    \ let mut total_grade = total_grade - total_gpa;\n    let mut total_grade = total_grade\
    \ + total_gpa;\n    let mut \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfwyakc8l.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letter_grades.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            letter_grades.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            letter_grades.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grades.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            letter_grades.push(\"C\");\n        } else if grade\
    \ > 1.3 {\n            letter_grades.push(\"C-\");\n        } else if grade >\
    \ 1.0 {\n            letter_grades.push(\"D+\");\n        } else if grade > 0.7\
    \ {\n            letter_grades.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvsygyjal.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut gpa_sum = 0;\n    let mut letter_grade = String::new();\n    for\
    \ grade in grades {\n        gpa_sum += grade;\n        if gpa_sum >= gpa {\n\
    \            letter_grade += \"A+\";\n            gpa = gpa_sum;\n        } else\
    \ if gpa_sum >= 3.0 {\n            letter_grade += \"A\";\n            gpa = gpa_sum\
    \ - 3.0;\n        } else if gpa_sum >= 2.0 {\n            letter_grade += \"A-\"\
    ;\n            gpa = gpa_sum - 2.0;\n        } else if gpa_sum >= 1.0 {\n    \
    \        letter_grade += \"B+\";\n            gpa = gpa_sum - 1.0;\n        }\
    \ else if gpa_sum >= 0.7 {\n            letter_grade += \"B\";\n            gpa\
    \ = gpa_sum - 0.7;\n        } else if gpa_sum >= 0.3 {\n            letter_grade\
    \ += \"B-\";\n            gpa = gpa_sum - 0.3;\n        } else if gpa_sum >= 0.0\
    \ {\n            letter_grade += \"C+\";\n            gpa = gpa_sum - 0.0;\n \
    \       } else if gpa_sum >= -0.3 {\n            letter_grade += \"C\";\n    \
    \        gpa = gpa_sum - -0.3;\n        } else if gpa_sum >= -0.7 {\n        \
    \    letter_grade += \"C-\";\n            gpa = gpa_sum - -0.7;\n        } else\
    \ if gpa_sum >= -1.0 {\n            letter_grade += \"D+\";\n            gpa =\
    \ gpa_sum - -1.0;\n        } else if gpa_sum >= -1.7 {\n            letter_grade\
    \ += \"D\";\n            gpa = gpa_sum - -1.7;\n        } else if gpa_sum >= -2.0\
    \ {\n            letter_grade += \"D-\";\n            gpa = gpa_sum - -2.0;\n\
    \        } else if gpa_sum >= -3.0 {\n            letter_grade += \"E\";\n   \
    \         gpa = gpa_sum - -3.0;\n        } else {\n            letter_grade +=\
    \ \"E\";\n            gpa = gpa_sum;\n        }\n    }\n    letter_grades.push(letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmph02y0_b_.rs:28:17\n\
    \   |\n28 |         gpa_sum += grade;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: the trait bound `{integer}: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmph02y0_b_.rs:24:33\n     |\n24   |     let mut gpa = grades.iter().sum();\n\
    \     |                                 ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `{integer}`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0277]: can't\
    \ compare `{integer}` with `{float}`\n  --> /tmp/tmph02y0_b_.rs:32:27\n   |\n\
    32 |         } else if gpa_sum >= 3.0 {\n   |                           ^^ no\
    \ implementation for `{integer} < {float}` and `{integer} > {float}`\n   |\n \
    \  = help: the trait `PartialOrd<{float}>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialOrd<Rhs>`:\n   \
    \          f32\n             f64\n             i128\n             i16\n      \
    \       i32\n             i64\n             i8\n             isize\n         \
    \  and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph02y0_b_.rs:32:30\n\
    \   |\n32 |         } else if gpa_sum >= 3.0 {\n   |                         \
    \     ^^^ expected integer, found floa"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades.len();\n    let mut grades_grades = Vec::new();\n    let mut grades_grades_len\
    \ = grades_grades.len();\n    let mut grades_grades_grades = Vec::new();\n   \
    \ let mut grades_grades_grades_len = grades_grades_grades.len();\n    let mut\
    \ grades_grades_grades_grades_len = grades_grades_grades_grades.len();\n    let\
    \ mut grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n  \
    \  let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl34vi3do.rs:38:249\n   |\n\
    38 |     let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                         ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `grades_grades_grades_grades` in this scope\n\
    \  --> /tmp/tmpl34vi3do.rs:29:47\n   |\n29 |     let mut grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades.len();\n   |                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `grades_grades_grades_len`\n\nerror[E0425]: cannot find value `grades_grades_grades_grades_grades`\
    \ in this scope\n  --> /tmp/tmpl34vi3do.rs:30:54\n   |\n30 |     let mut grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades.len();\n   |                          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `grades_grades_grades_grades_len`\n\nerror[E0425]:\
    \ cannot find value `grades_grades_grades_grades_grades_grades` in this scope\n\
    \  --> /tmp/tmpl34vi3do.rs:31:61\n   |\n31 |     let mut grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades.len();\n   |                   \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_grades_grades_grades_grades_len`\n\
    \nerror[E0425]: cannot find value `grades_grades_grades_grades_grades_grades_grades`\
    \ in this scope\n  --> /tmp/tmpl34vi3do.rs:32:68\n   |\n32 |     let mut grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_gr"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    while gpa > 0.0 {\n        let grade = if gpa >= 4.0 { \"+\" } else { \"\
    -\" };\n        let letter_grade = if gpa >= 3.7 { \"+\" } else { \"-\" };\n \
    \       let letter_grade = if gpa >= 3.3 { \"+\" } else { \"-\" };\n        let\
    \ letter_grade = if gpa >= 3.0 { \"+\" } else { \"-\" };\n        let letter_grade\
    \ = if gpa >= 2.7 { \"+\" } else { \"-\" };\n        let letter_grade = if gpa\
    \ >= 2.3 { \"+\" } else { \"-\" };\n        let letter_grade = if gpa >= 2.0 {\
    \ \"+\" } else { \"-\" };\n        let letter_grade = if gpa >= 1.7 { \"+\" }\
    \ else { \"-\" };\n        let letter_grade = if gpa >= 1.3 { \"+\" } else { \"\
    -\" };\n        let letter_grade = if gpa >= 1.0 { \"+\" } else { \"-\" };\n \
    \       let letter_grade = if gpa >= 0.7 { \"+\" } else { \"-\" };\n        let\
    \ letter_grade = if gpa >= 0.0 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + letter_grade);\n        gpa -= 0.0;\n    }\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpkb4xk9aw.rs:38:34\n\
    \   |\n38 |         letter_grades.push(grade + letter_grade);\n   |          \
    \                  ----- ^ ------------ &str\n   |                           \
    \ |     |\n   |                            |     `+` cannot be used to concatenate\
    \ two `&str` strings\n   |                            &str\n   |\n   = note: string\
    \ concatenation requires an owned `String` on the left\nhelp: create an owned\
    \ `String` from a string reference\n   |\n38 |         letter_grades.push(grade.to_owned()\
    \ + letter_grade);\n   |                                 +++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut gpa = grades.iter().sum();\n    let mut letter_grade: String;\n    \n  \
    \  if gpa < 4.0 {\n        letter_grade = \"E\";\n    } else {\n        let mut\
    \ grade = grades.iter().sum();\n        while grade > 3.0 {\n            grade\
    \ -= 3.0;\n            grades_vec.push(\"C\");\n        }\n        while grade\
    \ > 2.0 {\n            grade -= 2.0;\n            grades_vec.push(\"B\");\n  \
    \      }\n        while grade > 1.0 {\n            grade -= 1.0;\n           \
    \ grades_vec.push(\"A\");\n        }\n        while grade > 0.7 {\n          \
    \  grade -= 0.7;\n            grades_vec.push(\"D\");\n        }\n        while\
    \ grade > 0.3 {\n            grade -= 0.3;\n            grades_vec.push(\"C\"\
    );\n        }\n        while grade > 0.0 {\n            grade -= 0.0;\n      \
    \      grades_vec.push(\"B\");\n        }\n        while grade > -0.3 {\n    \
    \        grade -= -0.3;\n            grades_vec.push(\"B\");\n        }\n    \
    \    while grade > -0.7 {\n            grade -= -0.7;\n            grades_vec.push(\"\
    B\");\n        }\n        while grade > -1.0 {\n            grade -= -1.0;\n \
    \           grades_vec.push(\"A\");\n        }\n        while grade > -1.7 {\n\
    \            grade -= -1.7;\n            grades_vec.push(\"A\");\n        }\n\
    \        while grade > -2.0 {\n            grade -= -2.0;\n            grades_vec.push(\"\
    A\");\n        }\n        while grade > -3.3 {\n            grade -= -3.3;\n \
    \           grades_vec.push(\"A\");\n        }\n        while grade > -3.7 {\n\
    \            grade -= -3.7;\n            grades_vec.push(\"A\");\n        }\n\
    \        while grade > -4.0 {\n            grade -= -4.0;\n            grades_vec.push(\"\
    A\");\n        }\n        while grade > -4.7 {\n            grade -= -4.7;\n \
    \           grades_vec.push(\"A\");\n        }\n        while grade > -5.0 {\n\
    \            grade -= -5.0;\n            grades_vec.push(\"A\");\n        }\n\
    \        while grade > -5.7 {\n            grade -= -5.7;\n            grades_vec.push(\"\
    A\");\n        }\n        while grade > -6.0 {\n            grade -= -6.0;\n\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp0fwmal5f.rs:112:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n29  |     } else {\n    |            - unclosed delimiter\n...\n99  |   \
    \      while grade > -6.0 {\n    |                            - this delimiter\
    \ might not be properly closed...\n...\n102 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n112 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0fwmal5f.rs:28:24\n   |\n25 |     let mut letter_grade:\
    \ String;\n   |                           ------ expected due to this type\n...\n\
    28 |         letter_grade = \"E\";\n   |                        ^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                        |\n \
    \  |                        expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0fwmal5f.rs:27:18\n   |\n27 |       if gpa <\
    \ 4.0 {\n   |  __________________^\n28 | |         letter_grade = \"E\";\n29 |\
    \ |     } else {\n   | |_____^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0fwmal5f.rs:33:29\n   |\n33 |             grades_vec.push(\"\
    C\");\n   |                             ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0fwmal5f.rs:37:29\n   |\n37 |             grades_vec.push(\"\
    B\");\n   |                             ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0fwmal5f.rs:41:29\n   |\n41 |             grades_vec.push(\"\
    A\");\n   |                             ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    let mut total_gpa_sum:\
    \ f64 = 0.0;\n    let mut total_gpa_sum2: f64 = 0.0;\n    let mut total_gpa_sum3:\
    \ f64 = 0.0;\n    let mut total_gpa_sum4: f64 = 0.0;\n    let mut total_gpa_sum5:\
    \ f64 = 0.0;\n    let mut total_gpa_sum6: f64 = 0.0;\n    let mut total_gpa_sum7:\
    \ f64 = 0.0;\n    let mut total_gpa_sum8: f64 = 0.0;\n    let mut total_gpa_sum9:\
    \ f64 = 0.0;\n    let mut total_gpa_sum10: f64 = 0.0;\n    let mut total_gpa_sum11:\
    \ f64 = 0.0;\n    let mut total_gpa_sum12: f64 = 0.0;\n    let mut total_gpa_sum13:\
    \ f64 = 0.0;\n    let mut total_gpa_sum14: f64 = 0.0;\n    let mut total_gpa_sum15:\
    \ f64 = 0.0;\n    let mut total_gpa_sum16: f64 = 0.0;\n    let mut total_gpa_sum17:\
    \ f64 = 0.0;\n    let mut total_gpa_sum18: f64 = 0.0;\n    let mut total_gpa_sum19:\
    \ f64 = 0.0;\n    let mut total_gpa_sum20: f64 = 0.0;\n    let mut total_gpa_sum21:\
    \ f64 = 0.0;\n    let mut total_gpa_sum22: f64 = 0.0;\n    let mut total_gpa_sum23:\
    \ f64 = 0.0;\n    let mut total_gpa_sum24: f64 = 0.0;\n    let mut total_gpa_sum25:\
    \ f64 = 0.0;\n    let mut total_gpa_sum26: f64 = 0.0;\n    let mut total_gpa_sum27:\
    \ f64 = 0.0;\n    let mut total_gpa_sum28: f64 = 0.0;\n    let mut total_gpa_sum29:\
    \ f64 = 0.0;\n    let mut total_gpa_sum30: f64 = 0.0;\n    let mut total_gpa_sum31:\
    \ f64 = 0.0;\n    let mut total_gpa_sum32: f64 = 0.0;\n    let mut total_gpa_sum33:\
    \ f64 = 0.0;\n    let mut total_gpa_sum34: f64 = 0.0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq_qdo5pm.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_qdo5pm.rs:22:48\n \
    \  |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpa =\
    \ grades.iter().sum();\n    while gpa > 0.0 {\n        let grade = if gpa < 3.0\
    \ { 0.0 } else { 1.0 };\n        letter_grades.push(format!(\"{}\", grade));\n\
    \        gpa -= grade;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpdt8o5bf0.rs:24:9\n\
    \   |\n24 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades.len();\n    let mut grades_grades = vec![];\n    let mut grades_grades_len\
    \ = grades_grade.len();\n    let mut grades_grades_grades = vec![];\n    let mut\
    \ grades_grades_grades_len = grades_grades_grade.len();\n    let mut grades_grades_grades_grades_len\
    \ = grades_grades_grades_grade.len();\n    let mut grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grade.len();\n    let mut grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grade.len();\n    let mut grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grade.len();\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grade.len();\n    let mut\
    \ grades_grades_grades_grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grades_grades_grades_grade.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grade.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzkzs9fkz.rs:38:256\n   |\n\
    38 |     let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `grades_grade` in this scope\n  -->\
    \ /tmp/tmpzkzs9fkz.rs:26:33\n   |\n26 |     let mut grades_grades_len = grades_grade.len();\n\
    \   |                                 ^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `grades_grades`\n\nerror[E0425]: cannot find value `grades_grades_grade`\
    \ in this scope\n  --> /tmp/tmpzkzs9fkz.rs:28:40\n   |\n28 |     let mut grades_grades_grades_len\
    \ = grades_grades_grade.len();\n   |                                        ^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_grades_grades`\n\n\
    error[E0425]: cannot find value `grades_grades_grades_grade` in this scope\n \
    \ --> /tmp/tmpzkzs9fkz.rs:29:47\n   |\n29 |     let mut grades_grades_grades_grades_len\
    \ = grades_grades_grades_grade.len();\n   |                                  \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `grades_grades_grades_len`\n\nerror[E0425]: cannot find value `grades_grades_grades_grades_grade`\
    \ in this scope\n  --> /tmp/tmpzkzs9fkz.rs:30:54\n   |\n30 |     let mut grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grade.len();\n   |                           \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `grades_grades_grades_grades_len`\n\nerror[E0425]:\
    \ cannot find value `grades_grades_grades_grades_grades"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            grades_string.push(\"B+\");\n\
    \        } else if grade > 2.0 {\n            grades_string.push(\"B\");\n   \
    \     } else if grade > 1.0 {\n            grades_string.push(\"B-\");\n     \
    \   } else if grade > 0.7 {\n            grades_string.push(\"C\");\n        }\
    \ else if grade > 0.3 {\n            grades_string.push(\"C-\");\n        } else\
    \ if grade > 0.0 {\n            grades_string.push(\"D\");\n        } else if\
    \ grade > -0.3 {\n            grades_string.push(\"D-\");\n        } else if grade\
    \ > -0.7 {\n            grades_string.push(\"E\");\n        } else {\n       \
    \     grades_string.push(\"F\");\n        }\n    }\n    grades_string\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp80hlo5y3.rs:45:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n45 |     grades_string\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut grades_len = grades.len();\n    let mut grades_sum\
    \ = 0.0;\n    let mut grades_average = 0.0;\n    let mut grades_min_value = grades.iter().min().unwrap();\n\
    \    let mut grades_max_value = grades.iter().max().unwrap();\n    let mut grades_min_value\
    \ = grades_min_value.to_f64();\n    let mut grades_max_value = grades_max_value.to_f64();\n\
    \    let mut grades_min_value = grades_min_value.to_f64();\n    let mut grades_max_value\
    \ = grades_max_value.to_f64();\n    let mut grades_min_value = grades_min_value.to_f64();\n\
    \    let mut grades_max_value = grades_max_value.to_f64();\n    let mut grades_min_value\
    \ = grades_min_value.to_f64();\n    let mut grades_max_value = grades_max_value.to_f64();\n\
    \    let mut grades_min_value = grades_min_value.to_f64();\n    let mut grades_max_value\
    \ = grades_max_value.to_f64();\n    let mut grades_min_value = grades_min_value.to_f64();\n\
    \    let mut grades_max_value = grades_max_value.to_f64();\n    let mut grades_min_value\
    \ = grades_min_value.to_f64();\n    let mut grades_max_value = grades_max_value.to_f64();\n\
    \    let mut grades_min_value = grades_min_value.to_f64();\n    let mut grades_max_value\
    \ = grades_max_value.to_f64();\n    let mut grades_min_value = grades_min_value.to_f64();\n\
    \    let mut grades_max_value = grades_max_value.to_f64();\n    let mut grades_min_value\
    \ = grades_min_value.to_f64();\n    let mut grades_max_value = grades_max_value.to_f64();\n\
    \    let mut grades_min_value = grades_min_value.to_f64();\n    let mut grades_max_value\
    \ = grades_max_value.to_f64();\n    let mut grades_min_value = grades_min_value.to_f64();\n\
    \    let mut grades_max_value = grades_max_value.to_f64();\n    let mut grades_min_value\
    \ = grades_min_value.to_f64();\n    let mut grades_max_value = grades_max_value.to_f64();\n\
    \    let mut grades_min_value = grades_min_value.to_f64\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp65acky7n.rs:56:55\n   |\n\
    56 |     let mut grades_min_value = grades_min_value.to_f64\n   |            \
    \                                           ^ help: add `;` here\n57 | }\n   |\
    \ - unexpected token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmp65acky7n.rs:28:46\n     |\n28   |     let mut grades_min_value\
    \ = grades.iter().min().unwrap();\n     |                                    \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help:\
    \ the following other types implement trait `Ord`:\n               i128\n    \
    \           i16\n               i32\n               i64\n               i8\n \
    \              isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp65acky7n.rs:29:46\n\
    \     |\n29   |     let mut grades_max_value = grades.iter().max().unwrap();\n\
    \     |                                              ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::max`\n\nerror[E0599]: no method named `to_f64` found\
    \ for reference `&f64` in the current scope\n  --> /tmp/tmp65acky7n.rs:30:49\n\
    \   |\n30 |     let mut grades_min_value = grades_min_value.to_f64();\n   |  \
    \                                               ^^^^^^ method not found in `&f64`\n\
    \nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmp65acky7n.rs:31:49\n   |\n31 |     let mut grades_max_value\
    \ = grades_max_value.to_f64();\n   |                            "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut min_gpa = grades.iter().min().unwrap();\n    let mut max_gpa = grades.iter().max().unwrap();\n\
    \    let mut min_gpa_letter = min_gpa as char;\n    let mut max_gpa_letter = max_gpa\
    \ as char;\n    let mut gpa_letter = min_gpa_letter;\n    while gpa != 0.0 {\n\
    \        if gpa < min_gpa {\n            gpa = max_gpa;\n            min_gpa_letter\
    \ = max_gpa_letter;\n            max_gpa_letter = min_gpa_letter;\n          \
    \  gpa_letter = min_gpa_letter;\n        }\n        if gpa > max_gpa {\n     \
    \       gpa = min_gpa;\n            min_gpa_letter = max_gpa_letter;\n       \
    \     max_gpa_letter = min_gpa_letter;\n            gpa_letter = min_gpa_letter;\n\
    \        }\n        letter_grades.push(gpa_letter);\n        gpa -= min_gpa;\n\
    \        min_gpa = grades.iter().min().unwrap();\n        max_gpa = grades.iter().max().unwrap();\n\
    \        min_gpa_letter = min_gpa as char;\n        max_gpa_letter = max_gpa as\
    \ char;\n        gpa_letter = min_gpa_letter;\n    }\n    letter_grades.push(gpa_letter);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwkvmndd1.rs:25:37\n\
    \     |\n25   |     let mut min_gpa = grades.iter().min().unwrap();\n     |  \
    \                                   ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwkvmndd1.rs:26:37\n\
    \     |\n26   |     let mut max_gpa = grades.iter().max().unwrap();\n     |  \
    \                                   ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpwkvmndd1.rs:30:15\n\
    \   |\n30 |     while gpa != 0.0 {\n   |               ^^ no implementation for\
    \ `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: the trait bound `&f64: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpwkvmndd1.rs:24:33\n     |\n24   |     let mut gpa = grades.iter().sum();\n\
    \     |                                 ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `&f64`\n     |\n     = help: the following o"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_sorted\
    \ = grades_copy.clone();\n    grades_sorted.sort();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_sorted[0];\n    let mut current_letter_grade\
    \ = String::new();\n    for grade in grades_sorted {\n        if grade > current_grade\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_grade\
    \ = grade;\n            current_letter_grade = String::new();\n        }\n   \
    \     current_letter_grade += &format!(\"{}\", grade - current_grade);\n    }\n\
    \    letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpolvnonfc.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut min_gpa = grades.iter().min().unwrap();\n    let mut max_gpa = grades.iter().max().unwrap();\n\
    \    let mut gpa_diff = max_gpa - min_gpa;\n    let mut gpa_percent = gpa / gpa_diff;\n\
    \    let mut letter_grade = String::new();\n    \n    while gpa > 0 {\n      \
    \  if gpa > max_gpa {\n            letter_grade += \"D-\";\n            gpa -=\
    \ gpa_percent;\n        } else if gpa > min_gpa {\n            letter_grade +=\
    \ \"D+\";\n            gpa -= gpa_percent;\n        } else if gpa > gpa_diff {\n\
    \            letter_grade += \"D\";\n            gpa -= gpa_percent;\n       \
    \ } else if gpa > gpa_diff / 2 {\n            letter_grade += \"C-\";\n      \
    \      gpa -= gpa_percent;\n        } else if gpa > gpa_diff / 3 {\n         \
    \   letter_grade += \"C\";\n            gpa -= gpa_percent;\n        } else if\
    \ gpa > gpa_diff / 4 {\n            letter_grade += \"B-\";\n            gpa -=\
    \ gpa_percent;\n        } else if gpa > gpa_diff / 5 {\n            letter_grade\
    \ += \"B\";\n            gpa -= gpa_percent;\n        } else if gpa > gpa_diff\
    \ / 6 {\n            letter_grade += \"A-\";\n            gpa -= gpa_percent;\n\
    \        } else if gpa > gpa_diff / 7 {\n            letter_grade += \"A\";\n\
    \            gpa -= gpa_percent;\n        } else if gpa > gpa_diff / 8 {\n   \
    \         letter_grade += \"A+\";\n            gpa -= gpa_percent;\n        }\
    \ else {\n            letter_grade += \"A\";\n            gpa -= gpa_percent;\n\
    \        }\n    }\n    \n    letter_grades.push(letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmph3bd260f.rs:25:37\n\
    \     |\n25   |     let mut min_gpa = grades.iter().min().unwrap();\n     |  \
    \                                   ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmph3bd260f.rs:26:37\n\
    \     |\n26   |     let mut max_gpa = grades.iter().max().unwrap();\n     |  \
    \                                   ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmph3bd260f.rs:41:34\n\
    \   |\n41 |         } else if gpa > gpa_diff / 2 {\n   |                     \
    \             ^ no implementation for `f64 / {integer}`\n   |\n   = help: the\
    \ trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n41 |         } else if\
    \ gpa > gpa_diff /"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_grade_index = 0;\n    let mut current_letter_grade = String::new();\n\
    \    for grade in grades_copy {\n        if grade > current_grade {\n        \
    \    current_grade = grade;\n            current_grade_index = 0;\n          \
    \  current_letter_grade = String::new();\n        }\n        current_grade -=\
    \ grade;\n        current_grade_index += 1;\n        current_letter_grade += &format!(\"\
    {}\", current_grade);\n        letter_grades.push(current_letter_grade);\n   \
    \ }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpwk2qmsn3.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade = total_grade / grades.len();\n    for grade in\
    \ grades {\n        let grade = grade / total_grade;\n        let grade = grade\
    \ * 100.0;\n        let grade = grade.round() as f64;\n        let grade = grade\
    \ / 100.0;\n        let grade = grade * 4.0;\n        let grade = grade as f64;\n\
    \        let grade = grade as char;\n        grades_vec.push(grade.to_string());\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpv4bnkb2k.rs:28:39\n\
    \   |\n28 |     let mut total_grade = total_grade / grades.len();\n   |      \
    \                                 ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0604]: only\
    \ `u8` can be cast as `char`, not `f64`\n  --> /tmp/tmpv4bnkb2k.rs:36:21\n   |\n\
    36 |         let grade = grade as char;\n   |                     ^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpv4bnkb2k.rs:36:21\n   |\n36 |         let grade = grade as char;\n \
    \  |                     ^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade = total_grade / grades.len();\n    let mut current_grade:\
    \ f64 = 0.0;\n    for grade in grades {\n        current_grade += grade;\n   \
    \     if current_grade >= total_grade {\n            grades_vec.push(format!(\"\
    {}+\", current_grade - total_grade));\n            current_grade = current_grade\
    \ - total_grade;\n        } else {\n            grades_vec.push(format!(\"{}\"\
    , current_grade - total_grade));\n            current_grade = current_grade -\
    \ grade;\n        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp5_azj9b9.rs:28:39\n\
    \   |\n28 |     let mut total_grade = total_grade / grades.len();\n   |      \
    \                                 ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade < 3.3 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade < 3.7 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade < 4.0 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade < 4.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade < 4.7 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade < 5.0 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade < 5.3 {\n            grades_string.push_str(\"\
    C-\");\n        } else if grade < 5.7 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade < 6.0 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade < 6.3 {\n            grades_string.push_str(\"\
    D-\");\n        } else if grade < 6.7 {\n            grades_string.push_str(\"\
    E\");\n        } else {\n            grades_string.push_str(\"F\");\n        }\n\
    \    }\n    grades_string.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp_c_p6p_8.rs:53:19\n    |\n53\
    \  |       grades_string.into_iter().collect()\n    |                     ^^^^^^^^^\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    let mut current_letter_grade_index3 = 0;\n    let mut current_letter_grade_index4\
    \ = 0;\n    let mut current_letter_grade_index5 = 0;\n    let mut current_letter_grade_index6\
    \ = 0;\n    let mut current_letter_grade_index7 = 0;\n    let mut current_letter_grade_index8\
    \ = 0;\n    let mut current_letter_grade_index9 = 0;\n    let mut current_letter_grade_index10\
    \ = 0;\n    let mut current_letter_grade_index11 = 0;\n    let mut current_letter_grade_index12\
    \ = 0;\n    let mut current_letter_grade_index13 = 0;\n    let mut current_letter_grade_index14\
    \ = 0;\n    let mut current_letter_grade_index15 = 0;\n    let mut current_letter_grade_index16\
    \ = 0;\n    let mut current_letter_grade_index17 = 0;\n    let mut current_letter_grade_index18\
    \ = 0;\n    let mut current_letter_grade_index19 = 0;\n    let mut current_letter_grade_index20\
    \ = 0;\n    let mut current_letter_grade_index21 = 0;\n    let mut current_letter_grade_index22\
    \ = 0;\n    let mut current_letter_grade_index23 = 0;\n    let mut current_letter_grade_index24\
    \ = 0;\n    let mut current_letter_grade_index25 = 0;\n    let mut current_letter_grade_index26\
    \ = 0;\n    let mut current_letter_grade_index27 = 0;\n    let mut current_letter_grade_index28\
    \ = 0;\n    let mut current_letter_grade_index29 = 0;\n    let mut current_letter_grade_index30\
    \ = 0;\n    let mut current_letter_grade_index31 = 0;\n    let mut current_letter_grade_index32\
    \ = 0;\n    let mut current_letter_grade_index33 = 0;\n    let mut current_letter_grade_index34\
    \ = 0;\n    let mut current_letter_grade_index35 = 0;\n    let mut current_letter_grade_index36\
    \ = 0;\n    let mut current_letter_grade_index37 = 0;\n    let mut current_letter_grade_index38\
    \ = 0;\n    let mut current_letter_grade_index39 = 0;\n    let mut current_letter_grade_index40\
    \ = 0;\n    let mut current_letter_grade_index41 = 0;\n    let mut current_letter_grade_index42\
    \ = 0;\n    let mut current_letter_grade_index43 = 0;\n    let mut current_letter_grade_index44\
    \ = 0;\n    let mut current_letter_grade_index45 = 0;\n    let mut current_letter_grade_index46\
    \ = 0;\n    let mut current_letter_grade_index47 = 0;\n    let mut current_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2_x5w0q5.rs:74:21\n   |\n\
    74 |     let mut current_\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2_x5w0q5.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    let\
    \ mut grade: f64;\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected type, found `}`\n  --> /tmp/tmp0xc5z__k.rs:65:1\n   |\n\
    64 |     let mut gpa: \n   |         ------- while parsing the type for `mut gpa`\n\
    65 | }\n   | ^ expected type\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade: String = String::new();\n       \
    \ if grade > 3.0 {\n            letter_grade += \"B+\";\n        } else if grade\
    \ > 2.7 {\n            letter_grade += \"B\";\n        } else if grade > 2.3 {\n\
    \            letter_grade += \"B-\";\n        } else if grade > 2.0 {\n      \
    \      letter_grade += \"C+\";\n        } else if grade > 1.7 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.3 {\n            letter_grade += \"C-\"\
    ;\n        } else if grade > 1.0 {\n            letter_grade += \"D+\";\n    \
    \    } else if grade > 0.7 {\n            letter_grade += \"D\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n  \
    \          letter_grade += \"E\";\n        }\n        grades_vec.push(letter_grade);\n\
    \    }\n    return grades_vec;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpcw4q3fdl.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letter_grades.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            letter_grades.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            letter_grades.push(\"B-\");\n        } else\
    \ if grade > 1.3 {\n            letter_grades.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            letter_grades.push(\"C\");\n        } else if grade\
    \ > 1.0 {\n            letter_grades.push(\"C-\");\n        } else if grade >\
    \ 0.7 {\n            letter_grades.push(\"D+\");\n        } else if grade > 0.3\
    \ {\n            letter_grades.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_snybqj.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    while current_grade != 0.0 {\n        if current_grade < current_grade.checked_sub(0.1).unwrap_or(0.0)\n\
    \        {\n            current_letter_grade = current_letter_grade.to_string()\
    \ + &\"-\";\n            current_letter_grade_index += 1;\n        }\n       \
    \ else if current_grade < current_grade.checked_sub(0.7).unwrap_or(0.0)\n    \
    \    {\n            current_letter_grade = current_letter_grade.to_string() +\
    \ &\"C\";\n            current_letter_grade_index += 1;\n        }\n        else\
    \ if current_grade < current_grade.checked_sub(0.3).unwrap_or(0.0)\n        {\n\
    \            current_letter_grade = current_letter_grade.to_string() + &\"B\"\
    ;\n            current_letter_grade_index += 1;\n        }\n        else if current_grade\
    \ < current_grade.checked_sub(0.1).unwrap_or(0.0)\n        {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"A\";\n            current_letter_grade_index\
    \ += 1;\n        }\n        else if current_grade < current_grade.checked_sub(0.7).unwrap_or(0.0)\n\
    \        {\n            current_letter_grade = current_letter_grade.to_string()\
    \ + &\"A+\";\n            current_letter_grade_index += 1;\n        }\n      \
    \  else if current_grade < current_grade.checked_sub(0.3).unwrap_or(0.0)\n   \
    \     {\n            current_letter_grade = current_letter_grade.to_string() +\
    \ &\"A-\";\n            current_letter_grade_index += 1;\n        }\n        else\
    \ if current_grade < current_grade.checked_sub(0.1).unwrap_or(0.0)\n        {\n\
    \            current_letter_grade = current_letter_grade.to_string() + &\"D\"\
    ;\n            current_letter_grade_index += 1;\n        }\n        else if current_grade\
    \ < current_grade.checked_sub(0.7).unwrap_or(0.0)\n        {\n            current_letter_grade\
    \ = current_letter_grade.to_string() + &\"D+\";\n            current_letter_grade_index\
    \ += 1;\n        }\n        else if current_grade < current_grade.checked_sub(0.3).unwrap_or(0.0)\n\
    \        {\n            current_letter_grade = current_letter_grade.to_string()\
    \ + &\"D-\";\n            current_letter_grade_index += 1;\n        }\n      \
    \  else if current_grade < current_grade.checked_sub(0.1).unwrap_or(0.0)\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmppzgg30f6.rs:86:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n29 |     while current_grade != 0.0 {\n   |                             \
    \   - this delimiter might not be properly closed...\n...\n76 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n86 | }\n   |   ^\n\n\
    error: expected `{`, found `}`\n  --> /tmp/tmppzgg30f6.rs:76:1\n   |\n75 |   \
    \      else if current_grade < current_grade.checked_sub(0.1).unwrap_or(0.0)\n\
    \   |              -- this `if` expression has a condition, but no block\n76 |\
    \ }\n   | ^ expected `{`\n\nerror[E0277]: can't compare `&f64` with `{float}`\n\
    \  --> /tmp/tmppzgg30f6.rs:29:25\n   |\n29 |     while current_grade != 0.0 {\n\
    \   |                         ^^ no implementation for `&f64 == {float}`\n   |\n\
    \   = help: the trait `PartialEq<{float}>` is not implemented for `&f64`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppzgg30f6.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut total_grade = grades_copy.iter().sum();\n    let mut\
    \ total_letter_grade = String::new();\n    let mut current_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6s9lbaiv.rs:73:28\n   |\n\
    73 |     let mut current_letter_\n   |                            ^ help: add\
    \ `;` here\n74 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6s9lbaiv.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_index = 0;\n    let mut grades_sum = 0;\n\
    \    let mut grades_average = 0;\n    let mut grades_average_index = 0;\n    let\
    \ mut grades_average_sum = 0;\n    let mut grades_average_sum_index = 0;\n   \
    \ let mut grades_average_average = 0;\n    let mut grades_average_average_index\
    \ = 0;\n    let mut grades_average_average_sum = 0;\n    let mut grades_average_average_sum_index\
    \ = 0;\n    let mut grades_average_average_average = 0;\n    let mut grades_average_average_average_index\
    \ = 0;\n    let mut grades_average_average_average_sum = 0;\n    let mut grades_average_average_average_sum_index\
    \ = 0;\n    let mut grades_average_average_average_average = 0;\n    let mut grades_average_average_average_average_index\
    \ = 0;\n    let mut grades_average_average_average_average_sum = 0;\n    let mut\
    \ grades_average_average_average_average_sum_index = 0;\n    let mut grades_average_average_average_average_average\
    \ = 0;\n    let mut grades_average_average_average_average_average_index = 0;\n\
    \    let mut grades_average_average_average_average_average_sum = 0;\n    let\
    \ mut grades_average_average_average_average_average_sum_index = 0;\n    let mut\
    \ grades_average_average_average_average_average_average = 0;\n    let mut grades_average_average_average_average_average_index\
    \ = 0;\n    let mut grades_average_average_average_average_average_sum = 0;\n\
    \    let mut grades_average_average_average_average_average_sum_index = 0;\n \
    \   let mut grades_average_average_average_average_average_average = 0;\n    let\
    \ mut grades_average_average_average_average_average_average_index = 0;\n    let\
    \ mut grades_average_average_average_average_average_average_sum = 0;\n    let\
    \ mut grades_average_average_average_average_average_average_sum_index = 0;\n\
    \    let mut grades_average_average_average_average_average_average_average =\
    \ 0;\n    let mut grades_average_average_average_average_average_average_average_index\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_sum_index\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_index\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_sum_index\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average_average\
    \ = 0;\n    let mut grades_average_average_average_average_\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_lu4k9fh.rs:64:52\n   |\n\
    64 |     let mut grades_average_average_average_average_\n   |               \
    \                                     ^ help: add `;` here\n65 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_lu4k9fh.rs:22:48\n \
    \  |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    for grade in\
    \ grades {\n        total_grade += grade;\n        total_gpa += grade * 4.0;\n\
    \    }\n    let mut gpa: f64 = total_gpa / total_grade;\n    let mut grade: f64\
    \ = total_grade / 4.0;\n    let mut letter_grade: String;\n    while gpa > 0.0\
    \ {\n        if gpa >= 3.0 {\n            letter_grade = \"A+\";\n           \
    \ gpa -= 3.0;\n        } else if gpa >= 2.0 {\n            letter_grade = \"A\"\
    ;\n            gpa -= 2.0;\n        } else if gpa >= 1.0 {\n            letter_grade\
    \ = \"A-\";\n            gpa -= 1.0;\n        } else if gpa >= 0.7 {\n       \
    \     letter_grade = \"B+\";\n            gpa -= 0.7;\n        } else if gpa >=\
    \ 0.3 {\n            letter_grade = \"B\";\n            gpa -= 0.3;\n        }\
    \ else if gpa >= 0.0 {\n            letter_grade = \"B-\";\n            gpa -=\
    \ 0.0;\n        } else {\n            letter_grade = \"C+\";\n            gpa\
    \ -= 0.0;\n        }\n        grades_vec.push(letter_grade);\n    }\n    grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp69bklg45.rs:35:28\n   |\n\
    32 |     let mut letter_grade: String;\n   |                           ------\
    \ expected due to this type\n...\n35 |             letter_grade = \"A+\";\n  \
    \ |                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp69bklg45.rs:38:28\n\
    \   |\n32 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n38 |             letter_grade = \"A\"\
    ;\n   |                            ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp69bklg45.rs:41:28\n\
    \   |\n32 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n41 |             letter_grade = \"A-\"\
    ;\n   |                            ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                            |\n   |                    \
    \        expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp69bklg45.rs:44:28\n   |\n32 |     let mut letter_grade: String;\n\
    \   |                           ------ expected due to this type\n...\n44 |  \
    \           letter_grade = \"B+\";\n   |                            ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp69bklg45.rs:47:28\n   |\n32 |\
    \     let mut letter_grade: String;\n   |                           ------ expected\
    \ due to this type\n...\n47 |             letter_grade = \"B\";\n   |        \
    \                    ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letter_grades.push(\"A+\");\n     \
    \   } else if grade > 2.7 {\n            letter_grades.push(\"B+\");\n       \
    \ } else if grade > 2.3 {\n            letter_grades.push(\"B-\");\n        }\
    \ else if grade > 1.3 {\n            letter_grades.push(\"C+\");\n        } else\
    \ if grade > 0.7 {\n            letter_grades.push(\"C\");\n        } else if\
    \ grade > 0.3 {\n            letter_grades.push(\"C-\");\n        } else if grade\
    \ > 0.0 {\n            letter_grades.push(\"D+\");\n        } else if grade >\
    \ -0.7 {\n            letter_grades.push(\"D\");\n        } else if grade > -0.3\
    \ {\n            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv9618dvo.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades.len();\n    let mut grades_sum = 0.0;\n    let mut grades_average =\
    \ 0.0;\n    let mut grades_letter_grades = Vec::new();\n    grades_len = grades_len.saturating_sub(1);\
    \ // remove 0 grades\n    while grades_len > 0 {\n        grades_sum += grades_copy.pop().unwrap();\n\
    \        grades_average += grades_copy.pop().unwrap();\n        grades_letter_grades.push(\n\
    \            match grades_copy.pop().unwrap() {\n                0.0 => \"D\"\
    ,\n                1.0 => \"D+\",\n                2.0 => \"D-\",\n          \
    \      3.0 => \"C\",\n                4.0 => \"C+\",\n                5.0 => \"\
    C-\",\n                6.0 => \"B\",\n                7.0 => \"B+\",\n       \
    \         8.0 => \"B-\",\n                9.0 => \"A\",\n                10.0\
    \ => \"A+\",\n                11.0 => \"A-\",\n                _ => \"\".to_string(),\n\
    \            }\n        );\n    }\n    grades_average /= grades_len;\n    grades_letter_grades.push(match\
    \ grades_average {\n        0.0 => \"E\",\n        1.0 => \"D+\",\n        2.0\
    \ => \"D-\",\n        3.0 => \"C\",\n        4.0 => \"C+\",\n        5.0 => \"\
    C-\",\n        6.0 => \"B\",\n        7.0 => \"B+\",\n        8.0 => \"B-\",\n\
    \        9.0 => \"A\",\n        10.0 => \"A+\",\n        11.0 => \"A-\",\n   \
    \     _ => \"\".to_string(),\n    });\n    grades_letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpozjtr0l5.rs:46:22\n\
    \   |\n33 | /             match grades_copy.pop().unwrap() {\n34 | |         \
    \        0.0 => \"D\",\n35 | |                 1.0 => \"D+\",\n36 | |        \
    \         2.0 => \"D-\",\n...  |\n45 | |                 11.0 => \"A-\",\n   |\
    \ |                         ---- this and all prior arms are found to be of type\
    \ `&str`\n46 | |                 _ => \"\".to_string(),\n   | |              \
    \        ^^^^^^^^^^^^^^\n   | |                      |\n   | |               \
    \       expected `&str`, found struct `String`\n   | |                      help:\
    \ consider borrowing here: `&\"\".to_string()`\n47 | |             }\n   | |_____________-\
    \ `match` arms have incompatible types\n\nerror[E0277]: cannot divide-assign `f64`\
    \ by `usize`\n  --> /tmp/tmpozjtr0l5.rs:50:20\n   |\n50 |     grades_average /=\
    \ grades_len;\n   |                    ^^ no implementation for `f64 /= usize`\n\
    \   |\n   = help: the trait `DivAssign<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `DivAssign<Rhs>`:\n    \
    \         <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n        \
    \     <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n            \
    \ <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n             <i16\
    \ as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and 20 others\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpozjtr0l5.rs:64:14\n\
    \   |\n51 |       grades_letter_grades.push(match grades_average {\n   |  _______________________________-\n\
    52 | |         0.0 => \"E\",\n53 | |         1.0 => \"D+\",\n54 | |         2.0\
    \ => \"D-\",\n...  |\n63 | |         11.0 => \"A-\",\n   | |                 ----\
    \ this and all prior arms are found to be of type `&str`\n64 | |         _ =>\
    \ \"\".to_string(),\n   | |              ^^^^^^^^^^^^^^\n   | |              |\n\
    \   | |              expected `&str`, found struct `String`\n   | |          \
    \    help: consider borrowing here: `&\"\".to_string()`\n65 | |     });\n   |\
    \ |_____- `match` arms have incompatible types\n\ne"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_grade\
    \ = grades.iter().sum();\n    let mut total_gpa = grades.iter().sum();\n    let\
    \ mut total_gpa_percent = grades.iter().sum();\n    let mut total_gpa_percent\
    \ = total_gpa_percent / total_grade;\n    let mut total_gpa_percent = total_gpa_percent\
    \ * 100;\n    let mut total_gpa_percent = total_gpa_percent.to_string();\n   \
    \ let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n   \
    \ let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbnj4uqpu.rs:52:43\n   |\n\
    52 |     let mut total_gpa_percent = total_gpa_\n   |                        \
    \                   ^ help: add `;` here\n53 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `total_gpa_` in this scope\n  --> /tmp/tmpbnj4uqpu.rs:52:33\n\
    \   |\n52 |     let mut total_gpa_percent = total_gpa_\n   |                 \
    \                ^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `total_gpa`\n\nerror[E0282]: type annotations needed\n  --> /tmp/tmpbnj4uqpu.rs:29:33\n\
    \   |\n28 |     let mut total_gpa_percent = total_gpa_percent * 100;\n   |   \
    \      --------------------- consider giving `total_gpa_percent` a type\n29 |\
    \     let mut total_gpa_percent = total_gpa_percent.to_string();\n   |       \
    \                          ^^^^^^^^^^^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this point\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnj4uqpu.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0282, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut grades_sum: f64 = 0.0;\n    let mut grades_index: usize\
    \ = 0;\n    let mut grades_index_max: usize = 0;\n    let mut grades_index_min:\
    \ usize = 0;\n    let mut grades_index_current: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_index_current_min: usize = 0;\n    let mut grades_index_current_max:\
    \ usize = 0;\n    let mut grades_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcvmxiho9.rs:63:20\n   |\n\
    63 |     let mut grades_\n   |                    ^ help: add `;` here\n64 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcvmxiho9.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ current_grade: f64 = grades.first().unwrap();\n    let mut current_letter_grade:\
    \ String;\n    for grade in grades.iter().skip(1) {\n        let current_grade\
    \ = grade;\n        let current_letter_grade = match current_grade {\n       \
    \     4.0 => \"A+\".to_string(),\n            > 3.7 => \"A\".to_string(),\n  \
    \          > 3.3 => \"A-\".to_string(),\n            > 3.0 => \"B+\".to_string(),\n\
    \            > 2.7 => \"B\".to_string(),\n            > 2.3 => \"B-\".to_string(),\n\
    \            > 2.0 => \"C+\".to_string(),\n            > 1.7 => \"C\".to_string(),\n\
    \            > 1.3 => \"C-\".to_string(),\n            > 1.0 => \"D+\".to_string(),\n\
    \            > 0.7 => \"D\".to_string(),\n            > 0.0 => \"D-\".to_string(),\n\
    \            _ => \"E\".to_string(),\n        };\n        grades_vec.push(current_letter_grade);\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpqb9t6rja.rs:30:13\n \
    \  |\n30 |             > 3.7 => \"A\".to_string(),\n   |             ^ expected\
    \ pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqb9t6rja.rs:24:34\n\
    \   |\n24 |     let mut current_grade: f64 = grades.first().unwrap();\n   |  \
    \                          ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                            |\n   |                            expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     let\
    \ mut current_grade: f64 = *grades.first().unwrap();\n   |                   \
    \               +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"B+\";\n        } else if grade > 2.7 {\n      \
    \      letter_grade += \"B\";\n        } else if grade > 2.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade > 1.3 {\n            letter_grade += \"\
    C+\";\n        } else if grade > 1.7 {\n            letter_grade += \"C\";\n \
    \       } else if grade > 1.0 {\n            letter_grade += \"C-\";\n       \
    \ } else if grade > 0.7 {\n            letter_grade += \"D+\";\n        } else\
    \ if grade > 0.3 {\n            letter_grade += \"D\";\n        } else if grade\
    \ > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n           \
    \ letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7ium2f0u.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::new();\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::new();\n            current_grade\
    \ = grade;\n        }\n        current_letter_grade += &format!(\"{}\", grade\
    \ - current_grade);\n    }\n    letter_grades.push(current_letter_grade);\n  \
    \  letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp0u_rkq8l.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_iter.next().unwrap();\n  \
    \  let mut current_letter_grade = String::new();\n    \n    while let Some(grade)\
    \ = grades_iter.next() {\n        if grade > current_grade {\n            current_letter_grade\
    \ = current_grade.to_string();\n            current_grade = grade;\n        }\n\
    \        \n        if grade == current_grade {\n            current_letter_grade\
    \ += &format!(\"+{}\", current_grade);\n        }\n        \n        if grade\
    \ < current_grade {\n            current_letter_grade += &format!(\"-{}\", current_grade);\n\
    \        }\n        \n        letter_grades.push(current_letter_grade);\n    }\n\
    \    \n    letter_grades.push(current_letter_grade);\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `current_letter_grade`\n  --> /tmp/tmp_i6ge_82.rs:45:24\n\
    \   |\n26 |     let mut current_letter_grade = String::new();\n   |         ------------------------\
    \ move occurs because `current_letter_grade` has type `String`, which does not\
    \ implement the `Copy` trait\n...\n42 |         letter_grades.push(current_letter_grade);\n\
    \   |                            -------------------- value moved here, in previous\
    \ iteration of loop\n...\n45 |     letter_grades.push(current_letter_grade);\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpa =\
    \ grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let mut\
    \ grade_index = 0;\n    let mut gpa_sum = 0;\n    let mut gpa_sum_index = 0;\n\
    \    let mut gpa_sum_index2 = 0;\n    let mut gpa_sum_index3 = 0;\n    let mut\
    \ gpa_sum_index4 = 0;\n    let mut gpa_sum_index5 = 0;\n    let mut gpa_sum_index6\
    \ = 0;\n    let mut gpa_sum_index7 = 0;\n    let mut gpa_sum_index8 = 0;\n   \
    \ let mut gpa_sum_index9 = 0;\n    let mut gpa_sum_index10 = 0;\n    let mut gpa_sum_index11\
    \ = 0;\n    let mut gpa_sum_index12 = 0;\n    let mut gpa_sum_index13 = 0;\n \
    \   let mut gpa_sum_index14 = 0;\n    let mut gpa_sum_index15 = 0;\n    let mut\
    \ gpa_sum_index16 = 0;\n    let mut gpa_sum_index17 = 0;\n    let mut gpa_sum_index18\
    \ = 0;\n    let mut gpa_sum_index19 = 0;\n    let mut gpa_sum_index20 = 0;\n \
    \   let mut gpa_sum_index21 = 0;\n    let mut gpa_sum_index22 = 0;\n    let mut\
    \ gpa_sum_index23 = 0;\n    let mut gpa_sum_index24 = 0;\n    let mut gpa_sum_index25\
    \ = 0;\n    let mut gpa_sum_index26 = 0;\n    let mut gpa_sum_index27 = 0;\n \
    \   let mut gpa_sum_index28 = 0;\n    let mut gpa_sum_index29 = 0;\n    let mut\
    \ gpa_sum_index30 = 0;\n    let mut gpa_sum_index31 = 0;\n    let mut gpa_sum_index32\
    \ = 0;\n    let mut gpa_sum_index33 = 0;\n    let mut gpa_sum_index34 = 0;\n \
    \   let mut gpa_sum_index35 = 0;\n    let mut gpa_sum_index36 = 0;\n    let mut\
    \ gpa_sum_index37 = 0;\n    let mut gpa_sum_index38 = 0;\n    let mut gpa_sum_index39\
    \ = 0;\n    let mut gpa_sum_index40 = 0;\n    let mut gpa_sum_index41 = 0;\n \
    \   let mut gpa_sum_index42 = 0;\n    let mut gpa_sum_index43 = 0;\n    let mut\
    \ gpa_sum_index44 = 0;\n    let mut gpa_sum_index45 = 0;\n    let mut gpa_sum_index46\
    \ = 0;\n    let mut gpa_sum\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpaq1qq254.rs:74:20\n   |\n\
    74 |     let mut gpa_sum\n   |                    ^ help: add `;` here\n75 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaq1qq254.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    for grade in\
    \ grades {\n        total_grade += grade;\n        total_gpa = total_grade / grades.len();\n\
    \        grades_vec.push(format!(\"{}\", total_gpa));\n    }\n    grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp5mv5gkr6.rs:28:33\n\
    \   |\n28 |         total_gpa = total_grade / grades.len();\n   |            \
    \                     ^ no implementation for `f64 / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    \n \
    \   for grade in grades {\n        if grade > gpa {\n            letter_grade\
    \ = \"A+\";\n        } else if grade > 3.0 {\n            letter_grade = \"A\"\
    ;\n        } else if grade > 2.0 {\n            letter_grade = \"A-\";\n     \
    \   } else if grade > 1.0 {\n            letter_grade = \"B+\";\n        } else\
    \ if grade > 0.7 {\n            letter_grade = \"B\";\n        } else if grade\
    \ > 0.3 {\n            letter_grade = \"B-\";\n        } else if grade > 0.0 {\n\
    \            letter_grade = \"C+\";\n        } else if grade > -0.7 {\n      \
    \      letter_grade = \"C\";\n        } else if grade > -0.3 {\n            letter_grade\
    \ = \"C-\";\n        } else if grade > -0.0 {\n            letter_grade = \"D+\"\
    ;\n        } else if grade > -0.9 {\n            letter_grade = \"D\";\n     \
    \   } else if grade > -1.0 {\n            letter_grade = \"D-\";\n        } else\
    \ {\n            letter_grade = \"E\";\n        }\n        grades_vec.push(letter_grade);\n\
    \        gpa -= grade;\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdoonv9a0.rs:29:28\n   |\n\
    25 |     let mut letter_grade: String;\n   |                           ------\
    \ expected due to this type\n...\n29 |             letter_grade = \"A+\";\n  \
    \ |                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdoonv9a0.rs:31:28\n\
    \   |\n25 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n31 |             letter_grade = \"A\"\
    ;\n   |                            ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdoonv9a0.rs:33:28\n\
    \   |\n25 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n33 |             letter_grade = \"A-\"\
    ;\n   |                            ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                            |\n   |                    \
    \        expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdoonv9a0.rs:35:28\n   |\n25 |     let mut letter_grade: String;\n\
    \   |                           ------ expected due to this type\n...\n35 |  \
    \           letter_grade = \"B+\";\n   |                            ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdoonv9a0.rs:37:28\n   |\n25 |\
    \     let mut letter_grade: String;\n   |                           ------ expected\
    \ due to this type\n...\n37 |             letter_grade = \"B\";\n   |        \
    \                    ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp5ezrpw3o.rs:47:1\n   |\n46 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    47 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n46 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_iter.next().unwrap();\n  \
    \  let mut current_letter_grade = String::new();\n    \n    while let Some(grade)\
    \ = grades_iter.next() {\n        if grade > current_grade {\n            current_letter_grade\
    \ += \"+\";\n        } else if grade < current_grade {\n            current_letter_grade\
    \ += \"-\";\n        } else {\n            current_letter_grade += current_grade;\n\
    \        }\n        current_grade = grade;\n    }\n    \n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_eh3phoi.rs:34:37\n   |\n\
    34 |             current_letter_grade += current_grade;\n   |                \
    \                     ^^^^^^^^^^^^^ expected `str`, found `f64`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    for grade in grades {\n        let grade = grade / total_grade;\n\
    \        let letter_grade = match grade {\n            0.0 <= grade && grade <=\
    \ 1.0 => \"A+\".to_string(),\n            1.0 <= grade && grade <= 1.7 => \"A\"\
    .to_string(),\n            1.7 <= grade && grade <= 1.3 => \"A-\".to_string(),\n\
    \            1.3 <= grade && grade <= 1.0 => \"B+\".to_string(),\n           \
    \ 1.0 <= grade && grade <= 1.7 => \"B\".to_string(),\n            1.7 <= grade\
    \ && grade <= 1.3 => \"B-\".to_string(),\n            1.3 <= grade && grade <=\
    \ 1.0 => \"C+\".to_string(),\n            1.0 <= grade && grade <= 1.7 => \"C\"\
    .to_string(),\n            1.7 <= grade && grade <= 1.3 => \"C-\".to_string(),\n\
    \            1.3 <= grade && grade <= 1.0 => \"D+\".to_string(),\n           \
    \ 1.0 <= grade && grade <= 1.7 => \"D\".to_string(),\n            1.7 <= grade\
    \ && grade <= 1.3 => \"D-\".to_string(),\n            1.3 <= grade && grade <=\
    \ 1.0 => \"E\".to_string(),\n            _ => \"\".to_string(),\n        };\n\
    \        grades_vec.push(letter_grade);\n    }\n    grades_vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `<=`\n\
    \  --> /tmp/tmp2w5evh4j.rs:31:17\n   |\n31 |             0.0 <= grade && grade\
    \ <= 1.0 => \"A+\".to_string(),\n   |                 ^^ expected one of `...`,\
    \ `..=`, `..`, `=>`, `if`, or `|`\n\nwarning: unreachable statement\n  --> /tmp/tmp2w5evh4j.rs:46:9\n\
    \   |\n30 |           let letter_grade = match grade {\n   |  ____________________________-\n\
    31 | |             0.0 <= grade && grade <= 1.0 => \"A+\".to_string(),\n32 | |\
    \             1.0 <= grade && grade <= 1.7 => \"A\".to_string(),\n33 | |     \
    \        1.7 <= grade && grade <= 1.3 => \"A-\".to_string(),\n...  |\n44 | | \
    \            _ => \"\".to_string(),\n45 | |         };\n   | |_________- any code\
    \ following this expression is unreachable\n46 |           grades_vec.push(letter_grade);\n\
    \   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n   |\n \
    \  = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut letter_grade = String::new();\n    while gpa > 0.0 {\n        let\
    \ grade = gpa % 10.0;\n        gpa /= 10.0;\n        letter_grade += &format!(\"\
    {}+\", grade);\n    }\n    letter_grades.push(letter_grade);\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpr8z0jek7.rs:24:9\n\
    \   |\n24 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    A\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.3 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade > -0.7 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade > -1.0 {\n            grades_string.push_str(\"\
    C-\");\n        } else if grade > -1.7 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade > -2.0 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade > -2.7 {\n            grades_string.push_str(\"\
    D-\");\n        } else if grade > -3.0 {\n            grades_string.push_str(\"\
    E\");\n        } else {\n            grades_string.push_str(\"F\");\n        }\n\
    \    }\n    grades_string.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpp21eg_25.rs:55:19\n    |\n55\
    \  |       grades_string.into_iter().collect()\n    |                     ^^^^^^^^^\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    let mut current_letter_grade_index3 = 0;\n    let mut current_letter_grade_index4\
    \ = 0;\n    let mut current_letter_grade_index5 = 0;\n    let mut current_letter_grade_index6\
    \ = 0;\n    let mut current_letter_grade_index7 = 0;\n    let mut current_letter_grade_index8\
    \ = 0;\n    let mut current_letter_grade_index9 = 0;\n    let mut current_letter_grade_index10\
    \ = 0;\n    let mut current_letter_grade_index11 = 0;\n    let mut current_letter_grade_index12\
    \ = 0;\n    let mut current_letter_grade_index13 = 0;\n    let mut current_letter_grade_index14\
    \ = 0;\n    let mut current_letter_grade_index15 = 0;\n    let mut current_letter_grade_index16\
    \ = 0;\n    let mut current_letter_grade_index17 = 0;\n    let mut current_letter_grade_index18\
    \ = 0;\n    let mut current_letter_grade_index19 = 0;\n    let mut current_letter_grade_index20\
    \ = 0;\n    let mut current_letter_grade_index21 = 0;\n    let mut current_letter_grade_index22\
    \ = 0;\n    let mut current_letter_grade_index23 = 0;\n    let mut current_letter_grade_index24\
    \ = 0;\n    let mut current_letter_grade_index25 = 0;\n    let mut current_letter_grade_index26\
    \ = 0;\n    let mut current_letter_grade_index27 = 0;\n    let mut current_letter_grade_index28\
    \ = 0;\n    let mut current_letter_grade_index29 = 0;\n    let mut current_letter_grade_index30\
    \ = 0;\n    let mut current_letter_grade_index31 = 0;\n    let mut current_letter_grade_index32\
    \ = 0;\n    let mut current_letter_grade_index33 = 0;\n    let mut current_letter_grade_index34\
    \ = 0;\n    let mut current_letter_grade_index35 = 0;\n    let mut current_letter_grade_index36\
    \ = 0;\n    let mut current_letter_grade_index37 = 0;\n    let mut current_letter_grade_index38\
    \ = 0;\n    let mut current_letter_grade_index39 = 0;\n    let mut current_letter_grade_index40\
    \ = 0;\n    let mut current_letter_grade_index41 = 0;\n    let mut current_letter_grade_index42\
    \ = 0;\n    let mut current_letter_grade_index43 = 0;\n    let mut current_letter_grade_index44\
    \ = 0;\n    let mut current_letter_grade_index45 = 0;\n    let mut current_letter_grade_index46\
    \ = 0;\n    let mut current_letter_grade_index47 = 0;\n    let mut current_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm8fwgs7d.rs:74:21\n   |\n\
    74 |     let mut current_\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm8fwgs7d.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_gpa\
    \ = grades_copy[0];\n    let mut current_gpa_index = 0;\n    while current_grade\
    \ != 0.0 {\n        if current_grade > current_gpa {\n            current_letter_grade\
    \ = String::from(&grades_copy[current_gpa_index..current_gpa_index + 3]);\n  \
    \          current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n            current_letter_grade = &current_letter_grade[current_letter_grade_index..current_letter_grade_index\
    \ + 1];\n            current_letter_grade = &current_letter_\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpsq02ytv4.rs:64:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n30 |     while current_grade != 0.0 {\n   |                             \
    \   - unclosed delimiter\n31 |         if current_grade > current_gpa {\n   |\
    \                                        - this delimiter might not be properly\
    \ closed...\n...\n54 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n64 | }\n   |   ^\n\nerror[E0425]: cannot find value `current_letter_` in\
    \ this scope\n  --> /tmp/tmpsq02ytv4.rs:53:37\n   |\n53 |             current_letter_grade\
    \ = &current_letter_\n   |                                     ^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `current_letter_grade`\n\n\
    error[E0277]: the trait bound `String: From<&[f64]>` is not satisfied\n  --> /tmp/tmpsq02ytv4.rs:32:36\n\
    \   |\n32 |             current_letter_grade = String::from(&grades_copy[current_gpa_index..current_gpa_index\
    \ + 3]);\n   |                                    ^^^^^^^^^^^^ the trait `From<&[f64]>`\
    \ is not implemented for `String`\n   |\n   = help: the following other types\
    \ implement trait `From<T>`:\n             <String as From<&String>>\n       \
    \      <String as From<&mut str>>\n             <String as From<&str>>\n     \
    \        <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n\
    \             <String as From<char>>\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsq02ytv4.rs:33:36\n   |\n26 |     let mut current_letter_grade = String::new();\n\
    \   |                                    ------------- expected due to this value\n\
    ...\n33 |             current_letter_grade = &current_letter_grade[..current_letter_grade.len()\
    \ - 1];\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n33 |             current_letter_grade = (&current_letter_grade[..current_"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_grade\
    \ = grades.iter().sum();\n    let mut total_gpa = grades.iter().sum();\n    let\
    \ mut gpa = grades.iter().sum();\n    let mut gpa_sum = 0;\n    let mut gpa_sum2\
    \ = 0;\n    let mut gpa_sum3 = 0;\n    let mut gpa_sum4 = 0;\n    let mut gpa_sum5\
    \ = 0;\n    let mut gpa_sum6 = 0;\n    let mut gpa_sum7 = 0;\n    let mut gpa_sum8\
    \ = 0;\n    let mut gpa_sum9 = 0;\n    let mut gpa_sum10 = 0;\n    let mut gpa_sum11\
    \ = 0;\n    let mut gpa_sum12 = 0;\n    let mut gpa_sum13 = 0;\n    let mut gpa_sum14\
    \ = 0;\n    let mut gpa_sum15 = 0;\n    let mut gpa_sum16 = 0;\n    let mut gpa_sum17\
    \ = 0;\n    let mut gpa_sum18 = 0;\n    let mut gpa_sum19 = 0;\n    let mut gpa_sum20\
    \ = 0;\n    let mut gpa_sum21 = 0;\n    let mut gpa_sum22 = 0;\n    let mut gpa_sum23\
    \ = 0;\n    let mut gpa_sum24 = 0;\n    let mut gpa_sum25 = 0;\n    let mut gpa_sum26\
    \ = 0;\n    let mut gpa_sum27 = 0;\n    let mut gpa_sum28 = 0;\n    let mut gpa_sum29\
    \ = 0;\n    let mut gpa_sum30 = 0;\n    let mut gpa_sum31 = 0;\n    let mut gpa_sum32\
    \ = 0;\n    let mut gpa_sum33 = 0;\n    let mut gpa_sum34 = 0;\n    let mut gpa_sum35\
    \ = 0;\n    let mut gpa_sum36 = 0;\n    let mut gpa_sum37 = 0;\n    let mut gpa_sum38\
    \ = 0;\n    let mut gpa_sum39 = 0;\n    let mut gpa_sum40 = 0;\n    let mut gpa_sum41\
    \ = 0;\n    let mut gpa_sum42 = 0;\n    let mut gpa_sum43 = 0;\n    let mut gpa_sum44\
    \ = 0;\n    let mut gpa_sum45 = 0;\n    let mut gpa_sum46 = 0;\n    let mut gpa_sum47\
    \ = 0;\n    let mut gpa_sum48 = 0;\n    let mut gpa_sum49 = 0;\n    let mut gpa_sum50\
    \ = 0;\n    let mut gpa_sum51 = 0;\n    let mut gpa_sum52 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpznp71att.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpa =\
    \ grades.iter().sum();\n    let mut letter_grade = String::new();\n    \n    while\
    \ gpa > 0.0 {\n        let mut letter_grade = String::new();\n        if gpa <\
    \ 3.0 {\n            letter_grade += \"D-\";\n            gpa -= 3.0;\n      \
    \  } else if gpa < 3.3 {\n            letter_grade += \"C-\";\n            gpa\
    \ -= 3.3;\n        } else if gpa < 3.7 {\n            letter_grade += \"C-\";\n\
    \            gpa -= 3.7;\n        } else if gpa < 4.0 {\n            letter_grade\
    \ += \"B-\";\n            gpa -= 4.0;\n        } else if gpa < 4.3 {\n       \
    \     letter_grade += \"B-\";\n            gpa -= 4.3;\n        } else if gpa\
    \ < 4.7 {\n            letter_grade += \"B-\";\n            gpa -= 4.7;\n    \
    \    } else if gpa < 5.0 {\n            letter_grade += \"B-\";\n            gpa\
    \ -= 5.0;\n        } else if gpa < 5.3 {\n            letter_grade += \"B-\";\n\
    \            gpa -= 5.3;\n        } else if gpa < 5.7 {\n            letter_grade\
    \ += \"B-\";\n            gpa -= 5.7;\n        } else if gpa < 6.0 {\n       \
    \     letter_grade += \"B-\";\n            gpa -= 6.0;\n        } else if gpa\
    \ < 6.3 {\n            letter_grade += \"B-\";\n            gpa -= 6.3;\n    \
    \    } else if gpa < 6.7 {\n            letter_grade += \"B-\";\n            gpa\
    \ -= 6.7;\n        } else if gpa < 7.0 {\n            letter_grade += \"B-\";\n\
    \            gpa -= 7.0;\n        } else if gpa < 7.3 {\n            letter_grade\
    \ += \"B-\";\n            gpa -= 7.3;\n        } else if gpa < 7.7 {\n       \
    \     letter_grade += \"B-\";\n            gpa -= 7.7;\n        } else if gpa\
    \ < 8.0 {\n            letter_grade += \"B-\";\n            gpa -= 8.0;\n    \
    \    } else if gpa < 8.3 {\n            letter_grade += \"B-\";\n            gpa\
    \ -= 8.3;\n        } else if gpa < 8.7 {\n            letter_grade += \"B-\";\n\
    \            gpa -= 8.7;\n        } else if gpa < 9.0 {\n            letter_grade\
    \ += \"B-\";\n            gpa \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpmqk7qxn6.rs:96:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     while gpa > 0.0 {\n   |                     - unclosed delimiter\n\
    ...\n83 |         } else if gpa < 9.0 {\n   |                             - this\
    \ delimiter might not be properly closed...\n...\n86 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n96 | }\n   |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmqk7qxn6.rs:27:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n27 | /\
    \     while gpa > 0.0 {\n28 | |         let mut letter_grade = String::new();\n\
    29 | |         if gpa < 3.0 {\n30 | |             letter_grade += \"D-\";\n...\
    \  |\n95 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n96 | | }\n   | |__^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror[E0277]: can't compare `()` with `{float}`\n  --> /tmp/tmpmqk7qxn6.rs:27:15\n\
    \   |\n27 |     while gpa > 0.0 {\n   |               ^ no implementation for\
    \ `() < {float}` and `() > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>`\
    \ is not implemented for `()`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             ()\n             (A, B, C, D, E, F, G,\
    \ H, I, J, K, L)\n             (B, C, D, E, F, G, H, I, J, K, L)\n           \
    \  (C, D, E, F, G, H, I, J, K, L)\n             (D, E, F, G, H, I, J, K, L)\n\
    \             (E, F, G, H, I, J, K, L)\n             (F, G, H, I, J, K, L)\n \
    \            (G, H, I, J, K, L)\n           and 5 others\n\nerror[E0277]: can't\
    \ compare `()` with `{float}`\n  --> /tmp/tmpmqk7qxn6.rs:29:16\n   |\n29 |   \
    \      if gpa < 3.0 {\n   |                ^ no implementation for `() < {float}`\
    \ and `() > {float}`\n   |\n   = help: the trait `"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\");\n    \
    \    } else if grade > 3.7 {\n            letter_grades.push(\"A\");\n       \
    \ } else if grade > 3.3 {\n            letter_grades.push(\"A-\");\n        }\
    \ else if grade > 3.0 {\n            letter_grades.push(\"B+\");\n        } else\
    \ if grade > 2.7 {\n            letter_grades.push(\"B\");\n        } else if\
    \ grade > 2.3 {\n            letter_grades.push(\"B-\");\n        } else if grade\
    \ > 2.0 {\n            letter_grades.push(\"C+\");\n        } else if grade >\
    \ 1.7 {\n            letter_grades.push(\"C\");\n        } else if grade > 1.3\
    \ {\n            letter_grades.push(\"C-\");\n        } else if grade > 1.0 {\n\
    \            letter_grades.push(\"D+\");\n        } else if grade > 0.7 {\n  \
    \          letter_grades.push(\"D\");\n        } else if grade > 0.0 {\n     \
    \       letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccj3m2w4.rs:53:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n53 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut total_gpa = grades.iter().sum();\n    let mut total_letter_grades\
    \ = grades.iter().cloned().map(|x| {\n        if x > 3.0 {\n            grades_copy.push(x);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(x - 3.0);\n\
    \            grades_copy.push(x - 3.0);\n            grades_copy.push(\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpycq5w5fg.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n26 |     let mut total_letter_grades = grades.iter().cloned().map(|x| {\n\
    \   |                                                             -    - unclosed\
    \ delimiter\n   |                                                            \
    \ |\n   |                                                             unclosed\
    \ delimiter\n27 |         if x > 3.0 {\n   |                    - this delimiter\
    \ might not be properly closed...\n...\n79 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n89 | }\n   |   ^\n\nerror: expected one of\
    \ `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpycq5w5fg.rs:89:3\n\
    \   |\n89 | }\n   |   ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpycq5w5fg.rs:78:29\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n78 |             grades_copy.push(\n   |     \
    \                        ^ unclosed delimiter\n79 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror: aborting due to 3 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades_copy.len();\n    let mut grades_sorted = grades_copy.clone();\n   \
    \ grades_sorted.sort();\n    let mut grades_sorted_len = grades_sorted.len();\n\
    \    let mut grades_sorted_copy = grades_sorted.clone();\n    let mut grades_sorted_copy_len\
    \ = grades_sorted_copy.len();\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_sorted_copy_len\
    \ + grades_sorted_len;\n    let mut grades_sorted_copy_len = grades_\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3qudwhqa.rs:52:45\n   |\n\
    52 |     let mut grades_sorted_copy_len = grades_\n   |                      \
    \                       ^ help: add `;` here\n53 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `grades_` in this scope\n  --> /tmp/tmp3qudwhqa.rs:52:38\n\
    \   |\n52 |     let mut grades_sorted_copy_len = grades_\n   |               \
    \                       ^^^^^^^ help: a local variable with a similar name exists:\
    \ `grades`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n   -->\
    \ /tmp/tmp3qudwhqa.rs:26:19\n    |\n26  |     grades_sorted.sort();\n    |   \
    \                ^^^^ the trait `Ord` is not implemented for `f64`\n    |\n  \
    \  = help: the following other types implement trait `Ord`:\n              i128\n\
    \              i16\n              i32\n              i64\n              i8\n \
    \             isize\n              u128\n              u16\n            and 4\
    \ others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3qudwhqa.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n    }\n    let mut total_grade_int: i64 = total_grade as i64;\n \
    \   let mut total_grade_float = total_grade as f64;\n    let mut total_grade_frac\
    \ = total_grade as f64;\n    let mut total_grade_frac_int = total_grade as i64;\n\
    \    let mut total_grade_frac_float = total_grade as f64;\n    let mut total_grade_frac_frac\
    \ = total_grade as f64;\n    let mut total_grade_frac_frac_int = total_grade as\
    \ i64;\n    let mut total_grade_frac_frac_float = total_grade as f64;\n    let\
    \ mut total_grade_frac_frac_frac = total_grade as f64;\n    let mut total_grade_frac_frac_frac_int\
    \ = total_grade as i64;\n    let mut total_grade_frac_frac_frac_float = total_grade\
    \ as f64;\n    let mut total_grade_frac_frac_frac_frac = total_grade as f64;\n\
    \    let mut total_grade_frac_frac_frac_frac_int = total_grade as i64;\n    let\
    \ mut total_grade_frac_frac_frac_float = total_grade as f64;\n    let mut total_grade_frac_frac_frac_frac\
    \ = total_grade as f64;\n    let mut total_grade_frac_frac_frac_frac_int = total_grade\
    \ as i64;\n    let mut total_grade_frac_frac_frac_frac_float = total_grade as\
    \ f64;\n    let mut total_grade_frac_frac_frac_frac_frac = total_grade as f64;\n\
    \    let mut total_grade_frac_frac_frac_frac_frac_int = total_grade as i64;\n\
    \    let mut total_grade_frac_frac_frac_frac_float = total_grade as f64;\n   \
    \ let mut total_grade_frac_frac_frac_frac_frac = total_grade as f64;\n    let\
    \ mut total_grade_frac_frac_frac_frac_frac_int = total_grade as i64;\n    let\
    \ mut total_grade_frac_frac_frac_frac_frac_float = total_grade as f64;\n    let\
    \ mut total_grade_frac_frac_frac_frac_frac_frac = total_grade as f64;\n    let\
    \ mut total_grade_frac_frac_frac_frac_frac_frac_int = total_grade as i64\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpr7mmm9gz.rs:52:79\n   |\n\
    52 |     let mut total_grade_frac_frac_frac_frac_frac_frac_int = total_grade as\
    \ i64\n   |                                                                  \
    \             ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr7mmm9gz.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n    let\
    \ mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    while grades_copy.len() > 0 {\n        let mut current_grade\
    \ = grades_copy.first().unwrap();\n        let mut current_letter_grade = String::new();\n\
    \        let mut current_letter_grade_index = 0;\n        \n        while grades_copy.len()\
    \ > 0 {\n            if current_grade > current_grade.clone() + 0.3 {\n      \
    \          current_letter_grade += &'A';\n                current_letter_grade_index\
    \ += 1;\n            } else if current_grade > current_grade.clone() - 0.3 {\n\
    \                current_letter_grade += &'B';\n                current_letter_grade_index\
    \ += 1;\n            } else if current_grade > current_grade.clone() + 0.1 {\n\
    \                current_letter_grade += &'C';\n                current_letter_grade_index\
    \ += 1;\n            } else if current_grade > current_grade.clone() - 0.1 {\n\
    \                current_letter_grade += &'D';\n                current_letter_grade_index\
    \ += 1;\n            } else if current_grade > current_grade.clone() + 0.07 {\n\
    \                current_letter_grade += &'E';\n                current_letter_grade_index\
    \ += 1;\n            } else {\n                current_letter_grade += &'F';\n\
    \                current_letter_grade_index += 1;\n            }\n           \
    \ \n            current_grade -= current_grade.clone();\n            grades_copy.pop();\n\
    \        }\n        \n        letter_grades.push(current_letter_grade.to_string());\n\
    \        current_letter_grade = String::new();\n        current_letter_grade_index\
    \ = 0;\n    }\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpll4vosez.rs:35:32\n   |\n\
    35 |             if current_grade > current_grade.clone() + 0.3 {\n   |      \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                 \
    \               |\n   |                                expected `&f64`, found\
    \ `f64`\n   |                                help: consider borrowing here: `&(current_grade.clone()\
    \ + 0.3)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpll4vosez.rs:36:41\n\
    \   |\n36 |                 current_letter_grade += &'A';\n   |              \
    \                           ^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpll4vosez.rs:38:39\n   |\n38 |             }\
    \ else if current_grade > current_grade.clone() - 0.3 {\n   |                \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                    \
    \                   |\n   |                                       expected `&f64`,\
    \ found `f64`\n   |                                       help: consider borrowing\
    \ here: `&(current_grade.clone() - 0.3)`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpll4vosez.rs:39:41\n   |\n39 |                 current_letter_grade\
    \ += &'B';\n   |                                         ^^^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpll4vosez.rs:41:39\n\
    \   |\n41 |             } else if current_grade > current_grade.clone() + 0.1\
    \ {\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                       |\n   |                          \
    \             expected `&f64`, found `f64`\n   |                             \
    \          help: consider borrowing here: `&(current_grade.clone() + 0.1)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpll4vosez.rs:42:41\n   |\n42 |  \
    \               current_letter_grade += &'C';\n   |                          \
    \               ^^^^ expected `str`, found `char`\n   |\n   = note: "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_gpa: f64 = 0.0;\n    for grade in grades {\n        total_gpa += grade;\n\
    \    }\n    let mut total_gpa = total_gpa / grades.len();\n    let mut total_gpa\
    \ = total_gpa as f64;\n    let mut total_gpa = total_gpa as i32;\n    let mut\
    \ total_gpa = total_gpa as u16;\n    let mut total_gpa = total_gpa as u8;\n  \
    \  let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa as\
    \ u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut total_gpa = total_gpa as u8;\n    let mut total_gpa = total_gpa\
    \ as u8;\n    let mut \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpvp7owgw_.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected identifier\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n  --> /tmp/tmpvp7owgw_.rs:28:35\n   |\n28 |     let mut total_gpa\
    \ = total_gpa / grades.len();\n   |                                   ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_len\
    \ = grades.len();\n    let mut grades_sum = 0.0;\n    let mut grades_average =\
    \ 0.0;\n    let mut grades_min = grades.iter().min().unwrap();\n    let mut grades_max\
    \ = grades.iter().max().unwrap();\n    let mut grades_min_len = grades_min.len();\n\
    \    let mut grades_max_len = grades_max.len();\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_len;\n    let mut grades_max_average\
    \ = grades_max.iter().sum::<f64>() / grades_len;\n    let mut grades_min_average\
    \ = grades_min.iter().sum::<f64>() / grades_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdtvkm4kw.rs:47:74\n   |\n\
    47 |     let mut grades_min_average = grades_min.iter().sum::<f64>() / grades_\n\
    \   |                                                                        \
    \  ^ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `grades_` in this scope\n  --> /tmp/tmpdtvkm4kw.rs:47:67\n   |\n\
    47 |     let mut grades_min_average = grades_min.iter().sum::<f64>() / grades_\n\
    \   |                                                                   ^^^^^^^\
    \ help: a local variable with a similar name exists: `grades`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpdtvkm4kw.rs:27:40\n\
    \     |\n27   |     let mut grades_min = grades.iter().min().unwrap();\n     |\
    \                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpdtvkm4kw.rs:28:40\n\
    \     |\n28   |     let mut grades_max = grades.iter().max().unwrap();\n     |\
    \                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0599]: no method named `len` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpdtvkm4kw.rs:29:41\n   |\n29 |     let mut grades_min_len\
    \ = grades_min.le"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_vec.push(\"B+\");\n\
    \        } else if grade > 2.7 {\n            grades_vec.push(\"B\");\n      \
    \  } else if grade > 2.3 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            grades_vec.push(\"C+\");\n        } else if grade\
    \ > 1.7 {\n            grades_vec.push(\"C\");\n        } else if grade > 1.3\
    \ {\n            grades_vec.push(\"C-\");\n        } else if grade > 1.0 {\n \
    \           grades_vec.push(\"D+\");\n        } else if grade > 0.7 {\n      \
    \      grades_vec.push(\"D\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"\
    D-\");\n        } else {\n            grades_vec.push(\"E\");\n        }\n   \
    \ }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:26:29\n   |\n\
    26 |             grades_vec.push(\"B+\");\n   |                             ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \           |\n   |                             expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:28:29\n\
    \   |\n28 |             grades_vec.push(\"B\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:30:29\n\
    \   |\n30 |             grades_vec.push(\"B-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:32:29\n\
    \   |\n32 |             grades_vec.push(\"C+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:34:29\n\
    \   |\n34 |             grades_vec.push(\"C\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:36:29\n\
    \   |\n36 |             grades_vec.push(\"C-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3m4vqia.rs:38:29\n\
    \   |\n38 |             grades_vec.push(\"D+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpy7a63zfd.rs:47:1\n   |\n46 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    47 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n46 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut gpa = grades_copy[0];\n    let mut min_gpa = grades_copy[0];\n\
    \    let mut max_gpa = grades_copy[0];\n    let mut min_gpa_pos = 0;\n    let\
    \ mut max_gpa_pos = 0;\n    let mut min_gpa_pos_count = 0;\n    let mut max_gpa_pos_count\
    \ = 0;\n    let mut min_gpa_pos_count_pos = 0;\n    let mut max_gpa_pos_count_pos\
    \ = 0;\n    let mut min_gpa_pos_count_neg = 0;\n    let mut max_gpa_pos_count_neg\
    \ = 0;\n    let mut min_gpa_pos_count_neg2 = 0;\n    let mut max_gpa_pos_count_neg2\
    \ = 0;\n    let mut min_gpa_pos_count_neg3 = 0;\n    let mut max_gpa_pos_count_neg3\
    \ = 0;\n    let mut min_gpa_pos_count_neg4 = 0;\n    let mut max_gpa_pos_count_neg4\
    \ = 0;\n    let mut min_gpa_pos_count_neg5 = 0;\n    let mut max_gpa_pos_count_neg5\
    \ = 0;\n    let mut min_gpa_pos_count_neg6 = 0;\n    let mut max_gpa_pos_count_neg6\
    \ = 0;\n    let mut min_gpa_pos_count_neg7 = 0;\n    let mut max_gpa_pos_count_neg7\
    \ = 0;\n    let mut min_gpa_pos_count_neg8 = 0;\n    let mut max_gpa_pos_count_neg8\
    \ = 0;\n    let mut min_gpa_pos_count_neg9 = 0;\n    let mut max_gpa_pos_count_neg9\
    \ = 0;\n    let mut min_gpa_pos_count_neg10 = 0;\n    let mut max_gpa_pos_count_neg10\
    \ = 0;\n    let mut min_gpa_pos_count_neg11 = 0;\n    let mut max_gpa_pos_count_neg11\
    \ = 0;\n    let mut min_gpa_pos_count_neg12 = 0;\n    let mut max_gpa_pos_count_neg12\
    \ = 0;\n    let mut min_gpa_pos_count_neg13 = 0;\n    let mut max_gpa_pos_count_neg13\
    \ = 0;\n    let mut min_gpa_pos_count_neg14 = 0;\n    let mut max_gpa_pos_count_neg14\
    \ = 0;\n    let mut min_gpa_pos_count_neg15 = 0;\n    let mut max_gpa_pos_count_neg15\
    \ = 0;\n    let mut min_gpa_pos_count_neg16 = 0;\n    let mut max_gpa_pos_count_neg16\
    \ = 0;\n    let mut min_gpa_pos_count_neg17 = 0;\n    let mut max_gpa_pos_count_neg17\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpuww_pu03.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_copy.first().unwrap();\n \
    \   let mut current_letter = String::new();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    \n    while\
    \ grades_copy.len() > 0 {\n        let mut current_grade = grades_copy.first().unwrap();\n\
    \        grades_copy.pop();\n        \n        if current_grade > current_grade.checked_sub(1.7).unwrap()\
    \ {\n            current_letter = \"A\";\n            current_letter_grade = \"\
    A+\";\n            current_letter_grade_index = 0;\n        } else if current_grade\
    \ > current_grade.checked_sub(1.3).unwrap() {\n            current_letter = \"\
    A-\";\n            current_letter_grade = \"A-\";\n            current_letter_grade_index\
    \ = 0;\n        } else if current_grade > current_grade.checked_sub(1).unwrap()\
    \ {\n            current_letter = \"B+\";\n            current_letter_grade =\
    \ \"B+\";\n            current_letter_grade_index = 1;\n        } else if current_grade\
    \ > current_grade.checked_sub(0.7).unwrap() {\n            current_letter = \"\
    B\";\n            current_letter_grade = \"B+\";\n            current_letter_grade_index\
    \ = 1;\n        } else if current_grade > current_grade.checked_sub(0.3).unwrap()\
    \ {\n            current_letter = \"B-\";\n            current_letter_grade =\
    \ \"B-\";\n            current_letter_grade_index = 1;\n        } else if current_grade\
    \ > current_grade.checked_sub(0).unwrap() {\n            current_letter = \"C+\"\
    ;\n            current_letter_grade = \"C+\";\n            current_letter_grade_index\
    \ = 2;\n        } else if current_grade > current_grade.checked_sub(-0.7).unwrap()\
    \ {\n            current_letter = \"C\";\n            current_letter_grade = \"\
    C+\";\n            current_letter_grade_index = 2;\n        } else if current_grade\
    \ > current_grade.checked_sub(-0.3).unwrap() {\n            current_letter = \"\
    C-\";\n            current_letter_grade = \"C-\";\n            current_letter_grade_index\
    \ = 2;\n        } else if current_grade > current_grade.checked_sub(-1.0).unwrap()\
    \ {\n            current_letter = \"D+\";\n            current_letter_grade =\
    \ \"D+\";\n            current_letter_grade_index = 3;\n        } else if current_grade\
    \ > current_grade.checked_sub(-1.0).unwrap() {\n            current_letter = \"\
    D\";\n            current_letter_grade = \"D+\";\n            current_letter_grade_index\
    \ = 3;\n        } else if current_grade > current_grade.checked_sub(-1.0).unwrap()\
    \ {\n            current_letter = \"D-\";\n            current_letter_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7kwo4px3.rs:87:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n30 |     while grades_copy.len() > 0 {\n   |                            \
    \     - unclosed delimiter\n...\n74 |         } else if current_grade > current_grade.checked_sub(-1.0).unwrap()\
    \ {\n   |                                                                    \
    \        - this delimiter might not be properly closed...\n...\n77 | }\n   | -\
    \ ...as it matches this but it has different indentation\n...\n87 | }\n   |  \
    \ ^\n\nerror[E0599]: no method named `checked_sub` found for reference `&f64`\
    \ in the current scope\n  --> /tmp/tmp7kwo4px3.rs:34:42\n   |\n34 |         if\
    \ current_grade > current_grade.checked_sub(1.7).unwrap() {\n   |            \
    \                              ^^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7kwo4px3.rs:35:30\n   |\n26 |     let mut current_letter\
    \ = String::new();\n   |                              ------------- expected due\
    \ to this value\n...\n35 |             current_letter = \"A\";\n   |         \
    \                     ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                              |\n   |                              expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7kwo4px3.rs:36:36\n\
    \   |\n27 |     let mut current_letter_grade = String::new();\n   |          \
    \                          ------------- expected due to this value\n...\n36 |\
    \             current_letter_grade = \"A+\";\n   |                           \
    \         ^^^^- help: try using a conversion method: `.to_string()`\n   |    \
    \                                |\n   |                                    expected\
    \ struct `String`, found `&str`\n\nerror[E0599]: no method named `checked_sub`\
    \ found for reference `&f64` in the current scope\n  --> /tmp/tmp7kwo4px3.rs:38:49\n\
    \   |\n38 |         } else if current_grade > current_grade.checked_sub(1.3).unwra"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_iter.next().unwrap();\n  \
    \  let mut current_letter_grade = String::new();\n    \n    while current_grade\
    \ != 0.0 {\n        if current_grade < 3.0 {\n            current_letter_grade\
    \ += \"A\";\n        } else if current_grade < 3.7 {\n            current_letter_grade\
    \ += \"A-\";\n        } else if current_grade < 4.0 {\n            current_letter_grade\
    \ += \"B+\";\n        } else if current_grade < 4.3 {\n            current_letter_grade\
    \ += \"B\";\n        } else if current_grade < 4.6 {\n            current_letter_grade\
    \ += \"B-\";\n        } else if current_grade < 5.0 {\n            current_letter_grade\
    \ += \"C+\";\n        } else if current_grade < 5.3 {\n            current_letter_grade\
    \ += \"C\";\n        } else if current_grade < 5.6 {\n            current_letter_grade\
    \ += \"C-\";\n        } else if current_grade < 6.0 {\n            current_letter_grade\
    \ += \"D+\";\n        } else if current_grade < 6.3 {\n            current_letter_grade\
    \ += \"D\";\n        } else if current_grade < 6.6 {\n            current_letter_grade\
    \ += \"D-\";\n        } else if current_grade < 7.0 {\n            current_letter_grade\
    \ += \"E\";\n        } else {\n            current_letter_grade += \"F\";\n  \
    \      }\n        \n        letter_grades.push(current_letter_grade);\n      \
    \  \n        current_grade = grades_iter.next().unwrap();\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpuhrigy48.rs:28:25\n\
    \   |\n28 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuhrigy48.rs:29:28\n   |\n29 |         if current_grade < 3.0 {\n   |\
    \                            ^^^\n   |                            |\n   |    \
    \                        expected `&f64`, found floating-point number\n   |  \
    \                          help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuhrigy48.rs:31:35\n   |\n31 |         } else\
    \ if current_grade < 3.7 {\n   |                                   ^^^\n   | \
    \                                  |\n   |                                   expected\
    \ `&f64`, found floating-point number\n   |                                  \
    \ help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuhrigy48.rs:33:35\n   |\n33 |         } else if current_grade < 4.0\
    \ {\n   |                                   ^^^\n   |                        \
    \           |\n   |                                   expected `&f64`, found floating-point\
    \ number\n   |                                   help: consider borrowing here:\
    \ `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuhrigy48.rs:35:35\n\
    \   |\n35 |         } else if current_grade < 4.3 {\n   |                    \
    \               ^^^\n   |                                   |\n   |          \
    \                         expected `&f64`, found floating-point number\n   | \
    \                                  help: consider borrowing here: `&4.3`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuhrigy48.rs:37:35\n   |\n37 |         } else\
    \ if current_grade < 4.6 {\n   |                      "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_gpa: f64 = 0.0;\n    for grade in\
    \ grades {\n        total_grade += grade;\n        total_gpa += grade * 4.0;\n\
    \    }\n    let mut letter_grade: String;\n    if total_grade > 4.0 {\n      \
    \  letter_grade = \"A+\";\n    } else if total_grade > 3.7 {\n        letter_grade\
    \ = \"A\";\n    } else if total_grade > 3.3 {\n        letter_grade = \"A-\";\n\
    \    } else if total_grade > 3.0 {\n        letter_grade = \"B+\";\n    } else\
    \ if total_grade > 2.7 {\n        letter_grade = \"B\";\n    } else if total_grade\
    \ > 2.3 {\n        letter_grade = \"B-\";\n    } else if total_grade > 2.0 {\n\
    \        letter_grade = \"C+\";\n    } else if total_grade > 1.7 {\n        letter_grade\
    \ = \"C\";\n    } else if total_grade > 1.3 {\n        letter_grade = \"C-\";\n\
    \    } else if total_grade > 1.0 {\n        letter_grade = \"D+\";\n    } else\
    \ if total_grade > 0.7 {\n        letter_grade = \"D\";\n    } else if total_grade\
    \ > 0.0 {\n        letter_grade = \"D-\";\n    } else {\n        letter_grade\
    \ = \"E\";\n    }\n    grades_vec.push(letter_grade);\n    for grade in grades\
    \ {\n        grades_vec.push(format!(\"{:.2}\", grade / total_grade));\n    }\n\
    \    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn7r69_iu.rs:32:24\n   |\n\
    30 |     let mut letter_grade: String;\n   |                           ------\
    \ expected due to this type\n31 |     if total_grade > 4.0 {\n32 |         letter_grade\
    \ = \"A+\";\n   |                        ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7r69_iu.rs:34:24\n\
    \   |\n30 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n34 |         letter_grade = \"A\";\n\
    \   |                        ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7r69_iu.rs:36:24\n\
    \   |\n30 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n36 |         letter_grade = \"A-\";\n\
    \   |                        ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7r69_iu.rs:38:24\n\
    \   |\n30 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n38 |         letter_grade = \"B+\";\n\
    \   |                        ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7r69_iu.rs:40:24\n\
    \   |\n30 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n40 |         letter_grade = \"B\";\n\
    \   |                        ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7r69_iu.rs:42"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade_index = 0;\n    let\
    \ mut letter_grade_index = 0;\n    while grade > 0.0 {\n        if grade >= gpa\
    \ {\n            letter_grades.push(grades[grade_index].to_string());\n      \
    \      grade_index += 1;\n            grade -= gpa;\n        } else {\n      \
    \      letter_grades.push(grades[grade_index].to_string());\n            grade_index\
    \ += 1;\n            grade -= grades[grade_index];\n        }\n    }\n    letter_grades.push(grades[grade_index].to_string());\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpcv7w5vz0.rs:24:9\n\
    \   |\n24 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        match grade {\n            4.0 => \"A+\".to_string(),\n\
    \            3.7 => \"A\".to_string(),\n            3.3 => \"A\".to_string(),\n\
    \            3.0 => \"B+\".to_string(),\n            2.7 => \"B\".to_string(),\n\
    \            2.3 => \"B-\".to_string(),\n            2.0 => \"C+\".to_string(),\n\
    \            1.7 => \"C\".to_string(),\n            1.3 => \"C-\".to_string(),\n\
    \            1.0 => \"D+\".to_string(),\n            0.7 => \"D\".to_string(),\n\
    \            0.0 => \"D-\".to_string(),\n            _ => \"\".to_string(),\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkuhg2km1.rs:25:9\n   |\n\
    25 | /         match grade {\n26 | |             4.0 => \"A+\".to_string(),\n\
    27 | |             3.7 => \"A\".to_string(),\n28 | |             3.3 => \"A\"\
    .to_string(),\n...  |\n38 | |             _ => \"\".to_string(),\n39 | |     \
    \    }\n   | |         ^- help: consider using a semicolon here: `;`\n   | |_________|\n\
    \   |           expected `()`, found struct `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade_int: i32 = total_grade as i32;\n    let mut total_grade_float\
    \ = total_grade as f64;\n    let mut total_grade_float_int =\n        ((total_grade\
    \ as f64) - total_grade_float) as i32;\n    let mut total_grade_float_int = total_grade\
    \ as f64;\n    let mut total_grade_float_float = total_grade as f64;\n    let\
    \ mut total_grade_float_float_int = total_grade as f64;\n    let mut total_grade_float_float_float\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_int = total_grade\
    \ as f64;\n    let mut total_grade_float_float_float_float = total_grade as f64;\n\
    \    let mut total_grade_float_float_float_float_int = total_grade as f64;\n \
    \   let mut total_grade_float_float_float_float_float = total_grade as f64;\n\
    \    let mut total_grade_float_float_float_float_float_int = total_grade as f64;\n\
    \    let mut total_grade_float_float_float_float_float_float = total_grade as\
    \ f64;\n    let mut total_grade_float_float_float_float_float_float_int = total_grade\
    \ as f64;\n    let mut total_grade_float_float_float_float_float_float_float =\
    \ total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_int\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float_int\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float_float\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float_float_int\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float_float_float\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float_float_float_int\
    \ = total_grade as f64;\n    let mut total_grade_float_float_float_float_float_float_float_float_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmk3d0gqm.rs:51:73\n   |\n\
    51 |     let mut total_grade_float_float_float_float_float_float_float_float_\n\
    \   |                                                                        \
    \ ^ help: add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmk3d0gqm.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades.len();\n    let mut letter_grades = Vec::new();\n    let mut current_grade\
    \ = grades_copy.pop().unwrap();\n    let mut current_letter_grade = String::new();\n\
    \    let mut current_letter_grade_index = 0;\n    while grades_len > 0 {\n   \
    \     let mut current_grade = grades_copy.pop().unwrap();\n        if current_grade\
    \ > current_grade {\n            current_letter_grade = current_letter_grade +\
    \ \"A\";\n            current_letter_grade_index += 1;\n        } else if current_grade\
    \ < current_grade {\n            current_letter_grade = current_letter_grade +\
    \ \"B\";\n            current_letter_grade_index += 1;\n        } else if current_grade\
    \ == current_grade {\n            current_letter_grade = current_letter_grade\
    \ + \"C\";\n            current_letter_grade_index += 1;\n        } else if current_grade\
    \ > current_grade {\n            current_letter_grade = current_letter_grade +\
    \ \"D\";\n            current_letter_grade_index += 1;\n        } else {\n   \
    \         current_letter_grade = current_letter_grade + \"E\";\n            current_letter_grade_index\
    \ += 1;\n        }\n        letter_grades.push(current_letter_grade);\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `current_grade`\n  --> /tmp/tmp6b3y5kkw.rs:26:13\n\
    \   |\n26 |     let mut current_grade = grades_copy.pop().unwrap();\n   |    \
    \         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_current_grade`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\
    \nwarning: variable `current_letter_grade_index` is assigned to, but never used\n\
    \  --> /tmp/tmp6b3y5kkw.rs:28:13\n   |\n28 |     let mut current_letter_grade_index\
    \ = 0;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: consider\
    \ using `_current_letter_grade_index` instead\n\nwarning: variable does not need\
    \ to be mutable\n  --> /tmp/tmp6b3y5kkw.rs:24:9\n   |\n24 |     let mut grades_len\
    \ = grades.len();\n   |         ----^^^^^^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    warning: variable does not need to be mutable\n  --> /tmp/tmp6b3y5kkw.rs:26:9\n\
    \   |\n26 |     let mut current_grade = grades_copy.pop().unwrap();\n   |    \
    \     ----^^^^^^^^^^^^^\n   |         |\n   |         help: remove this `mut`\n\
    \nwarning: variable does not need to be mutable\n  --> /tmp/tmp6b3y5kkw.rs:30:13\n\
    \   |\n30 |         let mut current_grade = grades_copy.pop().unwrap();\n   |\
    \             ----^^^^^^^^^^^^^\n   |             |\n   |             help: remove\
    \ this `mut`\n\nerror[E0382]: use of moved value: `current_letter_grade`\n  -->\
    \ /tmp/tmp6b3y5kkw.rs:32:36\n   |\n27 |     let mut current_letter_grade = String::new();\n\
    \   |         ------------------------ move occurs because `current_letter_grade`\
    \ has type `String`, which does not implement the `Copy` trait\n...\n32 |    \
    \         current_letter_grade = current_letter_grade + \"A\";\n   |         \
    \                           ^^^^^^^^^^^^^^^^^^^^ value used here after move\n\
    ...\n47 |         letter_grades.push(current_letter_grade);\n   |            \
    \                -------------------- value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error; 5 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    while gpa > 0.0 {\n        let grade = if gpa >= 4.0 { \"+\" } else { \"\
    -\" };\n        letter_grades.push(grade + &gpa);\n        gpa -= 4.0;\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&_` to `&str`\n  --> /tmp/tmpygvzuliu.rs:27:34\n\
    \   |\n27 |         letter_grades.push(grade + &gpa);\n   |                  \
    \          ----- ^ ---- &_\n   |                            |\n   |          \
    \                  &str\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    A\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    C-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    D-\");\n        } else {\n            grades_string.push_str(\"E\");\n       \
    \ }\n    }\n    grades_string.to_string().split_whitespace().collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpd3u5a1zy.rs:53:50\n     |\n53\
    \   |     grades_string.to_string().split_whitespace().collect::<Vec<String>>()\n\
    \     |                                                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    let mut total_points: f64 = 0.0;\n    for grade\
    \ in grades {\n        total_grade += grade;\n        total_points += grade *\
    \ grade;\n    }\n    if total_grade > 4.0 {\n        grades_vec.push(\"A+\");\n\
    \    } else if total_grade > 3.7 {\n        grades_vec.push(\"A\");\n    } else\
    \ if total_grade > 3.3 {\n        grades_vec.push(\"A-\");\n    } else if total_grade\
    \ > 3.0 {\n        grades_vec.push(\"B+\");\n    } else if total_grade > 2.7 {\n\
    \        grades_vec.push(\"B\");\n    } else if total_grade > 2.3 {\n        grades_vec.push(\"\
    B-\");\n    } else if total_grade > 2.0 {\n        grades_vec.push(\"C+\");\n\
    \    } else if total_grade > 1.7 {\n        grades_vec.push(\"C\");\n    } else\
    \ if total_grade > 1.3 {\n        grades_vec.push(\"C-\");\n    } else if total_grade\
    \ > 1.0 {\n        grades_vec.push(\"D+\");\n    } else if total_grade > 0.7 {\n\
    \        grades_vec.push(\"D\");\n    } else if total_grade > 0.0 {\n        grades_vec.push(\"\
    D-\");\n    } else {\n        grades_vec.push(\"E\");\n    }\n    for grade in\
    \ grades_vec {\n        println!(\"{}\", grade);\n    }\n    return grades_vec;\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdb7ead20.rs:31:25\n   |\n\
    31 |         grades_vec.push(\"A+\");\n   |                         ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \ |\n   |                         expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdb7ead20.rs:33:25\n   |\n33 |         grades_vec.push(\"\
    A\");\n   |                         ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         |\n   |                       \
    \  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdb7ead20.rs:35:25\n   |\n35 |         grades_vec.push(\"A-\");\n\
    \   |                         ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdb7ead20.rs:37:25\n\
    \   |\n37 |         grades_vec.push(\"B+\");\n   |                         ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \       |\n   |                         expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdb7ead20.rs:39:25\n   |\n39 |\
    \         grades_vec.push(\"B\");\n   |                         ^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                         |\n\
    \   |                         expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdb7ead20.rs:41:25\n   |\n41 |         grades_vec.push(\"\
    B-\");\n   |                         ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         |\n   |                       \
    \  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdb7ead20.rs:43:25\n   |\n43 |         grades_vec.push(\"C+\");\n\
    \   |                         ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: m"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades.len();\n    let mut grades_sum: f64 = 0.0;\n    let mut grades_min_sum:\
    \ f64 = 0.0;\n    let mut grades_max_sum: f64 = 0.0;\n    let mut grades_min_max:\
    \ f64 = 0.0;\n    let mut grades_min_max_index = 0;\n    let mut grades_max_index\
    \ = 0;\n    let mut grades_max_index2 = 0;\n    let mut grades_min_max_index2\
    \ = 0;\n    let mut grades_min_max_index3 = 0;\n    let mut grades_max_index3\
    \ = 0;\n    let mut grades_max_index4 = 0;\n    let mut grades_min_max_index4\
    \ = 0;\n    let mut grades_min_max_index5 = 0;\n    let mut grades_max_index5\
    \ = 0;\n    let mut grades_max_index6 = 0;\n    let mut grades_min_max_index6\
    \ = 0;\n    let mut grades_min_max_index7 = 0;\n    let mut grades_max_index7\
    \ = 0;\n    let mut grades_max_index8 = 0;\n    let mut grades_min_max_index8\
    \ = 0;\n    let mut grades_min_max_index9 = 0;\n    let mut grades_max_index9\
    \ = 0;\n    let mut grades_max_index10 = 0;\n    let mut grades_min_max_index10\
    \ = 0;\n    let mut grades_min_max_index11 = 0;\n    let mut grades_max_index11\
    \ = 0;\n    let mut grades_min_max_index12 = 0;\n    let mut grades_max_index12\
    \ = 0;\n    let mut grades_min_max_index13 = 0;\n    let mut grades_max_index13\
    \ = 0;\n    let mut grades_min_max_index14 = 0;\n    let mut grades_max_index14\
    \ = 0;\n    let mut grades_min_max_index15 = 0;\n    let mut grades_max_index15\
    \ = 0;\n    let mut grades_min_max_index16 = 0;\n    let mut grades_max_index16\
    \ = 0;\n    let mut grades_min_max_index17 = 0;\n    let mut grades_max_index17\
    \ = 0;\n    let mut grades_min_max_index18 = 0;\n    let mut grades_max_index18\
    \ = 0;\n    let mut grades_min_max_index19 = 0;\n    let mut grades_max_index19\
    \ = 0;\n    let mut grades_min_max_index20 = 0;\n    let mut grades_max_index20\
    \ = 0;\n    let mut grades_min_max_index21 = 0;\n    let mut grades_max_index21\
    \ = 0;\n    let mut grades_min_max_index22\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0lf9npag.rs:71:35\n   |\n\
    71 |     let mut grades_min_max_index22\n   |                                \
    \   ^ help: add `;` here\n72 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0lf9npag.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    \n \
    \   for grade in grades {\n        if grade > gpa {\n            letter_grade\
    \ = \"A+\";\n            grades_vec.push(letter_grade);\n            gpa = grade;\n\
    \        } else if grade < gpa {\n            letter_grade = \"A-\";\n       \
    \     grades_vec.push(letter_grade);\n            gpa = grade;\n        } else\
    \ if grade == gpa {\n            letter_grade = \"A\";\n            grades_vec.push(letter_grade);\n\
    \        } else {\n            letter_grade = \"B+\";\n            grades_vec.push(letter_grade);\n\
    \            gpa = grade;\n        }\n    }\n    grades_vec\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxk5xoee1.rs:29:28\n   |\n\
    25 |     let mut letter_grade: String;\n   |                           ------\
    \ expected due to this type\n...\n29 |             letter_grade = \"A+\";\n  \
    \ |                            ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5xoee1.rs:33:28\n\
    \   |\n25 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n33 |             letter_grade = \"A-\"\
    ;\n   |                            ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                            |\n   |                    \
    \        expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxk5xoee1.rs:37:28\n   |\n25 |     let mut letter_grade: String;\n\
    \   |                           ------ expected due to this type\n...\n37 |  \
    \           letter_grade = \"A\";\n   |                            ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5xoee1.rs:40:28\n   |\n25 |\
    \     let mut letter_grade: String;\n   |                           ------ expected\
    \ due to this type\n...\n40 |             letter_grade = \"B+\";\n   |       \
    \                     ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut current_grade = grades_iter.next().unwrap();\n  \
    \  let mut current_letter_grade = String::new();\n    \n    while current_grade\
    \ > 0.0 {\n        let mut current_letter_grade = current_grade as char;\n   \
    \     \n        if current_grade > 3.0 {\n            current_letter_grade +=\
    \ '+';\n        } else if current_grade > 2.0 {\n            current_letter_grade\
    \ += '-';\n        }\n        \n        letter_grades.push(current_letter_grade);\n\
    \        \n        current_grade = grades_iter.next().unwrap();\n    }\n    \n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_2z3ns4.rs:28:27\n   |\n\
    28 |     while current_grade > 0.0 {\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_2z3ns4.rs:31:28\n\
    \   |\n31 |         if current_grade > 3.0 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `char`\n  --> /tmp/tmpt_2z3ns4.rs:32:13\n   |\n32 |     \
    \        current_letter_grade += '+';\n   |             --------------------^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt_2z3ns4.rs:33:35\n   |\n33 |         } else\
    \ if current_grade > 2.0 {\n   |                                   ^^^\n   | \
    \                                  |\n   |                                   expected\
    \ `&f64`, found floating-point number\n   |                                  \
    \ help: consider borrowing here: `&2.0`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `char`\n  --> /tmp/tmpt_2z3ns4.rs:34:13\n   |\n\
    34 |             current_letter_grade += '-';\n   |             --------------------^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt_2z3ns4.rs:42:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n42 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror[E0606]: casting `&f64` as `char` is invalid\n  --> /tmp/tmpt_2z3ns4.rs:"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    while gpa > 0.0 {\n        let grade = if gpa >= 4.0 { \"A+\" } else if gpa\
    \ >= 3.7 { \"A\" } else if gpa >= 3.3 { \"A-\" } else if gpa >= 3.0 { \"B+\" }\
    \ else if gpa >= 2.7 { \"B\" } else if gpa >= 2.3 { \"B-\" } else if gpa >= 2.0\
    \ { \"C+\" } else if gpa >= 1.7 { \"C\" } else if gpa >= 1.3 { \"C-\" } else if\
    \ gpa >= 1.0 { \"D+\" } else if gpa >= 0.7 { \"D\" } else { \"D-\" } else { \"\
    E\" };\n        letter_grades.push(grade);\n        gpa -= 0.0;\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: right curly brace `}` before `else` in a `let...else` statement\
    \ not allowed\n  --> /tmp/tmpcpqnccaj.rs:26:332\n   |\n26 | ...lse if gpa >= 1.0\
    \ { \"D+\" } else if gpa >= 0.7 { \"D\" } else { \"D-\" } else { \"E\" };\n  \
    \ |                                                                      ^\n \
    \  |\nhelp: try wrapping the expression in parentheses\n   |\n26 |         let\
    \ grade = (if gpa >= 4.0 { \"A+\" } else if gpa >= 3.7 { \"A\" } else if gpa >=\
    \ 3.3 { \"A-\" } else if gpa >= 3.0 { \"B+\" } else if gpa >= 2.7 { \"B\" } else\
    \ if gpa >= 2.3 { \"B-\" } else if gpa >= 2.0 { \"C+\" } else if gpa >= 1.7 {\
    \ \"C\" } else if gpa >= 1.3 { \"C-\" } else if gpa >= 1.0 { \"D+\" } else if\
    \ gpa >= 0.7 { \"D\" } else { \"D-\" }) else { \"E\" };\n   |                \
    \     +                                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              +\n\nerror[E0658]: `let...else` statements are unstable\n  -->\
    \ /tmp/tmpcpqnccaj.rs:26:9\n   |\n26 | ...   let grade = if gpa >= 4.0 { \"A+\"\
    \ } else if gpa >= 3.7 { \"A\" } else if gpa >= 3.3 { \"A-\" } else if gpa >=\
    \ 3.0 { \"B+\" } else if gpa >= 2.7 { \"B\" } else if gpa >= 2.3 { \"B-\" } else\
    \ if gpa >= 2.0 { \"C+\" } else if gpa >= 1.7 { \"C\" } else if gpa >= 1.3 { \"\
    C-\" } else if gpa >= 1.0 { \"D+\" } else if gpa >= 0.7 { \"D\" } else { \"D-\"\
    \ } else { \"E\" };\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: see issue #87335 <https://github.com/rust-lang/rust/issues/87335>\
    \ for more information\n\nerror[E0308]: `else` clause of `let...else` does not\
    \ diverge\n  --> /tmp/tmpcpqnccaj.rs:26:339\n   |\n26 | ...\" } else "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ grades_sum: f64 = 0.0;\n    let mut grades_count: usize = 0;\n    for grade\
    \ in grades {\n        grades_sum += grade;\n        grades_count += 1;\n    }\n\
    \    let mut grades_average: f64 = grades_sum / grades_count;\n    for grade in\
    \ grades {\n        let grades_average = grades_average + grade;\n        if grades_average\
    \ >= 4.0 {\n            grades_vec.push(\"A+\");\n        } else if grades_average\
    \ >= 3.7 {\n            grades_vec.push(\"A\");\n        } else if grades_average\
    \ >= 3.3 {\n            grades_vec.push(\"A-\");\n        } else if grades_average\
    \ >= 3.0 {\n            grades_vec.push(\"B+\");\n        } else if grades_average\
    \ >= 2.7 {\n            grades_vec.push(\"B\");\n        } else if grades_average\
    \ >= 2.3 {\n            grades_vec.push(\"B-\");\n        } else if grades_average\
    \ >= 2.0 {\n            grades_vec.push(\"C+\");\n        } else if grades_average\
    \ >= 1.7 {\n            grades_vec.push(\"C\");\n        } else if grades_average\
    \ >= 1.3 {\n            grades_vec.push(\"C-\");\n        } else if grades_average\
    \ >= 1.0 {\n            grades_vec.push(\"D+\");\n        } else if grades_average\
    \ >= 0.7 {\n            grades_vec.push(\"D\");\n        } else if grades_average\
    \ >= 0.0 {\n            grades_vec.push(\"D-\");\n        } else {\n         \
    \   grades_vec.push(\"E\");\n        }\n    }\n    grades_vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpjo63akf9.rs:30:46\n\
    \   |\n30 |     let mut grades_average: f64 = grades_sum / grades_count;\n   |\
    \                                              ^ no implementation for `f64 /\
    \ usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjo63akf9.rs:34:29\n   |\n34 |             grades_vec.push(\"\
    A+\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjo63akf9.rs:36:29\n   |\n36 |             grades_vec.push(\"\
    A\");\n   |                             ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjo63akf9.rs:38:29\n   |\n38 |             grades_vec.push(\"\
    A-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjo63akf9.rs:40:29\n   |\n40 |             grades_vec.push(\"\
    B+\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjo63akf9.rs:42:29\n   |\n42 |             grades_vec.push(\"\
    B\");\n   |                             ^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade: String = String::new();\n       \
    \ if grade >= 4.0 {\n            letter_grade += \"A+\";\n        } else if grade\
    \ > 3.7 {\n            letter_grade += \"A\";\n        } else if grade > 3.3 {\n\
    \            letter_grade += \"A-\";\n        } else if grade > 3.0 {\n      \
    \      letter_grade += \"B+\";\n        } else if grade > 2.7 {\n            letter_grade\
    \ += \"B\";\n        } else if grade > 2.3 {\n            letter_grade += \"B-\"\
    ;\n        } else if grade > 2.0 {\n            letter_grade += \"C+\";\n    \
    \    } else if grade > 1.7 {\n            letter_grade += \"C\";\n        } else\
    \ if grade > 1.3 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ > 1.0 {\n            letter_grade += \"D+\";\n        } else if grade > 0.7\
    \ {\n            letter_grade += \"D\";\n        } else if grade > 0.0 {\n   \
    \         letter_grade += \"D-\";\n        } else {\n            letter_grade\
    \ += \"E\";\n        }\n        grades_vec.push(letter_grade);\n    }\n    grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            grades_string.push_str(\"\
    A+\");\n        } else if grade < 3.7 {\n            grades_string.push_str(\"\
    A\");\n        } else if grade < 4.0 {\n            grades_string.push_str(\"\
    A-\");\n        } else if grade < 4.7 {\n            grades_string.push_str(\"\
    B+\");\n        } else if grade < 5.0 {\n            grades_string.push_str(\"\
    B\");\n        } else if grade < 5.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade < 6.0 {\n            grades_string.push_str(\"\
    C+\");\n        } else if grade < 6.7 {\n            grades_string.push_str(\"\
    C\");\n        } else if grade < 7.0 {\n            grades_string.push_str(\"\
    C-\");\n        } else if grade < 7.7 {\n            grades_string.push_str(\"\
    D+\");\n        } else if grade < 8.0 {\n            grades_string.push_str(\"\
    D\");\n        } else if grade < 8.7 {\n            grades_string.push_str(\"\
    D-\");\n        } else if grade < 9.0 {\n            grades_string.push_str(\"\
    E\");\n        } else {\n            grades_string.push_str(\"F\");\n        }\n\
    \    }\n    grades_string.to_string().chars().collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc4rj_3we.rs:55:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n55 |     grades_string.to_string().chars().collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `char`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<char>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut gpa = grades_copy.pop().unwrap();\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_gpa = grades_copy.pop().unwrap();\n  \
    \  while grades_copy.len() > 0 {\n        if gpa > current_gpa {\n           \
    \ current_letter_grade += \"+\";\n            current_gpa = grades_copy.pop().unwrap();\n\
    \        } else {\n            current_letter_grade += \" \";\n        }\n   \
    \     if grades_copy.len() > 0 {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::new();\n            current_gpa =\
    \ grades_copy.pop().unwrap();\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"+\", \"+\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp8jjf8wxz.rs:47:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_gpa\
    \ = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n  \
    \  for grade in grades {\n        let letter_grade = match grade {\n         \
    \   4.0 => \"A+\".to_string(),\n            > 3.7 => \"A\".to_string(),\n    \
    \        > 3.3 => \"A-\".to_string(),\n            > 3.0 => \"B+\".to_string(),\n\
    \            > 2.7 => \"B\".to_string(),\n            > 2.3 => \"B-\".to_string(),\n\
    \            > 2.0 => \"C+\".to_string(),\n            > 1.7 => \"C\".to_string(),\n\
    \            > 1.3 => \"C-\".to_string(),\n            > 1.0 => \"D+\".to_string(),\n\
    \            > 0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n\
    \            _ => \"E\".to_string(),\n        };\n        total_letter_grade +=\
    \ &letter_grade;\n        total_gpa -= grade;\n        letter_grades.push(&letter_grade);\n\
    \    }\n    if total_gpa > 0.0 {\n        letter_grades.push(format!(\"D-{}\"\
    , total_letter_grade));\n    }\n    if total_gpa < 0.0 {\n        letter_grades.push(format!(\"\
    D+{}\", total_letter_grade));\n    }\n    letter_grades\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmp749l7sxn.rs:29:13\n \
    \  |\n29 |             > 3.7 => \"A\".to_string(),\n   |             ^ expected\
    \ pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp749l7sxn.rs:47:28\n\
    \   |\n47 |         letter_grades.push(format!(\"D-{}\", total_letter_grade));\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&String`, found struct `String`\n   |\n   = note: this error originates in\
    \ the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp749l7sxn.rs:50:28\n \
    \  |\n50 |         letter_grades.push(format!(\"D+{}\", total_letter_grade));\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&String`, found struct `String`\n   |\n   = note: this error originates in\
    \ the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp749l7sxn.rs:52:5\n  \
    \ |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   | \
    \                                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n52 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        grades_string.push_str(&format!(\"{:+}\", grade));\n  \
    \  }\n    grades_string.chars().collect::<Vec<_>>().into_iter().map(|c| c.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"+\", \"4\", \"+\", \"3\", \"+\", \"1\", \".\", \"7\", \"+\", \"2\", \"+\"\
    , \"3\", \".\", \"5\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp8phkc85_.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade = total_grade / grades.len();\n    let mut grade_index\
    \ = 0;\n    for grade in grades {\n        if grade >= total_grade {\n       \
    \     grade_index += 1;\n        }\n        grades_vec.push(format!(\"{}+\", grade_index));\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpcervqfnn.rs:28:39\n\
    \   |\n28 |     let mut total_grade = total_grade / grades.len();\n   |      \
    \                                 ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_sorted\
    \ = grades_copy.clone();\n    grades_sorted.sort();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade: f64 = grades_sorted[0];\n    let mut current_letter:\
    \ &'static str = \"E\";\n    for grade in grades_sorted {\n        if grade <\
    \ current_grade {\n            letter_grades.push(current_letter);\n         \
    \   current_letter = &\"E\";\n            current_grade = grade;\n        }\n\
    \        if grade > current_grade {\n            current_letter = &\"E\";\n  \
    \          current_grade = grade;\n        }\n        if grade == current_grade\
    \ {\n            current_letter += &\"+\"[grade >= current_grade];\n        }\n\
    \    }\n    letter_grades.push(current_letter);\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp4wp1rlal.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0277]: the type `str` cannot be indexed\
    \ by `bool`\n  --> /tmp/tmp4wp1rlal.rs:40:32\n   |\n40 |             current_letter\
    \ += &\"+\"[grade >= current_grade];\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ string indices are ranges of `usize`\n   |\n   = help: the trait `SliceIndex<str>`\
    \ is not implemented for `bool`\n   = note: required because of the requirements\
    \ on the impl of `Index<bool>` for `str`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `&'static str`\n  --> /tmp/tmp4wp1rlal.rs:40:13\n\
    \   |\n40 |             current_letter += &\"+\"[grade >= current_grade];\n  \
    \ |             --------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         \
    \    |\n   |             cannot use `+=` on type `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4wp1rlal.rs:44:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n44 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut min_grade = grades_copy[0];\n    let mut max_grade =\
    \ grades_copy[0];\n    let mut min_grade_index = grades_copy.iter().min_by_key(|x|\
    \ x).unwrap();\n    let mut max_grade_index = grades_copy.iter().max_by_key(|x|\
    \ x).unwrap();\n    let mut current_grade = grades_copy[0];\n    let mut current_grade_index\
    \ = grades_copy.iter().find(|x| x == current_grade).unwrap();\n    while current_grade_index\
    \ < grades_copy.len() {\n        if grades_copy[current_grade_index] > max_grade\
    \ {\n            max_grade = grades_copy[current_grade_index];\n            max_grade_index\
    \ = current_grade_index;\n        }\n        if grades_copy[current_grade_index]\
    \ < min_grade {\n            min_grade = grades_copy[current_grade_index];\n \
    \           min_grade_index = current_grade_index;\n        }\n        if grades_copy[current_grade_index]\
    \ == current_grade {\n            letter_grades.push(current_grade as char);\n\
    \            current_grade_index += 1;\n        } else {\n            letter_grades.push(current_grade\
    \ as char);\n            current_grade = grades_copy[current_grade_index];\n \
    \           current_grade_index = grades_copy.iter().find(|x| x == current_grade).unwrap();\n\
    \        }\n    }\n    letter_grades.push(current_grade as char);\n    letter_grades.push(max_grade\
    \ as char);\n    letter_grades.push(min_grade as char);\n    letter_grades\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp8cf5knd8.rs:27:61\n\
    \     |\n27   |     let mut min_grade_index = grades_copy.iter().min_by_key(|x|\
    \ x).unwrap();\n     |                                                  ----------\
    \ ^^^^^ the trait `Ord` is not implemented for `f64`\n     |                 \
    \                                 |\n     |                                  \
    \                required by a bound introduced by this call\n     |\n     = help:\
    \ the following other types implement trait `Ord`:\n               i128\n    \
    \           i16\n               i32\n               i64\n               i8\n \
    \              isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\n     = note: 1 redundant requirement hidden\n     = note: required\
    \ because of the requirements on the impl of `Ord` for `&&f64`\nnote: required\
    \ by a bound in `std::iter::Iterator::min_by_key`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n    --> /tmp/tmp8cf5knd8.rs:28:61\n     |\n28 \
    \  |     let mut max_grade_index = grades_copy.iter().max_by_key(|x| x).unwrap();\n\
    \     |                                                  ---------- ^^^^^ the\
    \ trait `Ord` is not implemented for `f64`\n     |                           \
    \                       |\n     |                                            \
    \      required by a bound introduced by this call\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\n     = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n     =\
    \ note: 1 redundant requirement hidden\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&&f64`\nnote: required by a bound in `std::iter::Iterator::max_by_key`\n\
    \nerror[E0277]: can't compare `&&f64` with `f64`\n  --> /tmp/tmp8cf5knd8.rs:30:65\n\
    \   |\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    while grade > 0 {\n        if grade\
    \ < gpa {\n            letter_grades.push(format!(\"{}\", grade));\n         \
    \   grade -= gpa;\n        } else {\n            letter_grades.push(format!(\"\
    {}\", grade));\n            grade -= grade;\n        }\n        gpa -= grade;\n\
    \    }\n    letter_grades.push(format!(\"{}\", gpa));\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpttzmmcyt.rs:24:9\n\
    \   |\n24 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades.len();\n    let mut letter_grades = Vec::new();\n    let mut current_grade\
    \ = grades_copy[0];\n    let mut current_letter_grade = String::new();\n    let\
    \ mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    while grades_len > 0 {\n        let mut current_grade = grades_copy[0];\n\
    \        let mut current_letter_grade = String::new();\n        let mut current_letter_grade_index\
    \ = 0;\n        let mut current_letter_grade_index2 = 0;\n        while grades_len\
    \ > 0 {\n            let mut current_grade = grades_copy[0];\n            let\
    \ mut current_letter_grade = String::new();\n            let mut current_letter_grade_index\
    \ = 0;\n            let mut current_letter_grade_index2 = 0;\n            if current_grade\
    \ > current_grade {\n                grades_copy.pop();\n                grades_len\
    \ -= 1;\n                grades_copy.pop();\n                grades_len -= 1;\n\
    \                grades_copy.pop();\n                grades_len -= 1;\n      \
    \          grades_copy.pop();\n                grades_len -= 1;\n            \
    \    grades_copy.pop();\n                grades_len -= 1;\n                grades_copy.pop();\n\
    \                grades_len -= 1;\n                grades_copy.pop();\n      \
    \          grades_len -= 1;\n                grades_copy.pop();\n            \
    \    grades_len -= 1;\n                grades_copy.pop();\n                grades_len\
    \ -= 1;\n                grades_copy.pop();\n                grades_len -= 1;\n\
    \                grades_copy.pop();\n                grades_len -= 1;\n      \
    \          grades_copy.pop();\n                grades_len -= 1;\n            \
    \    grades_copy.pop();\n                grades_len -= 1;\n                grades_copy.pop();\n\
    \                grades_len -= 1;\n                grades_copy.pop();\n      \
    \          grades_len -= 1;\n                grades_copy.pop();\n            \
    \    grades_len -= 1;\n                grades_copy.pop();\n                grades_len\
    \ -= 1;\n                grades_copy.pop();\n                grades_len -= 1;\n\
    \                grades_copy.pop();\n                grades_len -= 1;\n      \
    \          grades_copy.pop();\n                grades_len -= 1;\n            \
    \    grades_copy.pop();\n                grades_len -= 1;\n                grades_copy.pop();\n\
    \                grades_len -= 1;\n                grades_copy.pop();\n      \
    \          grades_len -= 1;\n                grades_copy.pop();\n            \
    \    grades_len\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoljn92f5.rs:99:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n30 |     while grades_len > 0 {\n   |                          - unclosed\
    \ delimiter\n...\n35 |         while grades_len > 0 {\n   |                  \
    \            - unclosed delimiter\n...\n40 |             if current_grade > current_grade\
    \ {\n   |                                              - this delimiter might\
    \ not be properly closed...\n...\n89 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n99 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoljn92f5.rs:88:17\n   |\n40 | /             if current_grade\
    \ > current_grade {\n41 | |                 grades_copy.pop();\n42 | |       \
    \          grades_len -= 1;\n43 | |                 grades_copy.pop();\n...  |\n\
    88 | |                 grades_len\n   | |                 ^^^^^^^^^^ expected\
    \ `()`, found `usize`\n89 | | }\n   | |_- expected this to be `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoljn92f5.rs:30:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n30 | /\
    \     while grades_len > 0 {\n31 | |         let mut current_grade = grades_copy[0];\n\
    32 | |         let mut current_letter_grade = String::new();\n33 | |         let\
    \ mut current_letter_grade_index = 0;\n...  |\n98 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n99 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::new();\n    let mut current_letter_grade_index = 0;\n    let mut current_letter_grade_index2\
    \ = 0;\n    let mut current_letter_grade_index3 = 0;\n    let mut current_letter_grade_index4\
    \ = 0;\n    let mut current_letter_grade_index5 = 0;\n    let mut current_letter_grade_index6\
    \ = 0;\n    let mut current_letter_grade_index7 = 0;\n    let mut current_letter_grade_index8\
    \ = 0;\n    let mut current_letter_grade_index9 = 0;\n    let mut current_letter_grade_index10\
    \ = 0;\n    let mut current_letter_grade_index11 = 0;\n    let mut current_letter_grade_index12\
    \ = 0;\n    let mut current_letter_grade_index13 = 0;\n    let mut current_letter_grade_index14\
    \ = 0;\n    let mut current_letter_grade_index15 = 0;\n    let mut current_letter_grade_index16\
    \ = 0;\n    let mut current_letter_grade_index17 = 0;\n    let mut current_letter_grade_index18\
    \ = 0;\n    let mut current_letter_grade_index19 = 0;\n    let mut current_letter_grade_index20\
    \ = 0;\n    let mut current_letter_grade_index21 = 0;\n    let mut current_letter_grade_index22\
    \ = 0;\n    let mut current_letter_grade_index23 = 0;\n    let mut current_letter_grade_index24\
    \ = 0;\n    let mut current_letter_grade_index25 = 0;\n    let mut current_letter_grade_index26\
    \ = 0;\n    let mut current_letter_grade_index27 = 0;\n    let mut current_letter_grade_index28\
    \ = 0;\n    let mut current_letter_grade_index29 = 0;\n    let mut current_letter_grade_index30\
    \ = 0;\n    let mut current_letter_grade_index31 = 0;\n    let mut current_letter_grade_index32\
    \ = 0;\n    let mut current_letter_grade_index33 = 0;\n    let mut current_letter_grade_index34\
    \ = 0;\n    let mut current_letter_grade_index35 = 0;\n    let mut current_letter_grade_index36\
    \ = 0;\n    let mut current_letter_grade_index37 = 0;\n    let mut current_letter_grade_index38\
    \ = 0;\n    let mut current_letter_grade_index39 = 0;\n    let mut current_letter_grade_index40\
    \ = 0;\n    let mut current_letter_grade_index41 = 0;\n    let mut current_letter_grade_index42\
    \ = 0;\n    let mut current_letter_grade_index43 = 0;\n    let mut current_letter_grade_index44\
    \ = 0;\n    let mut current_letter_grade_index45 = 0;\n    let mut current_letter_grade_index46\
    \ = 0;\n    let mut current_letter_grade_index47 = 0;\n    let mut current_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpify7i30c.rs:74:21\n   |\n\
    74 |     let mut current_\n   |                     ^ help: add `;` here\n75 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpify7i30c.rs:22:48\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade = total_grade / grades.len();\n    for grade in\
    \ grades {\n        if grade >= total_grade {\n            grades_vec.push(\"\
    D+\");\n        } else {\n            grades_vec.push(\"D\");\n        }\n   \
    \ }\n    for grade in grades {\n        if grade >= total_grade {\n          \
    \  grades_vec.push(\"D-\");\n        } else {\n            grades_vec.push(\"\
    C\");\n        }\n    }\n    for grade in grades {\n        if grade >= total_grade\
    \ {\n            grades_vec.push(\"C+\");\n        } else {\n            grades_vec.push(\"\
    B\");\n        }\n    }\n    for grade in grades {\n        if grade >= total_grade\
    \ {\n            grades_vec.push(\"B-\");\n        } else {\n            grades_vec.push(\"\
    A\");\n        }\n    }\n    for grade in grades {\n        if grade >= total_grade\
    \ {\n            grades_vec.push(\"A+\");\n        } else {\n            grades_vec.push(\"\
    A\");\n        }\n    }\n    for grade in grades {\n        if grade >= total_grade\
    \ {\n            grades_vec.push(\"E\");\n        } else {\n            grades_vec.push(\"\
    0\");\n        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpbn66vzf3.rs:28:39\n\
    \   |\n28 |     let mut total_grade = total_grade / grades.len();\n   |      \
    \                                 ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbn66vzf3.rs:31:29\n   |\n31 |             grades_vec.push(\"\
    D+\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbn66vzf3.rs:33:29\n   |\n33 |             grades_vec.push(\"\
    D\");\n   |                             ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbn66vzf3.rs:38:29\n   |\n38 |             grades_vec.push(\"\
    D-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbn66vzf3.rs:40:29\n   |\n40 |             grades_vec.push(\"\
    C\");\n   |                             ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbn66vzf3.rs:45:29\n   |\n45 |             grades_vec.push(\"\
    C+\");\n   |                             ^^^^- help: try us"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut letter_grade = String::new();\n    let\
    \ mut current_grade = String::new();\n    let mut current_gpa = String::new();\n\
    \    \n    for grade in grades {\n        if grade < gpa {\n            letter_grade\
    \ += \"-\";\n            current_grade += \"-\";\n            current_gpa += \"\
    -\";\n        } else {\n            if grade < gpa + 0.3 {\n                letter_grade\
    \ += \"A\";\n                current_grade += \"A\";\n                current_gpa\
    \ += \"A\";\n            } else if grade < gpa + 0.5 {\n                letter_grade\
    \ += \"A-\";\n                current_grade += \"A-\";\n                current_gpa\
    \ += \"A-\";\n            } else if grade < gpa + 0.6 {\n                letter_grade\
    \ += \"B+\";\n                current_grade += \"B+\";\n                current_gpa\
    \ += \"B+\";\n            } else if grade < gpa + 0.7 {\n                letter_grade\
    \ += \"B\";\n                current_grade += \"B\";\n                current_gpa\
    \ += \"B\";\n            } else if grade < gpa + 0.8 {\n                letter_grade\
    \ += \"B-\";\n                current_grade += \"B-\";\n                current_gpa\
    \ += \"B-\";\n            } else if grade < gpa + 0.9 {\n                letter_grade\
    \ += \"C+\";\n                current_grade += \"C+\";\n                current_gpa\
    \ += \"C+\";\n            } else if grade < gpa + 1.0 {\n                letter_grade\
    \ += \"C\";\n                current_grade += \"C\";\n                current_gpa\
    \ += \"C\";\n            } else if grade < gpa + 1.1 {\n                letter_grade\
    \ += \"C-\";\n                current_grade += \"C-\";\n                current_gpa\
    \ += \"C-\";\n            } else if grade < gpa + 1.2 {\n                letter_grade\
    \ += \"D+\";\n                current_grade += \"D+\";\n                current_gpa\
    \ += \"D+\";\n            } else if grade < gpa + 1.3 {\n                letter_grade\
    \ += \"D\";\n                current_grade += \"D\";\n                current_gpa\
    \ += \"D\";\n            } else if grade < gpa + 1.4 {\n                letter_grade\
    \ += \"D-\";\n                current_grade += \"D-\";\n                current_gpa\
    \ += \"D-\";\n            } else if grade < gpa + 1.5 {\n                letter_grade\
    \ += \"E\";\n                current_grade += \"E\";\n                current_gpa\
    \ += \"E\";\n            } else {\n                \n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmppbj2ae0n.rs:95:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n29 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    ...\n34 |         } else {\n   |                - unclosed delimiter\n...\n83\
    \ |             } else {\n   |                    - this delimiter might not be\
    \ properly closed...\n84 |                 \n85 | }\n   | - ...as it matches this\
    \ but it has different indentation\n...\n95 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppbj2ae0n.rs:29:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n29 | /\
    \     for grade in grades {\n30 | |         if grade < gpa {\n31 | |         \
    \    letter_grade += \"-\";\n32 | |             current_grade += \"-\";\n... \
    \ |\n94 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n95 | | }\n   | |__^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_sum: f64 = 0.0;\n    let mut grades_average:\
    \ f64 = 0.0;\n    let mut grades_min_value: f64 = grades.iter().min().unwrap();\n\
    \    let mut grades_max_value: f64 = grades.iter().max().unwrap();\n    let mut\
    \ grades_min_index: usize = 0;\n    let mut grades_max_index: usize = 0;\n   \
    \ let mut grades_min_value: f64 = grades.iter().min().unwrap();\n    let mut grades_max_value:\
    \ f64 = grades.iter().max().unwrap();\n    let mut grades_min_index: usize = 0;\n\
    \    let mut grades_max_index: usize = 0;\n    let mut grades_min_value: f64 =\
    \ grades.iter().min().unwrap();\n    let mut grades_max_value: f64 = grades.iter().max().unwrap();\n\
    \    let mut grades_min_index: usize = 0;\n    let mut grades_max_index: usize\
    \ = 0;\n    let mut grades_min_value: f64 = grades.iter().min().unwrap();\n  \
    \  let mut grades_max_value: f64 = grades.iter().max().unwrap();\n    let mut\
    \ grades_min_index: usize = 0;\n    let mut grades_max_index: usize = 0;\n   \
    \ let mut grades_min_value: f64 = grades.iter().min().unwrap();\n    let mut grades_max_value:\
    \ f64 = grades.iter().max().unwrap();\n    let mut grades_min_index: usize = 0;\n\
    \    let mut grades_max_index: usize = 0;\n    let mut grades_min_value: f64 =\
    \ grades.iter().min().unwrap();\n    let mut grades_max_value: f64 = grades.iter().max().unwrap();\n\
    \    let mut grades_min_index: usize = 0;\n    let mut grades_max_index: usize\
    \ = 0;\n    let mut grades_min_value: f64 = grades.iter().min().unwrap();\n  \
    \  let mut grades_max_value: f64 = grades.iter().max().unwrap();\n    let mut\
    \ grades_min_index: usize = 0;\n    let mut grades_max_index: usize = 0;\n   \
    \ let mut grades_min_value: f64 = grades.iter().min().unwrap();\n    let mut grades_max_value:\
    \ f64 = grades.iter().max().unwrap();\n    let mut grades_min_index: u\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpasv3_su2.rs:57:32\n   |\n\
    57 |     let mut grades_min_index: u\n   |                                ^ help:\
    \ add `;` here\n58 | }\n   | - unexpected token\n\nerror[E0412]: cannot find type\
    \ `u` in this scope\n  --> /tmp/tmpasv3_su2.rs:57:31\n   |\n57 |     let mut grades_min_index:\
    \ u\n   |                               ^ help: a builtin type with a similar\
    \ name exists: `u8`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpasv3_su2.rs:27:51\n     |\n27   |     let mut grades_min_value:\
    \ f64 = grades.iter().min().unwrap();\n     |                                \
    \                   ^^^ the trait `Ord` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Ord`:\n             \
    \  i128\n               i16\n               i32\n               i64\n        \
    \       i8\n               isize\n               u128\n               u16\n  \
    \           and 4 others\n     = note: required because of the requirements on\
    \ the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpasv3_su2.rs:27:37\n   |\n27 |\
    \     let mut grades_min_value: f64 = grades.iter().min().unwrap();\n   |    \
    \                           ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `&f64`\n   |                               |\n   |                   \
    \            expected due to this\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n27 |     let mut grades_min_value: f64 = *grades.iter().min().unwrap();\n\
    \   |                                     +\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n    --> /tmp/tmpasv3_su2.rs:28:51\n     |\n28   |   \
    \  let mut grades_max_value: f64 = grades.iter().max().unwrap();\n     |     \
    \                                              ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n            "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_string = \"\";\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_grade_index = 0;\n    let mut current_letter_grade = \"\"\
    ;\n    while current_grade != 0.0 {\n        if current_grade < current_grade\
    \ {\n            current_grade_index += 1;\n            current_grade = grades_copy[current_grade_index];\n\
    \            current_letter_grade += \"A\";\n        } else if current_grade >\
    \ current_grade {\n            current_grade_index += 1;\n            current_grade\
    \ = grades_copy[current_grade_index];\n            current_letter_grade += \"\
    B\";\n        } else {\n            current_grade_index += 1;\n            current_grade\
    \ = grades_copy[current_grade_index];\n            current_letter_grade += \"\
    C\";\n        }\n    }\n    grades_string += current_letter_grade;\n    grades_string.chars().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp6yokvyhh.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&str`\n  --> /tmp/tmp6yokvyhh.rs:33:13\n   |\n33 |             current_letter_grade\
    \ += \"A\";\n   |             --------------------^^^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6yokvyhh.rs:37:13\n\
    \   |\n37 |             current_letter_grade += \"B\";\n   |             --------------------^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6yokvyhh.rs:41:13\n\
    \   |\n41 |             current_letter_grade += \"C\";\n   |             --------------------^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6yokvyhh.rs:44:5\n\
    \   |\n44 |     grades_string += current_letter_grade;\n   |     -------------^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6yokvyhh.rs:45:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n45 |   \
    \  grades_string.chars().collect::<Vec<_>>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `char`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `V"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_vec.push(\"B-\");\n\
    \        } else if grade > 2.0 {\n            grades_vec.push(\"B-\");\n     \
    \   } else if grade > 1.0 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > 0.7 { \n            grades_vec.push(\"B-\");\n        } else if grade\
    \ > 0.0 {\n            grades_vec.push(\"B-\");\n        } else if grade > 0.3\
    \ {\n            grades_vec.push(\"B-\");\n        } else if grade > 0.2 {\n \
    \           grades_vec.push(\"B-\");\n        } else if grade > 0.1 {\n      \
    \      grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n           \
    \ grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"B-\");\n\
    \        } else if grade > 0.0 {\n            grades_vec.push(\"B-\");\n     \
    \   } else if grade > 0.0 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > 0.0 {\n            grades_vec.push(\"B-\");\n        } else if grade\
    \ > 0.0 {\n            grades_vec.push(\"B-\");\n        } else if grade > 0.0\
    \ {\n            grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n \
    \           grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n      \
    \      grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n           \
    \ grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"B-\");\n\
    \        } else if grade > 0.0 {\n            grades_vec.push(\"B-\");\n     \
    \   } else if grade > 0.0 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > 0.0 {\n            grades_vec.push(\"B-\");\n        } else if grade\
    \ > 0.0 {\n            grades_vec.push(\"B-\");\n        } else if grade > 0.0\
    \ {\n            grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n \
    \           grades_vec.push(\"B-\");\n        } else if gra\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjy8mjrl0.rs:90:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_vec: Vec<String> = vec![];\n24 |     for grade in grades\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n80 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    90 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpjy8mjrl0.rs:80:1\n\
    \   |\n79 |         } else if gra\n   |                -- this `if` expression\
    \ has a condition, but no block\n80 | }\n   | ^ expected `{`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjy8mjrl0.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -1.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -2.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -3.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -3.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -4.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -4.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -5.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -5.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -6.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -6.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -7.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -7.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -8.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -8.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -9.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -9.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -10.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -10.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -11.0 {\n            grade\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp71wqaica.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_string = String::new();\n24 |     for grade in grades\
    \ {\n   |                         - unclosed delimiter\n...\n77 |         } else\
    \ if grade > -11.0 {\n   |                                 - this delimiter might\
    \ not be properly closed...\n78 |             grade\n79 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp71wqaica.rs:78:13\n   |\n77 |           } else\
    \ if grade > -11.0 {\n   |  ________________-\n78 | |             grade\n   |\
    \ |             ^^^^^ expected `()`, found `f64`\n79 | | }\n   | |_- expected\
    \ this to be `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp71wqaica.rs:24:5\n\
    \   |\n22 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n23 |       let mut grades_string = String::new();\n\
    24 | /     for grade in grades {\n25 | |         if grade > 3.0 {\n26 | |    \
    \         grades_string.push_str(\"B-\");\n27 | |         } else if grade > 2.0\
    \ {\n...  |\n88 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n89 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 2.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 1.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.1 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > 0.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.1 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.3 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -0.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -1.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -1.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -2.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -3.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -3.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -4.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -4.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -5.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -5.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -6.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -6.7 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -7.0 {\n            grades_string.push_str(\"\
    B-\");\n        } else if grade > -7.7 {\n            grades_string.push_str(\"\
    B-\");\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpd4gzn8xw.rs:90:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_string = String::new();\n24 |     for grade in grades\
    \ {\n   |                         - unclosed delimiter\n...\n77 |         } else\
    \ if grade > -7.7 {\n   |                                - this delimiter might\
    \ not be properly closed...\n...\n80 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n90 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd4gzn8xw.rs:24:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n23 |      \
    \ let mut grades_string = String::new();\n24 | /     for grade in grades {\n25\
    \ | |         if grade > 3.0 {\n26 | |             grades_string.push_str(\"B-\"\
    );\n27 | |         } else if grade > 2.7 {\n...  |\n89 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n90 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"B+\";\n        } else if grade > 2.7 {\n      \
    \      letter_grade += \"B\";\n        } else if grade > 2.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade > 2.0 {\n            letter_grade += \"\
    C+\";\n        } else if grade > 1.7 {\n            letter_grade += \"C\";\n \
    \       } else if grade > 1.3 {\n            letter_grade += \"C-\";\n       \
    \ } else if grade > 1.0 {\n            letter_grade += \"D+\";\n        } else\
    \ if grade > 0.7 {\n            letter_grade += \"D\";\n        } else if grade\
    \ > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n           \
    \ letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmph1zanj4s.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut letter_grade: String;\n    let mut current_grade:\
    \ f64;\n    let mut current_letter_grade: String;\n    for grade in grades {\n\
    \        current_grade = grade as f64;\n        current_letter_grade = match gpa\
    \ {\n            0 => \"E\",\n            1 => \"D-\", \n            2 => \"D+\"\
    , \n            3 => \"C-\", \n            4 => \"C+\", \n            5 => \"\
    B-\", \n            6 => \"B+\", \n            7 => \"A-\", \n            8 =>\
    \ \"A+\", \n            _ => \"\"\n        };\n        grades_vec.push(current_letter_grade\
    \ + current_grade);\n        gpa -= grade;\n    }\n    grades_vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `{integer}: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpz9ixdg79.rs:24:33\n     |\n24   |     let mut gpa = grades.iter().sum();\n\
    \     |                                 ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `{integer}`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz9ixdg79.rs:31:18\n   |\n31 |             0 => \"E\",\n\
    \   |                  ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                  |\n   |                  expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9ixdg79.rs:42:48\n\
    \   |\n42 |         grades_vec.push(current_letter_grade + current_grade);\n \
    \  |                                                ^^^^^^^^^^^^^ expected `&str`,\
    \ found `f64`\n\nerror[E0277]: cannot subtract-assign `f64` from `{integer}`\n\
    \  --> /tmp/tmpz9ixdg79.rs:43:13\n   |\n43 |         gpa -= grade;\n   |     \
    \        ^^ no implementation for `{integer} -= f64`\n   |\n   = help: the trait\
    \ `SubAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n         \
    \    <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade: f64 =\
    \ grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n   \
    \ let mut max_grade_index: usize = 0;\n    let mut min_grade_index2: usize = 0;\n\
    \    let mut max_grade_index2: usize = 0;\n    let mut min_grade_index3: usize\
    \ = 0;\n    let mut max_grade_index3: usize = 0;\n    let mut min_grade_index4:\
    \ usize = 0;\n    let mut max_grade_index4: usize = 0;\n    let mut min_grade_index5:\
    \ usize = 0;\n    let mut max_grade_index5: usize = 0;\n    let mut min_grade_index6:\
    \ usize = 0;\n    let mut max_grade_index6: usize = 0;\n    let mut min_grade_index7:\
    \ usize = 0;\n    let mut max_grade_index7: usize = 0;\n    let mut min_grade_index8:\
    \ usize = 0;\n    let mut max_grade_index8: usize = 0;\n    let mut min_grade_index9:\
    \ usize = 0;\n    let mut max_grade_index9: usize = 0;\n    let mut min_grade_index10:\
    \ usize = 0;\n    let mut max_grade_index10: usize = 0;\n    let mut min_grade_index11:\
    \ usize = 0;\n    let mut max_grade_index11: usize = 0;\n    let mut min_grade_index12:\
    \ usize = 0;\n    let mut max_grade_index12: usize = 0;\n    let mut min_grade_index13:\
    \ usize = 0;\n    let mut max_grade_index13: usize = 0;\n    let mut min_grade_index14:\
    \ usize = 0;\n    let mut max_grade_index14: usize = 0;\n    let mut min_grade_index15:\
    \ usize = 0;\n    let mut max_grade_index15: usize = 0;\n    let mut min_grade_index16:\
    \ usize = 0;\n    let mut max_grade_index16: usize = 0;\n    let mut min_grade_index17:\
    \ usize = 0;\n    let mut max_grade_index17: usize = 0;\n    let mut min_grade_index18:\
    \ usize = 0;\n    let mut max_grade_index18: usize = 0;\n    let mut min_grade_index19:\
    \ usize = 0;\n    let mut max_grade_index19: usize = 0;\n    let mut min_grade_index20:\
    \ usize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqa8j7_wi.rs:65:11\n   |\n\
    65 |     let mu\n   |           ^ help: add `;` here\n66 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    -->\
    \ /tmp/tmpqa8j7_wi.rs:24:44\n     |\n24   |     let mut min_grade: f64 = grades.iter().min().unwrap();\n\
    \     |                                            ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqa8j7_wi.rs:24:30\n\
    \   |\n24 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     let\
    \ mut min_grade: f64 = *grades.iter().min().unwrap();\n   |                  \
    \            +\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpqa8j7_wi.rs:25:44\n     |\n25   |     let mut max_grade: f64\
    \ = grades.iter().max().unwrap();\n     |                                    \
    \        ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help:\
    \ the following other types implement trait `Ord`:\n               i128\n    \
    \           i16\n               i32\n               i64\n               i8\n \
    \              isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqa8j7_wi.rs:25:30\n   |\n25 |     let mut max_grade:\
    \ f64 = grades.iter().max().unwrap();\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut gpa = grades_copy[0];\n    let mut grade = grades_copy[0];\n\
    \    let mut letter_grade = String::new();\n    \n    while grade != 0.0 {\n \
    \       if grade < gpa {\n            letter_grade += &format!(\"{}+\", letter_grade);\n\
    \            grades_copy.pop();\n            grade -= gpa;\n        } else {\n\
    \            letter_grade += &format!(\"{}\", letter_grade);\n            grades_copy.pop();\n\
    \            grade -= gpa;\n        }\n        gpa = grades_copy[0];\n    }\n\
    \    \n    letter_grades.push(letter_grade);\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpgnjm260a.rs:48:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_gpa: f64 = 0.0;\n    for grade in grades {\n        total_gpa += grade;\n\
    \    }\n    let mut total_gpa_rounded: f64 = total_gpa.round();\n    let mut letter_grade:\
    \ String;\n    \n    if total_gpa_rounded < 4.0 {\n        letter_grade = \"E\"\
    ;\n    } else if total_gpa_rounded < 3.7 {\n        letter_grade = \"D-\";\n \
    \   } else if total_gpa_rounded < 3.3 {\n        letter_grade = \"C-\";\n    }\
    \ else if total_gpa_rounded < 3.0 {\n        letter_grade = \"B-\";\n    } else\
    \ if total_gpa_rounded < 2.7 {\n        letter_grade = \"B-\";\n    } else if\
    \ total_gpa_rounded < 2.3 {\n        letter_grade = \"B-\";\n    } else if total_gpa_rounded\
    \ < 2.0 {\n        letter_grade = \"B-\";\n    } else if total_gpa_rounded < 1.7\
    \ {\n        letter_grade = \"B-\";\n    } else if total_gpa_rounded < 1.3 {\n\
    \        letter_grade = \"B-\";\n    } else if total_gpa_rounded < 1.0 {\n   \
    \     letter_grade = \"B-\";\n    } else if total_gpa_rounded < 0.7 {\n      \
    \  letter_grade = \"B-\";\n    } else if total_gpa_rounded < 0.3 {\n        letter_grade\
    \ = \"B-\";\n    } else if total_gpa_rounded < 0.0 {\n        letter_grade = \"\
    B-\";\n    } else {\n        letter_grade = \"B-\";\n    }\n    grades_vec.push(letter_grade);\n\
    \    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe2_sch1v.rs:32:24\n   |\n\
    29 |     let mut letter_grade: String;\n   |                           ------\
    \ expected due to this type\n...\n32 |         letter_grade = \"E\";\n   |   \
    \                     ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe2_sch1v.rs:34:24\n\
    \   |\n29 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n34 |         letter_grade = \"D-\";\n\
    \   |                        ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe2_sch1v.rs:36:24\n\
    \   |\n29 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n36 |         letter_grade = \"C-\";\n\
    \   |                        ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe2_sch1v.rs:38:24\n\
    \   |\n29 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n38 |         letter_grade = \"B-\";\n\
    \   |                        ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe2_sch1v.rs:40:24\n\
    \   |\n29 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n40 |         letter_grade = \"B-\";\n\
    \   |                        ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe2_sch1v.rs:42:24\n\
    \   |\n29 |     let mut "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut max_grade\
    \ = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut total_grade = 0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n    }\n    let mut grades_remaining = grades.len() - 1;\n    while\
    \ grades_remaining > 0 {\n        let mut grade = grades[grades_remaining];\n\
    \        if grade < min_grade {\n            grade = min_grade;\n        }\n \
    \       if grade > max_grade {\n            grade = max_grade;\n        }\n  \
    \      let mut grades_remaining = grades_remaining - 1;\n        let mut letter_grade\
    \ = String::new();\n        match grade {\n            4.0 => letter_grade +=\
    \ \"A+\".to_string(),\n            > 3.7 => letter_grade += \"A\".to_string(),\n\
    \            > 3.3 => letter_grade += \"A-\".to_string(),\n            > 3.0 =>\
    \ letter_grade += \"B+\".to_string(),\n            > 2.7 => letter_grade += \"\
    B\".to_string(),\n            > 2.3 => letter_grade += \"B-\".to_string(),\n \
    \           > 2.0 => letter_grade += \"C+\".to_string(),\n            > 1.7 =>\
    \ letter_grade += \"C\".to_string(),\n            > 1.3 => letter_grade += \"\
    C-\".to_string(),\n            > 1.0 => letter_grade += \"D+\".to_string(),\n\
    \            > 0.7 => letter_grade += \"D\".to_string(),\n            > 0.0 =>\
    \ letter_grade += \"D-\".to_string(),\n            _ => letter_grade += \"E\"\
    .to_string(),\n        }\n        letter_grades.push(letter_grade);\n    }\n \
    \   letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpgy0gec4_.rs:43:13\n \
    \  |\n43 |             > 3.7 => letter_grade += \"A\".to_string(),\n   |     \
    \        ^ expected pattern\n\nerror[E0277]: the trait bound `f64: Ord` is not\
    \ satisfied\n    --> /tmp/tmpgy0gec4_.rs:24:39\n     |\n24   |     let mut max_grade\
    \ = grades.iter().max().unwrap();\n     |                                    \
    \   ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the\
    \ following other types implement trait `Ord`:\n               i128\n        \
    \       i16\n               i32\n               i64\n               i8\n     \
    \          isize\n               u128\n               u16\n             and 4\
    \ others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpgy0gec4_.rs:25:39\n\
    \     |\n25   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgy0gec4_.rs:28:21\n\
    \   |\n28 |         total_grade += grade;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade > 3.0 {\n\
    \            letter_grade += \"A+\";\n        } else if grade > 2.0 {\n      \
    \      letter_grade += \"A\";\n        } else if grade > 1.0 {\n            letter_grade\
    \ += \"A-\";\n        } else if grade > 0.7 { \n            letter_grade += \"\
    B+\";\n        } else if grade > 0.3 { \n            letter_grade += \"B\";\n\
    \        } else if grade > 0.0 { \n            letter_grade += \"B-\";\n     \
    \   } else if grade > 0.0 { \n            letter_grade += \"C+\";\n        } else\
    \ if grade > 0.7 { \n            letter_grade += \"C\";\n        } else if grade\
    \ > 0.3 { \n            letter_grade += \"C-\";\n        } else if grade > 0.0\
    \ { \n            letter_grade += \"D+\";\n        } else if grade > 0.0 { \n\
    \            letter_grade += \"D\";\n        } else { \n            letter_grade\
    \ += \"D-\";\n        }\n        letter_grades.push(letter_grade);\n    }\n  \
    \  return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A\", \"A-\", \"A-\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_nz5yidr.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letter_grades.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            letter_grades.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            letter_grades.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grades.push(\"C+\");\n        } else if\
    \ grade > 1.7 {\n            letter_grades.push(\"C\");\n        } else if grade\
    \ > 1.3 {\n            letter_grades.push(\"C-\");\n        } else if grade >\
    \ 1.0 {\n            letter_grades.push(\"D+\");\n        } else if grade > 0.7\
    \ {\n            letter_grades.push(\"D\");\n        } else if grade > 0.0 {\n\
    \            letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnw9x2h61.rs:47:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n47 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_vec.push(\"B-\");\n\
    \        } else if grade > 2.7 {\n            grades_vec.push(\"B-\");\n     \
    \   } else if grade > 2.3 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > 2.0 {\n            grades_vec.push(\"B-\");\n        } else if grade\
    \ > 1.7 {\n            grades_vec.push(\"B-\");\n        } else if grade > 1.3\
    \ {\n            grades_vec.push(\"B-\");\n        } else if grade > 1.0 {\n \
    \           grades_vec.push(\"B-\");\n        } else if grade > 0.7 {\n      \
    \      grades_vec.push(\"B-\");\n        } else if grade > 0.3 {\n           \
    \ grades_vec.push(\"B-\");\n        } else if grade > 0.0 {\n            grades_vec.push(\"\
    B-\");\n        } else if grade > -0.3 {\n            grades_vec.push(\"B-\");\n\
    \        } else if grade > -0.7 {\n            grades_vec.push(\"B-\");\n    \
    \    } else if grade > -1.0 {\n            grades_vec.push(\"B-\");\n        }\
    \ else if grade > -1.7 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > -2.0 {\n            grades_vec.push(\"B-\");\n        } else if grade\
    \ > -3.0 {\n            grades_vec.push(\"B-\");\n        } else if grade > -3.7\
    \ {\n            grades_vec.push(\"B-\");\n        } else if grade > -4.0 {\n\
    \            grades_vec.push(\"B-\");\n        } else if grade > -4.7 {\n    \
    \        grades_vec.push(\"B-\");\n        } else if grade > -5.0 {\n        \
    \    grades_vec.push(\"B-\");\n        } else if grade > -5.7 {\n            grades_vec.push(\"\
    B-\");\n        } else if grade > -6.0 {\n            grades_vec.push(\"B-\");\n\
    \        } else if grade > -6.7 {\n            grades_vec.push(\"B-\");\n    \
    \    } else if grade > -7.0 {\n            grades_vec.push(\"B-\");\n        }\
    \ else if grade > -7.7 {\n            grades_vec.push(\"B-\");\n        } else\
    \ if grade > -8.0 {\n            grades_vec.push(\"B-\");\n        } else if grade\
    \ > -8.7 {\n            grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpedpji4c0.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_vec: Vec<String> = vec![];\n24 |     for grade in grades\
    \ {\n   |                         - unclosed delimiter\n...\n77 |         } else\
    \ if grade > -8.7 {\n   |                                - this delimiter might\
    \ not be properly closed...\n78 |             grade\n79 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpedpji4c0.rs:26:29\n   |\n26 |             grades_vec.push(\"\
    B-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpedpji4c0.rs:28:29\n   |\n28 |             grades_vec.push(\"\
    B-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpedpji4c0.rs:30:29\n   |\n30 |             grades_vec.push(\"\
    B-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpedpji4c0.rs:32:29\n   |\n32 |             grades_vec.push(\"\
    B-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpedpji4c0.rs:34:29\n   |\n34 |             grades_vec.push(\"\
    B-\");\n   |                             ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n    }\n    for grade in grades {\n        let grade = grade / total_grade;\n\
    \        let grade = grade.ceil() as f64;\n        grades_vec.push(match grade\
    \ {\n            0..=1 => \"D\",\n            1..=2 => \"C\",\n            2..=3\
    \ => \"B\",\n            3..=4 => \"A\",\n            4..=5 => \"A+\",\n     \
    \       5..=6 => \"A-\",\n            6..=7 => \"B+\",\n            7..=8 => \"\
    B-\",\n            8..=9 => \"C+\",\n            9..=10 => \"C\",\n          \
    \  10..=11 => \"D+\",\n            11..=12 => \"D\",\n            12..=13 => \"\
    D-\",\n            13..=14 => \"E\",\n            _ => \"F\",\n        });\n \
    \   }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeefhvznd.rs:32:13\n   |\n\
    31 |         grades_vec.push(match grade {\n   |                             \
    \  ----- this expression has type `f64`\n32 |             0..=1 => \"D\",\n  \
    \ |             ^   - this is of type `{integer}`\n   |             |\n   |  \
    \           expected `f64`, found integer\n   |             help: use a float\
    \ literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeefhvznd.rs:32:17\n\
    \   |\n31 |         grades_vec.push(match grade {\n   |                      \
    \         ----- this expression has type `f64`\n32 |             0..=1 => \"D\"\
    ,\n   |             -   ^\n   |             |   |\n   |             |   expected\
    \ `f64`, found integer\n   |             |   help: use a float literal: `1.0`\n\
    \   |             this is of type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeefhvznd.rs:33:13\n   |\n31 |         grades_vec.push(match grade\
    \ {\n   |                               ----- this expression has type `f64`\n\
    32 |             0..=1 => \"D\",\n33 |             1..=2 => \"C\",\n   |     \
    \        ^   - this is of type `{integer}`\n   |             |\n   |         \
    \    expected `f64`, found integer\n   |             help: use a float literal:\
    \ `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeefhvznd.rs:33:17\n \
    \  |\n31 |         grades_vec.push(match grade {\n   |                       \
    \        ----- this expression has type `f64`\n32 |             0..=1 => \"D\"\
    ,\n33 |             1..=2 => \"C\",\n   |             -   ^\n   |            \
    \ |   |\n   |             |   expected `f64`, found integer\n   |            \
    \ |   help: use a float literal: `2.0`\n   |             this is of type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeefhvznd.rs:34:13\n   |\n31 |\
    \         grades_vec.push(match grade {\n   |                               -----\
    \ this expression has type `f64`\n...\n34 |             2..=3 => \"B\",\n   |\
    \             ^   - this is of type `{integer}`\n   |             |\n   |    \
    \         expected `f64`, found integer\n   |             help: use a float literal:\
    \ `2.0`\n\nerror[E0308]: "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade = String::new();\n        if grade < 3.0 {\n\
    \            letter_grade += \"A\";\n        } else if grade < 3.3 {\n       \
    \     letter_grade += \"A-\";\n        } else if grade < 3.7 {\n            letter_grade\
    \ += \"B+\";\n        } else if grade < 4.0 {\n            letter_grade += \"\
    B\";\n        } else if grade < 4.3 {\n            letter_grade += \"B-\";\n \
    \       } else if grade < 4.7 {\n            letter_grade += \"C+\";\n       \
    \ } else if grade < 5.0 {\n            letter_grade += \"C\";\n        } else\
    \ if grade < 5.3 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ < 5.7 {\n            letter_grade += \"D+\";\n        } else if grade < 6.0\
    \ {\n            letter_grade += \"D\";\n        } else if grade < 6.3 {\n   \
    \         letter_grade += \"D-\";\n        } else if grade < 6.7 {\n         \
    \   letter_grade += \"E\";\n        } else {\n            letter_grade += \"F\"\
    ;\n        }\n        letter_grades.push(letter_grade);\n    }\n    return letter_grades;\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B-\", \"A-\", \"A\", \"A\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpskprausx.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_sum: f64 = 0.0;\n    let mut grades_average:\
    \ f64 = 0.0;\n    let mut grades_average_index = 0;\n    let mut grades_average_index2\
    \ = 0;\n    let mut grades_average_index3 = 0;\n    let mut grades_average_index4\
    \ = 0;\n    let mut grades_average_index5 = 0;\n    let mut grades_average_index6\
    \ = 0;\n    let mut grades_average_index7 = 0;\n    let mut grades_average_index8\
    \ = 0;\n    let mut grades_average_index9 = 0;\n    let mut grades_average_index10\
    \ = 0;\n    let mut grades_average_index11 = 0;\n    let mut grades_average_index12\
    \ = 0;\n    let mut grades_average_index13 = 0;\n    let mut grades_average_index14\
    \ = 0;\n    let mut grades_average_index15 = 0;\n    let mut grades_average_index16\
    \ = 0;\n    let mut grades_average_index17 = 0;\n    let mut grades_average_index18\
    \ = 0;\n    let mut grades_average_index19 = 0;\n    let mut grades_average_index20\
    \ = 0;\n    let mut grades_average_index21 = 0;\n    let mut grades_average_index22\
    \ = 0;\n    let mut grades_average_index23 = 0;\n    let mut grades_average_index24\
    \ = 0;\n    let mut grades_average_index25 = 0;\n    let mut grades_average_index26\
    \ = 0;\n    let mut grades_average_index27 = 0;\n    let mut grades_average_index28\
    \ = 0;\n    let mut grades_average_index29 = 0;\n    let mut grades_average_index30\
    \ = 0;\n    let mut grades_average_index31 = 0;\n    let mut grades_average_index32\
    \ = 0;\n    let mut grades_average_index33 = 0;\n    let mut grades_average_index34\
    \ = 0;\n    let mut grades_average_index35 = 0;\n    let mut grades_average_index36\
    \ = 0;\n    let mut grades_average_index37 = 0;\n    let mut grades_average_index38\
    \ = 0;\n    let mut grades_average_index39 = 0;\n    let mut grades_average_index40\
    \ = 0;\n    let mut grades_average_index41 = 0;\n    let mut grades_average_index42\
    \ = 0;\n    let mut grades_average_index43 = 0;\n    let mut grades_average_index44\
    \ = 0;\n    let mut grades_average_index45 = 0;\n    let mut grades_average_index46\
    \ = 0;\n    let mut grades_average_index47 = 0;\n    let \n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp35d2qn37.rs:75:1\n  \
    \ |\n75 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    for grade in grades {\n        if total_grade >= 4.0 {\n         \
    \   grades_vec.push(\"A+\");\n            total_grade -= 4.0;\n        } else\
    \ if total_grade > 3.7 {\n            grades_vec.push(\"A\");\n            total_grade\
    \ -= 3.7;\n        } else if total_grade > 3.3 {\n            grades_vec.push(\"\
    A-\");\n            total_grade -= 3.3;\n        } else if total_grade > 3.0 {\n\
    \            grades_vec.push(\"B+\");\n            total_grade -= 3.0;\n     \
    \   } else if total_grade > 2.7 {\n            grades_vec.push(\"B\");\n     \
    \       total_grade -= 2.7;\n        } else if total_grade > 2.3 {\n         \
    \   grades_vec.push(\"B-\");\n            total_grade -= 2.3;\n        } else\
    \ if total_grade > 2.0 {\n            grades_vec.push(\"C+\");\n            total_grade\
    \ -= 2.0;\n        } else if total_grade > 1.7 {\n            grades_vec.push(\"\
    C\");\n            total_grade -= 1.7;\n        } else if total_grade > 1.3 {\n\
    \            grades_vec.push(\"C-\");\n            total_grade -= 1.3;\n     \
    \   } else if total_grade > 1.0 {\n            grades_vec.push(\"D+\");\n    \
    \        total_grade -= 1.0;\n        } else if total_grade > 0.7 {\n        \
    \    grades_vec.push(\"D\");\n            total_grade -= 0.7;\n        } else\
    \ if total_grade > 0.0 {\n            grades_vec.push(\"D-\");\n            total_grade\
    \ -= 0.0;\n        } else {\n            grades_vec.push(\"E\");\n        }\n\
    \    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:30:29\n   |\n\
    30 |             grades_vec.push(\"A+\");\n   |                             ^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \           |\n   |                             expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:33:29\n\
    \   |\n33 |             grades_vec.push(\"A\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:36:29\n\
    \   |\n36 |             grades_vec.push(\"A-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:39:29\n\
    \   |\n39 |             grades_vec.push(\"B+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:42:29\n\
    \   |\n42 |             grades_vec.push(\"B\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:45:29\n\
    \   |\n45 |             grades_vec.push(\"B-\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       \
    \                      |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y6xyu3_.rs:48:29\n\
    \   |\n48 |             grades_vec.push(\"C+\");\n   |                       \
    \      ^^^^- help: try using a conversion method: `.to_string()`\n   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            letter_grades.push(\"A+\");\n     \
    \   } else if grade < 3.3 {\n            letter_grades.push(\"A\");\n        }\
    \ else if grade < 3.7 {\n            letter_grades.push(\"A-\");\n        } else\
    \ if grade < 4.0 {\n            letter_grades.push(\"B+\");\n        } else if\
    \ grade < 4.3 {\n            letter_grades.push(\"B\");\n        } else if grade\
    \ < 4.7 {\n            letter_grades.push(\"B-\");\n        } else if grade <\
    \ 5.0 {\n            letter_grades.push(\"C+\");\n        } else if grade < 5.3\
    \ {\n            letter_grades.push(\"C\");\n        } else if grade < 5.7 {\n\
    \            letter_grades.push(\"C-\");\n        } else if grade < 6.0 {\n  \
    \          letter_grades.push(\"D+\");\n        } else if grade < 6.3 {\n    \
    \        letter_grades.push(\"D\");\n        } else if grade < 6.7 {\n       \
    \     letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaf09hkk4.rs:53:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n53 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_length\
    \ = grades.len();\n    let mut grades_sum = 0;\n    let mut grades_average = 0;\n\
    \    let mut grades_average_length = grades_length;\n    let mut grades_average_sum\
    \ = 0;\n    let mut grades_average_average = 0;\n    let mut grades_average_average_length\
    \ = grades_average_length;\n    let mut grades_average_average_sum = 0;\n    let\
    \ mut grades_average_average_average = 0;\n    let mut grades_average_average_average_length\
    \ = grades_average_average_length;\n    let mut grades_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average = 0;\n    let mut grades_average_average_average_average_length\
    \ = grades_average_average_average_length;\n    let mut grades_average_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average_average = 0;\n    let\
    \ mut grades_average_average_average_average_average_length = grades_average_average_average_average_length;\n\
    \    let mut grades_average_average_average_average_average_sum = 0;\n    let\
    \ mut grades_average_average_average_average_average_average = 0;\n    let mut\
    \ grades_average_average_average_average_average_average_length = grades_average_average_average_average_average_length;\n\
    \    let mut grades_average_average_average_average_average_sum = 0;\n    let\
    \ mut grades_average_average_average_average_average_average = 0;\n    let mut\
    \ grades_average_average_average_average_average_average_length = grades_average_average_average_average_average_average_length;\n\
    \    let mut grades_average_average_average_average_average_average_sum = 0;\n\
    \    let mut grades_average_average_average_average_average_average_average =\
    \ 0;\n    let mut grades_average_average_average_average_average_average_average_length\
    \ = grades_average_average_average_average_average_average_average_length;\n \
    \   let mut grades_average_average_average_average_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average_length\
    \ = grades_average_average_average_average_average_average_average_average_length;\n\
    \    let mut grades_average_average_average_average_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average_length\
    \ = grades_average_average_average_average_average_average_average_average_average_length;\n\
    \    let mut grades_average_average_average_average_average_average_average_sum\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average_average\
    \ = 0;\n    let mut grades_average_average_average_average_average_average_average_average_average_length\
    \ = grades_average_average_average_average_average_average_average_\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv07mzn5y.rs:57:164\n   |\n\
    57 |     let mut grades_average_average_average_average_average_average_average_average_average_length\
    \ = grades_average_average_average_average_average_average_average_\n   |    \
    \                                                                            \
    \                                                                            \
    \        ^ help: add `;` here\n58 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `grades_average_average_average_average_average_average_average_length`\
    \ in this scope\n  --> /tmp/tmpv07mzn5y.rs:48:85\n   |\n48 | ...average_average_length\
    \ = grades_average_average_average_average_average_average_average_length;\n \
    \  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_average_average_average_average_average_average_average`\n\
    \nerror[E0425]: cannot find value `grades_average_average_average_average_average_average_average_average_length`\
    \ in this scope\n  --> /tmp/tmpv07mzn5y.rs:51:93\n   |\n51 | ...erage_average_length\
    \ = grades_average_average_average_average_average_average_average_average_length;\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_average_average_average_average_average_average_average_average`\n\
    \nerror[E0425]: cannot find value `grades_average_average_average_average_average_average_average_average_average_length`\
    \ in this scope\n  --> /tmp/tmpv07mzn5y.rs:54:93\n   |\n54 | ...e_average_length\
    \ = grades_average_average_average_average_average_average_average_average_average_length;\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_average_average_average_average_average_average_average_average_length`\n\
    \nerror[E0425]: cannot find value `grades_average_average_average_average_a"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_sorted = grades_copy.clone();\n    grades_sorted.reverse();\n\
    \    let mut grades_reversed = grades_sorted.clone();\n    let mut grades_reversed_copy\
    \ = grades_reversed.clone();\n    grades_reversed_copy.pop();\n    let mut grades_reversed_sorted\
    \ = grades_reversed_copy.clone();\n    grades_reversed_sorted.pop();\n    let\
    \ mut grades_reversed_sorted_copy = grades_reversed_sorted.clone();\n    grades_reversed_sorted_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy2 = grades_reversed_sorted_copy.clone();\n\
    \    grades_reversed_sorted_copy2.pop();\n    let mut grades_reversed_sorted_copy3\
    \ = grades_reversed_sorted_copy2.clone();\n    grades_reversed_sorted_copy3.pop();\n\
    \    let mut grades_reversed_sorted_copy4 = grades_reversed_sorted_copy3.clone();\n\
    \    grades_reversed_sorted_copy4.pop();\n    let mut grades_reversed_sorted_copy5\
    \ = grades_reversed_sorted_copy4.clone();\n    grades_reversed_sorted_copy5.pop();\n\
    \    let mut grades_reversed_sorted_copy6 = grades_reversed_sorted_copy5.clone();\n\
    \    grades_reversed_sorted_copy6.pop();\n    let mut grades_reversed_sorted_copy7\
    \ = grades_reversed_sorted_copy6.clone();\n    grades_reversed_sorted_copy7.pop();\n\
    \    let mut grades_reversed_sorted_copy8 = grades_reversed_sorted_copy7.clone();\n\
    \    grades_reversed_sorted_copy8.pop();\n    let mut grades_reversed_sorted_copy9\
    \ = grades_reversed_sorted_copy8.clone();\n    grades_reversed_sorted_copy9.pop();\n\
    \    let mut grades_reversed_sorted_copy10 = grades_reversed_sorted_copy9.clone();\n\
    \    grades_reversed_sorted_copy10.pop();\n    let mut grades_reversed_sorted_copy11\
    \ = grades_reversed_sorted_copy10.clone();\n    grades_reversed_sorted_copy11.pop();\n\
    \    let mut grades_reversed_sorted_copy12 = grades_reversed_sorted_copy11.clone();\n\
    \    grades_reversed_sorted_copy12.pop();\n    let mut grades_reversed_sorted_copy13\
    \ = grades_reversed_sorted_copy12.clone();\n    grades_reversed_sorted_copy13.pop();\n\
    \    let mut grades_reversed_sorted_copy14 = grades_reversed_sorted_copy13.clone();\n\
    \    grades_reversed_sorted_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `grades_reversed_sorted_` in this scope\n\
    \  --> /tmp/tmp4snqes0j.rs:59:5\n   |\n59 |     grades_reversed_sorted_\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `grades_reversed_sorted`\n\nerror[E0277]: the trait bound `f64: Ord` is not\
    \ satisfied\n   --> /tmp/tmp4snqes0j.rs:24:17\n    |\n24  |     grades_copy.sort();\n\
    \    |                 ^^^^ the trait `Ord` is not implemented for `f64`\n   \
    \ |\n    = help: the following other types implement trait `Ord`:\n          \
    \    i128\n              i16\n              i32\n              i64\n         \
    \     i8\n              isize\n              u128\n              u16\n       \
    \     and 4 others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_len = grades_copy.len();\n    let mut grades_grades = vec![];\n\
    \    let mut grades_grades_len = grades_len / 4;\n    let mut grades_grades_grades\
    \ = vec![];\n    let mut grades_grades_grades_len = grades_len / 3;\n    let mut\
    \ grades_grades_grades_grades = vec![];\n    let mut grades_grades_grades_grades_len\
    \ = grades_len / 2;\n    let mut grades_grades_grades_grades_grades = vec![];\n\
    \    let mut grades_grades_grades_grades_grades_len = grades_len / 1;\n    let\
    \ mut grades_grades_grades_grades_grades_grades = vec![];\n    let mut grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaqaex__.rs:45:123\n   |\n\
    45 |     let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    \   |                                                                        \
    \                                                   ^ help: add `;` here\n46 |\
    \ }\n   | - unexpected token\n\nerror[E0277]: the trait bound `f64: Ord` is not\
    \ satisfied\n   --> /tmp/tmpiaqaex__.rs:24:17\n    |\n24  |     grades_copy.sort();\n\
    \    |                 ^^^^ the trait `Ord` is not implemented for `f64`\n   \
    \ |\n    = help: the following other types implement trait `Ord`:\n          \
    \    i128\n              i16\n              i32\n              i64\n         \
    \     i8\n              isize\n              u128\n              u16\n       \
    \     and 4 others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpiaqaex__.rs:22:48\n   |\n22 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpronlgvbb.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            grades_string.push(\"B+\");\n     \
    \   } else if grade > 2.7 {\n            grades_string.push(\"B\");\n        }\
    \ else if grade > 2.3 {\n            grades_string.push(\"B-\");\n        } else\
    \ if grade > 1.3 {\n            grades_string.push(\"C+\");\n        } else if\
    \ grade > 0.7 {\n            grades_string.push(\"C\");\n        } else if grade\
    \ > 0.3 {\n            grades_string.push(\"C-\");\n        } else if grade >\
    \ 0.0 {\n            grades_string.push(\"D+\");\n        } else if grade > -0.3\
    \ {\n            grades_string.push(\"D\");\n        } else if grade > -0.7 {\n\
    \            grades_string.push(\"D-\");\n        } else if grade > -1.0 {\n \
    \           grades_string.push(\"E\");\n        } else {\n            grades_string.push(\"\
    A\");\n        }\n    }\n    return grades_string;\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkaahr_p2.rs:49:12\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n49 |     return grades_string;\n   |          \
    \  ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \    let mut letter_grade = String::new();\n    \n    while gpa > 0.0 {\n    \
    \    let mut grade = String::new();\n        \n        if gpa >= 4.0 {\n     \
    \       grade = \"A+\";\n            gpa -= 4.0;\n        }\n        \n      \
    \  if gpa > 3.7 {\n            grade = \"A\";\n            gpa -= 3.7;\n     \
    \   }\n        \n        if gpa > 3.3 {\n            grade = \"A-\";\n       \
    \     gpa -= 3.3;\n        }\n        \n        if gpa > 3.0 {\n            grade\
    \ = \"B+\";\n            gpa -= 3.0;\n        }\n        \n        if gpa > 2.7\
    \ {\n            grade = \"B\";\n            gpa -= 2.7;\n        }\n        \n\
    \        if gpa > 2.3 {\n            grade = \"B-\";\n            gpa -= 2.3;\n\
    \        }\n        \n        if gpa > 2.0 {\n            grade = \"C+\";\n  \
    \          gpa -= 2.0;\n        }\n        \n        if gpa > 1.7 {\n        \
    \    grade = \"C\";\n            gpa -= 1.7;\n        }\n        \n        if\
    \ gpa > 1.3 {\n            grade = \"C-\";\n            gpa -= 1.3;\n        }\n\
    \        \n        if gpa > 1.0 {\n            grade = \"D+\";\n            gpa\
    \ -= 1.0;\n        }\n        \n        if gpa > 0.7 {\n            grade = \"\
    D\";\n            gpa -= 0.7;\n        }\n        \n        if gpa > 0.0 {\n \
    \           grade = \"D-\";\n            gpa -= 0.0;\n        }\n        \n  \
    \      letter_grade += grade;\n    }\n    \n    letter_grades.push(letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2or74hc1.rs:31:21\n   |\n\
    28 |         let mut grade = String::new();\n   |                         -------------\
    \ expected due to this value\n...\n31 |             grade = \"A+\";\n   |    \
    \                 ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2or74hc1.rs:36:21\n\
    \   |\n28 |         let mut grade = String::new();\n   |                     \
    \    ------------- expected due to this value\n...\n36 |             grade = \"\
    A\";\n   |                     ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2or74hc1.rs:41:21\n\
    \   |\n28 |         let mut grade = String::new();\n   |                     \
    \    ------------- expected due to this value\n...\n41 |             grade = \"\
    A-\";\n   |                     ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2or74hc1.rs:46:21\n\
    \   |\n28 |         let mut grade = String::new();\n   |                     \
    \    ------------- expected due to this value\n...\n46 |             grade = \"\
    B+\";\n   |                     ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2or74hc1.rs:51:21\n\
    \   |\n28 |         let mut grade = String::new();\n   |                     \
    \    ------------- expected due to this value\n...\n51 |             grade = \"\
    B\";\n   |                     ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2or74hc1.rs:56:21\n\
    \   |\n28 |         let mut gra"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut total_gpa\
    \ = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n  \
    \  for grade in grades {\n        let letter_grade = if grade < total_gpa * 0.5\
    \ {\n            \"A+\"\n        } else if grade < total_gpa * 0.3 {\n       \
    \     \"A\"\n        } else if grade < total_gpa * 0.1 {\n            \"B+\"\n\
    \        } else if grade < total_gpa * 0.07 {\n            \"B\"\n        } else\
    \ if grade < total_gpa * 0.03 {\n            \"B-\"\n        } else if grade <\
    \ total_gpa * 0.01 {\n            \"C+\"\n        } else if grade < total_gpa\
    \ * 0.007 {\n            \"C\"\n        } else if grade < total_gpa * 0.003 {\n\
    \            \"C-\"\n        } else if grade < total_gpa * 0.001 {\n         \
    \   \"D+\"\n        } else if grade < total_gpa * 0.0007 {\n            \"D\"\n\
    \        } else if grade < total_gpa * 0.003 {\n            \"D-\"\n        }\
    \ else {\n            \"E\"\n        };\n        letter_grades.push(letter_grade);\n\
    \        total_gpa = grade;\n        total_letter_grade += letter_grade;\n   \
    \ }\n    letter_grades.push(total_letter_grade);\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd86h1zq9.rs:56:24\n   |\n\
    56 |     letter_grades.push(total_letter_grade);\n   |                       \
    \ ^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                    \
    \    expected `&str`, found struct `String`\n   |                        help:\
    \ consider borrowing here: `&total_letter_grade`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd86h1zq9.rs:57:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n57 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ gpa: f64 = grades.iter().sum();\n    let mut letter_grade: String;\n    grades.iter().for_each(|grade|\
    \ {\n        if grade < gpa {\n            letter_grade = \"D-\";\n        } else\
    \ if grade < gpa + 0.3 {\n            letter_grade = \"C-\";\n        } else if\
    \ grade < gpa + 0.4 {\n            letter_grade = \"B-\";\n        } else if grade\
    \ < gpa + 0.5 {\n            letter_grade = \"B-\";\n        } else if grade <\
    \ gpa + 0.6 {\n            letter_grade = \"B-\";\n        } else if grade < gpa\
    \ + 0.7 {\n            letter_grade = \"B-\";\n        } else if grade < gpa +\
    \ 0.8 {\n            letter_grade = \"B-\";\n        } else if grade < gpa + 0.9\
    \ {\n            letter_grade = \"B-\";\n        } else if grade < gpa + 1 {\n\
    \            letter_grade = \"B-\";\n        } else if grade < gpa + 1.1 {\n \
    \           letter_grade = \"B-\";\n        } else if grade < gpa + 1.2 {\n  \
    \          letter_grade = \"B-\";\n        } else if grade < gpa + 1.3 {\n   \
    \         letter_grade = \"B-\";\n        } else if grade < gpa + 1.4 {\n    \
    \        letter_grade = \"B-\";\n        } else if grade < gpa + 1.5 {\n     \
    \       letter_grade = \"B-\";\n        } else if grade < gpa + 1.6 {\n      \
    \      letter_grade = \"B-\";\n        } else if grade < gpa + 1.7 {\n       \
    \     letter_grade = \"B-\";\n        } else if grade < gpa + 1.8 {\n        \
    \    letter_grade = \"B-\";\n        } else if grade < gpa + 1.9 {\n         \
    \   letter_grade = \"B-\";\n        } else if grade < gpa + 2 {\n            letter_grade\
    \ = \"B-\";\n        } else if grade < gpa + 2.1 {\n            letter_grade =\
    \ \"B-\";\n        } else if grade < gpa + 2.2 {\n            letter_grade = \"\
    B-\";\n        } else if grade < gpa + 2.3 {\n            letter_grade = \"B-\"\
    ;\n        } else if grade < gpa + 2.4 {\n            letter_grade = \"B-\";\n\
    \        } else if grade < gpa + 2.5 {\n            letter_grade = \"B-\";\n \
    \       } else if grade < gpa + 2.6 {\n            letter_grade = \"B-\";\n  \
    \      } else if grade < gpa + 2.7 {\n            letter_\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn5dhnppd.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n26 |     grades.iter().for_each(|grade| {\n   |                         \
    \  -        - unclosed delimiter\n   |                           |\n   |     \
    \                      unclosed delimiter\n...\n77 |         } else if grade <\
    \ gpa + 2.7 {\n   |                                     - this delimiter might\
    \ not be properly closed...\n78 |             letter_\n79 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror[E0425]:\
    \ cannot find value `letter_` in this scope\n  --> /tmp/tmpn5dhnppd.rs:78:13\n\
    \   |\n78 |             letter_\n   |             ^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn5dhnppd.rs:27:20\n   |\n27 |\
    \         if grade < gpa {\n   |                    ^^^\n   |                \
    \    |\n   |                    expected `&f64`, found `f64`\n   |           \
    \         help: consider borrowing here: `&gpa`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn5dhnppd.rs:28:28\n   |\n25 |     let mut letter_grade: String;\n\
    \   |                           ------ expected due to this type\n...\n28 |  \
    \           letter_grade = \"D-\";\n   |                            ^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn5dhnppd.rs:29:27\n   |\n29 |\
    \         } else if grade < gpa + 0.3 {\n   |                           ^^^^^^^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found `f64`\n   |                           help: consider borrowing here: `&(gpa\
    \ + 0.3)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn5dhnppd.rs:30:28\n\
    \   |\n25 |     let mut letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n30 |             letter_grad"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade += grade;\n\
    \    }\n    let mut total_grade_rounded: f64 = total_grade as f64;\n    let mut\
    \ grades_rounded: Vec<f64> = vec![];\n    for grade in grades {\n        grades_rounded.push(grade\
    \ as f64 / total_grade_rounded);\n    }\n    for grade in grades_rounded {\n \
    \       let mut letter_grade: String = String::new();\n        if grade < 3.0\
    \ {\n            letter_grade += \"A\";\n        } else if grade < 3.3 {\n   \
    \         letter_grade += \"A-\";\n        } else if grade < 3.7 {\n         \
    \   letter_grade += \"B+\";\n        } else if grade < 4.0 {\n            letter_grade\
    \ += \"B\";\n        } else if grade < 4.3 {\n            letter_grade += \"B-\"\
    ;\n        } else if grade < 4.7 {\n            letter_grade += \"C+\";\n    \
    \    } else if grade < 5.0 {\n            letter_grade += \"C\";\n        } else\
    \ if grade < 5.3 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ < 5.7 {\n            letter_grade += \"D+\";\n        } else if grade < 6.0\
    \ {\n            letter_grade += \"D\";\n        } else if grade < 6.3 {\n   \
    \         letter_grade += \"D-\";\n        } else if grade < 6.7 {\n         \
    \   letter_grade += \"E\";\n        } else {\n            letter_grade += \"F\"\
    ;\n        }\n        grades_vec.push(letter_grade);\n    }\n    grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp5uehk7xf.rs:28:9\n\
    \   |\n28 |     let mut total_grade_rounded: f64 = total_grade as f64;\n   | \
    \        ----^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         help: remove this\
    \ `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]:\
    \ use of moved value: `grades`\n   --> /tmp/tmp5uehk7xf.rs:30:18\n    |\n22  |\
    \ fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    |        \
    \                   ------ move occurs because `grades` has type `Vec<f64>`, which\
    \ does not implement the `Copy` trait\n...\n25  |     for grade in grades {\n\
    \    |                  ------ `grades` moved due to this implicit call to `.into_iter()`\n\
    ...\n30  |     for grade in grades {\n    |                  ^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `grades`\nhelp: consider iterating over a slice of the `Vec<f64>`'s\
    \ content to avoid moving into the `for` loop\n    |\n25  |     for grade in &grades\
    \ {\n    |                  +\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_sorted\
    \ = grades_copy.clone();\n    grades_sorted.sort();\n    let mut grades_sorted_copy\
    \ = grades_sorted.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpyz1aaeh8.rs:64:1\n  \
    \ |\n64 | }\n   | ^ expected pattern\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n   --> /tmp/tmpyz1aaeh8.rs:25:19\n    |\n25  |     grades_sorted.sort();\n\
    \    |                   ^^^^ the trait `Ord` is not implemented for `f64`\n \
    \   |\n    = help: the following other types implement trait `Ord`:\n        \
    \      i128\n              i16\n              i32\n              i64\n       \
    \       i8\n              isize\n              u128\n              u16\n     \
    \       and 4 others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
