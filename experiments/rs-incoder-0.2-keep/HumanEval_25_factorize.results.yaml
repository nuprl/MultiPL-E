name: HumanEval_25_factorize
language: rust
results:
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpbuy21onu.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmplvyxt9di.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2f2ex7wk.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp5lxbf1gw.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            primes.push(i);\n            i += 1;\n        }\n    }\n    if n\
    \ != 1 {\n        factors.push(n);\n    }\n    factors.sort_unstable();\n    primes.sort_unstable();\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp99az3rub.rs:17:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp81yodihk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    for i in factors.iter() {\n      \
    \  primes.push(i);\n    }\n    primes\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt2a6sm25.rs:25:5\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |                           ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     primes\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max = Vec::new();\n \
    \   let mut prime_factors_count_max_min_max_min = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max = Vec::new();\n \
    \   let mut prime_factors_count_max_min_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max =\
    \ Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn6ypcytc.rs:36:27\n   |\n\
    36 |     let mut prime_factors_\n   |                           ^ help: add `;`\
    \ here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpn6ypcytc.rs:10:27\n   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n\
    \   |    ---------              ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp31sogclk.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcehpczky.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0yefzju.rs:35:102\n   |\n\
    35 |     let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n   |                                                                \
    \                                      ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0423]: expected value, found struct `Vec`\n   --> /tmp/tmpt0yefzju.rs:35:99\n\
    \    |\n35  |       let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n    |                                                               \
    \                                      ^^^ help: use struct literal syntax instead:\
    \ `Vec { buf: val, len: val }`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt0yefzju.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n as isize);\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpc719ukw8.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppc86h3d7.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpn12det1z.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 0 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdf6uzo4c.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpudv84pza.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmps6wj0u9u.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0n26tirb.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factors.push(factor);\n        factor\
    \ *= 2;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0qncyfv6.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp4dghxt0i.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp_7scsqto.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpe3q1pm6m.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmprhva2w1b.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr8v6wj9_.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjn8e5v7f.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfaq8dd36.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2h60sair.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            primes.push(i);\n        \
    \    while n % i == 0 {\n                n /= i;\n                factors.push(i);\n\
    \                primes.push(i);\n            }\n        }\n        i += 1;\n\
    \    }\n    factors.push(1);\n    primes.push(1);\n    factors.sort_unstable();\n\
    \    primes.sort_unstable();\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpt15stlus.rs:19:17\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |                 n /=\
    \ i;\n   |                 ^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1c5n4xz5.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp3f0vzq39.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpd8p4_xzy.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n    let mut factors_size\
    \ = factors_size;\n    let mut factors_size = factors_size;\n    let mut primes_size\
    \ = primes_size;\n    let mut primes_size = primes_size;\n\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6880td64.rs:10:27\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpskcz_2_w.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp92gq1et6.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpckwrh_ws.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 0 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphqpbf_2j.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgditx1o3.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpkzmlce3n.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpkpkrq2z3.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_min_index = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_index = Vec::new();\n   \
    \ let mut prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_min_index = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_index = Vec::new();\n   \
    \ let mut prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_min_index = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_index = Vec::new();\n   \
    \ let mut prime_factors_count_min = Vec::\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpcigr769u.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp246hcbpe.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    for i in factors.iter() {\n      \
    \  primes.push(i);\n    }\n    primes\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoqv3dpzp.rs:25:5\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |                           ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     primes\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppoj5co5k.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = primes.len();\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1uaf_4qz.rs:10:27\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpoyh3390v.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= factor;\n    }\n    factors.push(1);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8z4yef8g.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfl0itcc9.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_counter2\
    \ = Vec::new();\n    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4\
    \ = Vec::new();\n    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6\
    \ = Vec::new();\n    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8\
    \ = Vec::new();\n    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10\
    \ = Vec::new();\n    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12\
    \ = Vec::new();\n    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14\
    \ = Vec::new();\n    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16\
    \ = Vec::new();\n    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18\
    \ = Vec::new();\n    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20\
    \ = Vec::new();\n    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22\
    \ = Vec::new();\n    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24\
    \ = Vec::new();\n    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26\
    \ = Vec::new();\n    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28\
    \ = Vec::new();\n    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30\
    \ = Vec::new();\n    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32\
    \ = Vec::new();\n    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34\
    \ = Vec::new();\n    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36\
    \ = Vec::new();\n    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38\
    \ = Vec::new();\n    let mut prime_counter39 = Vec::\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpw6mria3a.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp7uvxl1_r.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpooo97_dj.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_bojw6b8.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factorization\
    \ = factorization(n);\n    let mut factorization_size = factorization.len();\n\
    \    let mut factorization_index = 0;\n    let mut factorization_prime_index =\
    \ 0;\n    let mut factorization_prime_number = 1;\n    let mut factorization_prime_number_size\
    \ = factorization_prime_number.len();\n    let mut factorization_prime_number_index\
    \ = 0;\n    let mut factorization_prime_number_prime_index = 0;\n    let mut factorization_prime_number_prime_number\
    \ = 1;\n    let mut factorization_prime_number_prime_number_size = factorization_prime_number_prime_number.len();\n\
    \    let mut factorization_prime_number_prime_number_index = 0;\n    let mut factorization_prime_number_prime_number_prime_index\
    \ = 0;\n    let mut factorization_prime_number_prime_number_prime_number = 1;\n\
    \    let mut factorization_prime_number_prime_number_prime_number_size = factorization_prime_number_prime_number_prime_number.len();\n\
    \    let mut factorization_prime_number_prime_number_prime_number_index = 0;\n\
    \    let mut factorization_prime_number_prime_number_prime_number_prime_index\
    \ = 0;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number\
    \ = 1;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_size\
    \ = factorization_prime_number_prime_number_prime_number_prime_number.len();\n\
    \    let mut factorization_prime_number_prime_number_prime_number_prime_number_index\
    \ = 0;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_prime_index\
    \ = 0;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_prime_number\
    \ = 1;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_prime_number_size\
    \ = factorization_prime_number_prime_number_prime_number_prime_number_prime_number.len();\n\
    \    let mut factorization_prime_number_prime_number_prime_number_prime_number_prime_number_index\
    \ = 0;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_prime_number_prime_index\
    \ = 0;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_prime_number_prime_number\
    \ = 1;\n    let mut factorization_prime_number_prime_number_prime_number_prime_number_\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyv0_v4zk.rs:39:79\n   |\n\
    39 |     let mut factorization_prime_number_prime_number_prime_number_prime_number_\n\
    \   |                                                                        \
    \       ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find function `factorization` in this scope\n  --> /tmp/tmpyv0_v4zk.rs:14:29\n\
    \   |\n14 |     let mut factorization = factorization(n);\n   |              \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0689]: can't call\
    \ method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpyv0_v4zk.rs:19:74\n\
    \   |\n19 |     let mut factorization_prime_number_size = factorization_prime_number.len();\n\
    \   |                                                                        \
    \  ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n   |\n\
    18 |     let mut factorization_prime_number: i32 = 1;\n   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpyv0_v4zk.rs:23:100\n   |\n23 |     let mut factorization_prime_number_prime_number_size\
    \ = factorization_prime_number_prime_number.len();\n   |                     \
    \                                                                            \
    \   ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n  \
    \ |\n22 |     let mut factorization_prime_number_prime_number: i32 = 1;\n   |\
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0689]: can't\
    \ call method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpyv0_v4zk.rs:27:126\n\
    \   |\n27 |     let mut factorization_prime_number_prime_number_prime_number_size\
    \ = factorization_prime_number_prime_number_prime_number.len();\n   |        \
    \                                                                            \
    \                                          ^^^\n   |\nhelp: you must specify a\
    \ type for this binding, like `i32`\n   |\n26 |     let mut factorization_prime_number_prime_number_prime_number:\
    \ i32 = 1;\n   |         ~~~"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpshweo0ab.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr5nqg334.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphe7bsa03.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpajx61fjm.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp3fip5ic0.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpu4yay9ce.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factor =\
    \ 1;\n    let mut i = 1;\n    while i * factor <= n {\n        if n % i == 0 {\n\
    \            factors.push(factor);\n            primes.push(i);\n            prime_factors.push(i);\n\
    \            factor = 1;\n        } else {\n            factor *= i;\n       \
    \ }\n        i += 1;\n    }\n    factors.push(factor);\n    primes.push(i);\n\
    \    prime_factors.push(i);\n    factors.push(1);\n    primes.push(1);\n    prime_factors.push(1);\n\
    \    for i in factors.iter().rev() {\n        prime_factors.insert(i, 0);\n  \
    \  }\n    for i in primes.iter().rev() {\n        prime_factors.insert(i, 0);\n\
    \    }\n    for i in prime_factors.iter().rev() {\n        factors.insert(i, 0);\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhybgy6k.rs:34:30\n   |\n\
    34 |         prime_factors.insert(i, 0);\n   |                              ^\
    \ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdhybgy6k.rs:37:30\n\
    \   |\n37 |         prime_factors.insert(i, 0);\n   |                        \
    \      ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdhybgy6k.rs:40:24\n   |\n40 |         factors.insert(i, 0);\n \
    \  |                        ^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp2ou5p4k7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_7_we9mh.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpw_nb8u3o.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2ie92urb.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp470ordyd.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpm2zzkk70.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp5ql20pvd.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpm5ilrfk9.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            primes.push(i);\n\
    \            prime_factors.push(i);\n            i += 1;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    for i in primes.iter() {\n        for\
    \ j in prime_factors.iter() {\n            if j % i == 0 {\n                factors.push(i);\n\
    \                factors.push(j);\n            }\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp48kez25n.rs:32:5\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |                           ----------\
    \ expected `Vec<isize>` because of return type\n...\n32 |     factors\n   |  \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n        else {\n       \
    \     i += 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpj5_cahyv.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwuy8gc20.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp78d097bt.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphpa3ek84.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n as isize);\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp4gmhxxuu.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphzd3_0qk.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpu6m1x35b.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0qf4i_nn.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpkpnb2clw.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmppkva755b.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6exx5uhy.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size_max\
    \ = Vec::new();\n    let mut factorization_size_min = Vec::new();\n    let mut\
    \ factorization_size_max_index = Vec::new();\n    let mut factorization_size_min_index\
    \ = Vec::new();\n    let mut factorization_size_max_value = Vec::new();\n    let\
    \ mut factorization_size_min_value = Vec::new();\n    let mut factorization_size_max_value\
    \ = Vec::new();\n    let mut factorization_size_max_index = Vec::new();\n    let\
    \ mut factorization_size_min_index = Vec::new();\n    let mut factorization_size_max_value\
    \ = Vec::new();\n    let mut factorization_size_min_value = Vec::new();\n    let\
    \ mut factorization_size_max_value = Vec::new();\n    let mut factorization_size_max_index\
    \ = Vec::new();\n    let mut factorization_size_min_index = Vec::new();\n    let\
    \ mut factorization_size_max_value = Vec::new();\n    let mut factorization_size_min_value\
    \ = Vec::new();\n    let mut factorization_size_max_value = Vec::new();\n    let\
    \ mut factorization_size_max_index = Vec::new();\n    let mut factorization_size_min_index\
    \ = Vec::new();\n    let mut factorization_size_max_value = Vec::new();\n    let\
    \ mut factorization_size_min_value = Vec::new();\n    let mut factorization_size_max_value\
    \ = Vec::new();\n    let mut factorization_size_max_index = Vec::new();\n    let\
    \ mut factorization_size_min_index = Vec::new();\n    let mut factorization_size_max_value\
    \ = Vec::new();\n    let mut factorization_size_min_value = Vec::new();\n    let\
    \ mut factorization_size_max_value = Vec::new();\n    let mut factorization_size_max_index\
    \ = Vec::new();\n    let mut factorization_size_min_index = Vec::new();\n    let\
    \ mut factorization_size_max_value = Vec::new();\n    let mut factorization_size_min_value\
    \ = Vec::new();\n    let mut factorization_size_max_value = Vec::new();\n    let\
    \ mut factorization_size_max_index = Vec::new();\n    let mut factorization_size_min_index\
    \ = Vec::new();\n    let mut factorization_size_max_value = Vec::new();\n    let\
    \ mut factorization_size_\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcq7bv4v7.rs:51:32\n   |\n\
    51 |     let mut factorization_size_\n   |                                ^ help:\
    \ add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcq7bv4v7.rs:10:27\n   |\n10 | fn factorize(n: isize) -> Vec<isize>\
    \ {\n   |    ---------              ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmph7kv32zn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpw4l_97_2.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = primes.len();\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsd7c33pw.rs:10:27\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = 1;\n    let mut prime_factors = Vec::new();\n\
    \    let mut factor = 1;\n    let mut prime_factor = 1;\n    let mut prime_factor_counter\
    \ = 1;\n    let mut factorization = Vec::new();\n    let mut factorization_counter\
    \ = 1;\n    let mut factorized_number = n;\n    while factorized_number > 1 {\n\
    \        if factorized_number % 2 == 0 {\n            factors.push(2);\n     \
    \       factorized_number /= 2;\n        } else {\n            factors.push(1);\n\
    \            factorized_number /= 2;\n        }\n    }\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n\
    \    factors.push(1);\n    factors.push(1);\n    factors.push(1);\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdgwtio01.rs:10:27\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1fdvfmzt.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp8h8jk2m1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzgimg_d5.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuep22dcl.rs:35:102\n   |\n\
    35 |     let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n   |                                                                \
    \                                      ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0423]: expected value, found struct `Vec`\n   --> /tmp/tmpuep22dcl.rs:35:99\n\
    \    |\n35  |       let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n    |                                                               \
    \                                      ^^^ help: use struct literal syntax instead:\
    \ `Vec { buf: val, len: val }`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuep22dcl.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut i = 2;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            primes.push(i);\n\
    \            while i * i <= n && n % i == 0 {\n                i += 1;\n     \
    \       }\n        }\n        i += 1;\n    }\n    for i in primes.iter() {\n \
    \       prime_factors.push(i);\n    }\n    for i in prime_factors.iter() {\n \
    \       let mut j = 1;\n        while i * j <= n {\n            if n % i == 0\
    \ {\n                factors.push(i as isize);\n                j += 1;\n    \
    \        }\n            j += 1;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `&&isize` by `{integer}`\n  --> /tmp/tmpwzwjkpo2.rs:29:17\n\
    \   |\n29 |         while i * j <= n {\n   |               - ^ - {integer}\n \
    \  |               |\n   |               &&isize\n   |\nhelp: `*` can be used\
    \ on `isize`, you can dereference `i`\n   |\n29 |         while *i * j <= n {\n\
    \   |               +\n\nerror[E0277]: cannot mod `isize` by `&&isize`\n  -->\
    \ /tmp/tmpwzwjkpo2.rs:30:18\n   |\n30 |             if n % i == 0 {\n   |    \
    \              ^ no implementation for `isize % &&isize`\n   |\n   = help: the\
    \ trait `Rem<&&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0606]: casting\
    \ `&&isize` as `isize` is invalid\n  --> /tmp/tmpwzwjkpo2.rs:31:30\n   |\n31 |\
    \                 factors.push(i as isize);\n   |                            \
    \  ^^^^^^^^^^\n   |\n   = help: cast through a raw pointer first\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0369,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg7l91fl4.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpe7snyjqi.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(factor);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpeeua1qk9.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_counter2\
    \ = Vec::new();\n    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4\
    \ = Vec::new();\n    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6\
    \ = Vec::new();\n    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8\
    \ = Vec::new();\n    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10\
    \ = Vec::new();\n    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12\
    \ = Vec::new();\n    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14\
    \ = Vec::new();\n    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16\
    \ = Vec::new();\n    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18\
    \ = Vec::new();\n    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20\
    \ = Vec::new();\n    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22\
    \ = Vec::new();\n    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24\
    \ = Vec::new();\n    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26\
    \ = Vec::new();\n    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28\
    \ = Vec::new();\n    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30\
    \ = Vec::new();\n    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32\
    \ = Vec::new();\n    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34\
    \ = Vec::new();\n    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36\
    \ = Vec::new();\n    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38\
    \ = Vec::new();\n    let mut prime_counter39 = Vec::\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp4cnj3x0p.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp5gel30dv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpaqba0yb4.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgkb58prr.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n    \
    \        factors.push(factor);\n            factor *= i;\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(factor);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2]`,\n right: `[2]`', /tmp/tmp9ja9j_5v.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmplgidwyaa.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n != 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpyk9j7cow.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp4rbgqkbi.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbw_yzr5z.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(factor);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr3hgl2ce.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpojes_849.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n as isize);\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2g5xoy93.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpxefoeung.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp68lfp7b0.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpb1ia7w45.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp97n_5dgn.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_6o7g4fw.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfk0_lrwq.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n as isize);\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpx9wur26t.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factor =\
    \ 1;\n    let mut i = 2;\n    while i < n {\n        while n % i == 0 {\n    \
    \        factors.push(factor);\n            factor = 1;\n            i += 1;\n\
    \        }\n        if i == 2 {\n            primes.push(1);\n            i +=\
    \ 1;\n        } else {\n            primes.push(0);\n        }\n    }\n    for\
    \ i in primes.iter_mut() {\n        factors.push(factor);\n        factor = 1;\n\
    \    }\n    for i in prime_factors.iter_mut() {\n        factors.push(factor);\n\
    \        factor = 1;\n    }\n    factors.push(factor);\n    factors.push(1);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `&mut T`\n  --> /tmp/tmp3g9gq9ga.rs:13:29\n\
    \   |\n13 |     let mut prime_factors = Vec::new();\n   |         -----------------\
    \   ^^^^^^^^ cannot infer type for type parameter `T`\n   |         |\n   |  \
    \       consider giving `prime_factors` the explicit type `&mut T`, where the\
    \ type parameter `T` is specified\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9gl95qe1.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpsrh38upw.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_counter2\
    \ = Vec::new();\n    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4\
    \ = Vec::new();\n    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6\
    \ = Vec::new();\n    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8\
    \ = Vec::new();\n    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10\
    \ = Vec::new();\n    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12\
    \ = Vec::new();\n    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14\
    \ = Vec::new();\n    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16\
    \ = Vec::new();\n    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18\
    \ = Vec::new();\n    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20\
    \ = Vec::new();\n    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22\
    \ = Vec::new();\n    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24\
    \ = Vec::new();\n    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26\
    \ = Vec::new();\n    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28\
    \ = Vec::new();\n    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30\
    \ = Vec::new();\n    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32\
    \ = Vec::new();\n    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34\
    \ = Vec::new();\n    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36\
    \ = Vec::new();\n    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38\
    \ = Vec::new();\n    let mut prime_counter39 = Vec::\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpo7lqkqmp.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpq906u4ho.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8m7mpxkk.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut i = 2;\n\
    \    while i < n {\n        if n % i == 0 {\n            primes.push(i);\n   \
    \         prime_factors.push(i);\n            while i * i < n {\n            \
    \    i += 1;\n            }\n        }\n        i += 1;\n    }\n    for i in primes.iter_mut()\
    \ {\n        factors.push(*i);\n    }\n    for i in prime_factors.iter_mut() {\n\
    \        factors.push(*i);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpt9vcd0tg.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp54_wdqgc.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpriik6u08.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_sum =\
    \ Vec::new();\n    let mut prime_factors_count_sum_max = Vec::new();\n    let\
    \ mut prime_factors_count_sum_min = Vec::new();\n    let mut prime_factors_count_product\
    \ = Vec::new();\n    let mut prime_factors_count_product_max = Vec::new();\n \
    \   let mut prime_factors_count_product_min = Vec::new();\n    let mut prime_factors_count_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_sum_min = Vec::new();\n    let mut prime_factors_count_product_product\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_min = Vec::new();\n    let mut\
    \ prime_factors_count_product_product_sum = Vec::new();\n    let mut prime_factors_count_product_product_sum_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_sum_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product = Vec::new();\n    let\
    \ mut prime_factors_count_product_product_product_max = Vec::new();\n    let mut\
    \ prime_factors_count_product_product_product_min = Vec::new();\n    let mut prime_factors_count_product_product_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_sum_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_sum_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_product\
    \ = Vec::new();\n    let mut prime\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5zrb6sdz.rs:45:18\n   |\n\
    45 |     let mut prime\n   |                  ^ help: add `;` here\n46 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zrb6sdz.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp3at8nr2i.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg75l0zdo.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpiyvj_eqo.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_b0qkn19.rs:35:102\n   |\n\
    35 |     let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n   |                                                                \
    \                                      ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0423]: expected value, found struct `Vec`\n   --> /tmp/tmp_b0qkn19.rs:35:99\n\
    \    |\n35  |       let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec\n    |                                                               \
    \                                      ^^^ help: use struct literal syntax instead:\
    \ `Vec { buf: val, len: val }`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_b0qkn19.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpk6eoldsy.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp92gejsd4.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpikqr26yb.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfauh22qs.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factor =\
    \ 1;\n    let mut prime_factor = 1;\n    let mut prime_factor_counter = 1;\n \
    \   let mut prime_factor_counter2 = 0;\n    let mut prime_factor_counter3 = 0;\n\
    \    let mut prime_factor_counter4 = 0;\n    let mut prime_factor_counter5 = 0;\n\
    \    let mut prime_factor_counter6 = 0;\n    let mut prime_factor_counter7 = 0;\n\
    \    let mut prime_factor_counter8 = 0;\n    let mut prime_factor_counter9 = 0;\n\
    \    let mut prime_factor_counter10 = 0;\n    let mut prime_factor_counter11 =\
    \ 0;\n    let mut prime_factor_counter12 = 0;\n    let mut prime_factor_counter13\
    \ = 0;\n    let mut prime_factor_counter14 = 0;\n    let mut prime_factor_counter15\
    \ = 0;\n    let mut prime_factor_counter16 = 0;\n    let mut prime_factor_counter17\
    \ = 0;\n    let mut prime_factor_counter18 = 0;\n    let mut prime_factor_counter19\
    \ = 0;\n    let mut prime_factor_counter20 = 0;\n    let mut prime_factor_counter21\
    \ = 0;\n    let mut prime_factor_counter22 = 0;\n    let mut prime_factor_counter23\
    \ = 0;\n    let mut prime_factor_counter24 = 0;\n    let mut prime_factor_counter25\
    \ = 0;\n    let mut prime_factor_counter26 = 0;\n    let mut prime_factor_counter27\
    \ = 0;\n    let mut prime_factor_counter28 = 0;\n    let mut prime_factor_counter29\
    \ = 0;\n    let mut prime_factor_counter30 = 0;\n    let mut prime_factor_counter31\
    \ = 0;\n    let mut prime_factor_counter32 = 0;\n    let mut prime_factor_counter33\
    \ = 0;\n    let mut prime_factor_counter34 = 0;\n    let mut prime_factor_counter35\
    \ = 0;\n    let mut prime_factor_counter36 = 0;\n    let mut prime_factor_counter37\
    \ = 0;\n    let mut prime_factor_counter38 = 0;\n    let mut prime_factor_counter39\
    \ = 0;\n    let mut prime_factor_counter40 = 0;\n    let mut prime_factor_counter41\
    \ = 0;\n    let mut prime_factor_counter42 = 0;\n    let mut prime_factor_counter43\
    \ = 0;\n    let mut prime_factor_counter44 = 0;\n    let mut prime_factor_counter45\
    \ = 0;\n    let mut prime_factor_counter46 = 0;\n    let mut prime_factor_counter47\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp60n9kpcj.rs:64:1\n\
    \   |\n64 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max = Vec::new();\n \
    \   let mut prime_factors_count_max_min_max_min = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max = Vec::new();\n \
    \   let mut prime_factors_count_max_min_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max =\
    \ Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2tovpsdv.rs:36:27\n   |\n\
    36 |     let mut prime_factors_\n   |                           ^ help: add `;`\
    \ here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2tovpsdv.rs:10:27\n   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n\
    \   |    ---------              ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpho733tt0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut primes_size = primes.\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpe9fspxrp.rs:58:1\n   |\n58\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpe9fspxrp.rs:57:34\n\
    \   |\n57 |     let mut primes_size = primes.\n   |                          \
    \        ^ help: add `;` here\n58 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe9fspxrp.rs:10:27\n   |\n10 | fn factorize(n:\
    \ isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpv8mhjc7a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8p_g0h7i.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0\
    \ {\n            factors.push(i);\n            primes.push(i);\n            i\
    \ += 1;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(1);\n\
    \    primes.push(1);\n    factors.sort_unstable();\n    primes.sort_unstable();\n\
    \    factors.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2]`,\n right: `[2]`', /tmp/tmplcqv5tfd.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpox3_pgsq.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpk305424k.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_counters\
    \ = Vec::new();\n    let mut prime_counters_sorted = Vec::new();\n    let mut\
    \ prime_counters_sorted_by_size = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size = Vec::new();\n\
    \    let mut prime_counters_sorted_by_size_sorted_by_size_sorted = Vec::new();\n\
    \    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size = Vec::new();\n\
    \    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbogr07pb.rs:32:143\n   |\n\
    32 |     let mut prime_counters_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_size_sorted_by_\n\
    \   |                                                                        \
    \                                                                       ^ help:\
    \ add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbogr07pb.rs:10:27\n   |\n10 | fn factorize(n: isize) -> Vec<isize>\
    \ {\n   |    ---------              ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfhj75878.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpxpkwfor0.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp27_0dwiv.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpwvlcbm_u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpi_2od19_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp3nf_zlrr.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6a4ggqgn.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpztjx9juy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbrvln9u3.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1vhxpwz_.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0gc6cwyp.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp79w2v8qx.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpqqzcnvkx.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpta7ihgc8.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpo4qc7ob4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbupisorc.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp4qv3p7n4.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpv_in33c0.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6qrslxfc.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0gk53_2n.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_counter2\
    \ = Vec::new();\n    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4\
    \ = Vec::new();\n    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6\
    \ = Vec::new();\n    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8\
    \ = Vec::new();\n    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10\
    \ = Vec::new();\n    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12\
    \ = Vec::new();\n    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14\
    \ = Vec::new();\n    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16\
    \ = Vec::new();\n    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18\
    \ = Vec::new();\n    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20\
    \ = Vec::new();\n    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22\
    \ = Vec::new();\n    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24\
    \ = Vec::new();\n    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26\
    \ = Vec::new();\n    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28\
    \ = Vec::new();\n    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30\
    \ = Vec::new();\n    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32\
    \ = Vec::new();\n    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34\
    \ = Vec::new();\n    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36\
    \ = Vec::new();\n    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38\
    \ = Vec::new();\n    let mut prime_counter39 = Vec::\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpab5m92d8.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_5ph3xli.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp9lpwrxb3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n        else {\n       \
    \     i += 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6ndix73x.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpudx96htt.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpo5x1oews.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n        else {\n       \
    \     i += 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpim_kcw04.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpi06xf4bi.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzfdnrel8.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpw3zaqaeg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppr42l_va.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpv8s8sdaw.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpe82gkr3r.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbhiowjcf.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppfd5aizt.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmpse8wrb47.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpu8l2o8kh.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = primes.len();\n    let mut factors_size\
    \ = factors.len();\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_size +\
    \ 1;\n    let mut factors_size = factors_size + 1;\n    let mut factors_size =\
    \ factors_size + 1;\n    let mut factors_size = factors_size + 1;\n    let mut\
    \ factors_size = factors_size + 1;\n    let mut factors_size = factors_\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkeci4z4_.rs:57:36\n   |\n\
    57 |     let mut factors_size = factors_\n   |                               \
    \     ^ help: add `;` here\n58 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `factors_` in this scope\n  --> /tmp/tmpkeci4z4_.rs:57:28\n   |\n\
    57 |     let mut factors_size = factors_\n   |                            ^^^^^^^^\
    \ help: a local variable with a similar name exists: `factors`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkeci4z4_.rs:10:27\n   |\n10 | fn factorize(n:\
    \ isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmplvkestm3.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8r43n5gn.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factors_counter = Vec::new();\n    let mut\
    \ prime_factors_counter2 = Vec::new();\n    let mut prime_factors_counter3 = Vec::new();\n\
    \    let mut prime_factors_counter4 = Vec::new();\n    let mut prime_factors_counter5\
    \ = Vec::new();\n    let mut prime_factors_counter6 = Vec::new();\n    let mut\
    \ prime_factors_counter7 = Vec::new();\n    let mut prime_factors_counter8 = Vec::new();\n\
    \    let mut prime_factors_counter9 = Vec::new();\n    let mut prime_factors_counter10\
    \ = Vec::new();\n    let mut prime_factors_counter11 = Vec::new();\n    let mut\
    \ prime_factors_counter12 = Vec::new();\n    let mut prime_factors_counter13 =\
    \ Vec::new();\n    let mut prime_factors_counter14 = Vec::new();\n    let mut\
    \ prime_factors_counter15 = Vec::new();\n    let mut prime_factors_counter16 =\
    \ Vec::new();\n    let mut prime_factors_counter17 = Vec::new();\n    let mut\
    \ prime_factors_counter18 = Vec::new();\n    let mut prime_factors_counter19 =\
    \ Vec::new();\n    let mut prime_factors_counter20 = Vec::new();\n    let mut\
    \ prime_factors_counter21 = Vec::new();\n    let mut prime_factors_counter22 =\
    \ Vec::new();\n    let mut prime_factors_counter23 = Vec::new();\n    let mut\
    \ prime_factors_counter24 = Vec::new();\n    let mut prime_factors_counter25 =\
    \ Vec::new();\n    let mut prime_factors_counter26 = Vec::new();\n    let mut\
    \ prime_factors_counter27 = Vec::new();\n    let mut prime_factors_counter28 =\
    \ Vec::new();\n    let mut prime_factors_counter29 = Vec::new();\n    let mut\
    \ prime_factors_counter30 = Vec::new();\n    let mut prime_factors_counter31 =\
    \ Vec::new();\n    let mut prime_factors_counter32 = Vec::new();\n    let mut\
    \ prime_factors_counter33 = Vec::new();\n    let mut prime_factors_counter34 =\
    \ Vec::new();\n    let mut prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpel9u406u.rs:49:25\n   |\n\
    49 |     let mut prime_factor\n   |                         ^ help: add `;` here\n\
    50 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpel9u406u.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_sum =\
    \ Vec::new();\n    let mut prime_factors_count_product = Vec::new();\n    let\
    \ mut prime_factors_count_product2 = Vec::new();\n    let mut prime_factors_count_product3\
    \ = Vec::new();\n    let mut prime_factors_count_product4 = Vec::new();\n    let\
    \ mut prime_factors_count_product5 = Vec::new();\n    let mut prime_factors_count_product6\
    \ = Vec::new();\n    let mut prime_factors_count_product7 = Vec::new();\n    let\
    \ mut prime_factors_count_product8 = Vec::new();\n    let mut prime_factors_count_product9\
    \ = Vec::new();\n    let mut prime_factors_count_product10 = Vec::new();\n   \
    \ let mut prime_factors_count_product11 = Vec::new();\n    let mut prime_factors_count_product12\
    \ = Vec::new();\n    let mut prime_factors_count_product13 = Vec::new();\n   \
    \ let mut prime_factors_count_product14 = Vec::new();\n    let mut prime_factors_count_product15\
    \ = Vec::new();\n    let mut prime_factors_count_product16 = Vec::new();\n   \
    \ let mut prime_factors_count_product17 = Vec::new();\n    let mut prime_factors_count_product18\
    \ = Vec::new();\n    let mut prime_factors_count_product19 = Vec::new();\n   \
    \ let mut prime_factors_count_product20 = Vec::new();\n    let mut prime_factors_count_product21\
    \ = Vec::new();\n    let mut prime_factors_count_product22 = Vec::new();\n   \
    \ let mut prime_factors_count_product23 = Vec::new();\n    let mut prime_factors_count_product24\
    \ = Vec::new();\n    let mut prime_factors_count_product25 = Vec::new();\n   \
    \ let mut prime_factors_count_product26 = Vec::new();\n    let mut prime_factors_count_product27\
    \ = Vec::new();\n    let mut prime_factors_count_product28 = Vec::new();\n   \
    \ let mut prime_factors_count_product29 = Vec::new();\n    let mut prime_factors_count_\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5_2c6pg8.rs:47:33\n   |\n\
    47 |     let mut prime_factors_count_\n   |                                 ^\
    \ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5_2c6pg8.rs:10:27\n   |\n10 | fn factorize(n: isize) ->\
    \ Vec<isize> {\n   |    ---------              ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp583iljmb.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_counter2\
    \ = Vec::new();\n    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4\
    \ = Vec::new();\n    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6\
    \ = Vec::new();\n    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8\
    \ = Vec::new();\n    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10\
    \ = Vec::new();\n    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12\
    \ = Vec::new();\n    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14\
    \ = Vec::new();\n    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16\
    \ = Vec::new();\n    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18\
    \ = Vec::new();\n    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20\
    \ = Vec::new();\n    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22\
    \ = Vec::new();\n    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24\
    \ = Vec::new();\n    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26\
    \ = Vec::new();\n    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28\
    \ = Vec::new();\n    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30\
    \ = Vec::new();\n    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32\
    \ = Vec::new();\n    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34\
    \ = Vec::new();\n    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36\
    \ = Vec::new();\n    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38\
    \ = Vec::new();\n    let mut prime_counter39 = Vec::\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpt1gbp2h5.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgzh9xvkd.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n != 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(1);\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpd_p_olrb.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut i = 1;\n\
    \    let mut j = 1;\n    while i * j <= n {\n        if n % i == 0 {\n       \
    \     primes.push(i);\n            prime_factors.push(i);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    while primes.len()\
    \ > 0 {\n        let mut prime_factor = prime_factors.clone();\n        let mut\
    \ prime = primes.clone();\n        let mut i = 1;\n        while prime * i <=\
    \ n {\n            if n % prime == 0 {\n                prime_factors.push(prime);\n\
    \                primes.push(prime);\n                i += 1;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        factors.push(prime_factor);\n\
    \        prime_factors.clear();\n        primes.clear();\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Vec<isize>` by `{integer}`\n  --> /tmp/tmpm3k_otjx.rs:29:21\n\
    \   |\n29 |         while prime * i <= n {\n   |               ----- ^ - {integer}\n\
    \   |               |\n   |               Vec<isize>\n\nerror[E0277]: cannot mod\
    \ `isize` by `Vec<isize>`\n  --> /tmp/tmpm3k_otjx.rs:30:18\n   |\n30 |       \
    \      if n % prime == 0 {\n   |                  ^ no implementation for `isize\
    \ % Vec<isize>`\n   |\n   = help: the trait `Rem<Vec<isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3k_otjx.rs:31:36\n\
    \   |\n31 |                 prime_factors.push(prime);\n   |                 \
    \                   ^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note:\
    \ expected type `isize`\n            found struct `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm3k_otjx.rs:32:29\n   |\n32 |              \
    \   primes.push(prime);\n   |                             ^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3k_otjx.rs:42:5\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |                     \
    \      ---------- expected `Vec<isize>` because of return type\n...\n42 |    \
    \ factors\n   |     ^^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_counter = 1;\n    let mut prime_counter2 =\
    \ 1;\n    let mut prime_counter3 = 1;\n    let mut prime_counter4 = 1;\n    let\
    \ mut prime_counter5 = 1;\n    let mut prime_counter6 = 1;\n    let mut prime_counter7\
    \ = 1;\n    let mut prime_counter8 = 1;\n    let mut prime_counter9 = 1;\n   \
    \ let mut prime_counter10 = 1;\n    let mut prime_counter11 = 1;\n    let mut\
    \ prime_counter12 = 1;\n    let mut prime_counter13 = 1;\n    let mut prime_counter14\
    \ = 1;\n    let mut prime_counter15 = 1;\n    let mut prime_counter16 = 1;\n \
    \   let mut prime_counter17 = 1;\n    let mut prime_counter18 = 1;\n    let mut\
    \ prime_counter19 = 1;\n    let mut prime_counter20 = 1;\n    let mut prime_counter21\
    \ = 1;\n    let mut prime_counter22 = 1;\n    let mut prime_counter23 = 1;\n \
    \   let mut prime_counter24 = 1;\n    let mut prime_counter25 = 1;\n    let mut\
    \ prime_counter26 = 1;\n    let mut prime_counter27 = 1;\n    let mut prime_counter28\
    \ = 1;\n    let mut prime_counter29 = 1;\n    let mut prime_counter30 = 1;\n \
    \   let mut prime_counter31 = 1;\n    let mut prime_counter32 = 1;\n    let mut\
    \ prime_counter33 = 1;\n    let mut prime_counter34 = 1;\n    let mut prime_counter35\
    \ = 1;\n    let mut prime_counter36 = 1;\n    let mut prime_counter37 = 1;\n \
    \   let mut prime_counter38 = 1;\n    let mut prime_counter39 = 1;\n    let mut\
    \ prime_counter40 = 1;\n    let mut prime_counter41 = 1;\n    let mut prime_counter42\
    \ = 1;\n    let mut prime_counter43 = 1;\n    let mut prime_counter44 = 1;\n \
    \   let mut prime_counter45 = 1;\n    let mut prime_counter46 = 1;\n    let mut\
    \ prime_counter47 = 1;\n    let mut prime_counter48 = 1;\n    let mut prime_counter49\
    \ = 1;\n    let mut prime_counter50 = 1;\n    let mut prime_counter51 = 1;\n \
    \   let mut prime_counter52 = 1;\n    let mut prime_counter53 = 1;\n    let mut\
    \ prime_counter54 = 1;\n    let mut prime_\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdby_gf03.rs:67:19\n   |\n\
    67 |     let mut prime_\n   |                   ^ help: add `;` here\n68 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdby_gf03.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpj3jl1tkm.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdk0vng54.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwvwuh2oa.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[2]`', /tmp/tmp9rohepva.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppulpta81.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwj6upmvw.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = primes.len();\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg0z5po27.rs:10:27\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factor =\
    \ 1;\n    let mut prime_factor = 1;\n    let mut i = 1;\n    while i <= n {\n\
    \        if n % i == 0 {\n            factors.push(factor);\n            prime_factors.push(prime_factor);\n\
    \            factor = 1;\n            prime_factor = 1;\n        } else {\n  \
    \          factor *= i;\n            prime_factor *= i;\n        }\n        i\
    \ += 1;\n    }\n    factors.push(factor);\n    prime_factors.push(prime_factor);\n\
    \    factors.sort_unstable();\n    prime_factors.sort_unstable();\n    factors.reverse();\n\
    \    prime_factors.reverse();\n    factors.clone() + prime_factors.clone()\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmppynqakx8.rs:35:21\n\
    \   |\n35 |     factors.clone() + prime_factors.clone()\n   |     ---------------\
    \ ^ --------------------- Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size_max\
    \ = Vec::new();\n    let mut primes_size_min = Vec::new();\n    let mut primes_size_max_index\
    \ = Vec::new();\n    let mut primes_size_min_index = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_index = Vec::new();\n    let mut primes_size_min_index\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_index = Vec::new();\n\
    \    let mut primes_size_min_index = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_index = Vec::new();\n    let mut primes_size_min_index = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_index = Vec::new();\n    let mut\
    \ primes_size_min_index = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_index\
    \ = Vec::new();\n    let mut primes_size_min_index = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_index = Vec::new();\n    let mut primes_size_min_index\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_index = Vec::new();\n\
    \    let mut primes_size_min_index = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_index = Vec::new();\n    let mut primes_size_min_index = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpirmq03bb.rs:51:11\n   |\n\
    51 |     let mu\n   |           ^ help: add `;` here\n52 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpirmq03bb.rs:10:27\n \
    \  |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------         \
    \     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphagyzgqs.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max = Vec::new();\n    let mut prime_factors_count_max_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_index = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_index_max = Vec::new();\n    let\
    \ mut prime_factors_count_max_value_min_index_min = Vec::new();\n    let mut prime_factors_count_max_value_min_index_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_min_index_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_min_index_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index_min_index_min_index_min_index_min_index_min_index\
    \ = \n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp066p7ido.rs:41:1\n\
    \   |\n41 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_value_prime = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_value_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_value_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_value_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = \n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpkrbutexr.rs:38:1\n\
    \   |\n38 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factors.push(factor);\n        factor\
    \ *= 2;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_74tu06t.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
