name: HumanEval_157_right_angle_triangle
language: rust
results:
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (c-a).abs() && (c - b).abs() == (b - a).abs()\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplaj2ftc0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8riusca9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4yu0v2vq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn0dbk3fm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b - c).abs() && (a - b).abs() == (a - c).abs()\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfay1dbxu.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            a -= c;\n     \
    \       b -= c;\n            c -= c;\n        } else {\n            b -= a;\n\
    \            c -= a;\n            a -= a;\n        }\n    }\n    a > 0 && b >\
    \ 0 && c > 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr8hn35a_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut det = a * c - b * b;\n    if det < 0 {\n\
    \        det = -det;\n        b = -b;\n    }\n    if det < 0 {\n        det =\
    \ -det;\n        c = -c;\n    }\n    det < 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmpix6nlbvb.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmpix6nlbvb.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmpix6nlbvb.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmpix6nlbvb.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmpix6nlbvb.rs:9:23\n   |\n8  | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9  | |     let mut a = a < 0 ? -a : a;\n   |\
    \ |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10 | |     let mut b = b < 0 ? -b : b;\n11 | |     let mut c = c < 0\
    \ ? -c : c;\n...  |\n21 | |     det < 0\n22 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmpix6nlbvb.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tm"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpacpo2_7e.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp53uddmis.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp201tnou2.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b + c).abs() && (a - b).abs() == (a + c).abs()\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm3bp0kj7.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        if b > c {\n            a = a - 360;\n            b =\
    \ b - 360;\n            c = c - 360;\n        } else {\n            a = a - 360;\n\
    \            c = c - 360;\n        }\n    } else {\n        if b > c {\n     \
    \       b = b - 360;\n            c = c - 360;\n        } else {\n           \
    \ b = b - 360;\n        }\n    }\n    a + b + c == 360\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3uzjysst.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    if a + b > c {\n        a = c;\n        b = a;\n\
    \    }\n    \n    if a + c > b {\n        a = b;\n        c = a;\n    }\n    \n\
    \    if b + c > a {\n        b = c;\n        c = b;\n    }\n    \n    a == b ==\
    \ c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpee46slz1.rs:9:25\n  |\n9 |     let mut a = a < c ? a : c;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphkpvfllb.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if c > a {\n        c = a;\n        a = b;\n\
    \        b = c;\n    }\n    \n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpl71j888n.rs:9:25\n  |\n9 |     let mut a = a < b ? a : b;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    a == b + c && b == a + c &&\
    \ c == a + b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpp4o4lqkc.rs:9:29\n  |\n9 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt24es5tl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuzbh881t.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2ucr_75z.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcr0470ko.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a < b {\n        if b < c {\n            a += 360;\n        }\n      \
    \  else {\n            b += 360;\n        }\n    }\n    else {\n        if c <\
    \ b {\n            c += 360;\n        }\n        else {\n            b += 360;\n\
    \        }\n    }\n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmptou68_18.rs:28:7\n\
    \   |\n28 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n28 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptou68_18.rs:28:15\n   |\n28 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg_ultdib.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        swap(&a, &b)\n    }\n    if b > c {\n        swap(&b,\
    \ &c)\n    }\n    if c > a {\n        swap(&c, &a)\n    }\n    \n    let mut sum\
    \ = a;\n    \n    for i in 1..b {\n        sum += i;\n    }\n    \n    for i in\
    \ 1..c {\n        sum += i;\n    }\n    \n    sum == b * c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp5tpxh6jk.rs:10:9\n\
    \   |\n10 |         swap(&a, &b)\n   |         ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp5tpxh6jk.rs:13:9\n   |\n13 |         swap(&b, &c)\n\
    \   |         ^^^^ not found in this scope\n   |\nhelp: consider importing one\
    \ of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp5tpxh6jk.rs:16:9\n\
    \   |\n16 |         swap(&c, &a)\n   |         ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfv36u6ew.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe28clxfc.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        swap(a, b);\n    }\n    if b > c {\n        swap(b,\
    \ c);\n    }\n    if c > a {\n        swap(c, a );\n    }\n    let mut sum = a;\n\
    \    for i in 1..b {\n        sum += i;\n    }\n    for i in 1..c {\n        sum\
    \ += i;\n    }\n    sum == b * c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpl_1erqlk.rs:10:9\n\
    \   |\n10 |         swap(a, b);\n   |         ^^^^ not found in this scope\n \
    \  |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpl_1erqlk.rs:13:9\n   |\n13 |         swap(b, c);\n\
    \   |         ^^^^ not found in this scope\n   |\nhelp: consider importing one\
    \ of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpl_1erqlk.rs:16:9\n\
    \   |\n16 |         swap(c, a );\n   |         ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut sum = a;\n    let mut product = b;\n    let mut product2 = c;\n\
    \    while sum < product2 {\n        sum += product;\n        product *= product;\n\
    \        product2 *= product2;\n    }\n    product /= product2;\n    product2\
    \ /= product2;\n    product2 != 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplacu_1gu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if a == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if b == c {\n \
    \       return false;\n    }\n    if a == b + c {\n        return true;\n    }\n\
    \    if a == b - c {\n        return true;\n    }\n    if a == c - b {\n     \
    \   return true;\n    }\n    if a == b + c {\n        return true;\n    }\n  \
    \  if a == c - b {\n        return true;\n    }\n    if a == b - c {\n       \
    \ return true;\n    }\n    if a == c - b {\n        return true;\n    }\n    if\
    \ a == b + c {\n        return true;\n    }\n    if a == c - b {\n        return\
    \ true;\n    }\n    if a == b - c {\n        return true;\n    }\n    if a ==\
    \ c - b {\n        return true;\n    }\n    if a == b + c {\n        return true;\n\
    \    }\n    if a == c - b {\n        return true;\n    }\n    if a == b - c {\n\
    \        return true;\n    }\n    if a == c - b {\n        return true;\n    }\n\
    \    if a == b + c {\n        return true;\n    }\n    if a == c - b {\n     \
    \   return true;\n    }\n    if a == b - c {\n        return true;\n    }\n  \
    \  if a == c - b {\n        return true;\n    }\n    if a == b + c {\n       \
    \ return true;\n    }\n    if a == c - b {\n        return true;\n    }\n    if\
    \ a == b - c {\n        return true;\n    }\n    if a == c - b {\n        return\
    \ true;\n    }\n    if a == b + c {\n        return true;\n    }\n    if a ==\
    \ c - b {\n        return true;\n    }\n    if a == b - c {\n        return true;\n\
    \    }\n    if a == c - b {\n        return true;\n    }\n    if a == b + c {\n\
    \        return true;\n    }\n    if a == c - b {\n        return true;\n    }\n\
    \    if a == b - c {\n        return true;\n    }\n    if a == c - b {\n     \
    \   return true;\n    }\n    if a == b + c {\n        return true;\n    }\n  \
    \  if a == c - b {\n        return true;\n    }\n    if a == b - c {\n       \
    \ return true;\n    }\n    if a == c - b {\n        return true;\n    }\n    if\
    \ a == b + c {\n        return true;\n    }\n    if a == c - b {\n        return\
    \ true;\n    }\n    if a == b - c {\n        return true;\n    }\n    if a ==\
    \ c - b {\n        return true;\n    }\n    if a == b + c {\n        return true;\n\
    \    }\n    if a == c - b {\n        return true;\n    }\n    if a == b - c \n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpwg8pavmw.rs:151:1\n    |\n\
    150 |     if a == b - c \n    |     -- this `if` expression has a condition, but\
    \ no block\n151 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd9o7fh2d.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    if a + b > c {\n        a = c;\n        b = a\
    \ - b;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = a - c;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = b - a;\n    }\n\
    \    \n    a + b + c == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpgt_00izv.rs:9:25\n  |\n9 |     let mut a = a < c ? a : c;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwc9fj2gu.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (a * c) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2c10r8mc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        a = a - 360;\n        b = b - 360;\n    }\n    if a >\
    \ c {\n        a = a - 360;\n        c = c - 360;\n    }\n    if b > c {\n   \
    \     b = b - 360;\n        c = c - 360;\n    }\n    if a == b {\n        if a\
    \ == c {\n            return true;\n        }\n        return false;\n    }\n\
    \    if a == c {\n        return false;\n    }\n    if b == c {\n        return\
    \ true;\n    }\n    if a > b {\n        a = a - 360;\n        b = b - 360;\n \
    \   }\n    if a > c {\n        a = a - 360;\n        c = c - 360;\n    }\n   \
    \ if b > c {\n        b = b - 360;\n        c = c - 360;\n    }\n    if a == b\
    \ {\n        if a == c {\n            return true;\n        }\n        return\
    \ false;\n    }\n    if a == c {\n        return false;\n    }\n    if b == c\
    \ {\n        return true;\n    }\n    if a > b {\n        a = a - 360;\n     \
    \   b = b - 360;\n    }\n    if a > c {\n        a = a - 360;\n        c = c -\
    \ 360;\n    }\n    if b > c {\n        b = b - 360;\n        c = c - 360;\n  \
    \  }\n    if a == b {\n        if a == c {\n            return true;\n       \
    \ }\n        return false;\n    }\n    if a == c {\n        return false;\n  \
    \  }\n    if b == c {\n        return true;\n    }\n    if a > b {\n        a\
    \ = a - 360;\n        b = b - 360;\n    }\n    if a > c {\n        a = a - 360;\n\
    \        c = c - 360;\n    }\n    if b > c {\n        b = b - 360;\n        c\
    \ = c - 360;\n    }\n    if a == b {\n        if a == c {\n            return\
    \ true;\n        }\n        return false;\n    }\n    if a == c {\n        return\
    \ false;\n    }\n    if b == c {\n        return true;\n    }\n    if a > b {\n\
    \        a = a - 360;\n        b = b - 360;\n    }\n    if a > c {\n        a\
    \ = a - 360;\n        c = c - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \        c = c - 360;\n    }\n    if a == b {\n        if a == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if a == c {\n \
    \       return false;\n    }\n    if b == c {\n        return true;\n    }\n \
    \   if a > b {\n        a = a - 360;\n        b = b - 360\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp_5si3p7i.rs:150:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n132 |     if a > b {\n    |              - this delimiter might\
    \ not be properly closed...\n...\n135 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n150 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_5si3p7i.rs:8:58\n  |\n8 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n  |    --------------------                 \
    \                 ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4bz64od0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl6bo7a69.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut s = a + b + c;\n    if s == 0 {\n     \
    \   return false;\n    }\n    s /= 2;\n    if a > b {\n        (a, b) = (b, a);\n\
    \    }\n    if a > c {\n        (a, c) = (c, a);\n    }\n    if b > c {\n    \
    \    (b, c) =(c, b);\n    }\n    if a > b {\n        (a, b) = (b, a);\n    }\n\
    \    if b > c {\n        (b, c) =(c, b);\n    }\n    if c > a {\n        (c, a)\
    \ = (a, c);\n    }\n    if c > b {\n        (c, b) =(b, c);\n    }\n    if a >\
    \ c {\n        (a, c) = (c, a);\n    }\n    if b > c {\n        (b, c) =(c, b);\n\
    \    }\n    if c > a {\n        (c, a) = (a, c);\n    }\n    if a > b {\n    \
    \    (a, b) = (b, a);\n    }\n    if b > c {\n        (b, c) =(c, b);\n    }\n\
    \    if c > a {\n        (c, a) = (a, c);\n    }\n    if a > c {\n        (a,\
    \ c) = (c, a);\n    }\n    if b > c {\n        (b, c) =(c, b);\n    }\n    if\
    \ c > a {\n        (c, a) = (a, c);\n    }\n    if a > b {\n        (a, b) = (b,\
    \ a);\n    }\n    if b > c {\n        (b, c) =(c, b);\n    }\n    if c > a {\n\
    \        (c, a) = (a, c);\n    }\n    if a > c {\n        (a, c) = (c, a);\n \
    \   }\n    if b > c {\n        (b, c) =(c, b);\n    }\n    if c > a {\n      \
    \  (c, a) = (a, c);\n    }\n    if a > b {\n        (a, b) = (b, a);\n    }\n\
    \    if b > c {\n        (b, c) =(c, b);\n    }\n    if c > a {\n        (c, a)\
    \ = (a, c);\n    }\n    if a > c {\n        (a, c) = (c, a);\n    }\n    if b\
    \ > c {\n        (b, c) =(c, b);\n    }\n    if c > a {\n        (c, a) = (a,\
    \ c);\n    }\n    if a > b {\n        (a, b) = (b, a);\n    }\n    if b > c {\n\
    \        (b, c) =(c, b);\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmph3c74hxe.rs:122:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n104 |     if b > c {\n    |              - this delimiter might\
    \ not be properly closed...\n...\n107 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n122 | }\n    |   ^\n\nerror[E0573]: expected\
    \ type, found local variable `a`\n --> /tmp/tmph3c74hxe.rs:9:30\n  |\n9 |    \
    \ let mut a = a < 0 ? -a : a;\n  |                              ^ expecting a\
    \ type here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `b`\n  --> /tmp/tmph3c74hxe.rs:10:30\n   |\n10 |     let mut b = b\
    \ < 0 ? -b : b;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0573]: expected type, found local variable `c`\n\
    \  --> /tmp/tmph3c74hxe.rs:11:30\n   |\n11 |     let mut c = c < 0 ? -c : c;\n\
    \   |                              ^ expecting a type here because of type ascription\n\
    \nerror[E0277]: the `?` operator can only be applied to values that implement\
    \ `Try`\n --> /tmp/tmph3c74hxe.rs:9:21\n  |\n9 |     let mut a = a < 0 ? -a :\
    \ a;\n  |                     ^^^ the `?` operator cannot be applied to type `{integer}`\n\
    \  |\n  = help: the trait `Try` is not implemented for `{integer}`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n   --> /tmp/tmph3c74hxe.rs:9:23\n\
    \    |\n8   | / fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n9   | |     let mut a = a < 0 ? -a : a;\n    | |                       ^\
    \ cannot use the `?` operator in a function that returns `bool`\n10  | |     let\
    \ mut b = b < 0 ? -b : b;\n11  | |     let mut c = c < 0 ? -c : c;\n...   |\n\
    121 | |     assert_eq!(candidate(2, 2, 10), false);\n122 | | }\n    | |__- this\
    \ function should return `Result` or `Option` to accept `?`\n    |\n    = help:\
    \ the trait `FromResidual<_>` is not impleme"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgzvtlx01.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfieddw_r.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() >= (c - b).abs() - (c - a).abs()\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjhv99zun.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    while i < 3 {\n        sum += (a[i]\
    \ - b[i]) * (c[i] - b[i]);\n        i += 1;\n    }\n    sum == 0 && a == b\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp2gd9qtzj.rs:15:17\n\
    \   |\n15 |         sum += (a[i] - b[i]) * (c[i] - b[i]);\n   |              \
    \   ^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp2gd9qtzj.rs:15:24\n\
    \   |\n15 |         sum += (a[i] - b[i]) * (c[i] - b[i]);\n   |              \
    \          ^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n \
    \ --> /tmp/tmp2gd9qtzj.rs:15:33\n   |\n15 |         sum += (a[i] - b[i]) * (c[i]\
    \ - b[i]);\n   |                                 ^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp2gd9qtzj.rs:15:40\n   |\n\
    15 |         sum += (a[i] - b[i]) * (c[i] - b[i]);\n   |                     \
    \                   ^^^^\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphd1tdfdf.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ sum = 0;\n    while a > 0 && b > 0 && c > 0 {\n        sum += a;\n        sum\
    \ += b;\n        sum += c;\n        a /= 2;\n        b /= 2;\n        c /= 2;\n\
    \    }\n    sum == a && sum == b && sum == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjaov7ibv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2crs9afj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_eeq_2_p.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd1r_qy0b.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    while a > b {\n        a -= b;\n        b -= c;\n\
    \        c -= a;\n    }\n    \n    while b > c {\n        b -= c;\n        c -=\
    \ a;\n        a -= b;\n    }\n    \n    while c > a {\n        c -= a;\n     \
    \   a -= b;\n        b -= c;\n    }\n    \n    a == b\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmplj4rcr_j.rs:9:25\n  |\n9 |     let mut a = a < b ? a : b;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut sum = a;\n    let mut product = 1;\n    while product < b {\n\
    \        sum += product;\n        product *= c;\n    }\n    product /= b;\n  \
    \  product -= sum;\n    product < 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfot7jqt0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * b - c * c;\n    if det < 0 {\n        det = -det;\n    }\n    if det\
    \ > 0 {\n        return false;\n    }\n    let mut a = a / 2;\n    let mut b =\
    \ b / 2;\n    let mut c = c / 2;\n    let mut det = a * b - c * c;\n    if det\
    \ < 0 {\n        det = -det;\n    }\n    if det > 0 {\n        return false;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprlj7i3do.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            c -= a;\n     \
    \       a -= b;\n            b -= c;\n        } else {\n            c -= b;\n\
    \            b -= a;\n            a -= c;\n        }\n    }\n    a == 0 && b ==\
    \ 0 && c == 0 || a == 0 && b == 0 && c == a || a == 0 && b == c && c == b\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph5xi_m8k.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfbnukccs.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b + c).abs() == (b - a).abs()\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmp20pqcbqp.rs:9:19\n\
    \  |\n9 |     (b - a).abs() == (b + c).abs() == (b - a).abs()\n  |           \
    \        ^^               ^^\n  |\nhelp: split the comparison into two\n  |\n\
    9 |     (b - a).abs() == (b + c).abs() && (b + c).abs() == (b - a).abs()\n  |\
    \                                    ++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp20pqcbqp.rs:9:39\n  |\n9 |     (b - a).abs() == (b + c).abs()\
    \ == (b - a).abs()\n  |                                       ^^^^^^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    true\n            } else {\n                false\n            }\n      \
    \  } else {\n            false\n        }\n    } else {\n        if b < c {\n\
    \            true\n        } else {\n            false\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvmq7k_l2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdudrp0xv.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    while a > b {\n        a -= b;\n        b += c;\n        c += a;\n    }\n\
    \    while b > c {\n        b -= c;\n        c += a;\n        a += b;\n    }\n\
    \    while c > a {\n        c -= a;\n        a += b;\n        b += c;\n    }\n\
    \    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp3xby923k.rs:27:7\n\
    \   |\n27 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n27 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3xby923k.rs:27:15\n   |\n27 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0giz3xcx.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbwjwuxu1.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc1kwyfgo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxw1ny103.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa3_gzno0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > b {\n        a -= b;\n        b += c;\n        c += a;\n    }\n    while b\
    \ > c {\n        b -= c;\n        c += a;\n        a += b;\n    }\n    while c\
    \ > a {\n        c -= a;\n        a += b;\n        b += c;\n    }\n    a == b\
    \ == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5t3xpt0r.rs:30:7\n\
    \   |\n30 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n30 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5t3xpt0r.rs:30:15\n   |\n30 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > b {\n        a -= b;\n        c -= b;\n    }\n    while b > c {\n        b\
    \ -= c;\n        a -= c;\n    }\n    while c > a {\n        c -= a;\n        b\
    \ -= a;\n    }\n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmptch1vsqn.rs:27:7\n\
    \   |\n27 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n27 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptch1vsqn.rs:27:15\n   |\n27 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * b - c * c;\n    if det < 0 {\n        det = -det;\n    }\n    if det\
    \ < 0 {\n        return false;\n    }\n    if det > 0 {\n        return true;\n\
    \    }\n    if a > b {\n        a = b;\n    }\n    if a > c {\n        a = c;\n\
    \    }\n    if b > c {\n        b = c;\n    }\n    if a == b {\n        return\
    \ true;\n    }\n    if a == c {\n        return false;\n    }\n    if b == c {\n\
    \        return false;\n    }\n    if a > b {\n        a = b;\n    }\n    if a\
    \ > c {\n        a = c;\n    }\n    if b > c {\n        b = c;\n    }\n    if\
    \ a == b {\n        return true;\n    }\n    if a == c {\n        return false;\n\
    \    }\n    if b == c {\n        return false;\n    }\n    if a > b {\n      \
    \  a = b;\n    }\n    if a > c {\n        a = c;\n    }\n    if b > c {\n    \
    \    b = c;\n    }\n    if a == b {\n        return true;\n    }\n    if a ==\
    \ c {\n        return false;\n    }\n    if b == c {\n        return false;\n\
    \    }\n    if a > b {\n        a = b;\n    }\n    if a > c {\n        a = c;\n\
    \    }\n    if b > c {\n        b = c;\n    }\n    if a == b {\n        return\
    \ true;\n    }\n    if a == c {\n        return false;\n    }\n    if b == c {\n\
    \        return false;\n    }\n    if a > b {\n        a = b;\n    }\n    if a\
    \ > c {\n        a = c;\n    }\n    if b > c {\n        b = c;\n    }\n    if\
    \ a == b {\n        return true;\n    }\n    if a == c {\n        return false;\n\
    \    }\n    if b == c {\n        return false;\n    }\n    if a > b {\n      \
    \  a = b;\n    }\n    if a > c {\n        a = c;\n    }\n    if b > c {\n    \
    \    b = c;\n    }\n    if a == b {\n        return true;\n    }\n    if a ==\
    \ c {\n        return false;\n    }\n    if b == c {\n        return false;\n\
    \    }\n    if a > b {\n        a = b;\n    }\n    if a > c {\n        a = c;\n\
    \    }\n    if b > c {\n        b = c;\n    }\n    if a == b {\n        return\
    \ true;\n    }\n    if a == c {\n        return false;\n    }\n    if b == c {\n\
    \        return false;\n    }\n    if a \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpzl59xn0s.rs:152:1\n    |\n\
    151 |     if a \n    |     -- this `if` expression has a condition, but no block\n\
    152 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b + c {\n        return false;\n    }\n    if b > c + a {\n  \
    \      return false;\n    }\n    if c > a + b {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwhgvox5l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || b + c > a || c + a > b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0bsc3pzb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    if a > b + c {\n   \
    \     a = b + c;\n    }\n    if b > a + c {\n        b = a + c;\n    }\n    if\
    \ c > a + b {\n        c = a + b;\n    }\n    \n    a == b + c && b == a + c &&\
    \ c == a + b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpldrk5t3p.rs:9:29\n  |\n9 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ d = b - a;\n    let mut e = c - a;\n    let mut f = d - a;\n    let mut g =\
    \ d - b;\n    let mut h = e - b;\n    let mut i = f - c;\n    let mut j = g -\
    \ c;\n    let mut k = h - c;\n    let mut l = i - j;\n    let mut m = k - l;\n\
    \    let mut n = i - k;\n    let mut o = m - n;\n    let mut p = o - m;\n    let\
    \ mut q = p - o;\n    let mut r = p - q;\n    let mut s = q - p;\n    let mut\
    \ t = r - s;\n    let mut u = s - r;\n    let mut v = t - u;\n    let mut w =\
    \ u - t;\n    let mut x = v - w;\n    let mut y = w - v;\n    let mut z = x -\
    \ y;\n    \n    if x == 0 && y == 0 && z == 0 {\n        return true;\n    }\n\
    \    \n    if x == 0 && y == 0 && z == 1 {\n        return false;\n    }\n   \
    \ \n    if x == 1 && y == 1 && z == 0 {\n        return false;\n    }\n    \n\
    \    if x == 1 && y == 1 && z == 1 {\n        return true;\n    }\n    \n    if\
    \ x == 0 && y == 1 && z == 0 {\n        return false;\n    }\n    \n    if x ==\
    \ 0 && y == 1 && z == 1 {\n        return false;\n    }\n    \n    if x == 1 &&\
    \ y == 0 && z == 0 {\n        return false;\n    }\n    \n    if x == 1 && y ==\
    \ 0 && z == 1 {\n        return false;\n    }\n    \n    if x == 0 && y == 0 &&\
    \ z == 1 {\n        return false;\n    }\n    \n    if x == 0 && y == 1 && z ==\
    \ 0 {\n        return false;\n    }\n    \n    if x == 0 && y == 1 && z == 1 {\n\
    \        return false;\n    }\n    \n    if x == 1 && y == 0 && z == 0 {\n   \
    \     return false;\n    }\n    \n    if x == 1 && y == 0 && z == 1 {\n      \
    \  return false;\n    }\n    \n    if x == 0 && y == 0 && z == 1 {\n        return\
    \ false;\n    }\n    \n    if x == 0 && y == 1 && z == 0 {\n        return false;\n\
    \    }\n    \n    if x == 0 && y == 1 && z == 1 {\n        return false;\n   \
    \ }\n    \n    if x == 1 && y == 0 && z == 0 {\n        return false;\n    }\n\
    \    \n    if x == 1 && y == 0 && z == 1 {\n        return false;\n    }\n   \
    \ \n    if x == 0 && y == 0 && z == 1 {\n        return false;\n    }\n    \n\
    \    if x == 0 && y == 1 && z == 0 {\n        return false;\n    }\n\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmp14jo8exf.rs:115:5\n\
    \    |\n8   |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    |                                                            ---- expected\
    \ `bool` because of this return type\n...\n115 | /     if x == 0 && y == 1 &&\
    \ z == 0 {\n116 | |         return false;\n117 | |     }\n    | |_____^ expected\
    \ `bool`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate\
    \ to `()`\n    = help: consider adding an `else` block that evaluates to the expected\
    \ type\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfdde25zs.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnq50l4lf.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    true\n            } else {\n                false\n            }\n      \
    \  } else {\n            false\n        }\n    } else {\n        if b < c {\n\
    \            true\n        } else {\n            false\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5wkl3jdc.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_r91edhw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj4okvqsl.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a == b {\n        return c == b;\n    }\n \
    \   \n    if a == c {\n        return b == c;\n    }\n    \n    if b == c {\n\
    \        return a == b;\n    }\n    \n    if a < b {\n        if b < c {\n   \
    \         return a < c;\n        }\n        else {\n            return b < c;\n\
    \        }\n    }\n    else {\n        if b < c {\n            return b < c;\n\
    \        }\n        else {\n            return a < b;\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp4j7jt3dv.rs:9:25\n  |\n9 |     let mut a = a < b ? a : b;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2gsloanq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n        }\
    \ else {\n            b -= a;\n        }\n        if b > c {\n            b -=\
    \ c;\n        } else {\n            c -= b;\n        }\n    }\n    a > 0 && b\
    \ > 0 && c > 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcgrd8o7g.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a + b > c {\n        a = c;\n        b = a;\n\
    \        c = a;\n    }\n    \n    if a + c > b {\n        a = b;\n        b =\
    \ a;\n        c = a;\n    }\n    \n    if b + c > a {\n        a = c;\n      \
    \  b = a;\n        c = a;\n    }\n    \n    a + b + c == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpedc7cur1.rs:9:25\n  |\n9 |     let mut a = a < c ? a : c;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    \n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n  \
    \  let mut c = c < a ? c : a;\n    \n    while a > b {\n        a -= b;\n    \
    \    b -= c;\n        c -= a;\n    }\n    \n    while b > c {\n        b -= c;\n\
    \        c -= a;\n        a -= b;\n    }\n    \n    while c > a {\n        c -=\
    \ a;\n        a -= b;\n        b -= c;\n    }\n    \n    a == b == c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpg83tk0em.rs:13:25\n   |\n13 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi9ok5y73.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2js8jsn3.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprfe923wu.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    while a > b {\n        a -= b;\n        b -= c;\n\
    \        c -= a;\n    }\n    \n    while b > c {\n        b -= c;\n        c -=\
    \ a;\n        a -= b;\n    }\n    \n    while c > a {\n        c -= a;\n     \
    \   a -= b;\n        b -= c;\n    }\n    \n    a == b\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpsblt3g_k.rs:9:25\n  |\n9 |     let mut a = a < c ? a : c;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpafyej_cw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptewgi41z.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjmbxx9cr.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (a * c) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfe1s4vnl.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut d = a + b + c;\n    if d < 0 {\n      \
    \  return false;\n    }\n    if d == 0 {\n        return true;\n    }\n    if\
    \ a > b {\n        swap(&mut a, &mut b);\n    }\n    if b > c {\n        swap(&mut\
    \ b, &mut c);\n    }\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n \
    \   let mut s = a + b + c;\n    if s <= 0 {\n        return false;\n    }\n  \
    \  if s == 1 {\n        return true;\n    }\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n \
    \   if c > a {\n        swap(&mut c, &mut a);\n    }\n    let mut t = a + b +\
    \ c;\n    if t <= 0 {\n        return false;\n    }\n    if t == 1 {\n       \
    \ return true;\n    }\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n\
    \    if b > c {\n        swap(&mut b, &mut c);\n    }\n    if c > a {\n      \
    \  swap(&mut c, &mut a);\n    }\n    let mut u = a + b + c;\n    if u <= 0 {\n\
    \        return false;\n    }\n    if u == 1 {\n        return true;\n    }\n\
    \    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if b > c {\n      \
    \  swap(&mut b, &mut c);\n    }\n    if c > a {\n        swap(&mut c, &mut a);\n\
    \    }\n    let mut v = a + b + c;\n    if v <= 0 {\n        return false;\n \
    \   }\n    if v == 1 {\n        return true;\n    }\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n \
    \   if c > a {\n        swap(&mut c, &mut a);\n    }\n    let mut w = a + b +\
    \ c;\n    if w <= 0 {\n        return false;\n    }\n    if w == 1 {\n       \
    \ return true;\n    }\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n\
    \    if b > c {\n        swap(&mut b, &mut c);\n    }\n    if \n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp2lbhf00o.rs:106:1\n\
    \    |\n106 | }\n    | ^ expected expression\n\nerror[E0573]: expected type, found\
    \ local variable `a`\n --> /tmp/tmp2lbhf00o.rs:9:30\n  |\n9 |     let mut a =\
    \ a < 0 ? -a : a;\n  |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0573]: expected type, found local variable `b`\n\
    \  --> /tmp/tmp2lbhf00o.rs:10:30\n   |\n10 |     let mut b = b < 0 ? -b : b;\n\
    \   |                              ^ expecting a type here because of type ascription\n\
    \nerror[E0573]: expected type, found local variable `c`\n  --> /tmp/tmp2lbhf00o.rs:11:30\n\
    \   |\n11 |     let mut c = c < 0 ? -c : c;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0425]: cannot\
    \ find function `swap` in this scope\n  --> /tmp/tmp2lbhf00o.rs:20:9\n   |\n20\
    \ |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp2lbhf00o.rs:23:9\n   |\n23 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmp2lbhf00o.rs:26:9\n   |\n26 |         swap(&mut c, &mut a);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp2lbhf00o.rs:36:9\n\
    \   |\n36 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp2lbhf00o.rs:39:9\n   |\n39 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in thi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjoihusk_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpls8qeeas.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps_tcd0kr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdxcyq68o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaze1btl_.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    a +\
    \ b + c == 2 * a + b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpniws1xwl.rs:10:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n9  |     if a > b {\n10 |         (a, b) = (b, a)\n   |          ^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmpniws1xwl.rs:10:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n9  |     if a > b {\n\
    10 |         (a, b) = (b, a)\n   |             ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpniws1xwl.rs:13:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n13 |         (b, c) = (c, b)\n   |          ^ cannot assign to\
    \ immutable argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n\
    \  --> /tmp/tmpniws1xwl.rs:13:13\n   |\n8  | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \     - help: consider making this binding mutable: `mut c`\n...\n13 |       \
    \  (b, c) = (c, b)\n   |             ^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpniws1xwl.rs:16:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n16 |         (c, a) = (a, c)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `a`\n  --> /tmp/tmpniws1xwl.rs:16:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                         - help: consider\
    \ making this binding mutable: `mut a`\n...\n16 |         (c, a) = (a, c)\n  \
    \ |             ^ cannot ass"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn95ttk68.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbkz0tw6i.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    \n    if a + b > c {\n        a = -a;\n       \
    \ b = -b;\n    }\n    \n    if a + c > b {\n        a = -a;\n        c = -c;\n\
    \    }\n    \n    if b + c > a {\n        b = -b;\n        c = -c;\n    }\n  \
    \  \n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp38aaeldx.rs:28:7\n\
    \   |\n28 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n28 |     a == b && b == c\n   |            ++++\n\nerror[E0573]:\
    \ expected type, found local variable `a`\n --> /tmp/tmp38aaeldx.rs:9:30\n  |\n\
    9 |     let mut a = a < 0 ? -a : a;\n  |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `b`\n  --> /tmp/tmp38aaeldx.rs:10:30\n   |\n10 |     let mut\
    \ b = b < 0 ? -b : b;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0573]: expected type, found local variable\
    \ `c`\n  --> /tmp/tmp38aaeldx.rs:11:30\n   |\n11 |     let mut c = c < 0 ? -c\
    \ : c;\n   |                              ^ expecting a type here because of type\
    \ ascription\n\nerror[E0277]: the `?` operator can only be applied to values that\
    \ implement `Try`\n --> /tmp/tmp38aaeldx.rs:9:21\n  |\n9 |     let mut a = a <\
    \ 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot be applied\
    \ to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented for `{integer}`\n\
    \nerror[E0277]: the `?` operator can only be used in a function that returns `Result`\
    \ or `Option` (or another type that implements `FromResidual`)\n  --> /tmp/tmp38aaeldx.rs:9:23\n\
    \   |\n8  | / fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    9  | |     let mut a = a < 0 ? -a : a;\n   | |                       ^ cannot\
    \ use the `?` operator in a function that returns `bool`\n10 | |     let mut b\
    \ = b < 0 ? -b : b;\n11 | |     let mut c = c < 0 ? -c : c;\n...  |\n28 | |  \
    \   a == b == c\n29 | | }\n   | |_- this function should return `Result` or `Option`\
    \ to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented\
    \ for `bool`\n\nerror[E0277]: the `?` operator can only be applied to values that\
    \ implement `Try`\n  --> /tmp/tmp38aaeldx.rs:10:21\n   |\n10 |     let mut b =\
    \ b < 0 ? -b : b;\n   |                     ^^^ the `?` operator cannot be applied\
    \ to type `{integer}`\n   |\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            c -= a;\n     \
    \       a -= b;\n            b -= c;\n        } else {\n            c -= b;\n\
    \            b -= a;\n            a -= c;\n        }\n    }\n    a == 0 && b ==\
    \ 0 && c == 0 || a == 0 && b == 0 && c == a || a == 0 && b == c && c == b\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiqqgwx_a.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() >= (c - b).abs() && (a - b).abs() >= (c - a).abs()\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplv64fzwq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptp7g585l.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            c -= a;\n     \
    \       a -= b;\n            b -= c;\n        } else {\n            c -= b;\n\
    \            b -= a;\n            a -= c;\n        }\n    }\n    a == 0 && b ==\
    \ 0 && c == 0 || a == 0 && b == 0 && c == a || a == 0 && c == 0 && b == b\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp37xn2wt8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp83m1cf3d.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjh9ydtr6.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            a -= c;\n     \
    \       b -= c;\n            c -= c;\n        } else {\n            b -= a;\n\
    \            c -= a;\n            a -= a;\n        }\n    }\n    a == 0 && b ==\
    \ 0 && c == 0 // all sides are equal\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl0i74fou.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || a + c > b || b + c > a {\n        return false;\n   \
    \ }\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    while a > b {\n        a -= b;\n        c -= b;\n\
    \    }\n    while b > c {\n        b -= c;\n        a -= c;\n    }\n    while\
    \ c > a {\n        c -= a;\n        b -= a;\n    }\n    \n    a == b == c\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpf13j86lj.rs:12:25\n   |\n12 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut d = a + b + c;\n    if d > 0 {\n        while a > b {\n         \
    \   a -= b;\n            d -= b;\n        }\n        while b > c {\n         \
    \   b -= c;\n            d -= c;\n        }\n        while c > a {\n         \
    \   c -= a;\n            d -= a;\n        }\n    }\n    d < 0\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6qnvxpmn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4txs32eq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4_arnp7p.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmlsmlwqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp01hfkb5r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut sum = a;\n    for i in 1..b {\n        sum += c;\n        if\
    \ sum > b {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9s9bh79b.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    true\n            } else {\n                false\n            }\n      \
    \  } else {\n            false\n        }\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm_ef214g.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp09uuyhhq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq4r6li9v.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe5zgkms2.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > b {\n        a -= b;\n        b += c;\n        c += a;\n    }\n    while b\
    \ > c {\n        b -= c;\n        c += a;\n        a += b;\n    }\n    while c\
    \ > a {\n        c -= a;\n        a += b;\n        b += c;\n    }\n    a == b\
    \ == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpijeljumz.rs:30:7\n\
    \   |\n30 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n30 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpijeljumz.rs:30:15\n   |\n30 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a + b > c {\n        a = c;\n        b = a\
    \ - b;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = a - c;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = b - c;\n    }\n\
    \    \n    if a + b + c > 0 {\n        return true;\n    }\n    \n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp7uncn5rf.rs:9:25\n  |\n9 |     let mut a = a < b ? a : b;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2__eftb0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > b {\n        c -= a;\n        a /= 2;\n    }\n    while b > c {\n        a\
    \ -= b;\n        b /= 2;\n    }\n    while c > a {\n        b -= c;\n        c\
    \ /= 2;\n    }\n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpy1wm7q4g.rs:27:7\n\
    \   |\n27 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n27 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy1wm7q4g.rs:27:15\n   |\n27 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpamjg3q8g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    if a > b + c {\n   \
    \     a = b + c;\n        b = a + c;\n        c = a + b;\n    }\n    \n    if\
    \ a > b + c {\n        a = b + c;\n        b = a + c;\n        c = a + b;\n  \
    \  }\n    \n    if a > b + c {\n        a = b + c;\n        b = a + c;\n     \
    \   c = a + b;\n    }\n    \n    if a > b + c {\n        a = b + c;\n        b\
    \ = a + c;\n        c = a + b;\n    }\n    \n    if a > b + c {\n        a = b\
    \ + c;\n        b = a + c;\n        c = a + b;\n    }\n    \n    if a > b + c\
    \ {\n        a = b + c;\n        b = a + c;\n        c = a + b;\n    }\n    \n\
    \    if a > b + c {\n        a = b + c;\n        b = a + c;\n        c = a + b;\n\
    \    }\n    \n    if a > b + c {\n        a = b + c;\n        b = a + c;\n   \
    \     c = a + b;\n    }\n    \n    if a > b + c {\n        a = b + c;\n      \
    \  b = a + c;\n        c = a + b;\n    }\n    \n    if a > b + c {\n        a\
    \ = b + c;\n        b = a + c;\n        c = a + b;\n    }\n    \n    if a > b\
    \ + c {\n        a = b + c;\n        b = a + c;\n        c = a + b;\n    }\n \
    \   \n    if a > b + c {\n        a = b + c;\n        b = a + c;\n        c =\
    \ a + b;\n    }\n    \n    if a > b + c {\n        a = b + c;\n        b = a +\
    \ c;\n        c = a + b;\n    }\n    \n    if a > b + c {\n        a = b + c;\n\
    \        b = a + c;\n        c = a + b;\n    }\n    \n    if a > b + c {\n   \
    \     a = b + c;\n        b = a + c;\n        c = a + b;\n    }\n    \n    if\
    \ a > b + c {\n        a = b + c;\n        b = a + c;\n        c = a + b;\n  \
    \  }\n    \n    if a > b + c {\n        a = b + c;\n        b = a + c;\n     \
    \   c = a + b;\n    }\n    \n    if a > b + c {\n        a = b + c;\n        b\
    \ = a + c;\n        c = a + b;\n    }\n    \n    if a > b + c {\n        a = b\
    \ + c;\n        b = a + c;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpxp7tia41.rs:139:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n121 |     if a > b + c {\n    |                  - this delimiter\
    \ might not be properly closed...\n...\n124 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n139 | }\n    |   ^\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found `a`\n --> /tmp/tmpxp7tia41.rs:9:29\n\
    \  |\n9 |     let mut a = a < b + c ? a : b + c;\n  |                        \
    \     ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        swap(&mut a, &mut b);\n  \
    \  }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n    if c > a {\n \
    \       swap(&mut c, &mut a);\n    }\n    \n    a == b == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp3fd83gyv.rs:9:25\n  |\n9 |     let mut a = a < b ? a : b;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n    if b > c {\n        sum\
    \ += 360;\n    }\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = 0;\n    \n    if a > b {\n        sum += 360;\n    }\n    \n\
    \    if a > c {\n        sum += 360;\n    }\n    \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n   --> /tmp/tmp5o7vfyn2.rs:144:14\n   \
    \ |\n144 |       if a > c {\n    |  ______________^\n145 | |         sum += 360;\n\
    146 | |     }\n    | |_____^ expected `bool`, found `()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() <= (c - b).abs() && \n    (c - b).abs() <= (a - c).abs()\
    \ && \n    (a - c).abs() <= (b - a).abs()\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyw28bkcs.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || a + c > b || b + c > a {\n        return false;\n   \
    \ }\n    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c /\
    \ 2;\n    \n    while a > b {\n        a -= b;\n        c -= b;\n    }\n    \n\
    \    while b > c {\n        b -= c;\n        a -= c;\n    }\n    \n    while c\
    \ > a {\n        c -= a;\n        b -= a;\n    }\n    \n    a == b == c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpym67g9mq.rs:32:7\n\
    \   |\n32 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n32 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpym67g9mq.rs:32:15\n   |\n32 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0y3so71c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr6knb4km.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi3qcfyzw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            a -= c;\n     \
    \       b -= c;\n            c -= c;\n        } else {\n            b -= a;\n\
    \            c -= a;\n            a -= a;\n        }\n    }\n    a == 0 && b ==\
    \ 0 && c == 0 // if all sides are equal, triangle is right angle\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmperz7j_4s.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut s = a * a + b * b + c * c;\n    if s == 0 {\n        return false;\n\
    \    }\n    let mut discriminant = b * b - 4 * a * c;\n    if discriminant < 0\
    \ {\n        discriminant = -discriminant;\n    }\n    discriminant /= 2;\n  \
    \  if discriminant > 0 {\n        return false;\n    }\n    let mut angle = acos(discriminant);\n\
    \    if angle > 1.57 {\n        angle -= 1.57;\n    }\n    if angle < -1.57 {\n\
    \        angle += 1.57;\n    }\n    if angle > 1.57 {\n        angle -= 1.57;\n\
    \    }\n    if angle < -1.57 {\n        angle += 1.57;\n    }\n    if angle ==\
    \ 0 {\n        return true;\n    }\n    if angle > 0 {\n        return false;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `acos` in this scope\n  --> /tmp/tmpggu5ufkk.rs:24:21\n\
    \   |\n24 |     let mut angle = acos(discriminant);\n   |                    \
    \ ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut s = a + b + c;\n    if s == 0 {\n     \
    \   return false;\n    }\n    let mut t = b - c;\n    if t > 0 {\n        s =\
    \ s + t;\n    }\n    t = a - c;\n    if t > 0 {\n        s = s + t;\n    }\n \
    \   t = b - a;\n    if t > 0 {\n        s = s + t;\n    }\n    s == 0\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmpxjmubi00.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmpxjmubi00.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmpxjmubi00.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmpxjmubi00.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmpxjmubi00.rs:9:23\n   |\n8  | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9  | |     let mut a = a < 0 ? -a : a;\n   |\
    \ |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10 | |     let mut b = b < 0 ? -b : b;\n11 | |     let mut c = c < 0\
    \ ? -c : c;\n...  |\n28 | |     s == 0\n29 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmpxjmubi00.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n  \
    \      return false;\n    }\n    if b + c > a {\n        return false;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdwn7nqsv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7mfk8n9g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            if a > c {\n      \
    \          return true;\n            }\n            b = b / 2;\n        } else\
    \ {\n            if b > c {\n                return true;\n            }\n   \
    \         c = c / 2;\n        }\n        a = a / 2;\n        b = b / 2;\n    \
    \    c = c / 2;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvoccba_z.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b + c).abs() == (b - a).abs()\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmpt8987fep.rs:9:19\n\
    \  |\n9 |     (b - a).abs() == (b + c).abs() == (b - a).abs()\n  |           \
    \        ^^               ^^\n  |\nhelp: split the comparison into two\n  |\n\
    9 |     (b - a).abs() == (b + c).abs() && (b + c).abs() == (b - a).abs()\n  |\
    \                                    ++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt8987fep.rs:9:39\n  |\n9 |     (b - a).abs() == (b + c).abs()\
    \ == (b - a).abs()\n  |                                       ^^^^^^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a as isize;\n    let mut b = b as isize;\n    let mut c =\
    \ c as isize;\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if a\
    \ > c {\n        swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut\
    \ b, &mut c);\n    }\n    if a + b > c {\n        return false;\n    }\n    if\
    \ a + c > b {\n        return false;\n    }\n    if b + c > a {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp1kvh29mk.rs:13:9\n\
    \   |\n13 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp1kvh29mk.rs:16:9\n   |\n16 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmp1kvh29mk.rs:19:9\n   |\n19 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if b == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if b == c {\n \
    \       return false;\n    }\n    if a < b {\n        if a < c {\n           \
    \ if b < c {\n                return true;\n            }\n        }\n    }\n\
    \    if a > b {\n        if a > c {\n            if b > c {\n                return\
    \ true;\n            }\n        }\n    }\n    if a < c {\n        if a > c {\n\
    \            if b > c {\n                return true;\n            }\n       \
    \ }\n    }\n    if b > c {\n        if a > c {\n            if b < c {\n     \
    \           return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt8gxbdbn.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    return true;\n            }\n        }\n    }\n    else if b < c {\n    \
    \    if c < a {\n            return true;\n        }\n    }\n    else if c < a\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnwsk8x3y.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4gvywga5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph_hy1m8v.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if a > c {\n        (a,\
    \ c) = (c, a)\n    }\n    if b > c {\n        (b, c) =(c, b)\n    }\n    a + b\
    \ + c == 18\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpfvs0vurj.rs:10:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n9  |     if a > b {\n10 |         (a, b) = (b, a)\n   |          ^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmpfvs0vurj.rs:10:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n9  |     if a > b {\n\
    10 |         (a, b) = (b, a)\n   |             ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpfvs0vurj.rs:13:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n...\n13 |         (a, c) = (c, a)\n   |          ^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpfvs0vurj.rs:13:13\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n13 |         (a, c) = (c, a)\n   |          \
    \   ^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `b`\n  --> /tmp/tmpfvs0vurj.rs:16:10\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n...\n16 |         (b,\
    \ c) =(c, b)\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `c`\n  --> /tmp/tmpfvs0vurj.rs:16:13\n \
    \  |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n \
    \  |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n16 |         (b, c) =(c, b)\n   |           \
    \  ^ cannot assig"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo8yvzd0j.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    a +\
    \ b + c == 2 * a + b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpcl7nfcdh.rs:10:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n9  |     if a > b {\n10 |         (a, b) = (b, a)\n   |          ^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmpcl7nfcdh.rs:10:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n9  |     if a > b {\n\
    10 |         (a, b) = (b, a)\n   |             ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpcl7nfcdh.rs:13:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n13 |         (b, c) = (c, b)\n   |          ^ cannot assign to\
    \ immutable argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n\
    \  --> /tmp/tmpcl7nfcdh.rs:13:13\n   |\n8  | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \     - help: consider making this binding mutable: `mut c`\n...\n13 |       \
    \  (b, c) = (c, b)\n   |             ^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpcl7nfcdh.rs:16:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n16 |         (c, a) = (a, c)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `a`\n  --> /tmp/tmpcl7nfcdh.rs:16:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                         - help: consider\
    \ making this binding mutable: `mut a`\n...\n16 |         (c, a) = (a, c)\n  \
    \ |             ^ cannot ass"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9u53nonf.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfliajeoe.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    \n    if a > b {\n        (a, b) = (b, a);\n  \
    \  }\n    if a > c {\n        (a, c) = (c, a);\n    }\n    if b > c {\n      \
    \  (b, c) =(c, b);\n    }\n    \n    let mut det = a * c - b * b;\n    if det\
    \ < 0 {\n        det = -det;\n    }\n    \n    det < 0\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmpinmaj10m.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmpinmaj10m.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmpinmaj10m.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmpinmaj10m.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmpinmaj10m.rs:9:23\n   |\n8  | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9  | |     let mut a = a < 0 ? -a : a;\n   |\
    \ |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10 | |     let mut b = b < 0 ? -b : b;\n11 | |     let mut c = c < 0\
    \ ? -c : c;\n...  |\n28 | |     det < 0\n29 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmpinmaj10m.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tm"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || a + c > b || b + c > a {\n        return false;\n   \
    \ }\n    let mut sum = a;\n    for i in 1..3 {\n        sum += b;\n        sum\
    \ += c;\n        if sum == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp078x5gyn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if a == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if b == c {\n \
    \       return false;\n    }\n    if a < b {\n        if a < c {\n           \
    \ if b < c {\n                return true;\n            }\n        }\n    }\n\
    \    if b < c {\n        if b < a { \n            if c < a { \n              \
    \  return true;\n            }\n        }\n    }\n    if c < a { \n        if\
    \ c < b { \n            if a < b { \n                return true;\n          \
    \  }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf_1piqh2.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph5ry__co.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if a == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        return false;\n    }\n\
    \    if b == c {\n        return true;\n    }\n    if a > b {\n        a = a -\
    \ 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n    if b > c {\n \
    \       b = b - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n   \
    \ if b > c {\n        b = b - 360;\n    }\n    if c > a {\n        c = c - 360;\n\
    \    }\n    if c > b {\n        c = c - 360;\n    }\n    if c > a {\n        c\
    \ = c - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n    if b > c\
    \ {\n        b = b - 360;\n    }\n    if c > a {\n        c = c - 360;\n    }\n\
    \    if c > b {\n        c = c - 360;\n    }\n    if a > b {\n        a = a -\
    \ 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if c > a {\n \
    \       c = c - 360;\n    }\n    if c > b {\n        c = c - 360;\n    }\n   \
    \ if a > b {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if c > a {\n        c = c - 360;\n    }\n    if c > b {\n        c\
    \ = c - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n    if b > c\
    \ {\n        b = b - 360;\n    }\n    if c > a {\n        c = c - 360;\n    }\n\
    \    if c > b {\n        c = c - 360;\n    }\n    if a > b {\n        a = a -\
    \ 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if c > a {\n \
    \       c = c - 360;\n    }\n    if c > b {\n        c = c - 360;\n    }\n   \
    \ if a > b {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if c > a {\n        c = c - 360;\n    }\n    if c > b {\n        c\
    \ = c - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n    if b > c\
    \ {\n        b = b - 360;\n    }\n    if c > a {\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjbx77p45.rs:142:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n126 |     if c > a {\n    |              - this delimiter might\
    \ not be properly closed...\n127 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n142 | }\n    |   ^\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjbx77p45.rs:8:58\n  |\n8 | fn right_angle_triangle(a: isize, b:\
    \ isize, c: isize) -> bool {\n  |    --------------------                    \
    \              ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprc197esc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut d = a + b + c;\n    if d < 0 {\n      \
    \  a = -a;\n        b = -b;\n        c = -c;\n        d = -d;\n    }\n    d >\
    \ 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmp934joba8.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmp934joba8.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmp934joba8.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmp934joba8.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmp934joba8.rs:9:23\n   |\n8  | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9  | |     let mut a = a < 0 ? -a : a;\n   |\
    \ |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10 | |     let mut b = b < 0 ? -b : b;\n11 | |     let mut c = c < 0\
    \ ? -c : c;\n...  |\n19 | |     d > 0\n20 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmp934joba8.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmp9"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqq3tuh_f.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpldfhyf0e.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc9_lgmrd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7_31k4ud.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpajvkd5lb.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj_6nx8hb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    return true;\n            }\n        }\n    }\n    else if b < c {\n    \
    \    if c < a {\n            return true;\n        }\n    }\n    else if c < a\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa8nd2j04.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpszyo_o00.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5pr0sleh.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if b == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if b == c {\n \
    \       return false;\n    }\n    if a > b {\n        a = a - 360;\n    }\n  \
    \  if a > c {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if a > b {\n        a = a - 360;\n    }\n    if b > c {\n        b\
    \ = b - 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n    if b > c\
    \ {\n        b = b - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n\
    \    if b > c {\n        b = b - 360;\n    }\n    if a > c {\n        a = a -\
    \ 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if a > b {\n \
    \       a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n   \
    \ if a > c {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if a > b {\n        a = a - 360;\n    }\n    if b > c {\n        b\
    \ = b - 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n    if b > c\
    \ {\n        b = b - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n\
    \    if b > c {\n        b = b - 360;\n    }\n    if a > c {\n        a = a -\
    \ 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n    if a > b {\n \
    \       a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n    }\n   \
    \ if a > c {\n        a = a - 360;\n    }\n    if b > c {\n        b = b - 360;\n\
    \    }\n    if a > b {\n        a = a - 360;\n    }\n    if b > c {\n        b\
    \ = b - 360;\n    }\n    if a > c {\n        a = a - 360;\n    }\n    if b > c\
    \ {\n        b = b - 360;\n    }\n    if a > b {\n        a = a - 360;\n    }\n\
    \    if b > c \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpc1lr8m5n.rs:124:1\n    |\n\
    123 |     if b > c \n    |     -- this `if` expression has a condition, but no\
    \ block\n124 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (a * c) == (a * a + b * b - c * c)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0htusy3x.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp99eolity.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b + c).abs() && (a + c).abs() == (b + a).abs()\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvtmdj6_1.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpygnlac4o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    \n    if a + b > c {\n        a = -a;\n       \
    \ b = -b;\n    }\n    if a + c > b {\n        a = -a;\n        c = -c;\n    }\n\
    \    if b + c > a {\n        b = -b;\n        c = -c;\n    }\n    \n    if a +\
    \ b > c {\n        a = -a;\n        b = -b;\n    }\n    if a + c > b {\n     \
    \   a = -a;\n        c = -c;\n    }\n    if b + c > a {\n        b = -b;\n   \
    \     c = -c;\n    }\n    \n    if a + b > c {\n        a = -a;\n        b = -b;\n\
    \    }\n    if a + c > b {\n        a = -a;\n        c = -c;\n    }\n    if b\
    \ + c > a {\n        b = -b;\n        c = -c;\n    }\n    \n    if a + b > c {\n\
    \        a = -a;\n        b = -b;\n    }\n    if a + c > b {\n        a = -a;\n\
    \        c = -c;\n    }\n    if b + c > a {\n        b = -b;\n        c = -c;\n\
    \    }\n    \n    if a + b > c {\n        a = -a;\n        b = -b;\n    }\n  \
    \  if a + c > b {\n        a = -a;\n        c = -c;\n    }\n    if b + c > a {\n\
    \        b = -b;\n        c = -c;\n    }\n    \n    if a + b > c {\n        a\
    \ = -a;\n        b = -b;\n    }\n    if a + c > b {\n        a = -a;\n       \
    \ c = -c;\n    }\n    if b + c > a {\n        b = -b;\n        c = -c;\n    }\n\
    \    \n    if a + b > c {\n        a = -a;\n        b = -b;\n    }\n    if a +\
    \ c > b {\n        a = -a;\n        c = -c;\n    }\n    if b + c > a {\n     \
    \   b = -b;\n        c = -c;\n    }\n    \n    if a + b > c {\n        a = -a;\n\
    \        b = -b;\n    }\n    if a + c > b {\n        a = -a;\n        c = -c;\n\
    \    }\n    if b + c > a {\n        b = -b;\n        c = -c;\n    }\n    \n  \
    \  if a + b > c {\n        a = -a;\n        b = -b;\n    }\n    if a + c > b {\n\
    \        a = -a;\n        c = -c;\n    }\n    if b + c > a {\n        b = -b;\n\
    \        c = -c;\n    }\n    \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmps5w44uyu.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmps5w44uyu.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmps5w44uyu.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmps5w44uyu.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \   --> /tmp/tmps5w44uyu.rs:9:23\n    |\n8   | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9   | |     let mut a = a < 0 ? -a : a;\n   \
    \ | |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10  | |     let mut b = b < 0 ? -b : b;\n11  | |     let mut c = c <\
    \ 0 ? -c : c;\n...   |\n129 | |     \n130 | | }\n    | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmps5w44uyu.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n   --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprrus08_9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8vt0mmm5.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxrhfc6lg.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n        }\n\
    \        if a > c {\n            a -= c;\n        }\n        if b > c {\n    \
    \        b -= c;\n        }\n        c /= 2;\n    }\n    a == 0 && b == 0 && c\
    \ == 1\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkh6tvf7_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8f1cp_va.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut d = a + b + c;\n    if d > 0 {\n      \
    \  let mut e = b - c;\n        if e > 0 {\n            let mut f = a - c;\n  \
    \          if f > 0 {\n                let mut g = d - e;\n                if\
    \ g > 0 {\n                    let mut h = b - a;\n                    if h >\
    \ 0 {\n                        let mut i = c - a;\n                        if\
    \ i > 0 {\n                            let mut j = a - b;\n                  \
    \          if j > 0 {\n                                return true;\n        \
    \                    }\n                        }\n                    }\n   \
    \             }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmpagnfez21.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmpagnfez21.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmpagnfez21.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmpagnfez21.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmpagnfez21.rs:9:23\n   |\n8  | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9  | |     let mut a = a < 0 ? -a : a;\n   |\
    \ |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10 | |     let mut b = b < 0 ? -b : b;\n11 | |     let mut c = c < 0\
    \ ? -c : c;\n...  |\n34 | |     false\n35 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmpagnfez21.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmpa"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl6659hi9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprivzw1da.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    loop {\n        if a == b {\n            return\
    \ c == a;\n        }\n        if a == c {\n            return b == c;\n      \
    \  }\n        if b == c {\n            return a == b;\n        }\n        \n \
    \       a -= 1;\n        b -= 1;\n        c -= 1;\n    }\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpggc1pxmo.rs:9:25\n  |\n9 |     let mut a = a < c ? a : c;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c = a + b;\n\
    \    }\n    if a + c > b {\n        a = a - c;\n        c = c - a;\n        b\
    \ = b + c;\n    }\n    if b + c > a {\n        b = b - c;\n        c = c - b;\n\
    \        a = a + c;\n    }\n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpft2ks3oa.rs:27:7\n\
    \   |\n27 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n27 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpft2ks3oa.rs:27:15\n   |\n27 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if a > c {\n      \
    \  swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n\
    \    }\n    \n    if a == b {\n        if a == c {\n            return true;\n\
    \        }\n        return false;\n    }\n    \n    if a == c {\n        if b\
    \ == c {\n            return true;\n        }\n        return false;\n    }\n\
    \    \n    if b == c {\n        if a == b {\n            return true;\n      \
    \  }\n        return false;\n    }\n    \n    if a == b {\n        if b == c {\n\
    \            return true;\n        }\n        return false;\n    }\n    \n   \
    \ if a == c {\n        if c == b {\n            return true;\n        }\n    \
    \    return false;\n    }\n    \n    if b == c {\n        if c == a {\n      \
    \      return true;\n        }\n        return false;\n    }\n    \n    if a ==\
    \ b {\n        if c == a {\n            return true;\n        }\n        return\
    \ false;\n    }\n    \n    if a == c {\n        if c == b {\n            return\
    \ true;\n        }\n        return false;\n    }\n    \n    if b == c {\n    \
    \    if c == a {\n            return true;\n        }\n        return false;\n\
    \    }\n    \n    if a == b {\n        if c == a {\n            return true;\n\
    \        }\n        return false;\n    }\n    \n    if a == c {\n        if c\
    \ == b {\n            return true;\n        }\n        return false;\n    }\n\
    \    \n    if b == c {\n        if c == a {\n            return true;\n      \
    \  }\n        return false;\n    }\n    \n    if a == b {\n        if c == a {\n\
    \            return true;\n        }\n        return false;\n    }\n    \n   \
    \ if a == c {\n        if c == b {\n            return true;\n        }\n    \
    \    return false;\n    }\n    \n    if b == c {\n        if c == a {\n      \
    \      return true;\n        }\n        return false;\n    }\n    \n    if a ==\
    \ b {\n        if c == a {\n            return true;\n        }\n        return\
    \ false;\n    }\n    \n    if a == c {\n        if c == b {\n            return\
    \ true;\n        }\n        return false;\n    }\n    \n    if b == c {\n    \
    \    if c == a {\n            return true;\n        }\n        return false;\n\
    \    }\n    \n    if a == b {\n        if c == a {\n            return true;\n\
    \        }\n        return false;\n    }\n    \n    if a == c {\n        if c\
    \ == b {\n            return true;\n        }\n        return false;\n    }\n\
    \    \n    if b == c {\n        if c == \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpby97fhx3.rs:179:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n162 |     if b == c {\n    |               - this delimiter\
    \ might not be properly closed...\n163 |         if c == \n164 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n179 | }\n    |   ^\n\n\
    error: expected expression, found `}`\n   --> /tmp/tmpby97fhx3.rs:164:1\n    |\n\
    164 | }\n    | ^ expected expression\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpby97fhx3.rs:13:9\n   |\n13 |         swap(&mut\
    \ a, &mut b);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpby97fhx3.rs:16:9\n   |\n16 |         swap(&mut a, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpby97fhx3.rs:19:9\n\
    \   |\n19 |         swap(&mut b, &mut c);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpby97fhx3.rs:8:58\n  |\n8 | fn right_angle_triangle(a: isize, b: isize,\
    \ c: isize) -> bool {\n  |    --------------------                           \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() <= (c - b).abs() * (c - a).abs() + a * b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu3a1cjnr.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzbde5qg8.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3am1vb2l.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n\n   \
    \ let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\n    while\
    \ a > 0 && b > 0 && c > 0 {\n        if a + b > c {\n            a -= c;\n   \
    \         b -= c;\n        } else {\n            b -= a;\n            c -= a;\n\
    \        }\n    }\n\n    a == 0 && b == 0 && c == 0 || a == 0 && b == 0 && c ==\
    \ a || a == 0 && c == 0 && b == a || a == 0 && b == c && c == b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9xo9giri.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * c - b * b;\n    if det < 0 {\n        det = -det;\n        b = -b;\n\
    \    }\n    if det < 0 {\n        det = -det;\n        a = -a;\n    }\n    if\
    \ det < 0 {\n        det = -det;\n        c = -c;\n    }\n    det < 0\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpveb681w_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut sum = a;\n    for i in 1..3 {\n        sum += b;\n        if\
    \ sum > c {\n            break;\n        }\n    }\n    if sum == c {\n       \
    \ return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1nr1jtv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        a = a - 360;\n        b = b - 360;\n    }\n    if a >\
    \ c {\n        a = a - 360;\n        c = c - 360;\n    }\n    if b > c {\n   \
    \     b = b - 360;\n        c = c - 360;\n    }\n    a == b or a == c or b ==\
    \ c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: `or` is not a logical operator\n  --> /tmp/tmpx3ltsfux.rs:24:12\n\
    \   |\n24 |     a == b or a == c or b == c\n   |            ^^ help: use `||`\
    \ to perform logical disjunction\n   |\n   = note: unlike in e.g., python and\
    \ PHP, `&&` and `||` are used for logical operators\n\nerror: `or` is not a logical\
    \ operator\n  --> /tmp/tmpx3ltsfux.rs:24:22\n   |\n24 |     a == b or a == c or\
    \ b == c\n   |                      ^^ help: use `||` to perform logical disjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4avry6_g.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfnt9zmwt.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn0t6jzda.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr7krr6xq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        swap(&mut a, &mut b);\n  \
    \  }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n    if c > a {\n \
    \       swap(&mut c, &mut a);\n    }\n    \n    a == b == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmp2qgfckfu.rs:9:25\n  |\n9 |     let mut a = a < b ? a : b;\n  | \
    \                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        a = a - 360;\n        b = b - 360;\n    }\n    if b >\
    \ c {\n        b = b - 360;\n        c = c - 360;\n    }\n    if a > b {\n   \
    \     a = a - 360;\n        b = b - 360;\n    }\n    if b > c {\n        b = b\
    \ - 360;\n        c = c - 360;\n    }\n    if a > b {\n        a = a - 360;\n\
    \        b = b - 360;\n    }\n    if b > c {\n        b = b - 360;\n        c\
    \ = c - 360;\n    }\n    if a == b {\n        return c == 0;\n    }\n    if a\
    \ == c {\n        return b == 0;\n    }\n    if b == c {\n        return a ==\
    \ 0;\n    }\n    if a == b {\n        return c == 0;\n    }\n    if a == c {\n\
    \        return b == 0;\n    }\n    if b == c {\n        return a == 0;\n    }\n\
    \    if a == b {\n        return c == 0;\n    }\n    if a == c {\n        return\
    \ b == 0;\n    }\n    if b == c {\n        return a == 0;\n    }\n    if a ==\
    \ b {\n        return c == 0;\n    }\n    if a == c {\n        return b == 0;\n\
    \    }\n    if b == c {\n        return a == 0;\n    }\n    if a == b {\n    \
    \    return c == 0;\n    }\n    if a == c {\n        return b == 0;\n    }\n \
    \   if b == c {\n        return a == 0;\n    }\n    if a == b {\n        return\
    \ c == 0;\n    }\n    if a == c {\n        return b == 0;\n    }\n    if b ==\
    \ c {\n        return a == 0;\n    }\n    if a == b {\n        return c == 0;\n\
    \    }\n    if a == c {\n        return b == 0;\n    }\n    if b == c {\n    \
    \    return a == 0;\n    }\n    if a == b {\n        return c == 0;\n    }\n \
    \   if a == c {\n        return b == 0;\n    }\n    if b == c {\n        return\
    \ a == 0;\n    }\n    if a == b {\n        return c == 0;\n    }\n    if a ==\
    \ c {\n        return b == 0;\n    }\n    if b == c {\n        return a == 0;\n\
    \    }\n    if a == b {\n        return c == 0;\n    }\n    if a == c {\n    \
    \    return b == 0;\n    }\n    if b == c {\n        return a == 0;\n    }\n \
    \   if a == b {\n        return c == 0;\n    }\n    if a == c {\n        return\
    \ b == 0;\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9cdv93__.rs:147:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n129 |     if a == c {\n    |               - this delimiter\
    \ might not be properly closed...\n...\n132 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n147 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9cdv93__.rs:8:58\n  |\n8 | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n  |    --------------------                 \
    \                 ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    if a + b > c {\n        a\
    \ = c;\n        b = a + b;\n    }\n    if a + c > b {\n        a = b;\n      \
    \  c = a + c;\n    }\n    if b + c > a {\n        b = c;\n        c = b + c;\n\
    \    }\n    a == b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpr7o7n68m.rs:9:29\n  |\n9 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    a +\
    \ b + c == 2 * a + b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpyn0sccas.rs:10:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n9  |     if a > b {\n10 |         (a, b) = (b, a)\n   |          ^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmpyn0sccas.rs:10:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                                 \
    \  - help: consider making this binding mutable: `mut b`\n9  |     if a > b {\n\
    10 |         (a, b) = (b, a)\n   |             ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpyn0sccas.rs:13:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n13 |         (b, c) = (c, b)\n   |          ^ cannot assign to\
    \ immutable argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n\
    \  --> /tmp/tmpyn0sccas.rs:13:13\n   |\n8  | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                        \
    \     - help: consider making this binding mutable: `mut c`\n...\n13 |       \
    \  (b, c) = (c, b)\n   |             ^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpyn0sccas.rs:16:10\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n16 |         (c, a) = (a, c)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `a`\n  --> /tmp/tmpyn0sccas.rs:16:13\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |                         - help: consider\
    \ making this binding mutable: `mut a`\n...\n16 |         (c, a) = (a, c)\n  \
    \ |             ^ cannot ass"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b - c).abs() == (b + c).abs()\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmpx956nnx3.rs:9:19\n\
    \  |\n9 |     (b - a).abs() == (b - c).abs() == (b + c).abs()\n  |           \
    \        ^^               ^^\n  |\nhelp: split the comparison into two\n  |\n\
    9 |     (b - a).abs() == (b - c).abs() && (b - c).abs() == (b + c).abs()\n  |\
    \                                    ++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpx956nnx3.rs:9:39\n  |\n9 |     (b - a).abs() == (b - c).abs()\
    \ == (b + c).abs()\n  |                                       ^^^^^^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbl2y1fcl.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqecgeiw7.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3tzqq4sl.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if a == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        return false;\n    }\n\
    \    if b == c {\n        return false;\n    }\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if a > c {\n        swap(&mut a, &mut c);\n    }\n \
    \   if b > c {\n        swap(&mut b, &mut c);\n    }\n    if a > b {\n       \
    \ swap(&mut a, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n\
    \    }\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n    if c > b {\n\
    \        swap(&mut c, &mut b);\n    }\n    if c > a {\n        swap(&mut c, &mut\
    \ a);\n    }\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if b >\
    \ c {\n        swap(&mut b, &mut c);\n    }\n    if c > a {\n        swap(&mut\
    \ c, &mut a);\n    }\n    if c > b {\n        swap(&mut c, &mut b);\n    }\n \
    \   if a > b {\n        swap(&mut a, &mut b);\n    }\n    if b > c {\n       \
    \ swap(&mut b, &mut c);\n    }\n    if c > a {\n        swap(&mut c, &mut a);\n\
    \    }\n    if c > b {\n        swap(&mut c, &mut b);\n    }\n    if a > b {\n\
    \        swap(&mut a, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut\
    \ c);\n    }\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n    if c >\
    \ b {\n        swap(&mut c, &mut b);\n    }\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n    }\n \
    \   if c > a {\n        swap(&mut c, &mut a);\n    }\n    if c > b {\n       \
    \ swap(&mut c, &mut b);\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpbcc4e80z.rs:110:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n93  |     if c > b {\n    |              - this delimiter might\
    \ not be properly closed...\n94  |         swap(&mut c, &mut b);\n95  | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n110 | }\n\
    \    |   ^\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpbcc4e80z.rs:25:9\n\
    \   |\n25 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpbcc4e80z.rs:28:9\n   |\n28 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpbcc4e80z.rs:31:9\n   |\n31 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpbcc4e80z.rs:34:9\n\
    \   |\n34 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpbcc4e80z.rs:37:9\n   |\n37 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpbcc4e80z.rs:40:9\n   |\n40 |         swap(&mut c, &mut a);\n  \
    \ |         ^^^^ not found in t"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    if a + b > c {\n   \
    \     a = c;\n        b = a + b;\n    }\n    \n    if a + c > b {\n        a =\
    \ b;\n        c = a + c;\n    }\n    \n    if b + c > a {\n        b = c;\n  \
    \      c = b + c;\n    }\n    \n    a == b + c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpxg_nsfor.rs:9:29\n  |\n9 |     let mut a = a < b + c ? a : b + c;\n\
    \  |                             ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpavu7fdkj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2bcim_be.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4s4zww8w.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp41alvcby.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
