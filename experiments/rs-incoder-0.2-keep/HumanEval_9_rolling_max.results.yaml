name: HumanEval_9_rolling_max
language: rust
results:
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjuf9rn8.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnjuf9rn8.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = -1;\n        }\n        if number == max_number {\n     \
    \       max_index += 1;\n        }\n        if max_index >= 0 {\n            max_numbers.push(max_number);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3sam8fq.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc3sam8fq.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0277]: can't compare `&isize` with\
    \ `isize`\n  --> /tmp/tmpc3sam8fq.rs:14:19\n   |\n14 |         if number == max_number\
    \ {\n   |                   ^^ no implementation for `&isize == isize`\n   |\n\
    \   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_max = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n            max_so_far_max = number;\n\
    \        }\n        if number == max_so_far {\n            max_so_far_max = number;\n\
    \        }\n    }\n    let mut max_so_far_max_index = numbers.len() - 1;\n   \
    \ for number in numbers.iter().rev() {\n        if number > max_so_far {\n   \
    \         max_so_far = number;\n            max_so_far_index = numbers.len() -\
    \ 1;\n            max_so_far_max = number;\n        }\n        if number == max_so_far\
    \ {\n            max_so_far_max = number;\n        }\n        if number > max_so_far_max\
    \ {\n            max_so_far_max = number;\n            max_so_far_max_index =\
    \ numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_max_index = numbers.len()\
    \ - 1;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n            max_so_far_max = number;\n        }\n        if number ==\
    \ max_so_far {\n            max_so_far_max = number;\n        }\n        if number\
    \ > max_so_far_max {\n            max_so_far_max = number;\n            max_so_far_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_max_index = numbers.len()\
    \ - 1;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n            max_so_far_max = number;\n        }\n        if number ==\
    \ max_so_far {\n            max_so_far_max = number;\n        }\n        if number\
    \ > max_so_far_max {\n            max_so_far_max = number;\n            max_so_far_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_max_index = numbers.len()\
    \ - 1;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n            max_so_far_max = number;\n        }\n        if number ==\
    \ max_so_far {\n            max_so_far_max = number;\n        }\n        if number\
    \ > max_so_far_max {\n            max_so_far_max = number;\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp21suogum.rs:84:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n65 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n...\n74 |         if number > max_so_far_max {\n\
    \   |                                    - this delimiter might not be properly\
    \ closed...\n75 |             max_so_far_max = number;\n76 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n84 | }\n   |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp21suogum.rs:10:21\n   |\n10 |         if number\
    \ > max_so_far {\n   |                     ^^^^^^^^^^\n   |                  \
    \   |\n   |                     expected `&isize`, found `isize`\n   |       \
    \              help: consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp21suogum.rs:11:26\n   |\n6  |     let mut max_so_far =\
    \ numbers[0];\n   |                          ---------- expected due to this value\n\
    ...\n11 |             max_so_far = number;\n   |                          ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |             max_so_far = *number;\n   |                          +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp21suogum.rs:13:30\n   |\n8  |\
    \     let mut max_so_far_max = numbers[0];\n   |                             \
    \ ---------- expected due to this value\n...\n13 |             max_so_far_max\
    \ = number;\n   |                              ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     max_so_far_max = *number;\n   |                              +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp21suogum.rs:16:30\n   |\n8  |     let mut max_so_far_max\
    \ = numbers[0];\n   |                              ---------- expected due to\
    \ this value\n...\n16 |             max_so_far_max = number;\n   |           \
    \                   ^^^^^^ expected `isize`, found `&isiz"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&number| number == max_number).unwrap();\n\
    \        }\n    }\n    max_numbers.insert(0, max_number);\n    max_numbers.insert(0,\
    \ max_index);\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf02t2t9l.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf02t2t9l.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpf02t2t9l.rs:8:25\n  |\n8 |     let mut max_index\
    \ = -1;\n  |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n \
    \           &f32\n            &f64\n            &i128\n            &i16\n    \
    \        &i32\n            &i64\n            &i8\n            &isize\n       \
    \   and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf02t2t9l.rs:16:27\n\
    \   |\n16 |     max_numbers.insert(0, max_index);\n   |                      \
    \     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n16\
    \ |     max_numbers.insert(0, max_index.try_into().unwrap());\n   |          \
    \                          ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86idaml2.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp86idaml2.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index = n;\n            max_so_far_rolling\
    \ = max_so_far;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n\
    \        if n == max_so_far_rolling {\n            max_so_far_rolling_rolling_index\
    \ = n;\n            max_so_far_rolling_rolling = max_so_far_rolling;\n       \
    \ }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index = 0;\n    let\
    \ mut max_so_far_rolling_rolling_rolling = 0;\n    for n in numbers {\n      \
    \  if n == max_so_far_rolling_rolling {\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n            max_so_far_rolling_rolling_rolling = max_so_far_rolling_rolling;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n\
    \ in numbers {\n        if n == max_so_far_rolling_rolling_rolling {\n       \
    \     max_so_far_rolling_rolling_rolling_rolling_index = n;\n            max_so_far_rolling_rolling_rolling_rolling\
    \ = max_so_far_rolling_rolling_rolling;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n\
    \ in numbers {\n        if n == max_so_far_rolling_rolling_rolling {\n       \
    \     max_so_far_rolling_rolling_rolling_rolling_index = n;\n            max_so_far_rolling_rolling_rolling_rolling\
    \ = max_so_far_rolling_rolling_rolling_rolling;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling\
    \ = 0;\n    for n in numbers {\n        if n == max_so_f\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp09pgqhx6.rs:66:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n57 |         if n == max_so_f\n58 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n66 | }\n   |   ^\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmp09pgqhx6.rs:58:1\n   |\n57 |         if n == max_so_f\n\
    \   |         -- this `if` expression has a condition, but no block\n58 | }\n\
    \   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp09pgqhx6.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_pos\
    \ = 0;\n    let mut max_so_far_neg = 0;\n    for n in numbers {\n        if n\
    \ > max_so_far {\n            max_so_far_pos = n;\n            max_so_far = n;\n\
    \        } else if n < max_so_far {\n            max_so_far_neg = n;\n       \
    \     max_so_far = n;\n        }\n    }\n    vec![max_so_far_pos, max_so_far_neg]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp7xwxvmcn.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.len();\n  \
    \      }\n    }\n    let mut numbers = Vec::new();\n    for i in 0..max_index\
    \ {\n        numbers.push(numbers[max_index - i]);\n    }\n    numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmphmji8cmk.rs:11:25\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n11  |             max_index = numbers.len();\n    |   \
    \                      ^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max = max_so_far;\n \
    \   for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_max_index = numbers.len() - 1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_index = numbers.len() - 1;\n \
    \       }\n    }\n    let mut max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n    for number in numbers.iter().rev() {\n        if number\
    \ > max_so_far_rolling_max {\n            max_so_far_rolling_max = number;\n \
    \           max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n   \
    \         max_so_far_rolling_max_rolling_max_index = numbers.len() - 1;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n            max_so_far_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n    for number in numbers.iter().rev() {\n        if number\
    \ > max_so_far_rolling_max {\n            max_so_far_rolling_max = number;\n \
    \           max_so_far_rolling_max_roll\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpg4p_bqx3.rs:64:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n52 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n53 |         if number > max_so_far_rolling_max\
    \ {\n   |                                            - this delimiter might not\
    \ be properly closed...\n...\n56 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n64 | }\n   |   ^\n\nerror[E0425]: cannot find value\
    \ `max_so_far_rolling_max_roll` in this scope\n  --> /tmp/tmpg4p_bqx3.rs:55:13\n\
    \   |\n55 |             max_so_far_rolling_max_roll\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_max`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpg4p_bqx3.rs:9:21\n  |\n9 |    \
    \     if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |      \
    \               |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg4p_bqx3.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg4p_bqx3.rs:16:21\n\
    \   |\n16 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg4p_bqx3.rs:17:38\n   |\n14 |     let mut max_so_far_rolling_max\
    \ = max_so_far;\n   |                                 "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = numbers.iter().position(|&x| x ==\
    \ n).unwrap();\n        }\n    }\n    numbers[max_index..].iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmphzsda7b1.rs:11:25\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n11  |             max_index = numbers.iter().position(|&x| x == n).unwrap();\n\
    \    |                         ^^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for n in &numbers {\n    |           \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp0sjjmu7k.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        if max_index != -1 {\n            max_numbers[max_index]\
    \ = number;\n        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp9asy3x30.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmp9asy3x30.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror[E0277]: the trait bound `usize: Neg` is not\
    \ satisfied\n  --> /tmp/tmp9asy3x30.rs:17:25\n   |\n17 |         if max_index\
    \ != -1 {\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n            max_so_far_rolling_max\
    \ = number;\n        }\n        if number == max_so_far {\n            max_so_far_rolling_max\
    \ = max_so_far_rolling_max * max_so_far_index + number;\n        }\n    }\n  \
    \  max_so_far_rolling_max.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptajbvyn9.rs:10:21\n   |\n\
    10 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptajbvyn9.rs:11:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptajbvyn9.rs:13:38\n\
    \   |\n8  |     let mut max_so_far_rolling_max = 0;\n   |                    \
    \                  - expected due to this value\n...\n13 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max_so_far_rolling_max = *number;\n   |                          \
    \            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmptajbvyn9.rs:15:19\n\
    \   |\n15 |         if number == max_so_far {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptajbvyn9.rs:16:82\n   |\n16 |             max_so_far_rolling_max = max_so_far_rolling_max\
    \ * max_so_far_index + number;\n   |                                         \
    \                                         ^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `&isize` to `usize`\n  --> /tmp/tmptajbvyn9.rs:16:80\n\
    \   |"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 1..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 2..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 3..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 4..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 5..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 6..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 7..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 8..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 9..numbers.len() {\n   \
    \     if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    let mut max_element = numbers[max_index];\n\
    \    let mut max_index = max_index;\n    for index in 10\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpjmv4qss5.rs:89:1\n   |\n\
    89 | }\n   | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpwmfqnku4.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpl5oe_6w6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpo54nef4s.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp26170vcj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n        }\n        if number\
    \ > max_so_far_so_far {\n            max_so_far_so_far = number;\n        }\n\
    \    }\n    max_so_far_so_far.iter().cloned().collect()\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi0kc1ujs.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi0kc1ujs.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi0kc1ujs.rs:12:21\n\
    \   |\n12 |         if number > max_so_far_so_far {\n   |                    \
    \ ^^^^^^^^^^^^^^^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&max_so_far_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi0kc1ujs.rs:13:33\n\
    \   |\n7  |     let mut max_so_far_so_far = numbers[0];\n   |                \
    \                 ---------- expected due to this value\n...\n13 |           \
    \  max_so_far_so_far = number;\n   |                                 ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             max_so_far_so_far = *number;\n   |                          \
    \       +\n\nerror[E0599]: no method named `iter` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpi0kc1ujs.rs:16:23\n   |\n16 |     max_so_far_so_far.iter().cloned().collect()\n\
    \   |                       ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in numbers.iter().rev()\
    \ {\n        if max_number < i {\n            max_number = i;\n            max_index\
    \ = i;\n        }\n    }\n    for i in numbers.iter().rev() {\n        if i ==\
    \ max_number {\n            max_numbers.push(max_number);\n            max_numbers.push(max_index);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfr91d6ir.rs:10:25\n   |\n\
    10 |         if max_number < i {\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \       if max_number < *i {\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfr91d6ir.rs:11:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n11 |             max_number = i;\n   |                         \
    \ ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |             max_number = *i;\n   |                          +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfr91d6ir.rs:12:25\n   |\n8  |  \
    \   let mut max_index = -1;\n   |                         -- expected due to this\
    \ value\n...\n12 |             max_index = i;\n   |                         ^\
    \ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n12 |             max_index = *i;\n   |                         +\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpfr91d6ir.rs:16:14\n   |\n\
    16 |         if i == max_number {\n   |              ^^ no implementation for\
    \ `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &number in numbers {\n \
    \       if number > max_number {\n            max_number = number;\n         \
    \   max_index = -1;\n        }\n        if number == max_number {\n          \
    \  max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n\
    \    max_numbers.extend_from_slice(&max_numbers[max_index..]);\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzy4gawlc.rs:9:9\n  |\n9 |\
    \     for &number in numbers {\n  |         ^^^^^^^    ------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `number`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzy4gawlc.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpzy4gawlc.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers.pop().unwrap() {\n    \
    \            max_numbers.push(number);\n            }\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmppadaa4ow.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n > max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_index = 0;\n\
    \    let mut max_so_far_rolling_rolling = 0;\n    for n in numbers {\n       \
    \ if n > max_so_far {\n            max_so_far_rolling_rolling_index += 1;\n  \
    \          max_so_far_rolling_rolling += n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling = 0;\n    for n in numbers\
    \ {\n        if n > max_so_far {\n            max_so_far_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling += n;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    let\
    \ mut max_so_far_rolling_rolling_rolling_rolling = 0;\n    for n in numbers {\n\
    \        if n > max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling += n;\n      \
    \  }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_rolling += n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_rolling_rolling_rolling_rolling_index\
    \ += 1;\n            max_so_far_rolling_rolling_rolling_rolling_rolling += \n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpck5hlvk3.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n57 | \
    \        if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n68 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmpck5hlvk3.rs:60:1\n   |\n60 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpck5hlvk3.rs:56:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n56 | /     for n in numbers {\n57 | |         if n > max_so_far {\n58 | |\
    \             max_so_far_rolling_rolling_rolling_rolling_rolling_index += 1;\n\
    59 | |             max_so_far_rolling_rolling_rolling_rolling_rolling += \n...\
    \  |\n67 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n68 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwissj8i0.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpwissj8i0.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for n in numbers {\n        if n == max_so_far_index {\n\
    \            max_so_far_rolling_max.push(max_so_far);\n        } else {\n    \
    \        max_so_far_rolling_max.push(max_so_far_index);\n        }\n    }\n  \
    \  max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpfdgwf7kj.rs:17:36\n   |\n17 |             max_so_far_rolling_max.push(max_so_far);\n\
    \   |                                    ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current\
    \ scope\n  --> /tmp/tmpfdgwf7kj.rs:19:36\n   |\n19 |             max_so_far_rolling_max.push(max_so_far_index);\n\
    \   |                                    ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfdgwf7kj.rs:22:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_numbers.push(max_number);\n\
    \            max_numbers.push(numbers[i]);\n        } else {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers.reverse();\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp6g9xpb1f.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for num in numbers.iter().rev() {\n        if num > max_so_far {\n\
    \            max_so_far = num;\n            max_so_far_index = numbers.len() -\
    \ 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmy1rb28x.rs:9:18\n  |\n9 |\
    \         if num > max_so_far {\n  |                  ^^^^^^^^^^\n  |        \
    \          |\n  |                  expected `&isize`, found `isize`\n  |     \
    \             help: consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmy1rb28x.rs:10:26\n   |\n6  |     let mut max_so_far =\
    \ numbers[0];\n   |                          ---------- expected due to this value\n\
    ...\n10 |             max_so_far = num;\n   |                          ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             max_so_far = *num;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmy1rb28x.rs:14:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     numbers[max_so_far_index]\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = numbers.len();\n \
    \       }\n    }\n    let mut max_elements = Vec::new();\n    for i in 0..max_index\
    \ {\n        max_elements.push(numbers[i]);\n    }\n    max_elements\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmp8x45syyi.rs:11:25\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n11  |             max_index = numbers.len();\n    |   \
    \                      ^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(numbers[i]);\n        }\n    }\n    if\
    \ max_index != -1 {\n        result.push(max_value);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplrj46dq6.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmplrj46dq6.rs:20:21\n   |\n20 |     if max_index\
    \ != -1 {\n   |                     ^^\n   |                     |\n   |     \
    \                cannot apply unary operator `-`\n   |                     help:\
    \ you may have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note:\
    \ unsigned values cannot be negated\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpxn_l8z3o.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut numbers = Vec::new();\n    for i in 0..max_index {\n     \
    \   numbers.push(i);\n    }\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmikedthq.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = number;\n   |          \
    \               ^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmikedthq.rs:18:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     numbers\n   |     ^^^^^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpcmtkrjlq.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \        }\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n        }\n    }\n    numbers[max_so_far_index..].iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmp6a1zvh8b.rs:12:32\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n12  |             max_so_far_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n    |                                ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\n    = note: borrow occurs due to\
    \ deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for number in\
    \ &numbers {\n    |                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max:\
    \ Vec<isize> = vec![max_so_far];\n    for n in numbers {\n        if n == max_so_far_index\
    \ {\n            max_so_far_rolling_max.push(max_so_far);\n        } else {\n\
    \            max_so_far_rolling_max.push(max_so_far_index);\n        }\n    }\n\
    \    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp5a28zkwv.rs:15:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n15  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_index = 0;\n    for number in numbers\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len();\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_index = 0;\n    for number in numbers\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len();\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_index = 0;\n    for number in numbers\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len();\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_index = 0;\n    for number in numbers\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len();\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_index = 0;\n    for number in numbers\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len();\n        }\n    }\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_f\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmparq6jqcl.rs:84:21\n   |\n\
    84 |     let mut max_so_f\n   |                     ^ help: add `;` here\n85 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmparq6jqcl.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut max_numbers = Vec::new();\n    for i in 0..max_index {\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.reverse();\n    max_numbers\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpye38n8vy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().rev().position(|x|\
    \ x == number).unwrap();\n            max_value = numbers[max_index];\n      \
    \  }\n        max_numbers.push(number);\n    }\n    max_numbers.reverse();\n \
    \   max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphvvhhu3b.rs:11:21\n   |\n\
    11 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphvvhhu3b.rs:12:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n12 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n12 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmphvvhhu3b.rs:8:25\n  |\n8 |     let mut max_index\
    \ = -1;\n  |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n \
    \           &f32\n            &f64\n            &i128\n            &i16\n    \
    \        &i32\n            &i64\n            &i8\n            &isize\n       \
    \   and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphvvhhu3b.rs:19:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n19 |     max_numbers\n   |     ^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers.insert(0, max_index);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmperhohc0k.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = number;\n   |          \
    \               ^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmperhohc0k.rs:21:27\n   |\n21 |     max_numbers.insert(0,\
    \ max_index);\n   |                           ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = numbers.iter().position(|&x| x ==\
    \ n).unwrap();\n        }\n    }\n    let mut numbers = Vec::new();\n    for i\
    \ in 0..(max_index - numbers.len() + 1) {\n        numbers.push(numbers[max_index\
    \ - i]);\n    }\n    numbers.push(max_number);\n    numbers\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpp5zuiw8p.rs:11:25\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n11  |             max_index = numbers.iter().position(|&x| x == n).unwrap();\n\
    \    |                         ^^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for n in &numbers {\n    |           \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far_so_far = max_so_far;\n            max_so_far = n;\n        }\n\
    \        max_so_far_so_far = max_so_far_so_far + n;\n    }\n    max_so_far_so_far\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjgmguq2v.rs:15:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n15 |     max_so_far_so_far\n   |     ^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &x in numbers {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = result.len();\n     \
    \   }\n        result.push(x);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp10u504r5.rs:9:9\n  |\n9 |\
    \     for &x in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `x`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp10u504r5.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp10u504r5.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_numbers = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] != max_number {\n    \
    \        max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.sort_unstable();\n\
    \    max_numbers.reverse();\n    max_numbers\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "warning: variable `max_index` is assigned to, but never used\n --> /tmp/tmpp3huxcqh.rs:7:13\n\
    \  |\n7 |     let mut max_index: usize = 0;\n  |             ^^^^^^^^^\n  |\n\
    \  = note: `#[warn(unused_variables)]` on by default\n  = note: consider using\
    \ `_max_index` instead\n\nwarning: value assigned to `max_index` is never read\n\
    \  --> /tmp/tmpp3huxcqh.rs:11:13\n   |\n11 |             max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n   |             ^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ borrow of moved value: `numbers`\n   --> /tmp/tmpp3huxcqh.rs:11:25\n    |\n\
    5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |             \
    \   ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n8   |     for number in numbers {\n    |  \
    \                 ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n11  |             max_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \    |                         ^^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpkq47dpv3.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = numbers.iter().position(|&n| n == max).unwrap();\n        }\n\
    \    }\n    numbers.iter().skip(max_index).collect()\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps8o44rp8.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmps8o44rp8.rs:14:36\n     |\n14   |     numbers.iter().skip(max_index).collect()\n\
    \     |                                    ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    numbers[max_pos..].iter().cloned().collect()\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphgfonqf4.rs:6:25\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    let mut max_so_far = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    let mut max_so_far = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number \n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpeud86i5e.rs:82:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n72 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - this delimiter might not be properly closed...\n73 |         if number\
    \ \n74 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    82 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpeud86i5e.rs:74:1\n\
    \   |\n73 |         if number \n   |         -- this `if` expression has a condition,\
    \ but no block\n74 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpeud86i5e.rs:9:21\n  |\n9 |         if number > max_so_far {\n  |\
    \                     ^^^^^^^^^^\n  |                     |\n  |             \
    \        expected `&isize`, found `isize`\n  |                     help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeud86i5e.rs:10:26\n\
    \   |\n6  |     let mut max_so_far = numbers[0];\n   |                       \
    \   ---------- expected due to this value\n...\n10 |             max_so_far =\
    \ number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeud86i5e.rs:17:21\n   |\n17 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeud86i5e.rs:18:26\n   |\n15 |     let mut max_so_far = numbers[0];\n\
    \   |                          ---------- expected due to this value\n...\n18\
    \ |             max_so_far = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    18 |             max_so_far = *number;\n   |     "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for index in 0..numbers.len() {\n        if\
    \ numbers[index] > max_value {\n            max_value = numbers[index];\n    \
    \        max_index = index;\n        }\n    }\n    result.push(max_value);\n \
    \   let mut max_index = max_index;\n    for index in 1..numbers.len() {\n    \
    \    if numbers[index] > max_value {\n            max_value = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    result.push(max_value);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp23p7pw2j.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n    }\n    numbers.iter().cloned().skip(max_so_far_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmprexgzvjr.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprexgzvjr.rs:8:9\n  |\n8 |     for &n in numbers\
    \ {\n  |         ^^    ------- this expression has type `Option<isize>`\n  | \
    \        |\n  |         expected `isize`, found reference\n  |         help: you\
    \ can probably remove the explicit borrow: `n`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = -1;\n        }\n        if n == max {\n            max_index\
    \ += 1;\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..max_index\
    \ {\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuzdf9rhx.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n > max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    max_so_far_rolling_index += 1;\n    max_so_far_rolling\
    \ += max_so_far;\n    let mut max_so_far_rolling_max = max_so_far_rolling;\n \
    \   for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_max\
    \ += n;\n        }\n    }\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_far;\n    max_so_far_rolling_max += max_so_far;\n    max_so_far_rolling_max\
    \ += max_so_f\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `max_so_f` in this scope\n  --> /tmp/tmpxjm1tf9n.rs:53:31\n\
    \   |\n53 |     max_so_far_rolling_max += max_so_f\n   |                     \
    \          ^^^^^^^^ help: a local variable with a similar name exists: `max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxjm1tf9n.rs:53:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n53 |     max_so_far_rolling_max += max_so_f\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw9za6mlj.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw9za6mlj.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw9za6mlj.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw9za6mlj.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n    }\n    numbers[max_so_far_index..].to_vec()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy3mwua72.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &number in numbers {\n \
    \       if number > max_number {\n            max_number = number;\n         \
    \   max_index = -1;\n        }\n        if number == max_number {\n          \
    \  max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n\
    \    max_numbers.push(max_number);\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6awuvxol.rs:9:9\n  |\n9 |\
    \     for &number in numbers {\n  |         ^^^^^^^    ------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `number`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp6awuvxol.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmp6awuvxol.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = i;\n        }\n  \
    \      i += 1;\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp0anumudi.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this\
    \ scope\n  --> /tmp/tmp0anumudi.rs:13:9\n   |\n13 |         i += 1;\n   |    \
    \     ^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0anumudi.rs:15:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n15 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpss8dwvpp.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_rolling_index = n;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_index2 = max_so_far_rolling_index;\n    for n in numbers\
    \ {\n        if n > max_so_far {\n            max_so_far_rolling_index2 = n;\n\
    \        }\n    }\n    let mut max_so_far_rolling_index3 = max_so_far_rolling_index2;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index3\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index4 = max_so_far_rolling_index3;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index4\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index5 = max_so_far_rolling_index4;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index5\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index6 = max_so_far_rolling_index5;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index6\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index7 = max_so_far_rolling_index6;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index7\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index8 = max_so_far_rolling_index7;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index8\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index9 = max_so_far_rolling_index8;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index9\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_index10 = max_so_far_rolling_index9;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4v1hnaaf.rs:81:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n70 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n71 | \
    \        if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n72 |             max_so_far_rolling\n73 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n81 | }\n\
    \   |   ^\n\nerror[E0425]: cannot find value `max_so_far_rolling` in this scope\n\
    \  --> /tmp/tmp4v1hnaaf.rs:72:13\n   |\n72 |             max_so_far_rolling\n\
    \   |             ^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `max_so_far_rolling_index`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4v1hnaaf.rs:70:5\n   |\n5  |   fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n70 | /     for n in numbers {\n71\
    \ | |         if n > max_so_far {\n72 | |             max_so_far_rolling\n73 |\
    \ | }\n...  |\n80 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3,\
    \ 3, 3, 100, 100]);\n81 | | }\n   | |__^ expected struct `Vec`, found `()`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for n in numbers {\n        if n > max {\n            max = n;\n         \
    \   max_idx = 1;\n        } else {\n            max_idx += 1;\n        }\n   \
    \ }\n    vec![max]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8sf07x2_.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpiilns523.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n57 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n58 | \
    \        if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n59 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    60 | }\n   | - ...as it matches this but it has different indentation\n...\n68\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\
    \ in this scope\n  --> /tmp/tmpiilns523.rs:47:13\n   |\n47 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\
    \ in this scope\n  --> /tmp/tmpiilns523.rs:53:13\n   |\n53 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling`\
    \ in this scope\n  --> /tmp/tmpiilns523.rs:59:13\n   |\n59 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_ind"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = numbers.iter().position(|&n| n == max).unwrap();\n        }\n\
    \    }\n    numbers[max_index..].to_vec()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3c36oacb.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp3c36oacb.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if i == max_index {\n            result.push(max_value);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvt0v9tmc.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvt0v9tmc.rs:16:17\n   |\n16 |         if i ==\
    \ max_index {\n   |                 ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if i == max_index.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvt0v9tmc.rs:19:25\n   |\n19 |             result.push(i);\n\
    \   |                         ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |             result.push(i.try_into().unwrap());\n   |      \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut max_index2 = 0;\n    let mut max_index3\
    \ = 0;\n    let mut max_index4 = 0;\n    let mut max_index5 = 0;\n    let mut\
    \ max_index6 = 0;\n    let mut max_index7 = 0;\n    let mut max_index8 = 0;\n\
    \    let mut max_index9 = 0;\n    let mut max_index10 = 0;\n    let mut max_index11\
    \ = 0;\n    let mut max_index12 = 0;\n    let mut max_index13 = 0;\n    let mut\
    \ max_index14 = 0;\n    let mut max_index15 = 0;\n    let mut max_index16 = 0;\n\
    \    let mut max_index17 = 0;\n    let mut max_index18 = 0;\n    let mut max_index19\
    \ = 0;\n    let mut max_index20 = 0;\n    let mut max_index21 = 0;\n    let mut\
    \ max_index22 = 0;\n    let mut max_index23 = 0;\n    let mut max_index24 = 0;\n\
    \    let mut max_index25 = 0;\n    let mut max_index26 = 0;\n    let mut max_index27\
    \ = 0;\n    let mut max_index28 = 0;\n    let mut max_index29 = 0;\n    let mut\
    \ max_index30 = 0;\n    let mut max_index31 = 0;\n    let mut max_index32 = 0;\n\
    \    let mut max_index33 = 0;\n    let mut max_index34 = 0;\n    let mut max_index35\
    \ = 0;\n    let mut max_index36 = 0;\n    let mut max_index37 = 0;\n    let mut\
    \ max_index38 = 0;\n    let mut max_index39 = 0;\n    let mut max_index40 = 0;\n\
    \    let mut max_index41 = 0;\n    let mut max_index42 = 0;\n    let mut max_index43\
    \ = 0;\n    let mut max_index44 = 0;\n    let mut max_index45 = 0;\n    let mut\
    \ max_index46 = 0;\n    let mut max_index47 = 0;\n    let mut max_index48 = 0;\n\
    \    let mut max_index49 = 0;\n    let mut max_index50 = 0;\n    let mut max_index51\
    \ = 0;\n    let mut max_index52 = 0;\n    let mut max_index53 = 0;\n    let mut\
    \ max_index54 = 0;\n    let mut max_index55 = 0;\n    let mut max_index56 = 0;\n\
    \    let mut max_index57 = 0;\n    let mut max_index58 = 0;\n    let mut max_index59\
    \ = 0;\n    let mut max_index60 = 0;\n    let mut max_index61 = 0;\n    let mut\
    \ max_index62 = 0;\n    let mut max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6n10ezmr.rs:70:17\n   |\n\
    70 |     let mut max_\n   |                 ^ help: add `;` here\n71 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6n10ezmr.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = 0;\n        }\n        if n == max {\n            max_index\
    \ += 1;\n        }\n    }\n    numbers.iter().cloned().skip(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspunll8w.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        let mut index = i;\n        while index\
    \ > max_index {\n            result.push(numbers[index]);\n            index -=\
    \ 1;\n        }\n        result.push(numbers[index]);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnz9s1uyw.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnz9s1uyw.rs:17:23\n   |\n17 |         while\
    \ index > max_index {\n   |                       ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |         while index > max_index.try_into().unwrap()\
    \ {\n   |                                ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in numbers {\n        if i == max_index {\n            result.push(max_value);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfmyhy7cp.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_index = -1;\n        }\n        if n == max_value {\n\
    \            max_index += 1;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..max_index {\n        result.push(max_value);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4sr49u9e.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut current_index = 0;\n    for number in\
    \ numbers {\n        if number > max_value {\n            max_value = number;\n\
    \            max_index = current_index;\n        }\n        current_index += 1;\n\
    \    }\n    result.push(max_value);\n    max_index += 1;\n    for number in numbers\
    \ {\n        if number > max_value {\n            result.push(number);\n     \
    \       max_value = number;\n            max_index = current_index;\n        }\n\
    \        current_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "warning: variable `max_index` is assigned to, but never used\n --> /tmp/tmptwiwjapn.rs:8:13\n\
    \  |\n8 |     let mut max_index = -1;\n  |             ^^^^^^^^^\n  |\n  = note:\
    \ `#[warn(unused_variables)]` on by default\n  = note: consider using `_max_index`\
    \ instead\n\nwarning: value assigned to `max_index` is never read\n  --> /tmp/tmptwiwjapn.rs:18:5\n\
    \   |\n18 |     max_index += 1;\n   |     ^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `max_index` is never read\n  --> /tmp/tmptwiwjapn.rs:23:13\n\
    \   |\n23 |             max_index = current_index;\n   |             ^^^^^^^^^\n\
    \   |\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `numbers`\n   --> /tmp/tmptwiwjapn.rs:19:19\n    |\n5  \
    \ | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |               \
    \ ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n10  |     for number in numbers {\n    |  \
    \                 ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     for number in numbers {\n    |                   ^^^^^^^ value\
    \ used here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n10  |   \
    \  for number in &numbers {\n    |                   +\n\nerror: aborting due\
    \ to previous error; 3 warnings emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp4698hl7n.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmp4698hl7n.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpqbvkjqp4.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    let mut max_so_far = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    let mut max_so_far = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number \n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpa9tnx9j9.rs:82:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n72 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - this delimiter might not be properly closed...\n73 |         if number\
    \ \n74 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    82 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpa9tnx9j9.rs:74:1\n\
    \   |\n73 |         if number \n   |         -- this `if` expression has a condition,\
    \ but no block\n74 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa9tnx9j9.rs:9:21\n  |\n9 |         if number > max_so_far {\n  |\
    \                     ^^^^^^^^^^\n  |                     |\n  |             \
    \        expected `&isize`, found `isize`\n  |                     help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa9tnx9j9.rs:10:26\n\
    \   |\n6  |     let mut max_so_far = numbers[0];\n   |                       \
    \   ---------- expected due to this value\n...\n10 |             max_so_far =\
    \ number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa9tnx9j9.rs:17:21\n   |\n17 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpa9tnx9j9.rs:18:26\n   |\n15 |     let mut max_so_far = numbers[0];\n\
    \   |                          ---------- expected due to this value\n...\n18\
    \ |             max_so_far = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    18 |             max_so_far = *number;\n   |     "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter() {\n        if number > max_number {\n      \
    \      max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmputzokzsj.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmputzokzsj.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmputzokzsj.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmputzokzsj.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpc6ui7vo9.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpc6ui7vo9.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.iter().rev().position(|&x| x == number).unwrap();\n        }\n   \
    \ }\n    let mut max_so_far_rolling_max_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_rolling_max = numbers.iter().rev().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.iter().rev().position(|&x| x == number).unwrap();\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.iter().rev().position(|&x| x == number).unwrap();\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = number;\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = numbers.iter().rev().position(|&x| x == number).unwrap();\n        }\n   \
    \ }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpefrip8du.rs:59:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n48 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n49 |         if number > max_so_far_rolling_max\
    \ {\n   |                                            - this delimiter might not\
    \ be properly closed...\n50 |             max_so_far_rolling_max = number;\n51\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n59\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpefrip8du.rs:10:21\n\
    \   |\n10 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpefrip8du.rs:11:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpefrip8du.rs:12:72\n\
    \   |\n12 |             max_so_far_index = numbers.iter().rev().position(|&x|\
    \ x == number).unwrap();\n   |                                               \
    \                         ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n12 |             max_so_far_index =\
    \ numbers.iter().rev().position(|&x| x == *number).unwrap();\n   |           \
    \                                                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpefrip8du.rs:13:38\n   |\n8  |     let mut max_so_far_rolling_max\
    \ = 0;\n   |                                      - expected due to this value\n\
    ...\n13 |             max_so_far_r"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_index_rolling_index = 0;\n    let mut max_so_far_rolling_index_rolling_max\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_index\
    \ = max_so_far_index;\n            max_so_far_rolling_index_rolling_index = max_so_far_rolling_index;\n\
    \            max_so_far_rolling_index_rolling_max = max_so_far;\n        }\n \
    \       if n == max_so_far {\n            max_so_far_rolling_index_rolling_index\
    \ += 1;\n        }\n        if n == max_so_far_rolling_index {\n            max_so_far_rolling_index_rolling_max\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_max_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far_rolling_index_rolling_max\
    \ {\n            max_so_far_rolling_index_rolling_max_rolling_index = max_so_far_rolling_index_rolling_index;\n\
    \        }\n        if n == max_so_far_rolling_index_rolling_index {\n       \
    \     max_so_far_rolling_index_rolling_max_rolling_index += 1;\n        }\n  \
    \  }\n    let mut max_so_far_rolling_index_rolling_max_rolling_max = 0;\n    for\
    \ n in numbers {\n        if n > max_so_far_rolling_index_rolling_max {\n    \
    \        max_so_far_rolling_index_rolling_max_rolling_max = max_so_far_rolling_index_rolling_max;\n\
    \        }\n        if n == max_so_far_rolling_index_rolling_max {\n         \
    \   max_so_far_rolling_index_rolling_max_rolling_max += 1;\n        }\n    }\n\
    \    let mut max_so_far_rolling_index_rolling_max_rolling_max_rolling_index =\
    \ 0;\n    for n in numbers {\n        if n > max_so_far_rolling_index_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_index_rolling_max_rolling_max_rolling_index\
    \ = max_so_far_rolling_index_rolling_max_rolling_index;\n        }\n        if\
    \ n == max_so_far_rolling_index_rolling_max_rolling_index {\n            max_so_far_rolling_index_rolling_max_rolling_max_roll\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpw3ey7inc.rs:63:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n49 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n...\n\
    53 |         if n == max_so_far_rolling_index_rolling_max_rolling_index {\n  \
    \ |                                                                    - this\
    \ delimiter might not be properly closed...\n54 |             max_so_far_rolling_index_rolling_max_rolling_max_roll\n\
    55 | }\n   | - ...as it matches this but it has different indentation\n...\n63\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_max_rolling_max_roll`\
    \ in this scope\n  --> /tmp/tmpw3ey7inc.rs:54:13\n   |\n54 |             max_so_far_rolling_index_rolling_max_rolling_max_roll\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `max_so_far_rolling_index_rolling_max_rolling_max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw3ey7inc.rs:49:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n49 | /     for n in numbers {\n50 | |         if n > max_so_far_rolling_index_rolling_max_rolling_max\
    \ {\n51 | |             max_so_far_rolling_index_rolling_max_rolling_max_rolling_index\
    \ = max_so_far_rolling_index_rolling_max_rolling_index;\n52 | |         }\n...\
    \  |\n62 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n63 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_number {\n            max_number = n;\n            max_index = -1;\n\
    \        }\n        if n == max_number {\n            max_numbers.push(max_number);\n\
    \            max_numbers.push(max_number);\n        } else {\n            max_numbers.push(max_number);\n\
    \        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe0lig4qq.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpe0lig4qq.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpe0lig4qq.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpqte6iqar.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpqte6iqar.rs:10:27\n\
    \   |\n10 |             max_element = numbers[index];\n   |                  \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqte6iqar.rs:11:25\n   |\n7  |\
    \     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = index;\n   |           \
    \              ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut i = 0;\n    while i < numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n        i += 1;\n    }\n    result.push(max_value);\n\
    \    result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpaoqmzhlp.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpaoqmzhlp.rs:18:17\n   |\n18 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for &number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_index = result.len();\n        }\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result.push(max_number);\n\
    \    result.push(max_value);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoy_f50w3.rs:10:9\n   |\n\
    10 |     for &number in numbers {\n   |         ^^^^^^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `number`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpoy_f50w3.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    let mut max_elements: Vec<isize> = vec![];\n\
    \    for i in 0..numbers.len() {\n        if i == max_index {\n            max_elements.push(max_element);\n\
    \        } else {\n            max_elements.push(numbers[i]);\n        }\n   \
    \ }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmphsa65ekd.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n        i += 1;\n    }\n\
    \    vec![max_so_far, max_so_far_index]\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmprr_ey997.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmprr_ey997.rs:13:9\n   |\n\
    13 |         i += 1;\n   |         ^ help: a local variable with a similar name\
    \ exists: `n`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprr_ey997.rs:8:9\n\
    \  |\n8 |     for &n in numbers {\n  |         ^^    ------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    let mut max_elements = Vec::new();\n    for\
    \ i in 0..numbers.len() {\n        if numbers[i] >= max_element {\n          \
    \  max_elements.push(numbers[i]);\n        }\n    }\n    max_elements\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpr24nbi_r.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = numbers.iter().position(|&n| n == max).unwrap();\n        }\n\
    \    }\n    numbers.iter().take(max_index + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_b6snl83.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_b6snl83.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp_b6snl83.rs:14:40\n\
    \     |\n14   |     numbers.iter().take(max_index + 1).collect()\n     |     \
    \                                   ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp6k3d_hdd.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp_cwb_fzz.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp77dmje80.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp77dmje80.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77dmje80.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp77dmje80.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp55oovqql.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8sltpnh2.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8sltpnh2.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8sltpnh2.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8sltpnh2.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpra4vkwbz.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpra4vkwbz.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpra4vkwbz.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpixlct_o4.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpixlct_o4.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpixlct_o4.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpixlct_o4.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.len();\n  \
    \      }\n    }\n    let mut max_numbers: Vec<isize> = vec![max_number];\n   \
    \ for i in 0..numbers.len() {\n        if numbers[i] > max_number {\n        \
    \    max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.sort_unstable();\n\
    \    max_numbers.reverse();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.dedup();\n    max_numbers.dedup();\n    max_numbers.dedup();\n\
    \    max_numbers.ded\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `ded` on type `Vec<isize>`\n  --> /tmp/tmp40b2simr.rs:90:17\n\
    \   |\n90 |     max_numbers.ded\n   |                 ^^^ unknown field\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    let mut max_index: usize = 0;\n    for n in numbers {\n    \
    \    if n > max_element {\n            max_element = n;\n            max_index\
    \ = n;\n        }\n        if n == max_element {\n            max_index += 1;\n\
    \        }\n    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    for\
    \ i in 0..max_index {\n        max_elements.push(max_element);\n    }\n    max_elements\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhsgyuwv.rs:12:25\n   |\n\
    8  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n12 |             max_index = n;\n   |               \
    \          ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            result.push(number);\n\
    \            max_value = number;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp4zi_uho6.rs:7:25\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp4_o0lhg8.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpkirm9ndq.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    let mut max_elements = Vec::new();\n    for\
    \ i in 0..numbers.len() {\n        if i == max_index {\n            max_elements.push(max_element);\n\
    \        } else {\n            max_elements.push(numbers[i]);\n        }\n   \
    \ }\n    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmprvm4z_re.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_index = 0;\n    let\
    \ mut max_so_far_rolling_max_value = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max_value {\n            max_so_far_rolling_max_value\
    \ = number;\n            max_so_far_rolling_max_index = numbers.len() - 1;\n \
    \       }\n    }\n    let mut max_so_far_rolling_max_value = numbers[0];\n   \
    \ for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far_rolling_max_value {\n            max_so_far_rolling_max_value = number;\n\
    \            max_so_far_rolling_max_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_rolling_max_value = numbers[0];\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value {\n\
    \            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far_rolling_max_value {\n            max_so_far_rolling_max_value = number;\n\
    \            max_so_far_rolling_max_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_rolling_max_value = numbers[0];\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value {\n\
    \            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far_rolling_max_value {\n            max_so_far_rolling_max_value = number;\n\
    \            max_so_far_rolling_max_index = numbers.len() - 1;\n        }\n\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwjj6iskd.rs:72:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n58 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - this delimiter might not be properly closed...\n...\n64 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n72 | }\n   |\
    \   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwjj6iskd.rs:9:21\n  |\n\
    9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwjj6iskd.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwjj6iskd.rs:17:21\n\
    \   |\n17 |         if number > max_so_far_rolling_max_value {\n   |         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |  \
    \                   expected `&isize`, found `isize`\n   |                   \
    \  help: consider borrowing here: `&max_so_far_rolling_max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwjj6iskd.rs:18:44\n   |\n15 |     let mut max_so_far_rolling_max_value\
    \ = numbers[0];\n   |                                            ---------- expected\
    \ due to this value\n...\n18 |             max_so_far_rolling_max_value = number;\n\
    \   |                                            ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |        \
    \     max_so_far_rolling_max_value = *number;\n   |                          \
    \                  +\n\nerror[E0308]: mismat"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.insert(0, max_number);\n\
    \    max_numbers.insert(0, max_index);\n    max_numbers\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp67j7hyk1.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp67j7hyk1.rs:16:27\n   |\n16 |     max_numbers.insert(0, max_index);\n\
    \   |                           ^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpl81eopyu.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n    }\n    let mut max_so_far_index\
    \ = max_so_far_index + 1;\n    let mut max_so_far_rolling_max = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max\
    \ = max_so_far;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_index\
    \ = i;\n        }\n    }\n    let mut max_so_far_rolling_max_index = max_so_far_rolling_max_index\
    \ + 1;\n    let mut max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n        }\n        if n > max_so_far {\n        \
    \    max_so_far_rolling_max_rolling_max = n;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_index + 1;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n    for &n in numbers {\n        if n\
    \ == max_so_far {\n            max_so_far_rolling_max_rolling_max_index = i;\n\
    \        }\n        if n > max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_index + 1;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max;\n    for &n in numbers {\n\
    \        if n == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = i;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max_roll\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpffmtw6y3.rs:66:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n52 |  \
    \   for &n in numbers {\n   |                       - unclosed delimiter\n...\n\
    56 |         if n > max_so_far {\n   |                           - this delimiter\
    \ might not be properly closed...\n57 |             max_so_far_rolling_max_roll\n\
    58 | }\n   | - ...as it matches this but it has different indentation\n...\n66\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpffmtw6y3.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmpffmtw6y3.rs:27:44\n   |\n\
    27 |             max_so_far_rolling_max_index = i;\n   |                     \
    \                       ^ help: a local variable with a similar name exists: `n`\n\
    \nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpffmtw6y3.rs:44:56\n\
    \   |\n44 |             max_so_far_rolling_max_rolling_max_index = i;\n   |  \
    \                                                      ^ help: a local variable\
    \ with a similar name exists: `n`\n\nerror[E0425]: cannot find value `i` in this\
    \ scope\n  --> /tmp/tmpffmtw6y3.rs:54:68\n   |\n54 |             max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = i;\n   |                                                                 \
    \   ^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]:\
    \ cannot find value `max_so_far_rolling_max_roll` in this scope\n  --> /tmp/tmpffmtw6y3.rs:57:13\n\
    \   |\n57 |             max_so_far_rolling_max_roll\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_max`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpffmtw6y3.rs:8:9\n  |\n8 |     for\
    \ &n in numbers {\n  |         ^^    ------- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = \n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpigu0jjpy.rs:79:1\n\
    \   |\n79 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqyn64icq.rs:11:25\n   |\n\
    7  |     let mut max_index = numbers[0];\n   |                         ----------\
    \ expected due to this value\n...\n11 |             max_index = i;\n   |     \
    \                    ^ expected `isize`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max: Vec<isize> = vec![max_so_far];\n\
    \    for i in 1..max_so_far_index {\n        max_so_far_rolling_max.push(numbers[i]);\n\
    \    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyarz7epg.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyarz7epg.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5qrd1_1l.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5qrd1_1l.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5qrd1_1l.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = i;\n        }\n  \
    \      i += 1;\n    }\n    numbers.iter().cloned().skip(max_so_far_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy9l9vqm7.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this\
    \ scope\n  --> /tmp/tmpy9l9vqm7.rs:13:9\n   |\n13 |         i += 1;\n   |    \
    \     ^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for &n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_idx = 1;\n        }\n        if n == max {\n            max_idx += 1;\n\
    \        }\n    }\n    let mut result = vec![max];\n    for i in 1..max_idx {\n\
    \        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpviab_xxv.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_numbers.push(n);\n        }\
    \ else {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyfyrsqf0.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp29j3yky8.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_numbers.push(n);\n        }\
    \ else {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpi6hexriv.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpn1k5ry79.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut i = 0;\n    while i < numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n        i += 1;\n    }\n    for i in 0..numbers.len()\
    \ {\n        if i == max_index {\n            result.push(max_value);\n      \
    \  } else {\n            result.push(numbers[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpeiowzora.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_index = 0;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far {\n       \
    \     max_so_far_rolling_max_index = numbers.len() - 1;\n            break;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_value = numbers[max_so_far_index];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far_rolling_max_value = number;\n            break;\n    \
    \    }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far_rolling_max_value;\n\
    \    for number in numbers.\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpezpcwmmh.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpezpcwmmh.rs:72:1\n\
    \   |\n72 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpezpcwmmh.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpezpcwmmh.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpezpcwmmh.rs:16:21\n\
    \   |\n16 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpezpcwmmh.rs:23:21\n   |\n23 |\
    \         if number > max_so_far {\n   |                     ^^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpezpcwmmh.rs:24:44\n   |\n21 |     let mut max_so_far_rolling_max_value\
    \ = numbers[max_so_far_index];\n   |                                         \
    \   ------------------------- expected due to this value\n...\n24 |          \
    \   max_so_far_rolling_max_value = number;\n   |                             \
    \               ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n24 |             max_so_far_rolling_max_value\
    \ = *number;\n   |                                            +\n\nerror[E0308]:\
    \ mismatched "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    let mut max_value: isize = 0;\n    for number in numbers {\n\
    \        if number > max_number {\n            max_number = number;\n        \
    \    max_index = numbers.iter().position(|&x| x == number).unwrap();\n       \
    \     max_value = number;\n        }\n    }\n    let mut max_numbers = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max_value {\n      \
    \      max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "warning: variable `max_index` is assigned to, but never used\n --> /tmp/tmpaxm8ll2f.rs:7:13\n\
    \  |\n7 |     let mut max_index: usize = 0;\n  |             ^^^^^^^^^\n  |\n\
    \  = note: `#[warn(unused_variables)]` on by default\n  = note: consider using\
    \ `_max_index` instead\n\nwarning: value assigned to `max_index` is never read\n\
    \  --> /tmp/tmpaxm8ll2f.rs:12:13\n   |\n12 |             max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n   |             ^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ borrow of moved value: `numbers`\n   --> /tmp/tmpaxm8ll2f.rs:12:25\n    |\n\
    5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |             \
    \   ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n9   |     for number in numbers {\n    |  \
    \                 ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n12  |             max_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \    |                         ^^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        } else {\n            if max_so_far_rolling_index == max_so_far_index\
    \ {\n                max_so_far_rolling_index += 1;\n                max_so_far_rolling\
    \ += n;\n            } else {\n                max_so_far_rolling_index += 1;\n\
    \                max_so_far_rolling = 0;\n            }\n        }\n    }\n  \
    \  max_so_far_rolling_index += 1;\n    max_so_far_rolling += max_so_far;\n   \
    \ max_so_far_rolling.to_vec()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_vec` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpoil_xuxt.rs:32:24\n   |\n32 |     max_so_far_rolling.to_vec()\n\
    \   |                        ^^^^^^ help: there is an associated function with\
    \ a similar name: `to_be`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers\
    \ = Vec::new();\n    for n in numbers {\n        if n > max_number {\n       \
    \     max_number = n;\n        }\n        if n == max_number {\n            max_numbers.push(max_number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpkmhn1k4_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for &n in numbers {\n        if n > max_number {\n            max_number\
    \ = n;\n            max_index = result.len();\n            max_value = n;\n  \
    \      }\n        result[max_index] = n;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfle8kjzo.rs:10:9\n   |\n\
    10 |     for &n in numbers {\n   |         ^^    ------- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `n`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpfle8kjzo.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp57f4sjqu.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers.insert(0, max_index);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmperprc0mo.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = number;\n   |          \
    \               ^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmperprc0mo.rs:21:27\n   |\n21 |     max_numbers.insert(0,\
    \ max_index);\n   |                           ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_index;\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so_far_rolling_max_value = n;\n            max_so_far_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for n in numbers {\n        if n > max_so_far_rolling_max_value {\n     \
    \       max_so\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp10za77sy.rs:76:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n65 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n66 | \
    \        if n > max_so_far_rolling_max_value {\n   |                         \
    \                    - this delimiter might not be properly closed...\n67 |  \
    \           max_so\n68 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n76 | }\n   |   ^\n\nerror[E0425]: cannot find value `max_so`\
    \ in this scope\n  --> /tmp/tmp10za77sy.rs:67:13\n   |\n67 |             max_so\n\
    \   |             ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp10za77sy.rs:65:5\n   |\n5  |   fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n65 | /     for n in numbers {\n66\
    \ | |         if n > max_so_far_rolling_max_value {\n67 | |             max_so\n\
    68 | | }\n...  |\n75 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3,\
    \ 3, 3, 100, 100]);\n76 | | }\n   | |__^ expected struct `Vec`, found `()`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_index = -1;\n        }\n        if n == max_value {\n\
    \            max_index += 1;\n        }\n    }\n    vec![max_value; max_index]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppgmadcn8.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppgmadcn8.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmppgmadcn8.rs:11:25\n   |\n11 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_index_rolling_index = 0;\n    for n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index += 1;\n        }\n\
    \    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index_rolling_index += 1;\n\
    \        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpf5rkgjri.rs:63:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n51 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n52 | \
    \        if n == max_so_far {\n   |                            - this delimiter\
    \ might not be properly closed...\n...\n55 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n63 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\
    \ in this scope\n  --> /tmp/tmpf5rkgjri.rs:47:13\n   |\n47 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling`\
    \ in this scope\n  --> /tmp/tmpf5rkgjri.rs:54:13\n   |\n54 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf5rkgjri.rs:51:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n51 | /     for n in numbers {\n52 | |         if n == max_so_far {\n53 |\
    \ |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n54 | |             max_so_far_rolling_index_r"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_lp7w8fx.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_lp7w8fx.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far\
    \ {\n            max_so_far_rolling_max.push(max_so_far);\n            max_so_far\
    \ = numbers[i];\n            max_so_far_index = i;\n        }\n    }\n    max_so_far_rolling_max.push(max_so_far);\n\
    \    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmp99iovhsa.rs:17:36\n   |\n17 |             max_so_far_rolling_max.push(max_so_far);\n\
    \   |                                    ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99iovhsa.rs:19:32\n   |\n7  |\
    \     let mut max_so_far_index = 0;\n   |                                - expected\
    \ due to this value\n...\n19 |             max_so_far_index = i;\n   |       \
    \                         ^ expected `isize`, found `usize`\n\nerror[E0599]: no\
    \ method named `push` found for array `[isize; 1]` in the current scope\n  -->\
    \ /tmp/tmp99iovhsa.rs:22:28\n   |\n22 |     max_so_far_rolling_max.push(max_so_far);\n\
    \   |                            ^^^^ method not found in `[isize; 1]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp99iovhsa.rs:23:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 |     max_so_far_rolling_max\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |     |\n   |     expected struct `Vec`, found array `[isize; 1]`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n               found array `[isize;\
    \ 1]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    vec![max_index..]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjynvbgk6.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjynvbgk6.rs:14:10\n   |\n14 |     vec![max_index..]\n\
    \   |          ^^^^^^^^^^^ expected `isize`, found struct `RangeFrom`\n   |\n\
    \   = note: expected type `isize`\n            found struct `RangeFrom<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            result.push(max_value);\n            max_value = i;\n       \
    \     max_index = 0;\n        } else {\n            max_index += 1;\n        }\n\
    \        result.push(max_value);\n    }\n    result.push(max_value);\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp95jenofb.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpc4sbjjw0.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(numbers[i]);\n        }\n    }\n    for\
    \ i in max_index..numbers.len() {\n        result.push(numbers[i]);\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzv38twrk.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().cloned().skip(max_index).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpryavtar8.rs:14:45\n     |\n14   | \
    \    numbers.iter().cloned().skip(max_index).cloned().collect()\n     |      \
    \                                       ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpryavtar8.rs:14:54\n\
    \   |\n14 |        numbers.iter().cloned().skip(max_index).cloned().collect()\n\
    \   |                                                         ^^^^^^^ method cannot\
    \ be called on `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Skip<Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n           `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>: Iterator`\n\
    \           which is required by `&mut Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp5bx020f0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \        }\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n        }\n    }\n    numbers\n        .iter()\n        .enumerate()\n\
    \        .filter(|&(_, index)| index == max_so_far_index)\n        .map(|(_, index)|\
    \ numbers[index])\n        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy33_09x.rs:21:40\n   |\n\
    21 |         .filter(|&(_, index)| index == max_so_far_index)\n   |          \
    \                              ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: can't compare `&isize` with `usize`\n  --> /tmp/tmpyy33_09x.rs:21:37\n\
    \   |\n21 |         .filter(|&(_, index)| index == max_so_far_index)\n   |   \
    \                                  ^^ no implementation for `&isize == usize`\n\
    \   |\n   = help: the trait `PartialEq<usize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpyy33_09x.rs:22:27\n   |\n22 |         .map(|(_, index)| numbers[index])\n\
    \   |                           ^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n            max_so_far_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index = 0;\n\
    \    let mut max_so_far_rolling_max_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_index = numbers.len() - 1;\n \
    \           max_so_far_rolling_max_rolling_max = number;\n        }\n    }\n \
    \   let mut max_so_far_rolling_max_rolling_max_index = 0;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n            max_so_far_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = number;\n  \
    \          max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.len()\
    \ - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ number;\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjsp_x__b.rs:58:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n45 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n46 |         if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n   |                                                                    \
    \            - this delimiter might not be properly closed...\n...\n50 | }\n \
    \  | - ...as it matches this but it has different indentation\n...\n58 | }\n \
    \  |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjsp_x__b.rs:10:21\n\
    \   |\n10 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjsp_x__b.rs:11:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjsp_x__b.rs:13:38\n\
    \   |\n8  |     let mut max_so_far_rolling_max = 0;\n   |                    \
    \                  - expected due to this value\n...\n13 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max_so_far_rolling_max = *number;\n   |                          \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjsp_x__b.rs:19:21\n\
    \   |\n19 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        max_numbers.push(number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpbocl8rzb.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpsgk4gjbp.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index += 1;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index = 0;\n \
    \   for number in numbers.iter().rev() {\n        if number > max_so_far {\n \
    \           max_so_far_rolling_index_rolling_index_rolling_index += 1;\n     \
    \   }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdrbo6h7k.rs:56:87\n   |\n\
    56 |     let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling\n\
    \   |                                                                        \
    \               ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\
    \ in this scope\n  --> /tmp/tmpdrbo6h7k.rs:53:13\n   |\n53 |             max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpdrbo6h7k.rs:9:21\n  |\n9 |    \
    \     if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |      \
    \               |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdrbo6h7k.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdrbo6h7k.rs:16:21\n\
    \   |\n16 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdrbo6h7k.rs:22:21\n   |\n22 |\
    \         if number > max_so_far {\n   |                     ^^^^^^^^^^\n "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_numbers = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] != max_number {\n    \
    \        max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers.insert(0, max_index);\n    max_numbers\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpixxh6cer.rs:21:27\n   |\n\
    21 |     max_numbers.insert(0, max_index);\n   |                           ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n21 |     max_numbers.insert(0,\
    \ max_index.try_into().unwrap());\n   |                                    ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp73n2jfj9.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        if max_index >= 0 {\n            max_numbers.push(max_number);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8kz4uoiq.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp2tvun6o4.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            max_value =\
    \ numbers[i];\n            max_index = i;\n        }\n    }\n    result.push(max_value);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpz7r4e4ne.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpwr_a7iar.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbbprc11v.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbbprc11v.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbbprc11v.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers.pop() {\n             \
    \   max_numbers.push(number);\n            }\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3hjon6c.rs:16:25\n   |\n\
    16 |             if number > max_numbers.pop() {\n   |                       \
    \  ^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    max_numbers.insert(0, max_number);\n    max_numbers.insert(0,\
    \ max_index);\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6d3vybei.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6d3vybei.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6d3vybei.rs:12:65\n\
    \   |\n12 |             max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \   |                                                                 ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max_index = numbers.iter().rev().position(|&x| x == *number).unwrap();\n\
    \   |                                                                 +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp6d3vybei.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6d3vybei.rs:16:27\n   |\n16 |     max_numbers.insert(0, max_index);\n\
    \   |                           ^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 5 "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmyq26c1y.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmyq26c1y.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmyq26c1y.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmyq26c1y.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for num in numbers {\n        if num > max_so_far {\n            max_so_far\
    \ = num;\n            max_so_far_index = num;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far\
    \ {\n            max_so_far_rolling_max.push(numbers[i]);\n        }\n    }\n\
    \    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpgeueap16.rs:17:36\n   |\n17 |             max_so_far_rolling_max.push(numbers[i]);\n\
    \   |                                    ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgeueap16.rs:20:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..max_so_far_index {\n        max_so_far_rolling_max.push(max_so_far_rolling_max[i\
    \ - 1] + numbers[i]);\n    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpcbbkkcrx.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcbbkkcrx.rs:8:9\n  |\n8 |     for &n in numbers\
    \ {\n  |         ^^    ------- this expression has type `Option<isize>`\n  | \
    \        |\n  |         expected `isize`, found reference\n  |         help: you\
    \ can probably remove the explicit borrow: `n`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror[E0599]: no method named `push`\
    \ found for array `[isize; 1]` in the current scope\n  --> /tmp/tmpcbbkkcrx.rs:16:32\n\
    \   |\n16 |         max_so_far_rolling_max.push(max_so_far_rolling_max[i - 1]\
    \ + numbers[i]);\n   |                                ^^^^ method not found in\
    \ `[isize; 1]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcbbkkcrx.rs:18:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n18 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |     |\n   |     expected\
    \ struct `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n        if number >\
    \ max_so_far_rolling_max {\n            max_so_far_rolling_max = number;\n   \
    \     }\n    }\n    let mut max_so_far_rolling_max_index = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far_rolling_max {\n  \
    \          max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max_rolling_max_rolling_\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuetygb1j.rs:64:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n50 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n51 |         if number > max_so_far_rolling_max\
    \ {\n   |                                            - this delimiter might not\
    \ be properly closed...\n...\n56 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n64 | }\n   |   ^\n\nerror[E0425]: cannot find value\
    \ `max_so_far_rolling_max_rolling_max_rolling_` in this scope\n  --> /tmp/tmpuetygb1j.rs:55:13\n\
    \   |\n55 |             max_so_far_rolling_max_rolling_max_rolling_\n   |    \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `max_so_far_rolling_max_rolling_max_rolling_max`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpuetygb1j.rs:10:21\n   |\n10 |  \
    \       if number > max_so_far {\n   |                     ^^^^^^^^^^\n   |  \
    \                   |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuetygb1j.rs:11:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n11 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuetygb1j.rs:14:21\n\
    \   |\n14 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected `&isize`, found integer\n   |                     help: consider\
    \ borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuetygb1j.rs:15:38\n   |\n8  |     le"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers.iter().rev().take(max_so_far_index + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1zrmnw2l.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1zrmnw2l.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmp1zrmnw2l.rs:14:53\n\
    \     |\n14   |     numbers.iter().rev().take(max_so_far_index + 1).collect()\n\
    \     |                                                     ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfz_3_hz.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyfz_3_hz.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_elements = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n        max_elements.push(numbers[max_index]);\n    }\n   \
    \ max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprpvvo2l4.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = n;\n   |               \
    \          ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for &n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_idx = 1;\n        } else {\n            max_idx += 1;\n        }\n  \
    \  }\n    let mut result = vec![max];\n    for i in 1..max_idx {\n        result.push(result[i]\
    \ - numbers[i - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk6k14_0m.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = numbers.iter().position(|&n| n == max).unwrap();\n        }\n\
    \    }\n    vec![max]\n        .into_iter()\n        .take_while(|&n| n < numbers[max_index])\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyppffauq.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpyppffauq.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_element =\
    \ numbers[0];\n    let mut max_element_index = 0;\n    let mut current_index =\
    \ 0;\n    for number in numbers {\n        if number > max_element {\n       \
    \     max_element = number;\n            max_element_index = current_index;\n\
    \        }\n        current_index += 1;\n    }\n    result.push(max_element);\n\
    \    max_element_index += 1;\n    for current_index in 0..numbers.len() - 1 {\n\
    \        let mut max_element = numbers[current_index];\n        let mut max_element_index\
    \ = current_index;\n        for number in numbers[current_index + 1..] {\n   \
    \         if number > max_element {\n                max_element = number;\n \
    \               max_element_index = current_index;\n            }\n        }\n\
    \        result.push(max_element);\n        max_element_index += 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp6n0hrtqq.rs:22:23\n   |\n22 |         for number\
    \ in numbers[current_index + 1..] {\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait\
    \ bound `[isize]: IntoIterator` is not satisfied\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `[isize]`\nhelp: consider\
    \ borrowing here\n   |\n22 |         for number in &numbers[current_index + 1..]\
    \ {\n   |                       +\n22 |         for number in &mut numbers[current_index\
    \ + 1..] {\n   |                       ++++\n\nerror[E0277]: `[isize]` is not\
    \ an iterator\n  --> /tmp/tmp6n0hrtqq.rs:22:23\n   |\n22 |         for number\
    \ in numbers[current_index + 1..] {\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait\
    \ bound `[isize]: IntoIterator` is not satisfied\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `[isize]`\nhelp: consider\
    \ borrowing here\n   |\n22 |         for number in &numbers[current_index + 1..]\
    \ {\n   |                       +\n22 |         for number in &mut numbers[current_index\
    \ + 1..] {\n   |                       ++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n        if number >\
    \ max_so_far_rolling_max {\n            max_so_far_rolling_max = number;\n   \
    \     }\n    }\n    let mut max_so_far_rolling_max_index = numbers.len() - 1;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_index;\n        }\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max = 0;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n        }\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n        }\n   \
    \     if number > max_so_far_rolling_max_rolling_max_rolling_max {\n         \
    \   max_so_far_rolling_max_rolling_max_rolling_max = number;\n        }\n    }\n\
    \    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n        }\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n        }\n   \
    \     if number > max_so_far_rolling_max_rolling_max_rolling_\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpxybjbb78.rs:66:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n49 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - this delimiter might not be properly closed...\n...\n58 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n66 | }\n   |\
    \   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpxybjbb78.rs:58:1\n   |\n\
    57 |         if number > max_so_far_rolling_max_rolling_max_rolling_\n   |   \
    \      -- this `if` expression has a condition, but no block\n58 | }\n   | ^ expected\
    \ `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxybjbb78.rs:10:21\n   |\n\
    10 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxybjbb78.rs:11:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxybjbb78.rs:14:21\n\
    \   |\n14 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected `&isize`, found integer\n   |                     help: consider\
    \ borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxybjbb78.rs:15:38\n   |\n8  |     let mut max_so_far_rolling_max\
    \ = 0;\n   |                                      - expected due to this value\n\
    ...\n15 |             max_so_far_rolling_max = number;\n   |                 \
    \                     ^^^^^^ expected integer, found `&isize`"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut i = 0;\n    while i < numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n        i += 1;\n    }\n    result.push(max_value);\n\
    \    if max_index != numbers.len() - 1 {\n        result.push(numbers[max_index\
    \ + 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp1ci6ug01.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_numbers.push(numbers[i]);\n\
    \        } else {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2z9togvt.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = n;\n   |               \
    \          ^ expected `usize`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        if max_number > numbers.len()\
    \ {\n            max_numbers.push(max_number);\n            max_number = 0;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeq1zbxvw.rs:12:25\n   |\n\
    12 |         if max_number > numbers.len() {\n   |                         ^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |         if\
    \ max_number > numbers.len().try_into().unwrap() {\n   |                     \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter() {\n        if number > max_number {\n      \
    \      max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfm3qz4h9.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfm3qz4h9.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfm3qz4h9.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfm3qz4h9.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    numbers.iter().cloned().skip(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpr1eoqy4t.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.remove(max_index);\n\
    \    numbers_copy.sort();\n    let mut max_numbers = Vec::new();\n    for i in\
    \ 0..numbers_copy.len() {\n        max_numbers.push(numbers_copy[i]);\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwiph5rvm.rs:11:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n11 |             max_index = number;\n   |          \
    \               ^^^^^^ expected `usize`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    let mut max_value = numbers[0];\n    for &i in numbers {\n        if i >\
    \ max {\n            max = i;\n            max_index = i;\n        }\n       \
    \ if i == max {\n            max_value = i;\n        }\n    }\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    for &i in numbers {\n        if i > max {\n            max = i;\n       \
    \     max_index = i;\n        }\n        if i == max {\n            max_value\
    \ = i;\n        }\n    }\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    for &i in numbers {\n\
    \        if i > max {\n            max = i;\n            max_index = i;\n    \
    \    }\n        if i == max {\n            max_value = i;\n        }\n    }\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    for &i in numbers {\n        if i > max {\n\
    \            max = i;\n            max_index = i;\n        }\n        if i ==\
    \ max {\n            max_value = i;\n        }\n    }\n    let mut max_value =\
    \ max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    for &i in numbers {\n        if i > max {\n            max = i;\n       \
    \     max_index = i;\n        }\n        if i == max {\n            max_value\
    \ = i;\n        }\n    }\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    for &i in numbers {\n\
    \        if i > max {\n            max = i;\n            max_index = i;\n    \
    \    }\n        if i == max {\n            max_value = i;\n        }\n    }\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    for &i in numbers {\n        if i > max {\n\
    \            max = i;\n            max_index = i;\n        }\n        if i ==\
    \ max {\n            max_value = i;\n        }\n    }\n    let mut max_value =\
    \ max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    for &i in numbers {\n        if i > max {\n            max = i;\n       \
    \     max_index = i;\n        }\n        if i == max {\n            max_value\
    \ = i;\n        }\n    }\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    for &i in numbers {\n\
    \        if i > max {\n            max = i;\n            max_index = i;\n    \
    \    }\n        if i == max {\n\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpr2lexojz.rs:120:3\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \                                              - unclosed delimiter\n...\n105\
    \ |     for &i in numbers {\n    |                       - unclosed delimiter\n\
    ...\n110 |         if i == max {\n    |                     - this delimiter might\
    \ not be properly closed...\n111 | \n112 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n120 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpr2lexojz.rs:9:9\n  |\n9 |     for &i in numbers {\n  | \
    \        ^^    ------- this expression has type `Option<isize>`\n  |         |\n\
    \  |         expected `isize`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `i`\n  |\n  = note:   expected type `isize`\n  \
    \        found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2lexojz.rs:21:9\n\
    \   |\n21 |     for &i in numbers {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `i`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpr2lexojz.rs:33:9\n   |\n33 |   \
    \  for &i in numbers {\n   |         ^^    ------- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr2lexojz.rs:45:9\n   |\n45 |     for &i in numbers {\n   |    \
    \     ^^    ------- this expression has type `Option<isize>`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2lexojz.rs:57:9\n\
    \   |\n57 |     fo"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers\
    \ = Vec::new();\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpjcwcz_fy.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    let mut max_value = numbers[0];\n    for number in numbers {\n\
    \        if number > max_value {\n            max_value = number;\n          \
    \  max_index = number;\n        }\n    }\n    let mut max_numbers = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max_value {\n      \
    \      max_numbers.push(max_index);\n            max_value = numbers[i];\n   \
    \         max_index = i;\n        }\n    }\n    max_numbers.reverse();\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8tkhoj4u.rs:12:25\n   |\n\
    7  |     let mut max_index: usize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n12 |             max_index = number;\n   |          \
    \               ^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8tkhoj4u.rs:24:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n24 |     max_numbers\n   |     ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(numbers[max_index]);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp1yf0wya8.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for n in numbers {\n        if n == max_so_far_index {\n            max_so_far_rolling_max_index\
    \ += 1;\n        }\n        if n > max_so_far {\n            max_so_far = n;\n\
    \            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_rolling_max_index = max_so_far_index;\n\
    \    for n in numbers {\n        if n == max_so_far_index {\n            max_so_far_rolling_max_rolling_max_index\
    \ += 1;\n        }\n        if n > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = n;\n            max_so_far_rolling_max_index = n;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_max_rolling_max_rolling_max = max_so_far;\n    let mut\
    \ max_so_far_rolling_max_rolling_max_rolling_max_index = max_so_far_index;\n \
    \   for n in numbers {\n        if n == max_so_far_index {\n            max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ += 1;\n        }\n        if n > max_so_far_rolling_max_rolling_max {\n    \
    \        max_so_far_rolling_max_rolling_max = n;\n            max_so_far_rolling_max_rolling_max_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_index;\n    for n in numbers {\n        if n == max_so_far_index\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ += 1;\n        }\n        if n > max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = n;\n       \
    \     max_so_far_rolling_max_rolling_max_index = n;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjresi50g.rs:58:36\n   |\n\
    58 |     let mut max_so_far_rolling_max_\n   |                               \
    \     ^ help: add `;` here\n59 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjresi50g.rs:5:40\n  |\n5 | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n  |    -----------                         ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpsk2nluds.rs:11:55\n\
    \   |\n11 |             max_index = numbers.iter().position(|x| x == number).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpsk2nluds.rs:14:68\n\
    \     |\n14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_numbers.push(max_number);\n            max_number = number;\n\
    \        } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp90hs3y9a.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for n in numbers {\n        if n > max {\n            max = n;\n         \
    \   max_idx = 1;\n        }\n        if n == max {\n            max_idx += 1;\n\
    \        }\n    }\n    vec![max; max_idx]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp2t3dvb2i.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len();\n\
    \        }\n    }\n    let mut max_so_far_index = \n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpmo6d43w9.rs:71:1\n\
    \   |\n71 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if number == max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmprkazwbpp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &number in numbers {\n \
    \       if number > max_number {\n            max_number = number;\n         \
    \   max_index = -1;\n        }\n        if number == max_number {\n          \
    \  max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n\
    \    max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgr3j27ny.rs:9:9\n  |\n9 |\
    \     for &number in numbers {\n  |         ^^^^^^^    ------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `number`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpgr3j27ny.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpgr3j27ny.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in numbers {\n        if i == max_value {\n            result.push(max_index);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplh2ldak4.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp4ujy4q3r.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4ujy4q3r.rs:14:21\n   |\n14 |     vec![max_value, max_index]\n   | \
    \                    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     vec![max_value, max_index.try_into().unwrap()]\n   |   \
    \                           ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &i in numbers {\n        if i > max {\n            max = i;\n       \
    \     max_index = i;\n        }\n    }\n    let mut result = Vec::new();\n   \
    \ for i in 0..numbers.len() {\n        if i == max_index {\n            result.push(max);\n\
    \        } else {\n            result.push(numbers[i]);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaa5jwp81.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5jwp81.rs:16:17\n   |\n16 |         if i ==\
    \ max_index {\n   |                 ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if i == max_index.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = numbers.iter().position(|&n| n == max_so_far).unwrap();\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    let mut max_so_far_rolling_max = max_so_far;\n    for &n in numbers {\n \
    \       if n == max_so_far {\n            max_so_far_rolling_max_index += 1;\n\
    \            max_so_far_rolling_max = n;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_index;\n    let mut max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n    for &n in numbers {\n        if n == max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_index += 1;\n            max_so_far_rolling_max_rolling_max\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_index;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n    for &n in numbers {\n        if n\
    \ == max_so_far_rolling_max_rolling_max {\n            max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ += 1;\n            max_so_far_rolling_max_rolling_max_rolling_max = n;\n   \
    \     }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_rolling_max_index;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max;\n    for &n in numbers {\n\
    \        if n == max_so_far_rolling_max_rolling_max_rolling_max {\n          \
    \  max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index += 1;\n  \
    \          max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = n;\n \
    \       }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5xu5dhhz.rs:46:127\n   |\n\
    46 |     let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_\n   |                                \
    \                                                                            \
    \                   ^ help: add `;` here\n47 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `max_so_far_rolling_max_rolling_max_` in this\
    \ scope\n  --> /tmp/tmp5xu5dhhz.rs:46:92\n   |\n46 |     let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_\n   |                                \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far_rolling_max_rolling_max`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp5xu5dhhz.rs:8:9\n  |\n8 |     for\
    \ &n in numbers {\n  |         ^^    ------- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5xu5dhhz.rs:16:9\n   |\n16 |     for &n in numbers {\n   |    \
    \     ^^    ------- this expression has type `Option<isize>`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `n`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5xu5dhhz.rs:24:9\n\
    \   |\n24 |     for &n in numbers {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `n`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5xu5dhhz.rs:32:9\n   |\n32 |   \
    \  for &n in numbers {\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyir5n4_4.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyir5n4_4.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyir5n4_4.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n        i += 1;\n    }\n\
    \    numbers[max_so_far_index]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmplc0zcqbt.rs:11:32\n\
    \   |\n11 |             max_so_far_index = i;\n   |                          \
    \      ^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmplc0zcqbt.rs:13:9\n   |\n\
    13 |         i += 1;\n   |         ^ help: a local variable with a similar name\
    \ exists: `n`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplc0zcqbt.rs:15:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n15 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n        max_numbers.push(number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpv2yyit9h.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmplbtg7ujw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    numbers[max_index..].clone()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone` found for slice `[isize]` in the\
    \ current scope\n  --> /tmp/tmp5w8yxwbb.rs:14:26\n   |\n14 |     numbers[max_index..].clone()\n\
    \   |                          ^^^^^ method not found in `[isize]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpe_7ds94p.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far\
    \ {\n            max_so_far_rolling_max.push(numbers[i]);\n        }\n    }\n\
    \    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmp8pdxnw3p.rs:17:36\n   |\n17 |             max_so_far_rolling_max.push(numbers[i]);\n\
    \   |                                    ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8pdxnw3p.rs:20:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp2qucb39r.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpj0z4itm6.rs:14:68\n     |\n\
    14   |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers\
    \ = Vec::new();\n    for n in numbers {\n        if n > max_number {\n       \
    \     max_number = n;\n            max_numbers.clear();\n        }\n        if\
    \ max_numbers.len() == 0 {\n            max_numbers.push(n);\n        } else {\n\
    \            if n == max_numbers[0] {\n                max_numbers.push(n);\n\
    \            } else {\n                max_numbers.push(max_numbers[0]);\n   \
    \             max_numbers.push(n);\n            }\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp_5w4enur.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7fqhyfc.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc7fqhyfc.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp33utdiqx.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp33utdiqx.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33utdiqx.rs:14:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n14 |     numbers[max_so_far_index]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpy097drl7.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n    }\n    let mut max_so_far_index\
    \ = max_so_far_index + 1;\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_so_far = max_so_far;\n    for &n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_index = max_so_far_index\
    \ + 1;\n        }\n    }\n    let mut max_\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1fxfppq_.rs:75:17\n   |\n\
    75 |     let mut max_\n   |                 ^ help: add `;` here\n76 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  -->\
    \ /tmp/tmp1fxfppq_.rs:11:32\n   |\n11 |             max_so_far_index = i;\n  \
    \ |                                ^ help: a local variable with a similar name\
    \ exists: `n`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1fxfppq_.rs:8:9\n\
    \  |\n8 |     for &n in numbers {\n  |         ^^    ------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fxfppq_.rs:16:9\n   |\n16 |     for &n in numbers\
    \ {\n   |         ^^    ------- this expression has type `Option<isize>`\n   |\
    \         |\n   |         expected `isize`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1fxfppq_.rs:22:9\n   |\n22 |     for &n in numbers {\n   |    \
    \     ^^    ------- this expression has type `Option<isize>`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `n`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fxfppq_.rs:28:9\n\
    \   |\n28 |     for &n in numbers {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `n`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1fxfppq_.rs:34:9\n   |\n34 |   \
    \  for &n in numbers {\n   |         ^^    ------- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut max_index2 = 0;\n    let mut max_index3\
    \ = 0;\n    let mut max_index4 = 0;\n    let mut max_index5 = 0;\n    let mut\
    \ max_index6 = 0;\n    let mut max_index7 = 0;\n    let mut max_index8 = 0;\n\
    \    let mut max_index9 = 0;\n    let mut max_index10 = 0;\n    let mut max_index11\
    \ = 0;\n    let mut max_index12 = 0;\n    let mut max_index13 = 0;\n    let mut\
    \ max_index14 = 0;\n    let mut max_index15 = 0;\n    let mut max_index16 = 0;\n\
    \    let mut max_index17 = 0;\n    let mut max_index18 = 0;\n    let mut max_index19\
    \ = 0;\n    let mut max_index20 = 0;\n    let mut max_index21 = 0;\n    let mut\
    \ max_index22 = 0;\n    let mut max_index23 = 0;\n    let mut max_index24 = 0;\n\
    \    let mut max_index25 = 0;\n    let mut max_index26 = 0;\n    let mut max_index27\
    \ = 0;\n    let mut max_index28 = 0;\n    let mut max_index29 = 0;\n    let mut\
    \ max_index30 = 0;\n    let mut max_index31 = 0;\n    let mut max_index32 = 0;\n\
    \    let mut max_index33 = 0;\n    let mut max_index34 = 0;\n    let mut max_index35\
    \ = 0;\n    let mut max_index36 = 0;\n    let mut max_index37 = 0;\n    let mut\
    \ max_index38 = 0;\n    let mut max_index39 = 0;\n    let mut max_index40 = 0;\n\
    \    let mut max_index41 = 0;\n    let mut max_index42 = 0;\n    let mut max_index43\
    \ = 0;\n    let mut max_index44 = 0;\n    let mut max_index45 = 0;\n    let mut\
    \ max_index46 = 0;\n    let mut max_index47 = 0;\n    let mut max_index48 = 0;\n\
    \    let mut max_index49 = 0;\n    let mut max_index50 = 0;\n    let mut max_index51\
    \ = 0;\n    let mut max_index52 = 0;\n    let mut max_index53 = 0;\n    let mut\
    \ max_index54 = 0;\n    let mut max_index55 = 0;\n    let mut max_index56 = 0;\n\
    \    let mut max_index57 = 0;\n    let mut max_index58 = 0;\n    let mut max_index59\
    \ = 0;\n    let mut max_index60 = 0;\n    let mut max_index61 = 0;\n    let mut\
    \ max_index62 = 0;\n    let mut max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6fffgbei.rs:70:17\n   |\n\
    70 |     let mut max_\n   |                 ^ help: add `;` here\n71 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6fffgbei.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpuj_kqjx6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpcu12us_5.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.insert(0, max_number);\n\
    \    max_numbers.insert(0, max_index);\n    max_numbers\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppt1hbymt.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppt1hbymt.rs:16:27\n   |\n16 |     max_numbers.insert(0, max_index);\n\
    \   |                           ^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     max_numbers.insert(0, max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpghe0_pnx.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpghe0_pnx.rs:16:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n16 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_number = *number;\n\
    \   |                          +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    numbers.iter().take(max_so_far_index + 1).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "warning: variable `max_so_far_rolling_max` is assigned to, but never used\n\
    \ --> /tmp/tmpard76yvz.rs:8:13\n  |\n8 |     let mut max_so_far_rolling_max =\
    \ 0;\n  |             ^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_max_so_far_rolling_max` instead\n\n\
    warning: value assigned to `max_so_far_rolling_max` is never read\n  --> /tmp/tmpard76yvz.rs:13:13\n\
    \   |\n13 |             max_so_far_rolling_max = number;\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe\
    \ it is overwritten before being read?\n\nwarning: variable `max_so_far_rolling_max_index`\
    \ is assigned to, but never used\n  --> /tmp/tmpard76yvz.rs:16:13\n   |\n16 |\
    \     let mut max_so_far_rolling_max_index = 0;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: consider using `_max_so_far_rolling_max_index` instead\n\nwarning:\
    \ value assigned to `max_so_far_rolling_max_index` is never read\n  --> /tmp/tmpard76yvz.rs:19:13\n\
    \   |\n19 |             max_so_far_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = help: maybe it is overwritten before being read?\n\nerror[E0382]: borrow\
    \ of moved value: `numbers`\n   --> /tmp/tmpard76yvz.rs:12:32\n    |\n5   | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |                -------\
    \ move occurs because `numbers` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n9   |     for number in numbers {\n    |            \
    \       ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n12  |             max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \    |                                ^^^^^^^^^^^^^^ value borrowed here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpm83r4l4t.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().skip(1).max_by_key(|&x| x);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n\
    \            max_so_far_iter = max_so_far_iter.clone();\n        }\n    }\n  \
    \  max_so_far_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<isize>` is not an iterator\n   --> /tmp/tmprjvd_fca.rs:14:21\n\
    \    |\n14  |       max_so_far_iter.collect::<Vec<_>>()\n    |               \
    \        ^^^^^^^ `Option<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<isize>: Iterator`\n  \
    \          which is required by `&mut Option<isize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpd3dnmgb4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max = max_so_far;\n \
    \   for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_max_index = numbers.len() - 1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_index = numbers.len() - 1;\n \
    \       }\n    }\n    let mut max_so_far_rolling_max_index = max_so_far_rolling_max_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_rolling_max_index;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_index = numbers.len() - 1;\n \
    \       }\n    }\n    let mut max_so_far_rolling_max_index = max_so_far_rolling_max_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_rolling_max_index;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_index = numbers.len() - 1;\n \
    \       }\n    }\n    let mut max_so_far_rolling_max_index = max_so_far_rolling_max_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6szdgxdm.rs:62:17\n   |\n\
    62 |     let mut max_\n   |                 ^ help: add `;` here\n63 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6szdgxdm.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6szdgxdm.rs:10:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6szdgxdm.rs:16:21\n\
    \   |\n16 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6szdgxdm.rs:17:38\n   |\n14 |     let mut max_so_far_rolling_max\
    \ = max_so_far;\n   |                                      ---------- expected\
    \ due to this value\n...\n17 |             max_so_far_rolling_max = number;\n\
    \   |                                      ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n17 |             max_so_far_rolling_max\
    \ = *number;\n   |                                      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6szdgxdm.rs:22:21\n   |\n22 |         if number > max_so_far_rolling_max\
    \ {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n   |                   \
    \  |\n   |                     expected `&isize`, found `isize`\n   |        \
    \             help: consider borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]:\
    \ mismatched types"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max = 0;\n    for number in\
    \ numbers {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n            max_so_far_rolling_max_rolling_max = number;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index = 0;\n\
    \    let mut max_so_far_rolling_max_rolling_max_rolling_max = 0;\n    for number\
    \ in numbers {\n        if number > max_so_far_rolling_max_rolling_max {\n   \
    \         max_so_far_rolling_max_rolling_max = number;\n            max_so_far_rolling_max_rolling_max_index\
    \ = numbers.iter().position(|&x| x == number).unwrap();\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = number;\n  \
    \          max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ number;\n            max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpq5wue01m.rs:57:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n45 |  \
    \   for number in numbers {\n   |                           - unclosed delimiter\n\
    46 |         if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n   |                                                                    \
    \            - this delimiter might not be properly closed...\n...\n49 | }\n \
    \  | - ...as it matches this but it has different indentation\n...\n57 | }\n \
    \  |   ^\n\nerror[E0425]: cannot find value `max_` in this scope\n  --> /tmp/tmpq5wue01m.rs:48:13\n\
    \   |\n48 |             max_\n   |             ^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpq5wue01m.rs:45:5\n   |\n5  |   fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                     ---------- expected `Vec<isize>` because of return type\n\
    ...\n45 | /     for number in numbers {\n46 | |         if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n47 | |             max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n48 | |             max_\n...  |\n56 | |     assert_eq!(candidate(vec![3,\
    \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n57 | | }\n   | |__^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.iter().rev().position(|x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.iter().rev().position(|x| x == number).unwrap();\n        }\n    }\n\
    \    let mut max_so_far_rolling_max_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n            max_so_far_rolling_max_rolling_max = numbers.iter().rev().position(|x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.iter().rev().position(|x| x == number).unwrap();\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.iter().rev().position(|x| x == number).unwrap();\n            max_so_far_rolling_max_rolling_max_rolling_max\
    \ = number;\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_rolling_max\
    \ = numbers.iter().rev().position(|x\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6eg6gabn.rs:60:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n48 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n49 |         if number > max_so_far_rolling_max\
    \ {\n   |                                            - this delimiter might not\
    \ be properly closed...\n...\n52 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n60 | }\n   |   ^\n\nerror: expected one of `:`,\
    \ `@`, or `|`, found `)`\n  --> /tmp/tmp6eg6gabn.rs:52:1\n   |\n51 |         \
    \    max_so_far_rolling_max_rolling_max = numbers.iter().rev().position(|x\n \
    \  |                                                                         \
    \         - expected one of `:`, `@`, or `|`\n52 | }\n   | ^ unexpected token\n\
    \nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp6eg6gabn.rs:51:79\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - closing delimiter possibly meant\
    \ for this\n...\n51 |             max_so_far_rolling_max_rolling_max = numbers.iter().rev().position(|x\n\
    \   |                                                                        \
    \       ^ unclosed delimiter\n52 | }\n   | ^ mismatched closing delimiter\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp6eg6gabn.rs:10:21\n   |\n10 |  \
    \       if number > max_so_far {\n   |                     ^^^^^^^^^^\n   |  \
    \                   |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6eg6gabn.rs:11:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n11 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |             max_so_far = *number"
  exit_code: 1
  status: SyntaxError
