name: HumanEval_7_filter_by_substring
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that contain given substring\n\
  \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
  \ : List[String], substring : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
  grunt\", \"prune\"))));\n    }\n\n}\n"
completions: ["        if (strings.isEmpty) {\n            return List[String]()\n\
    \        }\n        val head = strings.head\n        val tail = strings.tail\n\
    \        if (head.contains(substring)) {\n            return head :: filterBySubstring(tail,\
    \ substring)\n        }\n        return filterBySubstring(tail, substring)", '        strings.filter(s
    => s.contains(substring))', "        val outList = ArrayBuffer[String]()\n   \
    \     for (s <- strings) {\n            if (s.contains(substring)) {\n       \
    \         outList += s\n            }\n        }\n        outList.toList", '        strings.filter(str
    => str.contains(substring))', '        strings.filter(string => string.contains(substring))',
  '        return strings.filter(_.contains(substring))', "        // if (strings.size\
    \ == 0) {\n        //     return strings\n        // }\n        // val first =\
    \ strings.head\n        // var rest = strings.tail\n        // if (first.contains(substring))\
    \ {\n        //     rest = filterBySubstring(rest, substring)\n        //    \
    \ first :: rest\n        // } else {\n        //     rest = filterBySubstring(rest,\
    \ substring)\n        //     rest\n        // }\n        strings.filter(x => x.contains(substring))",
  '        strings.filter(x => x.contains(substring))', "        def hasSubstring(string\
    \ : String) : Boolean = {\n            var found : Boolean = false\n         \
    \   for (i <- 0 until substring.length) {\n                if (substring(i) ==\
    \ string(i)) {\n                    found = true\n                } else {\n \
    \                   found = false\n                    break\n               \
    \ }\n            }\n            found\n        }\n        strings.filter(x =>\
    \ hasSubstring(x))", "        var ans = List[String]()\n        for (s <- strings)\
    \ {\n            if (s.contains(substring)) {\n                ans = s :: ans\n\
    \            }\n        }\n        ans", '        return strings.filter(e => e.contains(substring))',
  "      def check(s : String) : Boolean = {\n        var i = 0\n        while (i\
    \ < s.length) {\n          if (s(i) == substring(0)) {\n            var j = 0\n\
    \            while (j < substring.length && i + j < s.length && s(i + j) == substring(j))\
    \ {\n              j += 1\n            }\n            if (j == substring.length)\
    \ {\n              return true\n            }\n          }\n          i += 1\n\
    \        }\n        return false\n      }\n      return strings.filter(check)",
  '        strings.filter((x : String) => x.contains(substring))', "        var result\
    \ = List[String]()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                result = str :: result\n            }\n        }\n      \
    \  result", "        // Write your code here\n        for (s <- strings if s.contains(substring))\
    \ yield s", '        strings.filter(_.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter((s : String) => s.contains(substring))',
  "        for {\n            string <- strings\n            if string.contains(substring)\n\
    \        } yield string", '        strings.filter(x => x.contains(substring))']
stop_tokens:
- "\n    }\n"
