name: HumanEval_15_string_sequence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
  \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
  0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ['        (0 to n).mkString(" ")', "        val sb = new StringBuilder\n\
    \        for (i <- 0 to n) {\n            sb.append(i.toString)\n            sb.append(\"\
    \ \")\n        }\n        sb.substring(0, sb.length - 1)", "        var nums =\
    \ new ListBuffer[Long]()\n        for (i <- 0 to n.toInt) nums += i\n        return\
    \ nums.mkString(\" \")", '        (0 to n).mkString(" ")', "        var s = \"\
    \"\n        for (i <- 0 to n) s += \" \" + i\n        s.trim", "        var str\
    \ = \"\"\n        for (i <- 0 to n) {\n            str += (i + \" \")\n      \
    \  }\n        str", "        var result = \"\"\n        for (i <- 0 to n) result\
    \ += \" \" + i\n        return result.substring(1)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 to n) {\n            sb.append(i)\n            sb.append(\"\
    \ \")\n        }\n        sb.dropRight(1).toString", "        var result = new\
    \ StringBuilder\n        for (i <- 0 to n) result ++= i.toString + \" \"\n   \
    \     result.toString.trim", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 to n) {\n            sb.append(i + \" \")\n        }\n        sb.toString.trim",
  "        var s : String = \"\"\n        for (i <- 0 to n) {\n            s += i\
    \ + \" \"\n        }\n        s.trim", "        val sb = new StringBuilder\n \
    \       for (i <- 0 to n) {\n            sb.append(i + \" \")\n        }\n   \
    \     return sb.toString.trim", "        if (n == 0) return \"0\"\n        var\
    \ s = \"\"\n        for (i <- 0 to n) s += (i.toString + \" \")\n        return\
    \ s.substring(0, s.length - 1)", "        var result = \"\"\n        for (i <-\
    \ 0 to n) result += i + \" \"\n        result.trim", "        var s : String =\
    \ \"\"\n        for (i <- 0 to n) s += i + \" \"\n        s", "        val buf\
    \ = new StringBuilder\n        for (i <- 0 to n) {\n            buf.append(i)\n\
    \            buf.append(\" \")\n        }\n        buf.toString.trim", "     \
    \   val sb = new StringBuilder()\n        for (i <- 0 to n) {\n            sb.append(i)\n\
    \            sb.append(\" \")\n        }\n        return sb.substring(0, sb.length\
    \ - 1)", "      def iter(m : Long, s : String) : String = {\n        if (m > n)\
    \ s\n        else iter(m + 1, s + \" \" + m)\n      }\n      iter(0, \"0\")",
  "        var result = new StringBuilder\n        for (i <- 0 to n) {\n         \
    \   result.append(i + \" \")\n        }\n        result.toString.trim", "    \
    \    val sb = new StringBuilder\n        for (i <- 0 to n) {\n            sb.append(i\
    \ + \" \")\n        }\n        return sb.toString.trim"]
stop_tokens:
- "\n    }\n"
