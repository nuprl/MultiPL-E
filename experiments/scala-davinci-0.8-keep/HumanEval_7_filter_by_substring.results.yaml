language: scala
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            return List[String]()\n        }\n        val head = strings.head\n\
    \        val tail = strings.tail\n        if (head.contains(substring)) {\n  \
    \          return head :: filterBySubstring(tail, substring)\n        }\n    \
    \    return filterBySubstring(tail, substring)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val outList\
    \ = ArrayBuffer[String]()\n        for (s <- strings) {\n            if (s.contains(substring))\
    \ {\n                outList += s\n            }\n        }\n        outList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(str\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // if (strings.size\
    \ == 0) {\n        //     return strings\n        // }\n        // val first =\
    \ strings.head\n        // var rest = strings.tail\n        // if (first.contains(substring))\
    \ {\n        //     rest = filterBySubstring(rest, substring)\n        //    \
    \ first :: rest\n        // } else {\n        //     rest = filterBySubstring(rest,\
    \ substring)\n        //     rest\n        // }\n        strings.filter(x => x.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def hasSubstring(string\
    \ : String) : Boolean = {\n            var found : Boolean = false\n         \
    \   for (i <- 0 until substring.length) {\n                if (substring(i) ==\
    \ string(i)) {\n                    found = true\n                } else {\n \
    \                   found = false\n                    break\n               \
    \ }\n            }\n            found\n        }\n        strings.filter(x =>\
    \ hasSubstring(x))\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda9r5pgb.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var ans = List[String]()\n\
    \        for (s <- strings) {\n            if (s.contains(substring)) {\n    \
    \            ans = s :: ans\n            }\n        }\n        ans\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphl2c2gdz.scala:21)\n\tat Problem.main(tmphl2c2gdz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(e\
    \ => e.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      def check(s :\
    \ String) : Boolean = {\n        var i = 0\n        while (i < s.length) {\n \
    \         if (s(i) == substring(0)) {\n            var j = 0\n            while\
    \ (j < substring.length && i + j < s.length && s(i + j) == substring(j)) {\n \
    \             j += 1\n            }\n            if (j == substring.length) {\n\
    \              return true\n            }\n          }\n          i += 1\n   \
    \     }\n        return false\n      }\n      return strings.filter(check)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((x\
    \ : String) => x.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result =\
    \ List[String]()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                result = str :: result\n            }\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpju84v6ng.scala:21)\n\tat Problem.main(tmpju84v6ng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Write your\
    \ code here\n        for (s <- strings if s.contains(substring)) yield s\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for {\n    \
    \        string <- strings\n            if string.contains(substring)\n      \
    \  } yield string\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
