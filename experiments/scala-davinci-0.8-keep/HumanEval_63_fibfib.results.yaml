language: scala
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var dp = ArrayBuffer.fill(3)(0L)\n        for (i\
    \ <- 0 until n) {\n            dp(i % 3) = if (i < 2) i else dp(0) + dp(1) + dp(2)\n\
    \        }\n        dp(n % 3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbuv2dx56.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbuv2dx56.scala:21:11 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        dp(n % \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m           Found:    Long\n\e[31m   |\e[0m  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n    \trequire(n >= 0)\n    \tif (n == 0) 0\n    \telse if\
    \ (n == 1) 0\n    \telse if (n == 2) 1\n    \telse fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        if (n < 2) 0\n        else if (n == 2) 1\n     \
    \   else fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var a = 0L\n        var b = 0L\n        var c =\
    \ 1L\n        var i = 2L\n        while (i <= n) {\n            a = b\n      \
    \      b = c\n            c = a + b + c\n            i += 1\n        }\n     \
    \   c\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnkf0ck2z.scala:30)\n\tat Problem.main(tmpnkf0ck2z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1) return\
    \ 0\n        if (n == 2) return 1\n        val fibfib = new Array[Long](n.toInt)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ for (i <- 3 to n.toInt) {\n            fibfib(i) = fibfib(i - 1) + fibfib(i\
    \ - 2) + fibfib(i - 3)\n        }\n        fibfib(n.toInt - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length\
    \ 5\n\tat Problem$.fibfib$$anonfun$1(tmpc7ca5pni.scala:25)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fibfib(tmpc7ca5pni.scala:26)\n\
    \tat Problem$.main(tmpc7ca5pni.scala:32)\n\tat Problem.main(tmpc7ca5pni.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var l : List[Long] = List(0,\
    \ 0, 1)\n        if (n < l.length) l(n.toInt)\n        else {\n            for\
    \ (i <- l.length to n.toInt) {\n                l = l :+ (l(i - 1) + l(i - 2)\
    \ + l(i - 3))\n            }\n            l(n.toInt)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var a = 0L\n        var b = 0L\n        var c =\
    \ 1L\n        for (i <- 3 to n.toInt) {\n            var t = a + b + c\n     \
    \       a = b\n            b = c\n            c = t\n        }\n        return\
    \ c\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp2h5pari.scala:30)\n\tat Problem.main(tmpp2h5pari.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        val arr = Array.fill(n.toInt + 1)(0L)\n        arr(0)\
    \ = 0\n        arr(1) = 0\n        arr(2) = 1\n        for (i <- 3 to n.toInt)\
    \ {\n            arr(i) = arr(i - 1) + arr(i - 2) + arr(i - 3)\n        }\n  \
    \      arr(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.fibfib(tmpqqisgu1z.scala:20)\n\tat Problem$.main(tmpqqisgu1z.scala:28)\n\
    \tat Problem.main(tmpqqisgu1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        require(n >= 0)\n        var c = -1L\n        var\
    \ b = 0L\n        var a = 0L\n        for (i <- 0L to n) {\n            if (i\
    \ == 0) {\n                c = 0\n            } else if (i == 1) {\n         \
    \       c = 0\n            } else if (i == 2) {\n                c = 1\n     \
    \       } else {\n                c = a + b + c\n                a = b\n     \
    \           b = c\n            }\n        }\n        c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4v16p9ew.scala:39)\n\tat Problem.main(tmp4v16p9ew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var a = 0L\n        var b = 0L\n        var c =\
    \ 1L\n        for (i <- 2 to n.toInt) {\n            a = b\n            b = c\n\
    \            c = a + b + c\n        }\n        return c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoe2erzms.scala:28)\n\tat Problem.main(tmpoe2erzms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        val m = 1000000007\n        val mat = Array(Array(1,\
    \ 1, 1), Array(1, 0, 0), Array(0, 1, 0))\n        def matpow(mat : Array[Array[Long]],\
    \ n : Long) : Array[Array[Long]] = {\n            if (n == 1) mat\n          \
    \  else {\n                val half = matpow(mat, n / 2)\n                if (n\
    \ % 2 == 0) mul(half, half)\n                else mul(mul(half, half), mat)\n\
    \            }\n        }\n        def mul(x : Array[Array[Long]], y : Array[Array[Long]])\
    \ : Array[Array[Long]] = {\n            val res = Array.ofDim[Long](3, 3)\n  \
    \          for (i <- 0 until 3; j <- 0 until 3) {\n                res(i)(j) =\
    \ 0\n                for (k <- 0 until 3) res(i)(j) = (res(i)(j) + x(i)(k) * y(k)(j))\
    \ % m\n            }\n            res\n        }\n        if (n <= 2) 1\n    \
    \    else {\n            val res = matpow(mat, n - 2)\n            (res(0)(0)\
    \ + res(0)(1) + res(0)(2)) % m\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4krd_9jw.scala:37:29\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e\
    [36mres\e[0m = matpow(mat, n - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    \e[1m\e[31m(\e[0m\e[1m\e[31mmat\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e\
    [1m\e[31m \e[0mArray[Array[\e[1m\e[31mInt\e[0m]]\e[1m\e[31m)\e[0m\n\e[31m   |\e\
    [0m                             Required: Array[Array[\e[1m\e[32mLong\e[0m]]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        n match {\n            case 0 => 0\n           \
    \ case 1 => 0\n            case 2 => 1\n            case _ =>\n              \
    \  val p = 2L\n                val N = n\n                def loop(i : Long, n0\
    \ : Long, n1 : Long, n2 : Long) : Long = {\n                    i match {\n  \
    \                      case i if (i == N) => n0\n                        case\
    \ _ => loop(i + 1, n0 + n1 + n2, n0, n1)\n                    }\n            \
    \    }\n                loop(p, 1, 0, 0)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var fib : Array[Long] = new Array[Long](n.toInt\
    \ + 1)\n        fib(0) = 0\n        fib(1) = 0\n        fib(2) = 1\n        for\
    \ (i <- 3 to n.toInt) fib(i) = fib(i - 1) + fib(i - 2) + fib(i - 3)\n        fib(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.fibfib(tmpo1j4cu4h.scala:20)\n\tat Problem$.main(tmpo1j4cu4h.scala:26)\n\
    \tat Problem.main(tmpo1j4cu4h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        // Fill in the body of this function.\n        0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpux94mh0c.scala:21)\n\tat Problem.main(tmpux94mh0c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        // TODO: solve it!!!\n        return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7kq1j8ph.scala:21)\n\tat Problem.main(tmp7kq1j8ph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var map = Map[Long, Long]()\n        map += (0L\
    \ -> 0L)\n        map += (1L -> 0L)\n        map += (2L -> 1L)\n        def fibfib(n\
    \ : Long) : Long = {\n            if (map.contains(n)) map(n)\n            else\
    \ {\n                val m = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n \
    \               map += (n -> m)\n                m\n            }\n        }\n\
    \        fibfib(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n\t    var a : Long = 0\n\t    var b : Long = 0\n\t    var\
    \ c : Long = 1\n\t    var d : Long = 1\n\t    if (n == 0) return 0\n\t    if (n\
    \ == 1) return 0\n\t    if (n == 2) return 1\n\t    var i : Long = 3\n\t    while\
    \ (i <= n) {\n\t\t    d = a + b + c\n\t\t    a = b\n\t\t    b = c\n\t\t    c =\
    \ d\n\t\t    i += 1\n\t    }\n\t    return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwjuvn_vo.scala:31:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m\t    }\n\e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m  \
    \ |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 2 tabs, 4 spaces\n\e[31m   |\e[0m   Latest\
    \ indent   : 1 tab, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpwjuvn_vo.scala:33:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations of\
    \ tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 4 spaces\n2 errors found\n"
  stdout: ''
  timestamp: 1659821069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        var a = 0L\n        var b = 0L\n        var c =\
    \ 1L\n        for (i <- 1L to n) {\n            val d = a + b + c\n          \
    \  a = b\n            b = c\n            c = d\n        }\n        return c\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp93okyeyv.scala:29)\n\tat Problem.main(tmp93okyeyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n\t\tvar first = 0L\n\t\tvar second = 0L\n\t\tvar third =\
    \ 1L\n\t\tvar nth = 1L\n\t\tfor (i <- 3 to n.toInt) {\n\t\t\tnth = first + second\
    \ + third\n\t\t\tfirst = second\n\t\t\tsecond = third\n\t\t\tthird = nth\n\t\t\
    }\n\t\tnth\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi6qg7x61.scala:28:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659821069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n\
    \ : Long) : Long = {\n        // Fill in the missing code here.\n        0\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptk52t2dy.scala:21)\n\tat Problem.main(tmptk52t2dy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821071
