language: scala
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var s = Set[(Long,\
    \ Long, Long, Long)]()\n        for (a <- 0L to n / 4) {\n            for (b <-\
    \ a to n / 3) {\n                for (c <- b to n / 2) {\n                   \
    \ for (d <- c to n) {\n                        if (2 * a + 2 * b + 2 * c + 2 *\
    \ d == n) {\n                            s += ((a, b, c, d))\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        s.size == 1\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwqfux8jb.scala:27)\n\tat Problem.main(tmpwqfux8jb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val upper = n / 2\n\
    \        val lower = n / 4\n        (lower to upper).map(k => {\n            val\
    \ a = k\n            val b = lower - k\n            val c = upper - k\n      \
    \      val d = k - b\n            a + b + c + d == n\n        }).filter(x => x).isEmpty\
    \ == false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd9w5tj58.scala:21)\n\tat Problem.main(tmpd9w5tj58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val isEqualToSumEven\
    \ = (1L to n) map {x =>\n            val limit = (n - x) / 2\n            (1L\
    \ to limit) map {y =>\n                val z = n - x - y\n                if (x\
    \ + y + z == n && (x % 2 == 0) && (y % 2 == 0) && (z % 2 == 0)) return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6513yji7.scala:21)\n\tat Problem.main(tmp6513yji7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) false\n\
    \        else {\n            for (a <- (2 to (n / 2).toInt).filter(x => x % 2\
    \ == 0)) {\n                for (b <- (2 to (n / 2).toInt).filter(x => x % 2 ==\
    \ 0)) {\n                    for (c <- (2 to (n / 2).toInt).filter(x => x % 2\
    \ == 0)) {\n                        for (d <- (2 to (n / 2).toInt).filter(x =>\
    \ x % 2 == 0)) {\n                            if (a + b + c + d == n) return true\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        def isValid(n : Long,\
    \ nums : List[Long]) : Boolean = {\n            if (n == 0) {\n              \
    \  val evenSum = nums.sum\n                (evenSum % 2 == 0) && (evenSum / 2\
    \ == nums.head)\n            } else {\n                (1 to 2 * n by 2).toList.forall(x\
    \ => isValid(n - x, x :: nums))\n            }\n        }\n        isValid(n,\
    \ Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpygnoak22.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                (\e[31m1\e[0m\
    \ to \e[31m2\e[0m * n by \e[31m2\e[0m).toList.forall(\e[36mx\e[0m => isValid(n\
    \ - x, x :: nums))\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m           \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n      if (n % 2 == 1) return\
    \ false\n      var h = mutable.HashSet.empty[Long]\n      h += n\n      for (i\
    \ <- 2 to 4) {\n        var hh = mutable.HashSet.empty[Long]\n        for (s <-\
    \ h) {\n          for (j <- 0 to s / 2 if j % 2 == 0) {\n            hh += s -\
    \ j\n          }\n        }\n        h = hh\n      }\n      h.size != 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc7pq01vu.scala:11:14 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mvar\e[0m \e[36mh\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc7pq01vu.scala:14:17 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mvar\e[0m \e[36mhh\e[0m = mutable.HashSet.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        for (a <- 2 to n.toInt\
    \ - 6 by 2) {\n            for (b <- a to n.toInt - (a + 2) by 2) {\n        \
    \        for (c <- b to n.toInt - (a + b + 2) by 2) {\n                    val\
    \ d = n - (a + b + c)\n                    if (d > 0 && d % 2 == 0) return true\n\
    \                }\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- (2 to n / 2 by 2)) {\n            for (j <- (2 to n\
    \ / 2 by 2)) {\n                for (k <- (2 to n / 2 by 2)) {\n             \
    \       for (l <- (2 to n / 2 by 2)) {\n                        if (i + j + k\
    \ + l == n) return true\n                    }\n                }\n          \
    \  }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysxke85_.scala:11:24\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ (\e[31m2\e[0m to n / \e[31m2\e[0m by \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    Long\n\e[31m   |\e[0m                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysxke85_.scala:12:28 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j <- (\e[31m2\e[0m to n /\
    \ \e[31m2\e[0m by \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m                    \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                            Found:    Long\n\
    \e[31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysxke85_.scala:13:32 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mfor\e[0m (k <- (\e[31m2\e[0m to\
    \ n / \e[31m2\e[0m by \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    Long\n\e[31m   |\e[0m                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysxke85_.scala:14:36 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mfor\e[0m (l <- (\e[31m2\e[0m\
    \ to n / \e[31m2\e[0m by \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m             \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \          Found:    Long\n\e[31m   |\e[0m                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val ns = n.toString.map(_.asDigit).toList\n\
    \        val r = ns.filter(_ % 2 == 0)\n        if (r.length < 4) return false\n\
    \        if (r.length == 4) return r.reduceLeft(_ + _) == ns.reduceLeft(_ + _)\n\
    \        val l = ns.filter(_ % 2 == 1)\n        if (l.length == 0) return r.reduceLeft(_\
    \ + _) == ns.reduceLeft(_ + _)\n        (0 to l.length - 1).exists(i => r.combinations(4\
    \ - i).exists(l.combinations(i).contains(_)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmf77f70_.scala:21)\n\tat Problem.main(tmpmf77f70_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- 1 to n / 2) {\n            if (n - i * 2 == 0) return\
    \ true\n            else if (n - i * 2 > 0 && isEqualToSumEven(n - i * 2)) return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwp8mdria.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        var size = (n+1)/2\n\
    \        var count = 0\n        var nums = Set[Long]()\n        var i = 2\n  \
    \      while (nums.size < size) {\n            nums += i\n            i += 2\n\
    \        }\n        def find(sum : Long, index : Int) : Boolean = {\n        \
    \    if (sum == n) {\n                count += 1\n                if (count ==\
    \ 4) return true\n                else return false\n            }\n         \
    \   if (sum > n || index == size) return false\n            return find(sum+nums(index),\
    \ index+1) || find(sum, index+1)\n        }\n        find(0, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzt6b1cbd.scala:25:27 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mreturn\e[0m find(sum+nums(index), index+\e\
    [31m1\e[0m) || find(sum, index+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \              ^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments (Boolean)\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val factors = new ArrayBuffer[Long]()\n\
    \        val factorsSet = new HashSet[Long]()\n        for (i <- 1L to n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ factorsSet += i\n            }\n        }\n        for (i <- 0 until factors.length)\
    \ {\n            for (j <- i until factors.length) {\n                for (k <-\
    \ j until factors.length) {\n                    val a = factors(i)\n        \
    \            val b = factors(j)\n                    val c = factors(k)\n    \
    \                val d = n / (a * b * c)\n                    if (a % 2 == 0 &&\
    \ b % 2 == 0 && c % 2 == 0 && d % 2 == 0 && a != b && a != c && a != d && b !=\
    \ c && b != d && c != d && factorsSet.contains(d)) return true\n             \
    \   }\n            }\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi1z2cf_h.scala:34)\n\tat Problem.main(tmpi1z2cf_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val dp = Array.fill(n.toInt\
    \ + 1)(false)\n        for (i <- 1 to n.toInt if i % 2 == 0) {\n            dp(i)\
    \ = true\n            for (j <- i to n.toInt) dp(j) |= dp(j - i)\n        }\n\
    \        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxje4jj0l.scala:18)\n\tat Problem.main(tmpxje4jj0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val a = n / 2\n   \
    \     val b = n / 2 - 1\n        val c = n / 2 - 2\n        val d = n / 2 - 3\n\
    \        if (n == a + b + c + d && a > 0 && b > 0 && c > 0 && d > 0 && a % 2 ==\
    \ 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0) true else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8luvsky.scala:19)\n\tat Problem.main(tmpw8luvsky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        for (i <- 1 to n.toInt\
    \ / 2) {\n            for (j <- 1 to n.toInt / 2) {\n                for (k <-\
    \ 1 to n.toInt / 2) {\n                    for (l <- 1 to n.toInt / 2) {\n   \
    \                     if (i + j + k + l == n && i % 2 == 0 && j % 2 == 0 && k\
    \ % 2 == 0 && l % 2 == 0) return true\n                    }\n               \
    \ }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        for (i <- (1 to n/2).toList) {\n            if (i % 2 == 1) {\n\
    \                if (isEqualToSumEven(n - i)) return true\n            }\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1mgupep.scala:11:24\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ (\e[31m1\e[0m to n/\e[31m2\e[0m).toList) {\n\e[31m\e[31m   |\e[0m          \
    \              ^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\
    \e[31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        val sum = (0L until n).filter(_ % 2 == 0).toArray\n        val\
    \ flag = Array.fill(n + 1)(false)\n        flag(0) = true\n        for (i <- sum)\
    \ {\n            for (j <- n - i to 0 by -1) {\n                if (flag(j)) flag(j\
    \ + i) = true\n            }\n        }\n        for (i <- 0 to n / 2) {\n   \
    \         if (flag(i) && flag(n - i)) return true\n        }\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bvzzsg1.scala:12:30\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mflag\e\
    [0m = Array.fill(n + \e[31m1\e[0m)(\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         Found:    Long\n\e[31m   |\e[0m                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bvzzsg1.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m\
    \ (flag(j)) flag(j + i) = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m             \
    \            ^\e[0m\n\e[31m   |\e[0m                         Found:    (j : Long)\n\
    \e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2bvzzsg1.scala:16:34 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (flag(j)) flag(j + i) =\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                  ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Long\n\e[31m \
    \  |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bvzzsg1.scala:19:23 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n / \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bvzzsg1.scala:20:32\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (flag(i)\
    \ && flag(n - i)) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Found:    L"
  stdout: ''
  timestamp: 1659821073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        n % 2 == 0 && n % 4\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr9h6sl7x.scala:14)\n\tat Problem.main(tmpr9h6sl7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        if (n % 2 == 1) return\
    \ false\n        var found = false\n        var a = 2L\n        while (a <= n)\
    \ {\n            var b = 2L\n            while (b <= n - a) {\n              \
    \  var c = 2L\n                while (c <= n - a - b) {\n                    var\
    \ d = 2L\n                    while (d <= n - a - b - c) {\n                 \
    \       if (a + b + c + d == n) found = true\n                        d += 2\n\
    \                    }\n                    c += 2\n                }\n      \
    \          b += 2\n            }\n            a += 2\n        }\n        found\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n\
    \    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n\
    \    def isEqualToSumEven(n : Long) : Boolean = {\n        val target = n.toInt\n\
    \        for (x <- 2 to target - 6 by 2) {\n            for (y <- 2 to target\
    \ - 4 by 2) {\n                for (z <- 2 to target - 2 by 2) {\n           \
    \         if (x + y + z == target) return true\n                }\n          \
    \  }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
