language: scala
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 1;\n        while (i <= math.sqrt(x))\
    \ {\n            if (pow(n, i).toLong == x) return true;\n            i += 1;\n\
    \        }\n        return false;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9itzuucb.scala:32)\n\tat Problem.main(tmp9itzuucb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        def isPower(x : Long, n : Long) : Boolean =\
    \ x == pow(n, log(x) / log(n)).toLong\n        isPower(x, n) && log(x) / log(n)\
    \ % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cr9it6_.scala:27)\n\tat Problem.main(tmp8cr9it6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        // Write your code here\n        // Return\
    \ true or false depending on the result\n        if (n == 1) false\n        else\
    \ {\n          val l = log(x) / log(n)\n          l - round(l) == 0\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmposq352nr.scala:32)\n\tat Problem.main(tmposq352nr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        // Your code goes here\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphlye97xm.scala:20)\n\tat Problem.main(tmphlye97xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) true\n        else {\n        \
    \    var z = 1L\n            for (i <- 0 to x.toString.length) {\n           \
    \     z *= n\n                if (z == x) return true\n            }\n       \
    \     false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfkpmzxk.scala:26)\n\tat Problem.main(tmpjfkpmzxk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        // insert your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1orsht1.scala:14:54\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36misSimplePower\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \        Found:    Unit\n\e[31m   |\e[0m                                     \
    \                 Required: Boolean\n\e[31m15 |\e[0m        \e[34m// insert your\
    \ code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var i =\
    \ 0\n        while (math.pow(n, i) <= x) {\n            if (math.pow(n, i) ==\
    \ x) return true\n            i += 1\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var left =\
    \ 1\n        var right = x\n        while (left <= right) {\n            val mid\
    \ = (left + right) / 2\n            if (mid.toLong == x / mid.toLong && mid.toLong\
    \ == x / mid.toLong && x % mid.toLong == 0) return true\n            if (mid.toLong\
    \ < x / mid.toLong) left = mid + 1\n            else right = mid - 1\n       \
    \ }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2yohviwk.scala:21:52\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (mid.toLong\
    \ < x / mid.toLong) left = mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                                Found:    Long\n\e[31m   |\e\
    [0m                                                    Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var x_ = x\n        while (x_ % n == 0) x_\
    \ /= n\n        return x_ == 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659820895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 1\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi288cmde.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n    \tval k = log(x) / log(n)\n    \tk == k.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2ln19uv.scala:27)\n\tat Problem.main(tmpt2ln19uv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return false\n        var count\
    \ = 0\n        while (count * count <= x) {\n            if (count * count ==\
    \ x) return true\n            count += 1\n        }\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39b6exbo.scala:32)\n\tat Problem.main(tmp39b6exbo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n <= 0) false\n        else if (x == 1)\
    \ true\n        else if (n > x) false\n        else {\n            val xlog =\
    \ log(x) / log(n)\n            val xfloor = floor(xlog)\n            val xceil\
    \ = ceil(xlog)\n            if (xfloor == xceil) true\n            else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        n match {\n            case 1 => x == 1\n \
    \           case n => (x % n == 0) && isSimplePower(x / n, n)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7v2cjnsf.scala:21)\n\tat Problem.main(tmp7v2cjnsf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        def isSimplePowerHelper(x : Long, n : Long,\
    \ result : Long) : Boolean = {\n            if (result == x) true\n          \
    \  else if (result > x) false\n            else isSimplePowerHelper(x, n, result\
    \ * n)\n        }\n        if (x == 0) false\n        else if (n == 0) x == 1\n\
    \        else if (n == 1) true\n        else isSimplePowerHelper(x, n, n)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhw6tz31.scala:35)\n\tat Problem.main(tmpxhw6tz31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var left\
    \ = 1L\n        var right = x\n        while (left <= right) {\n            val\
    \ mid = (left + right) / 2\n            val cur = pow(mid, log(x) / log(mid)).toLong\n\
    \            if (cur == x) return true\n            else if (cur < x) left = mid\
    \ + 1\n            else right = mid - 1\n        }\n        false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) ==\
    \ (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8kv4e6mp.scala:29)\n\tat Problem.main(tmp8kv4e6mp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var power = n\n        while (power <= x) {\n\
    \            if (power == x) return true\n            power *= n\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnudzfws.scala:32)\n\tat Problem.main(tmpsnudzfws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n      if (x == 1) return true\n      var i = 2L\n \
    \     while (i <= x) {\n        var m = 1L\n        while (m <= i) {\n       \
    \   if (pow(n, m) == x) return true\n          m += 1\n        }\n        i +=\
    \ 1\n      }\n      return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659820895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        // Write your code here\n        for (i <-\
    \ 0 to x.toInt) {\n            if (pow(n, i) == x) return true\n        }\n  \
    \      false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val t = log(x)/log(n)\n        t == math.round(t)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq_0zssj7.scala:27)\n\tat Problem.main(tmpq_0zssj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
