name: HumanEval_97_multiply
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Complete the function that takes two integers and returns \n    // the product\
  \ of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n\
  \    // multiply(148, 412) should return 16.\n    // multiply(19, 28) should return\
  \ 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15) should\
  \ return 20.\n    def multiply(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
  \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
  \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
  \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
  \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
completions: ["        val ap = abs(a)\n        val bp = abs(b)\n        (ap%10)*(bp%10)",
  "        val pos = abs(a) * abs(b)\n        val neg = -abs(a) * abs(b)\n       \
    \ val result = if (a * b < 0) neg else pos\n        result.toString.last.toString.toLong",
  "        // apply function to both unit digits and multiply\n        return (a %\
    \ 10) * (b % 10)", '        (a % 10) * (b % 10)', "        val x = (a - a / 10\
    \ * 10) * (b - b / 10 * 10)\n        x", "        def getUnitDigit(i : Long) :\
    \ Long = {\n            def getUnit(i : Long) : Long = {\n                if (i\
    \ < 10) i\n                else getUnit(i / 10)\n            }\n            val\
    \ unit = getUnit(i)\n            if (unit >= 5) unit else unit * 2\n        }\n\
    \        getUnitDigit(a) * getUnitDigit(b)", '        (a % 10) * (b % 10)', " \
    \       val bs = b.toString\n        a * bs(bs.length - 1).asDigit", '        (a
    % 10) * (b % 10)', '        abs(a % 10) * abs(b % 10)', '        a * b', '      BigInt(a).mod(10)
    * BigInt(b).mod(10)', "        // Write your code here\n        abs(a % 10) *\
    \ abs(b % 10)", '      a.abs*b.abs%10', "        var temp1 = a.abs\n        var\
    \ temp2 = b.abs\n        var arr1 = new ArrayBuffer[Long]()\n        var arr2\
    \ = new ArrayBuffer[Long]()\n        while (temp1 > 0) {\n            arr1 +=\
    \ temp1 % 10\n            temp1 /= 10\n        }\n        while (temp2 > 0) {\n\
    \            arr2 += temp2 % 10\n            temp2 /= 10\n        }\n        var\
    \ total = 0L\n        for (i <- 0 until arr1.length) {\n            for (j <-\
    \ 0 until arr2.length) {\n                total += arr1(i) * arr2(j)\n       \
    \     }\n        }\n        total", "        val units = List(a, b).map(n => n\
    \ % 10)\n        units.product", '        return (a%10)*(b%10)', '        abs(a
    * b) % 10', "        val p = List(a, b).map {_.toString.split(\"\").map {_.toInt}.reduce\
    \ {_ * _}}\n        return p.head * p.last", "        var p1 = (abs(a) % 10) *\
    \ (abs(b) % 10)\n        // println(p1)\n        p1"]
stop_tokens:
- "\n    }\n"
