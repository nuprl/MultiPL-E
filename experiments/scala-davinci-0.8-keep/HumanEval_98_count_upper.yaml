name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
  \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        // Fill in the code\n        var result = 0\n        for (i\
    \ <- s.indices) {\n            if (i % 2 == 0 && s(i).isUpper) result += 1\n \
    \       }\n        result", "        def upperVowel(ch : Char) : Boolean = {\n\
    \            (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\
    \        }\n        (0 /: s.toList.zipWithIndex)((acc, x) => if (x._2 % 2 == 0\
    \ && upperVowel(x._1)) acc + 1 else acc)", "        var ans = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) ans += 1\n\
    \        }\n        ans", '        s.zipWithIndex.filter(p => p._2 % 2 == 0 &&
    p._1.isUpper).length', "        var count = 0\n        for (i <- 0 until s.length\
    \ if i % 2 == 0) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var sum = 0;\n        for (i <- 0 until s.length if (i %\
    \ 2 == 0 && ('A' to 'Z').contains(s(i)))) sum += 1;\n        sum;", '        s.toList.zipWithIndex.map(t
    => if (t._2 % 2 == 0 && t._1.isUpper) 1 else 0).sum', "        if (s.length()\
    \ == 0) 0\n        else if (s.length() % 2 == 0) if (isUpper(s(0))) 1 else 0 +\
    \ countUpper(s.substring(1))\n        else countUpper(s.substring(1))", '        s.zipWithIndex.filter(p
    => p._2 % 2 == 0 && p._1.isUpper).size', '        s.zipWithIndex.filter(p => p._2
    % 2 == 0 && p._1.isUpper).length', "        var sum = 0\n        for (i <- 0 until\
    \ s.length if (i % 2 == 0)) {\n            if (s(i).isUpper) sum += 1\n      \
    \  }\n        sum", "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && isUpper(x._1)).count(x => isVowel(x._1))',
  '      ???', "        if (s.length == 0) {\n            0\n        } else {\n  \
    \          val c = s.charAt(0)\n            if (c.isUpper && c.isLetter && c.isVowel)\
    \ 1 + countUpper(s.substring(2)) else countUpper(s.substring(2))\n        }",
  '        return 0', '        return s.zipWithIndex.filter(_._2 % 2 == 0).filter(pair
    => pair._1.isUpper).size', "        var number = 0\n        for (i <- 0 until\
    \ s.length if i % 2 == 0) {\n            if (s(i).isUpper) number += 1\n     \
    \   }\n        number", "        s.zipWithIndex.foldLeft(0L)((c, x) => {\n   \
    \         if (x._2 % 2 == 0 && x._1.isUpper) c + 1\n            else c\n     \
    \   })", "        //if (s.length % 2 == 0) {\n        //    s.zipWithIndex.filter(c\
    \ => (c._2 % 2 == 0) && c._1.isUpper).size\n        //} else {\n        //   \
    \ s.zipWithIndex.filter(c => (c._2 % 2 == 1) && c._1.isUpper).size\n        //}\n\
    \        s.zipWithIndex.count(c => (c._2 % 2 == 0) && c._1.isUpper)"]
stop_tokens:
- "\n    }\n"
