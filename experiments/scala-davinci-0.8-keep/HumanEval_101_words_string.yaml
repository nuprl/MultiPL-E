name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return an array of the words.\n\
  \    // For example:\n    // words_string(\"Hi, my name is John\") == [\"Hi\", \"\
  my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two, three, four,\
  \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n \
  \   def wordsString(s : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ["      // do not use the split function\n      // instead, use the foldLeft\
    \ function\n      s.split(',').toList.map(x => x.trim).filter(x => x.length >\
    \ 0)", '        return s.split("[ ,]+").toList', '        s.split("[\\s,]+").toList',
  '        s.split("[,\\s]+").toList', '        s.split(" |,").toList', '      s.split("[
    ,]+").toList', '        return s.split("[, ]+").toList', '        return s.split("[,
    ]+").toList', '        s.split(",? ").toList', "        def toWords(acc : List[String],\
    \ str : String) : List[String] = {\n            if (str.length == 0) acc\n   \
    \         else {\n                val index = str.indexOf(' ')\n             \
    \   if (index < 0) toWords(acc :+ str, \"\")\n                else toWords(acc\
    \ :+ str.substring(0, index), str.substring(index + 1))\n            }\n     \
    \   }\n        toWords(List[String](), s)", "        val words = new ListBuffer[String]\n\
    \        s.split(\" \").foreach(word => word.split(\",\").foreach(w => words +=\
    \ w))\n        words.toList", "        val words = s.split(\"[,\\\\s]\").toList.filter(s\
    \ => s != \"\")\n        words", "        var words : List[String] = List()\n\
    \        for (word <- s.split(\" \")) {\n            words = words :+ word\n \
    \       }\n        words", "        val words = ListBuffer[String]()\n       \
    \ for (word <- s.split(\"[,\\\\s]+\"))\n            words += word\n        words.toList",
  "    \ts.split(\" |,\").toList", "        val tokens = new StringTokenizer(s, \"\
    , \")\n        var words = List[String]()\n        while (tokens.hasMoreTokens)\
    \ {\n            words ::= tokens.nextToken\n        }\n        words.reverse",
  '        s.split("[, ]+").toList', "        val words : Array[String] = s.split(\"\
    [ ,]+\")\n        var res : List[String] = List()\n        for (w <- words) {\n\
    \            res = w :: res\n        }\n        res.reverse", '        s.split("""[,
    ]+""").toList', '        s.split("[,\\s]+").toList']
stop_tokens:
- "\n    }\n"
