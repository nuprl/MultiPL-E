language: scala
name: HumanEval_112_reverse_delete
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        c.foreach(sb.deleteChar(_))\n        (sb.toString, sb.toString == sb.reverse.toString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxlsynxlv.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        c.foreach(sb.deleteChar(_))\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue deleteChar is not\
    \ a member of StringBuilder - did you mean sb.deleteCharAt?\n1 error found\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val t = s.filter(x\
    \ => !c.contains(x))\n        (t, t == t.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = \"\
    \";\n        for (x <- s) {\n            if (!c.contains(x)) {\n             \
    \   result += x;\n            }\n        }\n        return (result, result ==\
    \ result.reverse);\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var new_s = s\n\
    \        for (char <- c) {\n            new_s = new_s.replaceAll(char.toString(),\
    \ \"\")\n        }\n        (new_s, new_s == new_s.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var ret = \"\"\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                ret += s(i)\n            }\n        }\n        return (ret, ret\
    \ == ret.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val out = s.filterNot(c.contains(_))\n\
    \        return (out, out == out.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // If the result\
    \ string is empty then return empty string and True since empty string is palindrome\n\
    \        if (s.length == 0) (\"\",true)\n        // If the delete string is empty\
    \ then return the original string and check if it is palindrome\n        else\
    \ if (c.length == 0) (s, isPalindrome(s))\n        // If the result string is\
    \ not empty and the delete string is not empty then process\n        else {\n\
    \            // Convert the delete string to map for O(1) access time\n      \
    \      val cMap = Map[Char, Int]() ++ c.map(_ -> 1)\n            // Reverse the\
    \ original string\n            val reverseS = s.reverse\n            // Reverse\
    \ delete process\n            val deleteS = s.map(x => {\n                if (cMap.contains(x))\
    \ \"\"\n                else x.toString\n            }).mkString\n           \
    \ // Reverse delete process on the reverse string\n            val deleteReverseS\
    \ = reverseS.map(x => {\n                if (cMap.contains(x)) \"\"\n        \
    \        else x.toString\n            }).mkString\n            // Check if the\
    \ result of reverse delete process is the same as the reverse delete process on\
    \ the reverse string\n            val result = if (deleteS == deleteReverseS)\
    \ (deleteS, true) else (deleteS, false)\n            // Return the result\n  \
    \          result\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuahc6bsa.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (c.length == \e\
    [31m0\e[0m) (s, isPalindrome(s))\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var res = \"\"\n\
    \        for (ch <- s) {\n            if (!c.contains(ch)) res += ch\n       \
    \ }\n        var res2 = \"\"\n        for (ch <- res) {\n            res2 = ch\
    \ + res2\n        }\n        return (res, res == res2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Checking the\
    \ given parameters first\n        if (s == null || c == null) {\n            println(\"\
    Your input strings are null!\")\n            return null\n        }\n        //\
    \ Let us define a hash table that will contain all the characters in c\n     \
    \   var table : HashSet[Char] = new HashSet[Char]()\n        // Populating the\
    \ table with characters from c\n        for (ch <- c) table += ch\n        //\
    \ Now, creating a string that will contain the result string\n        var result\
    \ : String = \"\"\n        // Going through all the characters in s\n        for\
    \ (ch <- s) {\n            // We do not want to append the characters from c into\
    \ result\n            if (!table.contains(ch)) result += ch\n        }\n     \
    \   // Now we have the result string\n        // We are going to check if the\
    \ result string is palindrome\n        // Creating two pointers, one at the beginning\
    \ and one at the end of the result string\n        var i = 0\n        var j =\
    \ result.length - 1\n        // Let us move the pointers and check if the characters\
    \ are equal\n        while (i < j) {\n            if (result(i) != result(j))\
    \ return (result, false)\n            i += 1\n            j -= 1\n        }\n\
    \        // If the loop is terminated, it means that we have a palindrome and\
    \ we should return True\n        (result, true)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n      var sb = new StringBuilder()\n\
    \      for (i <- 0 until s.length) {\n        if (!c.contains(s(i))) sb.append(s(i))\n\
    \      }\n      var sb2 = new StringBuilder()\n      for (i <- 0 until sb.length)\
    \ {\n        sb2.append(sb(sb.length - 1 - i))\n      }\n      return (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n      val res = new StringBuilder()\n\
    \      var cArr = c.toCharArray\n      for (i <- 0 until s.length) {\n       \
    \ var found = false\n        for (j <- 0 until cArr.length) {\n          if (s(i)\
    \ == cArr(j)) {\n            found = true\n            cArr = cArr.filterNot(_\
    \ == cArr(j))\n          }\n        }\n        if (!found) res.append(s(i))\n\
    \      }\n      (res.toString, isPalindrome(res.toString))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp94gbbpot.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      (res.toString, isPalindrome(res.toString))\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Convert the\
    \ array of characters of s to a list\n        val l = s.toList\n        // Find\
    \ all indexes of characters contained in string c\n        val ind = s.zipWithIndex.filter{case\
    \ (ch,_) => c.contains(ch)}.map(_._2)\n        // Convert s to list, then delete\
    \ all of the indexes contained in ind, then convert the list back to a string\n\
    \        val str = l.zipWithIndex.filter{case (_,i) => !ind.contains(i)}.map(_._1).mkString\n\
    \        // Return a tuple containing the result string and a boolean result\n\
    \        (str, str == str.reverse)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here.\n        val list = c.toList\n        val result = s.filter( x => !list.contains(x))\n\
    \        val reverse = result.reverse\n        return (result,result == reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // We have to make\
    \ a string with all the allowed characters (c)\n        // We then delete all\
    \ the characters in s that are not in the allowed string\n        // Then we check\
    \ if the resulting string is a palindrome\n        // We return a tuple with the\
    \ new string and True/False for the palindrome check\n        val allowed = s.filter(c.contains(_))\n\
    \        val result = s.filter(!allowed.contains(_))\n        (result, result\
    \ == result.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        (s.filterNot(c.contains(_)),\
    \ s.filterNot(c.contains(_)).reverse == s.filterNot(c.contains(_)))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"\
    ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"\
    b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var str = new StringBuilder(s)\n\
    \        for (i <- 0 until s.length) {\n            if (c.contains(s(i))) str.setCharAt(i,\
    \ '0')\n        }\n        return (str.toString.replace(\"0\", \"\"), isPalindrome(str.toString.replace(\"\
    0\", \"\")))\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwpl5_yts.scala:18:47 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m (str.toString.replace(\e[31m\"\
    0\"\e[0m, \e[31m\"\"\e[0m), isPalindrome(str.toString.replace(\e[31m\"0\"\e[0m,\
    \ \e[31m\"\"\e[0m)))\n\e[31m\e[31m   |\e[0m                                  \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                  Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val str = s.toCharArray.filter(x\
    \ => !c.contains(x))\n        return (str.mkString, str.mkString.equals(str.reverse.mkString))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s_ = s.filterNot(c.contains(_))\n\
    \        if (s_.reverse == s_) (s_, true) else (s_, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val d = s.filterNot(c.contains(_))\n\
    \        val p = d.equals(d.reverse)\n        (d, p)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        (s.filterNot(c.contains(_)),\
    \ s.filterNot(c.contains(_)).reverse == s.filterNot(c.contains(_)))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"\
    ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"\
    b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
