language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The indices of the elements\
    \ of a form a sequence\n        //             1, 2, 3, 4, 5, 6, ..., n\n    \
    \    // The values of a form a sequence\n        //             1, 3, 7, 13, 21,\
    \ 31, ..., i^2 - i + 1, ..., n^2 - n + 1\n        // The sequence i^2 - i + 1\
    \ can be written as\n        //             i^2 - i + 1 = (i - 1/2)^2 + 3/4\n\
    \        // This is a parabola that increases monotonically.\n        // Since\
    \ the sequence of indices is linear and the sequence of values is\n        //\
    \ a parabola that increases monotonically, we can construct our sequence a\n \
    \       // as follows.\n        // For each i, find the index k such that a[k]\
    \ = (i - 1/2)^2 + 3/4.\n        // Then a[i] = a[k].\n        // For example,\
    \ suppose n = 4.\n        // Then the sequence of values is\n        //      \
    \       a = [1, 3, 7, 13]\n        // The sequence of indices is\n        // \
    \            b = [1, 2, 3, 4]\n        // We can construct a as follows.\n   \
    \     //             a[1] = a[1]\n        //             a[2] = a[4] = 13\n  \
    \      //             a[3] = a[9] = 31\n        //             a[4] = a[16] =\
    \ 61\n        // This can be done in O(n) with a hash table to keep track of the\
    \ values of a.\n        // The hash table can be implemented with a mutable hash\
    \ map.\n        val a = HashMap[Long, Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            val k = pow(i.toDouble - 0.5, 2.0).toLong + 3L / 4L\n       \
    \     a(i) = a(k)\n        }\n        // Now that we have constructed a, we have\
    \ to find the number of triples\n        // (a[i], a[j], a[k]) such that i < j\
    \ < k and a[i] + a[j] + a[k]\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuunyg7l.scala:40:8\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n.toInt) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m41 |\e\
    [0m            \e[33mval\e[0m \e[36mk\e[0m = pow(i.toDouble - \e[31m0.5\e[0m,\
    \ \e[31m2.0\e[0m).toLong + \e[31m3L\e[0m / \e[31m4L\e[0m\n\e[31m42 |\e[0m    \
    \        a(i) = a(k)\n\e[31m43 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var res = 0\n        for (i <- 0 until n.toInt - 2) {\n      \
    \      for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j + 1 until\
    \ n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) res += 1\n\
    \                }\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8d2n24e0.scala:30)\n\tat Problem.main(tmp8d2n24e0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1 to n.toInt).map(x\
    \ => x * x - x + 1).toArray\n        var count = 0\n        for (i <- 0 until\
    \ n.toInt) for (j <- i + 1 until n.toInt) for (k <- j + 1 until n.toInt) if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // number of tuples of a[i],\
    \ a[j], a[k] such that i < j < k\n        // => nC3 = n! / 3!(n - 3)! = n * (n\
    \ - 1) * (n - 2) / 6\n        val maxSum = n * (n - 1) * (n - 2) / 6\n       \
    \ var sum = 0L\n        for (i <- 1L to n) {\n            val a = i * i - i +\
    \ 1\n            if (a % 3 == 0) sum += maxSum\n            else if (a % 3 ==\
    \ 1) sum += maxSum * 2 / 3\n            else sum += maxSum / 3\n        }\n  \
    \      sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mt9wzgz.scala:28)\n\tat Problem.main(tmp7mt9wzgz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        n * (n - 1) * (n - 2) / 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnj0lb63r.scala:18)\n\tat Problem.main(tmpnj0lb63r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n <= 2) return 0\n  \
    \      val dp = Array.fill(3)(0L)\n        var sum = 0L\n        for (i <- 1 to\
    \ n.toInt) {\n            val a = i * i - i + 1\n            sum += a\n      \
    \      val remainder = sum % 3\n            dp(remainder.toInt) += 1\n       \
    \ }\n        val maxTriples = dp(0) * (dp(0) - 1) * (dp(0) - 2) / 6\n        \
    \                    + dp(1) * (dp(1) - 1) * (dp(2)) / 2\n                   \
    \         + dp(2) * (dp(2) - 1) * (dp(1)) / 2\n        maxTriples\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihq4r3yp.scala:31)\n\tat Problem.main(tmpihq4r3yp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tif (n < 3) return 0\n    \t\
    var count = 0L\n    \tval values = Array.ofDim[Long](n.toInt + 1)\n    \tvar i\
    \ = 1\n    \twhile (i <= n) {\n    \t\tvalues(i) = i * i - i + 1\n    \t\ti +=\
    \ 1\n    \t}\n    \tvar j = 2\n    \twhile (j <= n) {\n    \t\tvar k = j + 1\n\
    \    \t\twhile (k <= n) {\n    \t\t\tif ((values(j) + values(k)) % 3 == 0) {\n\
    \    \t\t\t\tvar l = 1\n    \t\t\t\twhile (l < j) {\n    \t\t\t\t\tif ((values(l)\
    \ + values(j) + values(k)) % 3 == 0) count += 1\n    \t\t\t\t\tl += 1\n    \t\t\
    \t\t}\n    \t\t\t}\n    \t\t\tk += 1\n    \t\t}\n    \t\tj += 1\n    \t}\n   \
    \ \tcount\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2niz8b2e.scala:41)\n\tat Problem.main(tmp2niz8b2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val m = min(n, 3L)\n    \
    \    val f = Array.fill(n.toInt + 1)(0L)\n        val g = Array.fill(n.toInt +\
    \ 1)(0L)\n        f(1) = 1\n        g(2) = 1\n        var t = 1L\n        for\
    \ (i <- 3 to n.toInt) {\n            g(i) = g(i - 1) + f(i - 2)\n            if\
    \ (i > m) g(i) -= g(i - m.toInt - 1)\n            f(i) = g(i) + f(i - 1)\n   \
    \         t += g(i)\n        }\n        t\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwraksl0.scala:30)\n\tat Problem.main(tmplwraksl0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The only valid triples\
    \ are with a[i] % 3 = 1 and a[j] % 3 = 2.\n        // a[i] = 1 and a[j] = 2.\n\
    \        // a[k] % 3 = 0, so k should be a multiple of 3.\n        // So we have\
    \ a[i] + a[j] + a[k] = 4 + 5 + 6 = 15, which is a multiple of 3.\n        // So\
    \ we can only have k = 3, 6, 9, ... = a[k] = 4, 10, 19, ...\n        // Thus we\
    \ are looking for j such that a[j] = (2 + 3x)(2 + 3x + 1) = 12x + 13, x = 0, 1,\
    \ 2, ...\n        // which has a closed form expression, so we can use a binary\
    \ search.\n        // Then we need to count the number of valid triples.\n   \
    \     // For the closed form expression for a[j], we have j = 1 + (sqrt(12x +\
    \ 13) - 1) / 2.\n        // This is an decreasing function, so we can use a binary\
    \ search.\n        // For k, we have k = 1 + (sqrt(12x + 13) + 1) / 2.\n     \
    \   // Then (2 + 3x)(2 + 3x + 1) + (2 + 3x + 1)(2 + 3x + 2) - 1 = 12x + 13 + 12x\
    \ + 24 + 12x + 35 - 1 = 36x + 71\n        // and (2 + 3x + 1)(2 + 3x + 2) = 12x\
    \ + 24 + 12x + 35 = 24x + 59\n        // So we have (j - 1)(k - 1) = 36x + 71\
    \ - 24x - 59 = 12x + 12, which is a constant.\n        // Since we have i < j\
    \ < k, then i < k - 1, so i < (2 + 3x + 1)(2 + 3x + 2) / 2 = 12x + 24 + 12x +\
    \ 35 / 2 = 12x + 59.5\n        // so we have i < floor(12x + 59.5) = 12x + 59.\n\
    \        // So the number of valid triples for the closed form expression for\
    \ a\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9u4jpnq_.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// The\
    \ only valid triples are with a[i] % 3 = 1 and a[j] % 3 = 2.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// a[i] = 1 and a[j] = 2.\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ a[k] % 3 = 0, so k should be a multiple of 3.\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// So we have a[i] + a[j] + a[k] = 4 + 5 + 6 = 15, which is a multiple of\
    \ 3.\e[0m\n\e[31m19 |\e[0m        \e[34m// So we can only have k = 3, 6, 9, ...\
    \ = a[k] = 4, 10, 19, ...\e[0m\n\e[31m20 |\e[0m        \e[34m// Thus we are looking\
    \ for j such that a[j] = (2 + 3x)(2 + 3x + 1) = 12x + 13, x = 0, 1, 2, ...\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// which has a closed form expression, so we can\
    \ use a binary search.\e[0m\n\e[31m22 |\e[0m        \e[34m// Then we need to count\
    \ the number of valid triples.\e[0m\n\e[31m23 |\e[0m        \e[34m// For the closed\
    \ form expression for a[j], we have j = 1 + (sqrt(12x + 13) - 1) / 2.\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// This is an decreasing function, so we can use a\
    \ binary search.\e[0m\n\e[31m25 |\e[0m        \e[34m// For k, we have k = 1 +\
    \ (sqrt(12x + 13) + 1) / 2.\e[0m\n\e[31m26 |\e[0m        \e[34m// Then (2 + 3x)(2\
    \ + 3x + 1) + (2 + 3x + 1)(2 + 3x + 2) - 1 = 12x + 13 + 12x + 24 + 12x + 35 -\
    \ 1 = 36x + 71\e[0m\n\e[31m27 |\e[0m        \e[34m// and (2 + 3x + 1)(2 + 3x +\
    \ 2) = 12x + 24 + 12x + 35 = 24x + 59\e[0m\n\e[31m28 |\e[0m        \e[34m// So\
    \ we have (j - 1)(k - 1) = 36x + 71 - 24x - 59 = 12x + 12, which is a constant.\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// Since we have i < j < k, then i < k - 1,\
    \ so i < (2 + 3x + 1)(2 + 3x + 2) / 2 = 12x + 24 + 12x + 35 / 2 = 12x + 59.5\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// so we have i < floor(12x + 59.5) = 12x +\
    \ 59.\e[0m\n\e[31m31 |\e[0m        \e[34m// So the"
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // return (3 * n * n - 3\
    \ * n + 1) / 2;\n        return n * (n - 1) * (n - 2) / 6;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwo8xz726.scala:19)\n\tat Problem.main(tmpwo8xz726.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var ans = 0\n        for\
    \ (i <- 1 to n.toInt) {\n            var sum = 0\n            var j = i\n    \
    \        while (j <= n.toInt) {\n                sum += j * j - j + 1\n      \
    \          if (sum % 3 == 0) ans += 1\n                j += 1\n            }\n\
    \        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8v2rc72.scala:28)\n\tat Problem.main(tmps8v2rc72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // returns number of triples\n\
    \        // a[i] + a[j] + a[k] % 3 == 0\n        // i < j < k\n        // a[i]\
    \ = i * i - i + 1\n        // a[i] % 3 == 0 iff i % 3 == 1\n        val mod =\
    \ 3\n        val map = new HashMap[Long, Long]()\n        for (i <- 1 to (n -\
    \ 2)) {\n            for (j <- (i + 1) to (n - 1)) {\n                for (k <-\
    \ (j + 1) to n) {\n                    val a = (i * i - i + 1).toLong % mod\n\
    \                    val b = (j * j - j + 1).toLong % mod\n                  \
    \  val c = (k * k - k + 1).toLong % mod\n                    val sum = (a + b\
    \ + c) % mod\n                    val count = map.getOrElse(sum, 0)\n        \
    \            map(sum) = count + 1\n                }\n            }\n        }\n\
    \        val t1 = map.getOrElse(0, 0)\n        val t2 = map.getOrElse(1, 0) *\
    \ 2 + map.getOrElse(2, 0) * 2\n        t1 + t2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmaf_eb0w.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to (n - \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m               \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e\
    [31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmaf_eb0w.scala:23:34 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (j <- (i + \e[31m1\e[0m) to\
    \ (n - \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                               \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:    Long\n\
    \e[31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmaf_eb0w.scala:24:37 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mfor\e[0m (k <- (j + \e[31m1\e[0m)\
    \ to n) {\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmaf_eb0w.scala:30:37 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    map(sum) = count + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmaf_eb0w.scala:35:37\
    \ --------"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        return a.combinations(3).count(s => s.sum % 3 == 0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpei33hr6r.scala:22)\n\tat Problem.main(tmpei33hr6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var result = 0L\n       \
    \ for (i <- 1L to n) result += ((n - i + 1) / 3) * ((n - i + 1) % 3)\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qn_g33g.scala:20)\n\tat Problem.main(tmp2qn_g33g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        var\
    \ currentIndex = 1L\n        var lastIndex = n\n        while (currentIndex <\
    \ lastIndex) {\n            var currentValue = currentIndex * currentIndex - currentIndex\
    \ + 1\n            var secondIndex = currentIndex + 1\n            var thirdIndex\
    \ = secondIndex + 1\n            var secondValue = secondIndex * secondIndex -\
    \ secondIndex + 1\n            var thirdValue = thirdIndex * thirdIndex - thirdIndex\
    \ + 1\n            while (secondIndex < lastIndex) {\n                while (thirdIndex\
    \ <= lastIndex) {\n                    if ((currentValue + secondValue + thirdValue)\
    \ % 3 == 0) count += 1\n                    thirdIndex += 1\n                \
    \    thirdValue = thirdIndex * thirdIndex - thirdIndex + 1\n                }\n\
    \                secondIndex += 1\n                secondValue = secondIndex *\
    \ secondIndex - secondIndex + 1\n                thirdIndex = secondIndex + 1\n\
    \                thirdValue = thirdIndex * thirdIndex - thirdIndex + 1\n     \
    \       }\n            currentIndex += 1\n            lastIndex = (currentIndex\
    \ * currentIndex - currentIndex + 1)\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659821022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 0L until n - 2) {\n            for (j <- i + 1 until n - 1) {\n      \
    \          for (k <- j + 1 until n) {\n                    if ((i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgp0aazkk.scala:26)\n\tat Problem.main(tmpgp0aazkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n                val\
    \ ai = i * i - i + 1\n                val aj = j * j - j + 1\n               \
    \ for (k <- j + 1L to n) {\n                    val ak = k * k - k + 1\n     \
    \               if ((ai + aj + ak) % 3 == 0) count += 1\n                }\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val p : Array[Long] = Array.fill(1000000)(0)\n\
    \        for (i <- 1L to n) {\n            p(i.toInt) = i * i - i + 1\n      \
    \  }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8w79s1v9.scala:22)\n\tat Problem.main(tmp8w79s1v9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval mod = (n + 1) % 3\n   \
    \ \tval range = mod match {\n    \t\tcase 0 => n / 3\n    \t\tcase 1 => (n - 1)\
    \ / 3\n    \t\tcase 2 => (n - 2) / 3\n    \t}\n    \tval sum = range * (range\
    \ + 1) / 2\n    \treturn sum * 3 - range * mod\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7ic4ete.scala:25)\n\tat Problem.main(tmpp7ic4ete.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val dp = Array.fill(3)(0L)\n\
    \        val results = Array.fill(3)(0L)\n        for (i <- 1 to n.toInt) {\n\
    \            val index = (i * i - i + 1) % 3\n            dp(index) += 1\n   \
    \         for (j <- 0 to 2) results(j) += dp(j)\n        }\n        var result\
    \ = 0L\n        for (i <- 0 to 2) result += results(i) * dp(i)\n        result\
    \ / 6\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuuejhkwr.scala:27)\n\tat Problem.main(tmpuuejhkwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821020
