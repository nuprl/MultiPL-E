language: scala
name: HumanEval_92_any_int
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val lst = List(x, y, z)\n\
    \        return (lst.sum == lst.max * 2) && lst.forall(x => x % 1 == 0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwof4x9ql.scala:23)\n\tat Problem.main(tmpwof4x9ql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        if(x == y + z) return\
    \ true\n        if(y == x + z) return true\n        if(z == x + y) return true\n\
    \        if(x.toInt == x && y.toInt == y && z.toInt == z) return true\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7o5wsjba.scala:22)\n\tat Problem.main(tmp7o5wsjba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n      x + y == z || x + z == y\
    \ || y + z == x\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36q4oz71.scala:18)\n\tat Problem.main(tmp36q4oz71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        // TODO\n        if(x.isValidInt\
    \ && y.isValidInt && z.isValidInt){\n            if(x.toInt + y.toInt == z.toInt\
    \ || x.toInt + z.toInt == y.toInt || y.toInt + z.toInt == x.toInt){\n        \
    \        return true\n            }\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzg8c7o87.scala:31)\n\tat Problem.main(tmpzg8c7o87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        return (x+y == z || x+z\
    \ == y || y+z == x) && x.isWhole() && y.isWhole() && z.isWhole()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpicxvnsya.scala:13:55 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m (x+y == z || x+z == y || y+z\
    \ == x) && x.isWhole() && y.isWhole() && z.isWhole()\n\e[31m\e[31m   |\e[0m  \
    \                                                   ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              \e[33mmethod\e[0m \e[35misWhole\e[0m in \e[33mclass\e[0m \e[35mRichFloat\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpicxvnsya.scala:13:70 -----------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mreturn\e[0m (x+y == z || x+z == y || y+z == x) && x.isWhole()\
    \ && y.isWhole() && z.isWhole()\n\e[31m\e[31m   |\e[0m                       \
    \                                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \              \e[33mmethod\e[0m \e[35misWhole\e[0m in \e[33mclass\e[0m \e[35mRichFloat\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpicxvnsya.scala:13:85 -----------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mreturn\e[0m (x+y == z || x+z == y || y+z == x) && x.isWhole()\
    \ && y.isWhole() && z.isWhole()\n\e[31m\e[31m   |\e[0m                       \
    \                                                            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              \e[33mmethod\e[0m \e[35misWhole\e[0m in \e[33mclass\e\
    [0m \e[35mRichFloat\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        var isInt : Boolean =\
    \ true\n        var isSum : Boolean = false\n        if (x % 1 != 0 || y % 1 !=\
    \ 0 || z % 1 != 0) {\n            isInt = false\n        }\n        if (x == y\
    \ + z || y == x + z || z == x + y) {\n            isSum = true\n        }\n  \
    \      return isInt && isSum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf41vsr4v.scala:33)\n\tat Problem.main(tmpf41vsr4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        // if ((x + y) == z) true\
    \ else false\n        if (x.toInt + y.toInt == z.toInt) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvm2x_clz.scala:17)\n\tat Problem.main(tmpvm2x_clz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        if (x.toInt == x && y.toInt\
    \ == y && z.toInt == z) return (x + y == z || x + z == y || y + z == x)\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo7b70grr.scala:26)\n\tat Problem.main(tmpo7b70grr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        var (a, b, c) = (0, 0,\
    \ 0)\n        if (x % 1 == 0) a = x.toInt\n        if (y % 1 == 0) b = y.toInt\n\
    \        if (z % 1 == 0) c = z.toInt\n        return (a == b + c || b == a + c\
    \ || c == a + b)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkviwyts.scala:25)\n\tat Problem.main(tmpmkviwyts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        if (x + y == z || x +\
    \ z == y || y + z == x) true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wxjx483.scala:19)\n\tat Problem.main(tmp9wxjx483.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        // anyInt(x, y, z) = (x\
    \ + y == z) or (x + z == y) or (y + z == x)\n        if (((x + y) == z) || ((x\
    \ + z) == y) || ((y + z) == x)) {\n            return true\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5n_ivezo.scala:22)\n\tat Problem.main(tmp5n_ivezo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        // if(x.isWhole() && y.isWhole()\
    \ && z.isWhole()) {\n        //     if(x == y + z || x == z + y || z == x + y\
    \ || z == y + x || y == x + z || y == z + x) {\n        //         return true\n\
    \        //     }\n        // }\n        // return false\n        if(x.isWhole()\
    \ && y.isWhole() && z.isWhole()) {\n            var integers = List(x, y, z)\n\
    \            var sum = 0\n            for(i <- integers) {\n                sum\
    \ += i\n            }\n            if(integers.contains(sum/2)) {\n          \
    \      return true\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpmo00xz1x.scala:19:13 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(x.isWhole() && y.isWhole() && z.isWhole())\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mmethod\e[0m \e[35misWhole\e[0m in \e[33mclass\e[0m \e[35mRichFloat\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmo00xz1x.scala:23:20 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                sum += i\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        var a = x\n        var\
    \ b = y\n        var c = z\n        if ((a + b) == c || (a + c) == b || (b + c)\
    \ == a && (a % 1 == 0) && (b % 1 == 0) && (c % 1 == 0)) {\n            return\
    \ true\n        }\n        else {\n            return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqd1vuj94.scala:26)\n\tat Problem.main(tmpqd1vuj94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        if ((x + y) == z || (x\
    \ + z) == y || (y + z) == x) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprh610sr1.scala:18)\n\tat Problem.main(tmprh610sr1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        List(x, y, z).map( x =>\
    \ x.isWhole()).reduce(_ && _) && (x + y == z || x + z == y || y + z == x)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmptt4x5heu.scala:13:34 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        List(x, y, z).map( \e[36mx\e[0m => x.isWhole()).reduce(_\
    \ && _) && (x + y == z || x + z == y || y + z == x)\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \e\
    [33mmethod\e[0m \e[35misWhole\e[0m in \e[33mclass\e[0m \e[35mRichFloat\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptt4x5heu.scala:13:54\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        List(x, y, z).map(\
    \ \e[36mx\e[0m => x.isWhole()).reduce(_ && _) && (x + y == z || x + z == y ||\
    \ y + z == x)\n\e[31m\e[31m   |\e[0m                                         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \  value && is not a member of Any\n2 errors found\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        return x % 1 == 0 && y\
    \ % 1 == 0 && z % 1 == 0 && (x == y + z || y == x + z || z == x + y)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltmgeaq3.scala:25)\n\tat Problem.main(tmpltmgeaq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        if (sum == floor(sum)) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1o89bbv5.scala:19)\n\tat Problem.main(tmp1o89bbv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        // if (x + y == z || x\
    \ + z == y || y + z == x) {\n        //     true\n        // } else {\n      \
    \  //     false\n        // }\n        // x + y == z || x + z == y || y + z ==\
    \ x\n        if (x.isValidInt && y.isValidInt && z.isValidInt) {\n           \
    \ x + y == z || x + z == y || y + z == x\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4zxzmkft.scala:35)\n\tat Problem.main(tmp4zxzmkft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        if(!x.isValidInt || !y.isValidInt\
    \ || !z.isValidInt)\n            return false\n        var xi = x.toInt\n    \
    \    var yi = y.toInt\n        var zi = z.toInt\n        return xi + yi == zi\
    \ || xi + zi == yi || yi + zi == xi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo8xxn2ea.scala:30)\n\tat Problem.main(tmpo8xxn2ea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        if(x == y + z || y ==\
    \ x + z || z == x + y) true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps49fnj3n.scala:19)\n\tat Problem.main(tmps49fnj3n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
