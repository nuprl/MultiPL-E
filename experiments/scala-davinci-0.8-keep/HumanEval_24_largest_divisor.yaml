name: HumanEval_24_largest_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n    // >>> largest_divisor(15)\n    // 5\n    def largestDivisor(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
  \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
  \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
  \ == (7l));\n    }\n\n}\n"
completions: ['      return 0;', "        var highest : Long = 0\n        var highFactor\
    \ : Long = -1\n        for (i <- 1L to n/2) {\n            if (n % i == 0) {\n\
    \                highest = i\n                highFactor = n / i\n           \
    \ }\n        }\n        return highFactor", "        if (n == 1) return 1\n  \
    \      else {\n            for (i <- 2L to (n / 2L)) {\n                if (n\
    \ % i == 0) return largestDivisor(n / i)\n            }\n            return n\n\
    \        }", "        var i = 2L\n        while (i <= sqrt(n)) {\n           \
    \ if (n % i == 0) {\n                val j = n / i\n                if (j < n)\
    \ return j\n            }\n            i += 1\n        }\n        1", "      if\
    \ (n % 2 == 0) return n / 2\n      for (i <- 3 to sqrt(n).toInt by 2) {\n    \
    \    if (n % i == 0) return n / i\n      }\n      return 1", "        var z =\
    \ 2L\n        while (z * z <= n) {\n            if (n % z == 0) {\n          \
    \      return n / z\n            }\n            z += 1\n        }\n        1",
  "        var max = 0L\n        for (i <- 1 to n.toInt) {\n            if (n % i\
    \ == 0) max = i\n        }\n        max", "        for (i <- n - 1L to 1L by -1L)\
    \ {\n            if (n % i == 0) return i\n        }\n        throw new Error(\"\
    This number has no divisors\")", '        (2L to n/2).find(n % _ == 0).getOrElse(1)',
  "        var d = n - 1\n        while (n % d != 0) d -= 1\n        d", "       \
    \ var div = n / 2\n        while (div > 1) {\n            if (n % div == 0) return\
    \ div\n            div -= 1\n        }\n        n", "        // Using the fact\
    \ that n = (p1 ^ n1) * (p2 ^ n2) * ... * (pn ^ nn)\n        // and for divisors,\
    \ d = (p1 ^ d1) * (p2 ^ d2) * ... * (pn ^ dn)\n        // Since we want d to be\
    \ the largest, we want p1 ^ d1 to be the largest, p2 ^ d2 to be the second largest\
    \ and so on\n        // This can be done by taking each prime factor to the power\
    \ of 1\n        // Also, the largest prime factor cannot be greater than the square\
    \ root of n\n        def largestPrimeFactor(n : Long) : Long = {\n           \
    \ val m = sqrt(n).toLong\n            var i = m\n            while (i > 1) {\n\
    \                if (n % i == 0) return i\n                i -= 1\n          \
    \  }\n            n\n        }\n        if (n % 2 == 0) n / 2\n        else {\n\
    \            largestPrimeFactor(n)\n        }", "        var max = n - 1\n   \
    \     while (max > 1) {\n            if (n % max == 0) return max\n          \
    \  max -= 1\n        }\n        return 1", "        var x = n\n        var factor\
    \ = 2\n        while (factor * factor <= x) {\n            while (x % factor ==\
    \ 0) {\n                x /= factor\n            }\n            factor += 1\n\
    \        }\n        x", "        var m = n / 2\n        while (m > 0) {\n    \
    \        if (n % m == 0) return m\n            m -= 1\n        }\n        return\
    \ 0", "        var i = (n - 1) / 2\n        while (i > 1) {\n            if (n\
    \ % i == 0) return i\n            i -= 1\n        }\n        return 1", "    \
    \    val limit = sqrt(n).toLong\n        for (k <- (2 to limit).toList) {\n  \
    \          if (n % k == 0) return n / k\n        }\n        return 1", "     \
    \   (1 until n).foreach(i => if (n % i == 0) return i)\n        0", "        val\
    \ limit = sqrt(n).toLong\n        (1 to limit.toInt).foldLeft(1L)((acc, next)\
    \ => {\n            if (n % next == 0)\n                acc max next\n       \
    \     else\n                acc\n        })", "      var maxDivisor = 0L\n   \
    \   for (i <- 2L to n) if (n % i == 0) maxDivisor = i\n      maxDivisor"]
stop_tokens:
- "\n    }\n"
