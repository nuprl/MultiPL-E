name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3,\
  \ 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n \
  \   // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    def sortArray(arr :\
  \ List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val bm = new BinaryMapping\n        val mapped = arr.map(x\
    \ => {\n            val binString = bm.binary(x)\n            val oneCount = bm.countOnes(binString)\n\
    \            (oneCount, x)\n        })\n        val sorted = mapped.sortWith((x1,\
    \ x2) => {\n            if (x1._1 == x2._1) x1._2 < x2._2\n            else x1._1\
    \ < x2._1\n        })\n        sorted.map(x => x._2)", "        val ones = new\
    \ HashMap[Long, Int] with MultiMap[Long, Long]\n        arr.foreach(x => {\n \
    \           var num = x\n            var count = 0\n            while (num > 0)\
    \ {\n                if (num % 2 == 1) {\n                    count += 1\n   \
    \             }\n                num /= 2\n            }\n            ones.addBinding(count,\
    \ x)\n        })\n        val sorted_ones = ones.keys.toList.sorted\n        val\
    \ sorted_array = sorted_ones.flatMap(x => ones(x).toList.sorted)\n        sorted_array",
  "        def bitCount(l : Long) : Long = l.toBinaryString.toList.count(_ == '1')\n\
    \        def toBinary(l : Long) : List[Char] = l.toBinaryString.toList\n     \
    \   arr.sortWith((a, b) => bitCount(a) < bitCount(b) || (bitCount(a) == bitCount(b)\
    \ && a < b))", "        arr.sortWith((x, y) => (x.toBinaryString.count(_ == '1')\
    \ < y.toBinaryString.count(_ == '1')) || (x.toBinaryString.count(_ == '1') ==\
    \ y.toBinaryString.count(_ == '1') && x < y))", "        var ans = List[(Long,\
    \ Int)]()\n        for (num <- arr) {\n            var count = 0\n           \
    \ for (i <- 1 to num.toInt) {\n                if (num.toInt % i == 0) count +=\
    \ 1\n            }\n            ans = (num, count) :: ans\n        }\n       \
    \ val sortedAns = ans.sortWith(_._2 > _._2)\n        sortedAns.map(_._1)", " \
    \       val sorted = arr.map(x => (Integer.bitCount(x.toInt), x)).sortWith((x,\
    \ y) => {\n            if (x._1 < y._1) true\n            else if (x._1 > y._1)\
    \ false\n            else x._2 < y._2\n        })\n        sorted.map(x => x._2)",
  "        val onesList = arr.map(i => (i, Integer.bitCount(i.toInt)))\n        val\
    \ sortedList = onesList.sortWith((a, b) => {\n            val (aNum, aOnes) =\
    \ a\n            val (bNum, bOnes) = b\n            if (aOnes != bOnes) aOnes\
    \ < bOnes\n            else aNum < bNum\n        })\n        sortedList.map(i\
    \ => i._1)", "        val n = arr.length\n        val ones = new Array[Int](n)\n\
    \        val twos = new Array[Int](n)\n        for (i <- 0 until n) {\n      \
    \      var count = 0\n            var num = arr(i)\n            while (num > 0)\
    \ {\n                count += num % 2\n                num /= 2\n            }\n\
    \            ones(i) = count\n            twos(i) = arr(i).toInt\n        }\n\
    \        val zipped = ones.zip(twos)\n        val sorted = zipped.sortWith((a,\
    \ b) => a._1 < b._1 || (a._1 == b._1 && a._2 < b._2))\n        sorted.map(i =>\
    \ i._2.toLong).toList", "        val bin = arr.map(n => n.toBinaryString)\n  \
    \      // val digits = bin.map(n => n.length).toList\n        val sorted = bin.sortWith((n1,\
    \ n2) => n1.count(_ == '1') < n2.count(_ == '1'))\n        // val sorted = bin.sortWith((n1,\
    \ n2) => n1 < n2)\n        // val sorted = digits.sortWith((n1, n2) => n1 < n2)\n\
    \        // val sorted = bin.sortWith((n1, n2) => n1.length < n2.length)\n   \
    \     sorted.map(n => java.lang.Long.parseLong(n, 2))", '      arr.sortWith(sort1)',
  '        List()', "        val sortedArr = arr.sortWith(\n            (a, b) =>\
    \ (a.toBinaryString.filter(c => c == '1').length < b.toBinaryString.filter(c =>\
    \ c == '1').length)\n            || (a.toBinaryString.filter(c => c == '1').length\
    \ == b.toBinaryString.filter(c => c == '1').length && a <= b)\n        )\n   \
    \     return sortedArr", "        def sort(arr : List[Long], numOnes : Int) :\
    \ List[Long] = {\n            arr.filter(_.toBinaryString.count(_ == '1') == numOnes).sorted\
    \ ::: sort(arr.filter(_.toBinaryString.count(_ == '1') != numOnes), numOnes +\
    \ 1)\n        }\n        sort(arr, 0)", "        var b : List[Long] = Nil\n  \
    \      var c : List[Long] = Nil\n        var d : List[Long] = Nil\n        var\
    \ e : List[Long] = Nil\n        var f : List[Long] = Nil\n        var g : List[Long]\
    \ = Nil\n        var h : List[Long] = Nil\n        var i : List[Long] = Nil\n\
    \        var j : List[Long] = Nil\n        var k : List[Long] = Nil\n        var\
    \ l : List[Long] = Nil\n        var m : List[Long] = Nil\n        var n : List[Long]\
    \ = Nil\n        var o : List[Long] = Nil\n        var p : List[Long] = Nil\n\
    \        var q : List[Long] = Nil\n        var r : List[Long] = Nil\n        var\
    \ s : List[Long] = Nil\n        var t : List[Long] = Nil\n        var u : List[Long]\
    \ = Nil\n        var v : List[Long] = Nil\n        var w : List[Long] = Nil\n\
    \        var x : List[Long] = Nil\n        var y : List[Long] = Nil\n        var\
    \ z : List[Long] = Nil\n        var aa : List[Long] = Nil\n        var ab : List[Long]\
    \ = Nil\n        var ac : List[Long] = Nil\n        var ad : List[Long] = Nil\n\
    \        var ae : List[Long] = Nil\n        var af : List[Long] = Nil\n      \
    \  var ag : List[Long] = Nil\n        var ah : List[Long] = Nil\n        var ai\
    \ : List[Long] = Nil\n        var aj : List[Long] = Nil\n        var ak : List[Long]\
    \ = Nil\n        var al : List[Long] = Nil\n        var am : List[Long] = Nil\n\
    \        var an : List[Long] = Nil\n        var ao : List[Long] = Nil\n      \
    \  var ap : List[Long] = Nil\n        var aq : List[Long] = Nil\n        var ar\
    \ : List[Long] = Nil\n        var as : List[Long] = Nil\n        var at : List[Long]\
    \ = Nil\n        var au : List[Long] = Nil", "        val binaryList = arr.map(num\
    \ => (num, num.toBinaryString.count(x => x == '1')))\n        binaryList.sortWith((x,\
    \ y) => (x._2 < y._2) || (x._2 == y._2 && x._1 < y._1)).map(x => x._1)", "   \
    \     arr.sortWith((x, y) => {\n            if (Integer.bitCount(x.toInt) == Integer.bitCount(y.toInt))\
    \ x < y else Integer.bitCount(x.toInt) < Integer.bitCount(y.toInt)\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith(\n    \
    \        (x, y) => {\n                val xBin = x.toBinaryString\n          \
    \      val yBin = y.toBinaryString\n                (xBin.count(_ == '1'), x)\
    \ < (yBin.count(_ == '1'), y)\n            }\n        )", "        arr.map(k =>\
    \ (k, k.toBinaryString.filter(_ == '1').length)).sortBy(k => (k._2, k._1)).map(_._1)",
  "      arr.sortWith((a, b) => {\n        val bitCount = (v : Long) => v.toBinaryString.count(_\
    \ == '1')\n        if (bitCount(a) < bitCount(b)) true\n        else if (bitCount(a)\
    \ > bitCount(b)) false\n        else a < b\n      })"]
stop_tokens:
- "\n    }\n"
