name: HumanEval_19_sort_numbers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
  \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
  \ smallest to largest\n    // >>> sort_numbers('three one five')\n    // 'one three\
  \ five'\n    def sortNumbers(numbers : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\"\
  )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
  \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
  \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four\
  \ five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two\
  \ one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"
completions: ["        def str2int(s : String) : Int = s match {\n            case\
    \ \"zero\" => 0\n            case \"one\" => 1\n            case \"two\" => 2\n\
    \            case \"three\" => 3\n            case \"four\" => 4\n           \
    \ case \"five\" => 5\n            case \"six\" => 6\n            case \"seven\"\
    \ => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n    \
    \    }\n        numbers.split(\" \").map(str2int(_)).sorted.map(_.toString).mkString(\"\
    \ \")", "        var order = ArrayBuffer[String]()\n        numbers.split(\" \"\
    ).foreach(v => {\n            if(v == \"zero\") order += \"0\"\n            else\
    \ if(v == \"one\") order += \"1\"\n            else if(v == \"two\") order +=\
    \ \"2\"\n            else if(v == \"three\") order += \"3\"\n            else\
    \ if(v == \"four\") order += \"4\"\n            else if(v == \"five\") order +=\
    \ \"5\"\n            else if(v == \"six\") order += \"6\"\n            else if(v\
    \ == \"seven\") order += \"7\"\n            else if(v == \"eight\") order += \"\
    8\"\n            else if(v == \"nine\") order += \"9\"\n        })\n        order.sorted.mkString(\"\
    \ \")", "        val list = numbers.split(\" \").map(_.toInt).toList.sorted\n\
    \        list.mkString(\" \")", "        var list = new ArrayBuffer[Int]()\n \
    \       for (word <- numbers.split(\" \")) {\n            list += wordToNumber(word)\n\
    \        }\n        list.sorted.map(numberToWord).mkString(\" \")", "        val\
    \ words = numbers.split(\" \")\n        val numbers = words.map(word => wordToInt(word))\n\
    \        val sorted = numbers.sorted\n        val sortedWords = sorted.map(number\
    \ => intToWord(number))\n        sortedWords.mkString(\" \")", "        var s\
    \ = \"\"\n        var array = numbers.split(\" \")\n        if (array.length ==\
    \ 0)\n            return \"\"\n        var dictionary = new HashMap[String, Integer]()\n\
    \        dictionary.put(\"zero\", 0)\n        dictionary.put(\"one\", 1)\n   \
    \     dictionary.put(\"two\", 2)\n        dictionary.put(\"three\", 3)\n     \
    \   dictionary.put(\"four\", 4)\n        dictionary.put(\"five\", 5)\n       \
    \ dictionary.put(\"six\", 6)\n        dictionary.put(\"seven\", 7)\n        dictionary.put(\"\
    eight\", 8)\n        dictionary.put(\"nine\", 9)\n        var temp = List[Integer]()\n\
    \        for (i <- 0 until array.length) {\n            var key = array(i)\n \
    \           var value = dictionary.get(key)\n            temp = temp :+ value.get\n\
    \        }\n        var array2 = temp.sorted.toArray\n        var array3 = array2.map(_.toString)\n\
    \        s = array3.mkString(\" \")\n        return s", "        val split = numbers.split(\"\
    \ \")\n        val numMap = Map(\n            \"zero\" -> 0,\n            \"one\"\
    \ -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n            \"\
    four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n        \
    \    \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n\
    \        )\n        val nums = new ArrayBuffer[Int]()\n        split.foreach(s\
    \ => nums += numMap(s))\n        val sorted = nums.sorted\n        val builder\
    \ = new StringBuilder()\n        for (i <- 0 until sorted.length) {\n        \
    \    if (i > 0) {\n                builder.append(\" \")\n            }\n    \
    \        val num = sorted(i)\n            for ((k, v) <- numMap) {\n         \
    \       if (v == num) {\n                    builder.append(k)\n             \
    \   }\n            }\n        }\n        builder.toString", "        val stringNumbers\
    \ = numbers.split(\" \")\n        val numNums = stringNumbers.length\n       \
    \ val nums = new Array[Int](numNums)\n        for (i <- 0 until numNums) {\n \
    \           val stringNum = stringNumbers(i)\n            nums(i) = stringNum\
    \ match {\n                case \"zero\" => 0\n                case \"one\" =>\
    \ 1\n                case \"two\" => 2\n                case \"three\" => 3\n\
    \                case \"four\" => 4\n                case \"five\" => 5\n    \
    \            case \"six\" => 6\n                case \"seven\" => 7\n        \
    \        case \"eight\" => 8\n                case \"nine\" => 9\n           \
    \ }\n        }\n        nums.sorted.map(_.toString).mkString(\" \")", "      \
    \  val parsedNumbers = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers\
    \ = parsedNumbers.sorted\n        sortedNumbers.mkString(\" \")", "        val\
    \ ns = numbers.split(\" \").map(numToInt(_))\n        ns.sorted.map(intToNum(_)).mkString(\"\
    \ \")", "        val numeralList = numbers.split(\" \").toList\n        val intList\
    \ = numeralList.map(util.getNumber(_)).sorted\n        val result = new ListBuffer[String]\n\
    \        for (i <- intList) result += util.getNumeral(i)\n        result.mkString(\"\
    \ \")", "        // separate the space-delimited numbers into a list of strings\n\
    \        // we can do this by using the split function of the String object\n\
    \        val numbers = string.split(\" \")\n        // need to convert each number\
    \ string into an integer\n        // we can do this by using the map function\
    \ on the list of strings\n        // the map function takes a function as its\
    \ argument and applies that function to every member of the list\n        // in\
    \ our case, we want to create a function that converts a string to an integer\n\
    \        // we can do this by defining the following anonymous function -\n  \
    \      // t => t.toInt\n        // t is a placeholder for each element of the\
    \ list\n        // the => separates the argument from the return value\n     \
    \   // thus, the above anonymous function reads \"convert the argument t to an\
    \ integer and return the result\"\n        // since map requires a function as\
    \ its argument, we can write the following code to create the list of numbers\n\
    \        val numbers = numbers.map(t => t.toInt)\n        // now we need to sort\
    \ the list of numbers\n        // we can do this by using the sort function\n\
    \        // it returns the sorted list but does not modify the original list\n\
    \        // we can replace the original list with the sorted one by using the\
    \ following command\n        numbers = numbers.sort\n        // now we need to\
    \ convert the list of numbers back into a space-delimited string\n        // we\
    \ can do this by using the mkString function which returns a string by concatenating\
    \ the list members\n        // the first argument to mkString is the delimiter\
    \ that separates the members of the list\n        val numbers = numbers.mkString(\"\
    \ \")\n        // finally, we can return the string that contains the sorted numbers\n\
    \        return numbers", "        var nums = numbers.split(\" \").map(_.toInt).sorted\n\
    \        return nums.mkString(\" \")", "        val words = numbers.split(\" \"\
    )\n        val nums = words.map(s => s match {\n            case \"zero\" => 0\n\
    \            case \"one\" => 1\n            case \"two\" => 2\n            case\
    \ \"three\" => 3\n            case \"four\" => 4\n            case \"five\" =>\
    \ 5\n            case \"six\" => 6\n            case \"seven\" => 7\n        \
    \    case \"eight\" => 8\n            case \"nine\" => 9\n        })\n       \
    \ nums.sorted.map(s => s match {\n            case 0 => \"zero\"\n           \
    \ case 1 => \"one\"\n            case 2 => \"two\"\n            case 3 => \"three\"\
    \n            case 4 => \"four\"\n            case 5 => \"five\"\n           \
    \ case 6 => \"six\"\n            case 7 => \"seven\"\n            case 8 => \"\
    eight\"\n            case 9 => \"nine\"\n        }).mkString(\" \")", "      \
    \  val nums = numbers.split(\" \").map(numeralToNumber)\n        nums.sorted.map(numberToNumeral).mkString(\"\
    \ \")", "        val numeralToInt : Map[String, Int] = Map(\"zero\" -> 0, \"one\"\
    \ -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" ->\
    \ 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        numbers.split(\"\
    \ \").map(numeralToInt(_)).sorted.map(x => numeralToInt.map(_.swap).apply(x)).mkString(\"\
    \ \")", "        return numbers.split(\" \").map(x => x match {\n            \
    \                                    case \"zero\" => 0\n                    \
    \                            case \"one\" => 1\n                             \
    \                   case \"two\" => 2\n                                      \
    \          case \"three\" => 3\n                                             \
    \   case \"four\" => 4\n                                                case \"\
    five\" => 5\n                                                case \"six\" => 6\n\
    \                                                case \"seven\" => 7\n       \
    \                                         case \"eight\" => 8\n              \
    \                                  case \"nine\" => 9\n                      \
    \                      }).sorted.map(x => x match {\n                        \
    \                        case 0 => \"zero\"\n                                \
    \                case 1 => \"one\"\n                                         \
    \       case 2 => \"two\"\n                                                case\
    \ 3 => \"three\"\n                                                case 4 => \"\
    four\"\n                                                case 5 => \"five\"\n \
    \                                               case 6 => \"six\"\n          \
    \                                      case 7 => \"seven\"\n                 \
    \                               case 8 => \"eight\"\n                        \
    \                        case 9 => \"nine\"\n                                \
    \            }).mkString(\" \")", '        return numbers.split(" ").map(numeralToInt).sortWith(_
    < _).map(intToNumeral).mkString(" ")', "        val map = Map(\"zero\" -> 0, \"\
    one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\"\
    \ -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        numbers.split(\"\
    \ \").map(str => map(str)).sortWith(_<_).map(num => {\n            num match {\n\
    \                case 0 => \"zero\"\n                case 1 => \"one\"\n     \
    \           case 2 => \"two\"\n                case 3 => \"three\"\n         \
    \       case 4 => \"four\"\n                case 5 => \"five\"\n             \
    \   case 6 => \"six\"\n                case 7 => \"seven\"\n                case\
    \ 8 => \"eight\"\n                case 9 => \"nine\"\n            }\n        }).mkString(\"\
    \ \")", '      numbers.split(" ").sortWith(_ < _).mkString(" ")']
stop_tokens:
- "\n    }\n"
