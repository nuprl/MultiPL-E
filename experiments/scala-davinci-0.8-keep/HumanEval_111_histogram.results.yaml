language: scala
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val r = test.split(\" \").groupBy(x => x).map(x => (x._1, x._2.length))\n\
    \        val max = r.values.max\n        val max_keys = r.filter(x => x._2 ==\
    \ max).keySet\n        r.filter(x => max_keys.contains(x._1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ao02ng0.scala:17:16\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        r.filter(\e[36mx\e[0m\
    \ => max_keys.contains(x._1))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val results = new MapBuilder[String,Long,Map[String,Long]](Map())\n\
    \        val letters = test.split(\" \")\n        letters.foreach(letter => results\
    \ += letter -> (results.result.getOrElse(letter, 0L) + 1L))\n        results.result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1d_tq73.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m \e[35mMapBuilder\e[0m[\e[35mString\e[0m,\e[35mLong\e[0m,\e[35mMap\e[0m[\e\
    [35mString\e[0m,\e[35mLong\e[0m]](Map())\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ type MapBuilder\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        return test.split(\" \").groupBy(x => x).mapValues(_.length).filter(_._2\
    \ == test.split(\" \").groupBy(x => x).mapValues(_.length).values.max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpta1_bepb.scala:14:73\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m test.split(\e\
    [31m\" \"\e[0m).groupBy(\e[36mx\e[0m => x).mapValues(_.length).filter(_._2 ==\
    \ test.split(\e[31m\" \"\e[0m).groupBy(\e[36mx\e[0m => x).mapValues(_.length).values.max)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m               Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        words.foreach(w => {\n            if (map.contains(w)) {\n          \
    \      map.put(w, map(w) + 1)\n            } else {\n                map.put(w,\
    \ 1)\n            }\n        })\n        val max = map.values.max\n        map.filter(p\
    \ => p._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgpxxkbir.scala:33)\n\tat Problem.main(tmpgpxxkbir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(x => x).map(x => (x._1, x._2.length.toLong)).filter(x\
    \ => x._2 == test.split(\" \").groupBy(x => x).map(x => (x._1, x._2.length.toLong)).maxBy(x\
    \ => x._2)._2)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpctkrapvb.scala:14:83\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(\e[36mx\e[0m => x).map(\e[36mx\e[0m => (x._1, x._2.length.toLong)).filter(\e\
    [36mx\e[0m => x._2 == test.split(\e[31m\" \"\e[0m).groupBy(\e[36mx\e[0m => x).map(\e\
    [36mx\e[0m => (x._1, x._2.length.toLong)).maxBy(\e[36mx\e[0m => x._2)._2)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(e => e).map(p => (p._1, p._2.length.toLong)).filter(p\
    \ => p._2 == test.split(\" \").groupBy(e => e).map(p => (p._1, p._2.length.toLong)).map(x\
    \ => x._2).max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98yy7po1.scala:14:83\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(\e[36me\e[0m => e).map(\e[36mp\e[0m => (p._1, p._2.length.toLong)).filter(\e\
    [36mp\e[0m => p._2 == test.split(\e[31m\" \"\e[0m).groupBy(\e[36me\e[0m => e).map(\e\
    [36mp\e[0m => (p._1, p._2.length.toLong)).map(\e[36mx\e[0m => x._2).max)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        // convert the string into a list of strings\n        val strArr\
    \ = test.split(\" \")\n        // Create a dictionary of the elements in the string\
    \ and their corresponding\n        // count of occurence.\n        val hist =\
    \ strArr.groupBy(identity).mapValues(_.size)\n        // Create a dictionary of\
    \ the elements with the maximum occurrence.\n        // hist.maxBy(_._2) returns\
    \ a tuple (element, count)\n        val max = hist.maxBy(_._2)\n        // Create\
    \ a dictionary of the element, count pairs with the maximum count.\n        //\
    \ The filter function goes through the histogram, finds the element/count\n  \
    \      // pairs with the maximum count, and puts them in a dictionary.\n     \
    \   // The map function maps the dictionary to the pair's first element\n    \
    \    // (the element name) as the key and the pair's second element (the count)\n\
    \        // as the value.\n        val maxDict = hist.filter(_._2 == max._2).map(x\
    \ => (x._1, x._2))\n        return maxDict\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbdqkmlid.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m maxDict\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \  Found:    (maxDict : scala.collection.View[(String, Int)])\n\e[31m   |\e[0m\
    \              Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = new scala.collection.mutable.HashMap[String,Long]\n \
    \       for (i <- test.split(\" \")) {\n            if (map.contains(i)) map(i)\
    \ += 1 else map(i) = 1\n        }\n        map.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf08o_qo_.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        map.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        if (test.isEmpty) return Map()\n        val words = test.split(\"\
    \ \")\n        return words.groupBy(identity).mapValues(_.length).filter(_._2\
    \ == words.map(c => words.count(_ == c)).max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo21bywx5.scala:16:65\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m words.groupBy(identity).mapValues(_.length).filter(_._2\
    \ == words.map(\e[36mc\e[0m => words.count(_ == c)).max)\n\e[31m\e[31m   |\e[0m\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m               Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        return test.split(\" \").groupBy(identity).mapValues(_.length).filter(_._2\
    \ == test.split(\" \").groupBy(identity).mapValues(_.length).values.max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwghswyq7.scala:14:75\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m test.split(\e\
    [31m\" \"\e[0m).groupBy(identity).mapValues(_.length).filter(_._2 == test.split(\e\
    [31m\" \"\e[0m).groupBy(identity).mapValues(_.length).values.max)\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m               Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n      // a map of maps\n      val result = new HashMap[String, Long]()\n\
    \      for (c <- test.split(\" \")) {\n        if (result.contains(c)) result(c)\
    \ += 1\n        else result(c) = 1\n      }\n      val maxValue = result.values.max\n\
    \      val maxKeys = result.filter(_._2 == maxValue).keys\n      val res = new\
    \ HashMap[String, Long]()\n      for (k <- maxKeys) res(k) = maxValue\n      res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc9godg2g.scala:33)\n\tat Problem.main(tmpc9godg2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val chars = test.split(\" \")\n        val all = chars.map(s =>\
    \ (s,1))\n        var map = all.toMap\n        val totals = new HashMap[String,Long]\n\
    \        for (k <- map.keys) {\n            val count = map.count(x => x._1 ==\
    \ k)\n            totals += (k -> count)\n        }\n        val max = totals.values.max\n\
    \        val maxes = totals.filter(x => x._2 == max)\n        maxes\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2du4zaj.scala:27)\n\tat Problem.main(tmpv2du4zaj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        // Match each one lowercase letter in a group, and then find the\
    \ max count\n        val alphabet = 'a' to 'z'\n        val regex = \"[\" + alphabet.mkString\
    \ + \"]+\"\n        val groups = test.split(\" \").filter(x => x.matches(regex))\n\
    \        val counts = groups.map(x => x.groupBy(y => y).map(z => (z._1.toString,\
    \ z._2.length.toLong)))\n        // Make the map from the counts\n        val\
    \ result = new HashMap[String,Long]\n        for (count <- counts) {\n       \
    \     for ((k,v) <- count) {\n                result(k) = max(result.getOrElse(k,\
    \ 0L), v)\n            }\n        }\n        result.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2i6e33jx.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n    \tdef count(ch : String, list : List[String]) : Long = {\n    \t\t\
    if (list.isEmpty) 0\n    \t\telse if (list.head == ch) 1 + count(ch, list.tail)\n\
    \    \t\telse count(ch, list.tail)\n    \t}\n    \tval strList = test.split(\"\
    \ \").toList\n    \tval chList = strList.distinct\n    \tval result = chList.map(x\
    \ => (x, count(x, strList))).toMap\n    \tval max = result.values.max\n    \t\
    result.filter(x => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr0t5hdvo.scala:23:21\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \tresult.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m    \t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    \tFound:    Map[String, Long]\n\e[31m   |\e[0m    \tRequired:\
    \ \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e\
    [0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        if (test.length == 0) return Map[String,Long]()\n        var map\
    \ = Map[String,Long]()\n        test.split(\" \").foreach(x => {\n           \
    \ val i = map.getOrElse(x, 0)\n            map += (x -> (i + 1))\n        })\n\
    \        var maxCount = map.values.max\n        var values = ArrayBuffer[String]()\n\
    \        map.keys.foreach(x => {\n            if (map(x) == maxCount) values +=\
    \ x\n        })\n        return values.toMap.mapValues(x => maxCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qogvx6b.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            map += (x -> (i + \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of AnyVal, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp_qogvx6b.scala:25:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mreturn\e[0m values.toMap.mapValues(\e[36mx\e\
    [0m => maxCount)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m\
    \   |\e[0m                           Cannot prove that String <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                           where:    K is a type variable\n\
    \e[31m   |\e[0m                                     V is a type variable\n\e[31m\
    \   |\e[0m                           .\n2 errors found\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        var counts = scala.collection.mutable.Map[String,Long]()\n\
    \        for (l <- letters) {\n            if (counts.contains(l)) counts(l) +=\
    \ 1\n            else counts(l) = 1\n        }\n        val max = counts.values.max\n\
    \        var result = scala.collection.mutable.Map[String,Long]()\n        for\
    \ ((k,v) <- counts) {\n            if (v == max) result(k) = v\n        }\n  \
    \      result.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5v560gc.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        result.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var occurrences = new HashMap[String,Long]()\n        for (char\
    \ <- test.split(\" \")) {\n            if (occurrences.contains(char)) occurrences(char)\
    \ += 1\n            else occurrences += (char -> 1)\n        }\n        var maxOccurrence\
    \ = occurrences.values.max\n        return occurrences.filter((char : (String,Long))\
    \ => char._2 == maxOccurrence)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaehr7dzf.scala:29)\n\tat Problem.main(tmpaehr7dzf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n      val array = test.split(\" \")\n      val map = scala.collection.mutable.Map[String,Long]()\n\
    \      for (i <- 0 until array.length) {\n        if (map.contains(array(i)))\
    \ {\n          map(array(i)) += 1\n        } else {\n          map += (array(i)\
    \ -> 1)\n        }\n      }\n      var max = 0\n      for (a <- map) {\n     \
    \   if (a._2 > max) max = a._2.toInt\n      }\n      val res = scala.collection.mutable.Map[String,Long]()\n\
    \      for (a <- map) {\n        if (a._2 == max) res += (a._1 -> a._2)\n    \
    \  }\n      res.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbglib3fe.scala:31:6\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m      res.toMap\n\e[31m\e[31m\
    \   |\e[0m      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      Found:    Map[String, Long]\n\
    \e[31m   |\e[0m      Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e\
    [32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").filter(_ != \"\").toList.map(x =>\
    \ x.toLong)\n        val map : Map[String, Long] = Map()\n        list.foldLeft(map)((map,\
    \ e) => map.updated(e.toString, map.getOrElse(e.toString, 0) + 1))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsmbdzqul.scala:16:92 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        list.foldLeft(map)((\e[36mmap\e[0m, \e[36me\e\
    [0m) => map.updated(e.toString, map.getOrElse(e.toString, \e[31m0\e[0m) + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of AnyVal, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n      var dict = Map[String,Long]()\n      for (c <- test.split(\" \"))\
    \ {\n        if (dict.contains(c)) {\n          dict(c) += 1\n        } else {\n\
    \          dict(c) = 1\n        }\n      }\n      dict.filter(x => x._2 == dict.values.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx764ittr.scala:31)\n\tat Problem.main(tmpx764ittr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821010
