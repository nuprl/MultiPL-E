name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty array of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    // Output:\
  \ 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    //\
  \ 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        arr.take(k.toInt).foldLeft(0L)((x, y) => y match {\n      \
    \      case x if x > 99 => x\n            case _ => x + y\n        })", '        arr.filter(x
    => x < 100).take(k.toInt).sum', "        var result = 0L\n        for (i <- 0\
    \ until k.toInt) {\n            val e = arr(i)\n            if (e > 9 && e < 100)\
    \ {\n                result += e\n            }\n        }\n        result", " \
    \       val min = min2(arr)\n        val max = max2(arr)\n        val sum = arr.slice(0,\
    \ k.toInt).filter(min <= _ && _ <= max).sum\n        sum", "        var sum =\
    \ 0\n        var count = 0\n        var i = 0\n        while (count < k && i <\
    \ arr.length) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \                count += 1\n            }\n            i += 1\n        }\n  \
    \      return sum", "        var sum = 0L\n        for (i <- arr) {\n        \
    \    if (i < 100 && k > 0) {\n                sum += i\n                k -= 1\n\
    \            }\n        }\n        sum", "        var count = k\n        var sum\
    \ = 0L\n        arr.foreach(num => {\n            if (count > 0) {\n         \
    \       if (num > 9 && num < 100) {\n                    sum += num\n        \
    \            count -= 1\n                }\n                else if (num <= 9)\
    \ {\n                    sum += num\n                    count -= 1\n        \
    \        }\n            }\n        })\n        sum", "        var sum = 0L\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) > 99) sum += arr(i)\
    \ / 100\n            else sum += arr(i)\n        }\n        return sum", "   \
    \     var sum = 0L\n        for (i <- 0 until min(k, arr.length)) {\n        \
    \    val l = arr(i).toString.length\n            if (l <= 2) sum += arr(i)\n \
    \       }\n        sum", "        val atMostTwoDigits = arr.filter(_.toString.length\
    \ <= 2)\n        if (atMostTwoDigits.length < k) atMostTwoDigits.sum\n       \
    \ else atMostTwoDigits.take(k.toInt).sum", '        arr.take(k.toInt).filter(l
    => l < 100).sum', "        val a = arr.slice(0, k.toInt)\n        val b = a.filter(x\
    \ => x.toString.length <= 2)\n        val c = b.sum\n        c", "        val\
    \ l = arr.take(k.toInt).filter(x => x < 100).sum\n        l", "        var (res,\
    \ x) = (0L, 0L)\n        arr.filter(x => x < 100).take(k.toInt).foreach(x => res\
    \ += x)\n        return res", '        arr.foldLeft(0)((total, x) => if (abs(x)
    < 100) total + x else total)', "        var total = 0L\n        val sum = new\
    \ SortedSet[Long]()\n        var i = 0\n        while (i < arr.length && total\
    \ < k) {\n            if (arr(i) < 100) sum += arr(i)\n            total += 1\n\
    \            i += 1\n        }\n        sum.take(k.toInt).sum", "        val length\
    \ = arr.length\n        var sum = 0L\n        for (i <- 0 to length - 1) {\n \
    \           if (i < k) {\n                if (arr(i) < 100) sum += arr(i)\n  \
    \          }\n        }\n        sum", "        def addElement(num : Long) : Long\
    \ = {\n            val divider = pow(10, max(1, floor(log10(num)) - 1)).toLong\n\
    \            num % divider + num / divider\n        }\n        arr.take(k.toInt).map(addElement).sum",
  "        var a = arr.take(k.toInt)\n        var sum = 0L\n        for (i <- a) {\n\
    \            if (i <= 99) sum += i\n        }\n        return sum", "        def\
    \ isTwoDigit(num : Long) : Boolean = {\n            val str = num.toString\n \
    \           if (str.length == 2) true\n            else false\n        }\n   \
    \     var flag = true\n        var count = 0L\n        var sum = 0L\n        for\
    \ (i <- 0 to arr.length - 1) {\n            if (flag) {\n                if (count\
    \ == k) flag = false\n                else if (isTwoDigit(arr(i))) {\n       \
    \             sum += arr(i)\n                    count += 1\n                }\n\
    \            }\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
