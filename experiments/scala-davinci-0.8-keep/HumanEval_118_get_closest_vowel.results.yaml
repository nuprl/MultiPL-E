language: scala
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        def\
    \ isVowel(c : Char) = c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \        for (i <- word.length - 1 to 0 by -1) {\n            if (isVowel(word(i)))\
    \ {\n                if (i != word.length - 1 && !isVowel(word(i + 1))) return\
    \ word(i).toString\n                if (i != 0 && !isVowel(word(i - 1))) return\
    \ word(i).toString\n            }\n        }\n        \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp75i0mpog.scala:27)\n\tat Problem.main(tmp75i0mpog.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n    \tif\
    \ (word.length == 0) return \"\"\n    \tvar queue = Queue[String]()\n    \tqueue\
    \ += word.substring(word.length - 1)\n    \tfor (i <- word.length - 2 to 0 by\
    \ -1) {\n    \t\tval c = word(i).toString\n    \t\tif (isVowel(c)) queue += c\n\
    \    \t\telse {\n    \t\t\tif (queue.last != \"\" && isVowel(queue.last)) return\
    \ queue.last\n    \t\t\telse queue += \"\"\n    \t\t}\n    \t}\n    \t\"\"\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pz3hlw_.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    \t\t\e[33mif\e[0m (isVowel(c)) queue += c\n\e[31m\e\
    [31m   |\e[0m    \t\t    ^^^^^^^\e[0m\n\e[31m   |\e[0m    \t\t    Not found: isVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pz3hlw_.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \t\t\t\e[33mif\e[0m (queue.last\
    \ != \e[31m\"\"\e[0m && isVowel(queue.last)) \e[33mreturn\e[0m queue.last\n\e\
    [31m\e[31m   |\e[0m    \t\t\t                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m    \t\t\t                        Not found: isVowel\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val consonants = Set('b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z')\n        var closestVowel : Option[Char] = None\n        var\
    \ shortestDistance = Int.MaxValue\n        val len = word.length\n        for\
    \ (c <- word) {\n            if (vowels contains c) {\n                var index\
    \ = word.indexOf(c)\n                if (index < len - 1 && consonants contains\
    \ word(index + 1)) {\n                    if (index < shortestDistance) {\n  \
    \                      shortestDistance = index\n                        closestVowel\
    \ = Some(c)\n                    }\n                }\n                if (index\
    \ > 0 && consonants contains word(index - 1)) {\n                    if (len -\
    \ index < shortestDistance) {\n                        shortestDistance = len\
    \ - index\n                        closestVowel = Some(c)\n                  \
    \  }\n                }\n            }\n        }\n        if (closestVowel !=\
    \ None) closestVowel.get.toString else \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv1bd2nwt.scala:23:39\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m\
    \ (index < len - \e[31m1\e[0m && consonants contains word(index + \e[31m1\e[0m))\
    \ {\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    (consonants : scala.collection.mutable.Set[Char])\n\
    \e[31m   |\e[0m             Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv1bd2nwt.scala:29:33 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m (index > \e[31m0\e[0m &&\
    \ consonants contains word(index - \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (consonants : scala.collection.mutable.Set[Char])\n\e[31m   |\e[0m      \
    \       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        //\
    \ Since we can assume the given string contains English letter only, \n      \
    \  // we can limit the vowels to \"aeiouAEIOU\".\n        // Brute-force, start\
    \ from the end of the string, \n        // when we meet a vowel, check whether\
    \ it's between two consonants.\n        // If it's not between two consonants,\
    \ continue to find the next vowel,\n        // until you meet the condition.\n\
    \        // Otherwise, return the vowel.\n        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        val consonants = Set('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z',\n            'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z')\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowels.contains(word(i))) {\n           \
    \     if (i - 1 >= 0 && consonants.contains(word(i - 1)) &&\n                \
    \    i + 1 < word.length && consonants.contains(word(i + 1))) {\n            \
    \        return word(i).toString\n                }\n            }\n        }\n\
    \        \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        if\
    \ (word.length == 0) return \"\"\n        var c = word.charAt(word.length - 1)\n\
    \        if (!isVowel(c)) {\n            var j = word.length - 2\n           \
    \ while (j >= 0) {\n                if (isVowel(word.charAt(j))) {\n         \
    \           return word.charAt(j).toString\n                }\n              \
    \  j -= 1\n            }\n        }\n        \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq6liff00.scala:17:13 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (!isVowel(c)) {\n\e[31m\e[31m \
    \  |\e[0m             ^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found: isVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq6liff00.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e\
    [0m (isVowel(word.charAt(j))) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: isVowel\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        //\
    \ your code goes here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n   \
    \     for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                if (i == word.length - 1) return \"\"\n                else\
    \ {\n                    val j = i + 1\n                    if (!vowels.contains(word(j)))\
    \ return word(i).toString\n                }\n            }\n        }\n     \
    \   \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8cog4j7.scala:31)\n\tat Problem.main(tmpz8cog4j7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ minIndex = -1\n        var minDist = 0\n        for (i <- word.length - 1 to\
    \ 0 by -1) {\n            if (isVowel(word(i))) {\n                minIndex =\
    \ i\n                minDist = -1\n                break\n            }\n    \
    \        minDist += 1\n        }\n        if (minIndex == -1) return \"\"\n  \
    \      for (i <- minIndex - 1 to 0 by -1) {\n            if (isVowel(word(i)))\
    \ return \"\"\n            if (minDist > i - minIndex) minDist = i - minIndex\n\
    \        }\n        return word(minIndex - minDist).toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9x4kzrik.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isVowel(word(i))) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isVowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9x4kzrik.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9x4kzrik.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m\
    \ (isVowel(word(i))) \e[33mreturn\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        var closestVowel = \"\"\n   \
    \     var vowelDistance = word.length\n        var consonantCount = 0\n      \
    \  for (i <- 0 until word.length) {\n            if (vowels.contains(word(i)))\
    \ {\n                consonantCount = 0\n            } else {\n              \
    \  consonantCount += 1\n            }\n            if (consonantCount == 2) {\n\
    \                consonantCount -= 1\n                val vowelDistanceTmp = word.length\
    \ - i\n                if (vowelDistanceTmp < vowelDistance) {\n             \
    \       vowelDistance = vowelDistanceTmp\n                    closestVowel = word(i).toString\n\
    \                }\n            }\n        }\n        closestVowel\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcduprclj.scala:37)\n\tat Problem.main(tmpcduprclj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ index = word.length - 1\n        while (index >= 0) {\n            if (isVowel(word(index)))\
    \ {\n                if (index + 1 == word.length) return \"\"\n             \
    \   if (isConsonant(word(index + 1))) return word(index).toString\n          \
    \  }\n            index -= 1\n        }\n        return \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe535_b6e.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (isVowel(word(index))) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isVowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe535_b6e.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e\
    [0m (isConsonant(word(index + \e[31m1\e[0m))) \e[33mreturn\e[0m word(index).toString\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Not found: isConsonant\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ result = new StringBuffer()\n        for (i <- 0 until word.length - 1) {\n\
    \            if (word(i).isConsonant && word(i + 1).isVowel) result += word(i\
    \ + 1)\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2py92lsq.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (word(i).isConsonant && word(i\
    \ + \e[31m1\e[0m).isVowel) result += word(i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ isConsonant is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2py92lsq.scala:17:67 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mif\e[0m (word(i).isConsonant && word(i + \e[31m1\e[0m).isVowel)\
    \ result += word(i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of StringBuffer - did you mean StringBuffer.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        word.reverse.foldLeft(\"\")((result,\
    \ c) => result match {\n            case \"\" => {\n                if (vowels.contains(c))\
    \ result + c else \"\"\n            }\n            case _ => {\n             \
    \   if (vowels.contains(c)) result + c else \"\"\n            }\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp10mbw5f_.scala:26)\n\tat Problem.main(tmp10mbw5f_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var cur = word.length\
    \ - 1\n        while (cur >= 0) {\n            if (vowelSet.contains(word(cur).toString))\
    \ return word(cur).toString\n            cur -= 1\n        }\n        return \"\
    \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxv71mst9.scala:26)\n\tat Problem.main(tmpxv71mst9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n      var\
    \ lastConsonantIndex = -1\n      var firstVowelIndex = -1\n      var firstVowelIndexOfRight\
    \ = -1\n      for (i <- 0 until word.length) {\n        if (isVowel(word(i)))\
    \ {\n          if (firstVowelIndex == -1) {\n            firstVowelIndex = i\n\
    \          }\n          if (lastConsonantIndex != -1) {\n            firstVowelIndexOfRight\
    \ = i\n            return word(i).toString\n          }\n        } else {\n  \
    \        lastConsonantIndex = i\n        }\n      }\n      if (firstVowelIndexOfRight\
    \ == -1) {\n        if (firstVowelIndex == -1) {\n          return \"\"\n    \
    \    } else {\n          return word(firstVowelIndex).toString\n        }\n  \
    \    } else {\n        return word(firstVowelIndexOfRight).toString\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qt3k6q4.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (isVowel(word(i))) {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: isVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowelList = List[Char]('a', 'e', 'i', 'o', 'u')\n        var closestVowel =\
    \ ' '\n        var indexOfClosestVowel = Int.MaxValue\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowelList.contains(word(i))) {\n        \
    \        var count = 0\n                for (j <- i - 1 to 0 by -1) {\n      \
    \              if (vowelList.contains(word(j))) return \"\"\n                \
    \    else {\n                        count += 1\n                        if (count\
    \ == 2) {\n                            indexOfClosestVowel = min(indexOfClosestVowel,\
    \ i)\n                            closestVowel = word(i)\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        if (indexOfClosestVowel == Int.MaxValue) \"\" else closestVowel.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmd_7vv5t.scala:36)\n\tat Problem.main(tmpmd_7vv5t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n    \tvar\
    \ result = \"\"\n    \tfor (i <- word.length - 1 to 0 by -1) {\n    \t\tval c\
    \ = word(i)\n    \t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n    \t\t\tif (i != word.length - 1 && (word(i + 1) != 'a' && word(i\
    \ + 1) != 'e' && word(i + 1) != 'i' && word(i + 1) != 'o' && word(i + 1) != 'u'))\
    \ {\n    \t\t\t\tresult = c.toString\n    \t\t\t\treturn result\n    \t\t\t}\n\
    \    \t\t}\n    \t}\n    \tresult\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeory_jdd.scala:30)\n\tat Problem.main(tmpeory_jdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n      if\
    \ (word.length == 0) return \"\"\n      var isConsonant = false\n      for (c\
    \ <- word.toList.reverse) {\n        if (isVowel(c)) {\n          if (isConsonant)\
    \ return c.toString\n        } else {\n          isConsonant = true\n        }\n\
    \      }\n      \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc9eqkywe.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (isVowel(c)) {\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: isVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val v = vowels.map(x\
    \ => word.split(x).last).filter(x => x.size > 0)\n        if (v.size > 0) vowels(v.indices.minBy(i\
    \ => v(i).size)) else \"\"\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph8vkze4y.scala:22)\n\tat Problem.main(tmph8vkze4y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ length = word.length\n        if (length <= 2) return \"\"\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var min = Double.MaxValue\n\
    \        var c = \"\"\n        for (i <- 1 until length - 1) {\n            if\
    \ (vowels.contains(word(i).toString)) {\n                val pos = i\n       \
    \         val dist1 = abs(pos - findRightmostConsonant(word, 0, pos - 1))\n  \
    \              val dist2 = abs(findLeftmostConsonant(word, pos + 1, length - 1)\
    \ - pos)\n                val dist = min(dist1, dist2)\n                if (dist\
    \ < min) {\n                    min = dist\n                    c = word(i).toString\n\
    \                }\n            }\n        }\n        c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3e3tppbl.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mdist1\e[0m = abs(pos\
    \ - findRightmostConsonant(word, \e[31m0\e[0m, pos - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Not found: findRightmostConsonant\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3e3tppbl.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e\
    [0m \e[36mdist2\e[0m = abs(findLeftmostConsonant(word, pos + \e[31m1\e[0m, length\
    \ - \e[31m1\e[0m) - pos)\n\e[31m\e[31m   |\e[0m                              \
    \  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: findLeftmostConsonant\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp3e3tppbl.scala:25:27 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mval\e[0m \e[36mdist\e[0m = min(dist1, dist2)\n\e\
    [31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m      \
    \                     \e[33mvariable\e[0m \e[35mmin\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        //\
    \ \n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val\
    \ consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val charList = word.toLowerCase.toList\n        // Loop through\
    \ the list and find the first time the char is a consonant. If it is,\n      \
    \  // loop backwards until you find a vowel and then check to see if the next\
    \ char is\n        // a consonant. If it is, return the vowel. Otherwise, try\
    \ again. If you can't find\n        // any consonants in the word, return \"\"\
    \n        val firstConsonantIndex = charList.lastIndexWhere(consonants.contains(_))\n\
    \        if (firstConsonantIndex != -1) {\n            for (i <- firstConsonantIndex\
    \ to 0 by -1) {\n                if (vowels.contains(charList(i))) {\n       \
    \             if (consonants.contains(charList(i - 1))) return charList(i).toString\n\
    \                }\n            }\n        }\n        \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4esdqjrh.scala:34)\n\tat Problem.main(tmp4esdqjrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        def\
    \ endsWithConsonant(word : String) : Boolean = {\n            !word.head.isVowel\n\
    \        }\n        def startsWithConsonant(word : String) : Boolean = {\n   \
    \         !word.last.isVowel\n        }\n        def firstVowel(word : String)\
    \ : Char = {\n            for (c <- word) {\n                if (c.isVowel) return\
    \ c\n            }\n            '0'\n        }\n        if (word.size <= 2) return\
    \ \"\"\n        val first = firstVowel(word)\n        if (first == '0') return\
    \ \"\"\n        val second = firstVowel(word.tail)\n        if (second == '0')\
    \ return \"\"\n        if (startsWithConsonant(word)) {\n            if (endsWithConsonant(word))\
    \ return \"\"\n            else return first.toString\n        }\n        if (endsWithConsonant(word))\
    \ return first.toString\n        else if (firstVowel(word.init.tail) == '0') return\
    \ first.toString\n        else if (abs(first - second) < abs(first - firstVowel(word.init.tail)))\
    \ return second.toString\n        else return first.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpenk8q76t.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            !word.head.isVowel\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value isVowel\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpenk8q76t.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            !word.last.isVowel\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \         value isVowel is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpenk8q76t.scala:23:22 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                \e[33mif\e[0m (c.isVowel) \e[33mreturn\e[0m c\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \       value isVowel is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659821012
