language: scala
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '(') stack.push(c)\n            else if (c == ')') if (stack.isEmpty)\
    \ return false else stack.pop\n        }\n        stack.isEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openCount = 0\n        for (bracket <- brackets) {\n      \
    \      if (bracket == '(') openCount += 1\n            else if (bracket == ')')\
    \ openCount -= 1\n            if (openCount < 0) return false\n        }\n   \
    \     return openCount == 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.isEmpty) return true\n        var count = 0\n    \
    \    for (bracket <- brackets) {\n            bracket match {\n              \
    \  case '(' => count += 1\n                case ')' => count -= 1\n          \
    \      case _ => return false\n            }\n            if (count < 0) return\
    \ false\n        }\n        count == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      var count = 0\n      for (i <- 0 until brackets.length) {\n     \
    \   if (brackets(i) == '(') count += 1\n        else if (brackets(i) == ')') count\
    \ -= 1\n        if (count < 0) return false\n      }\n      count == 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      if (brackets.length == 0) {\n        return true\n      }\n     \
    \ var stack = Stack[Char]()\n      for (i <- 0 until brackets.length) {\n    \
    \    val bracket = brackets(i)\n        if (bracket == '(') {\n          stack.push(bracket)\n\
    \        } else {\n          if (stack.isEmpty) {\n            return false\n\
    \          }\n          stack.pop\n        }\n      }\n      return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        for (i <- 0 until brackets.length)\
    \ {\n            val c = brackets(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = Stack[String]()\n        for (bracket <- brackets)\
    \ {\n            if (bracket == '(') {\n                stack.push(\"(\")\n  \
    \          } else {\n                if (stack.isEmpty) return false\n       \
    \         else stack.pop\n            }\n        }\n        stack.isEmpty\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '(') stack.push(c)\n            else if (c == ')') {\n   \
    \             if (stack.isEmpty) return false\n                stack.pop\n   \
    \         }\n        }\n        return stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        brackets.foreach(c => {\n\
    \            if (c == '(') stack.push(c)\n            else if (c == ')') {\n \
    \               if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        })\n        stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      def ifCorrect(brackets : String, n : Int) : Boolean = {\n       \
    \ if (n < 0) false\n        else if (brackets.length == 0) {\n          if (n\
    \ == 0) true\n          else false\n        }\n        else if (brackets.head\
    \ == '(') ifCorrect(brackets.tail, n + 1)\n        else ifCorrect(brackets.tail,\
    \ n - 1)\n      }\n      ifCorrect(brackets, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '(') {\n                stack.push(c)\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty) return false\n         \
    \       stack.pop\n            }\n        }\n        stack.isEmpty\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      val stack = Stack[Char]()\n      for (c <- brackets) {\n        if\
    \ (c == '(') stack.push(c)\n        else if (c == ')') {\n          if (stack.isEmpty)\
    \ return false\n          stack.pop\n        }\n      }\n      stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var count = 0\n        for (bracket <- brackets) {\n          \
    \  if (bracket == '(') count += 1\n            else count -= 1\n            if\
    \ (count < 0) return false\n        }\n        count == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var openCounter = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets(i) == '(') openCounter += 1\n            else if\
    \ (brackets(i) == ')') openCounter -= 1\n            if (openCounter < 0) return\
    \ false\n        }\n        return openCounter == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '(') stack.push(c)\n            else if (c == ')') {\n   \
    \             if (stack.isEmpty) return false\n                stack.pop\n   \
    \         }\n        }\n        stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (bracket <- brackets)\
    \ {\n            if (bracket == '(') stack.push(bracket)\n            else if\
    \ (bracket == ')') {\n                if (stack.isEmpty) return false\n      \
    \          else stack.pop\n            }\n        }\n        stack.isEmpty\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '(') stack.push(c)\n            else if (c == ')') {\n   \
    \             if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val opening = new ArrayBuffer[Char]\n        for (i <- 0 until\
    \ brackets.length) {\n            if (brackets(i) == '(') opening += '('\n   \
    \         else if (opening.length == 0) return false\n            else opening.remove(opening.length\
    \ - 1)\n        }\n        return opening.length == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // for each opening bracket, it needs a closing bracket.\n    \
    \    var needsClosingBracket : Int = 0\n        for (bracket <- brackets) {\n\
    \            bracket match {\n                case '(' => {\n                \
    \    needsClosingBracket += 1\n                }\n                case ')' =>\
    \ {\n                    needsClosingBracket -= 1\n                    if (needsClosingBracket\
    \ < 0) return false\n                }\n            }\n        }\n        return\
    \ needsClosingBracket == 0\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var c = 0\n        for (b <- brackets) {\n            if (b ==\
    \ '(') c += 1\n            else if (b == ')') c -= 1\n            if (c < 0) return\
    \ false\n        }\n        c == 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
