language: scala
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val lst2 = lst.toSet\n        def fn(s : String)\
    \ : Boolean = {\n            if (s.length % 2 == 0) {\n                true\n\
    \            } else {\n                false\n            }\n        }\n     \
    \   val lst3 = lst2.filter(fn).toList\n        val lst4 = lst3.sortWith(_.length\
    \ < _.length)\n        lst4\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5sv11il9.scala:34)\n\tat Problem.main(tmp5sv11il9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val l = new ListBuffer[String]\n        val s =\
    \ new ListBuffer[String]\n        var pre = \"\"\n        for (i <- lst) {\n \
    \           if (i.length % 2 == 0) l += i\n            else s += i\n        }\n\
    \        for (j <- l) {\n            for (k <- s) {\n                if (j.length\
    \ == k.length) pre = j\n            }\n        }\n        l.distinct.sorted.filter(_\
    \ != pre)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzl58b70v.scala:30:32\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        l.distinct.sorted.filter(_\
    \ != pre)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val map = HashMap[Int, List[String]]()\n       \
    \ for (str <- lst) {\n            if (map.contains(str.length)) {\n          \
    \      map(str.length) = str :: map(str.length)\n            } else {\n      \
    \          map(str.length) = List(str)\n            }\n        }\n        val\
    \ keys = map.keys.toList.sorted\n        var result = List[String]()\n       \
    \ for (key <- keys) {\n            for (str <- map(key).sorted) {\n          \
    \      result = str :: result\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqra3430d.scala:36)\n\tat Problem.main(tmpqra3430d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n    \tvar s = Set[String]()\n    \tfor (i <- lst) {\n  \
    \  \t\tval len = i.length\n    \t\tif (len % 2 == 0) s += i\n    \t}\n    \ts.toList.sortWith((x,\
    \ y) => x.length <= y.length && x < y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        var lst_length = lst.length\n        for (i <- 0\
    \ until lst_length) {\n            for (j <- i + 1 until lst_length) {\n     \
    \           if (lst(i).length > lst(j).length) {\n                    val temp\
    \ = lst(i)\n                    lst(i) = lst(j)\n                    lst(j) =\
    \ temp\n                }\n            }\n        }\n        lst\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6cmqr1_g.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    lst(i) = lst(j)\n\e[31m\e[31m   |\e\
    [0m                    ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of\
    \ List[String] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6cmqr1_g.scala:24:20 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                    lst(j) = temp\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String] - did\
    \ you mean lst.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val dict = HashMap[Int, List[String]]()\n      \
    \  lst.foreach(\n            (word : String) => {\n                val len = word.length\n\
    \                val curr = dict.getOrElse(len, List())\n                dict.put(len,\
    \ curr :+ word)\n            }\n        )\n        dict.keySet.toList.sorted.flatMap(\n\
    \            (k : Int) => {\n                dict(k).sorted\n            }\n \
    \       )\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpmmmfqr.scala:33)\n\tat Problem.main(tmpdpmmmfqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val res : ListBuffer[String] = new ListBuffer[String]\n\
    \        var sorted = lst.sortWith(_ < _)\n        sorted.foreach(x => if (x.length\
    \ % 2 == 0) res += x)\n        res.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyvaz5ku3.scala:30)\n\tat Problem.main(tmpyvaz5ku3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val evenLenList = for(s <- lst if s.length % 2 ==\
    \ 0) yield s\n        evenLenList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpecy2tpen.scala:28)\n\tat Problem.main(tmpecy2tpen.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        return lst.filter(_.length % 2 == 0).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqs_mly2m.scala:27)\n\tat Problem.main(tmpqs_mly2m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n    \t//val rst = \n    \tlst.filter(s => s.length % 2 ==\
    \ 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphjfxk9dx.scala:28)\n\tat Problem.main(tmphjfxk9dx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        var sum = 0\n        for (s <- lst) sum += s.length\n\
    \        List(sum.toString)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tg0mhyr.scala:23)\n\tat Problem.main(tmp9tg0mhyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        val lst2 = lst.groupBy(s => s.length).map(l => l._2.sorted).toList.sortBy(l\
    \ => l.head.length)\n        lst2.flatMap(l => l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpglrkcwlb.scala:22)\n\tat Problem.main(tmpglrkcwlb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        var keys : List[Int] = lst.map(x => x.length).distinct.sorted\n\
    \        var m : Map[Int, List[String]] = Map()\n        for (k <- keys) m(k)\
    \ = lst.filter(x => x.length == k).sorted\n        keys.map(x => m(x).head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv6zv0bh.scala:24)\n\tat Problem.main(tmpfv6zv0bh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        def isEven(n : Int) : Boolean = n % 2 == 0\n   \
    \     return lst.filter(isEven(_)).sortWith(_.length < _.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbot7ztti.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mreturn\e[0m lst.filter(isEven(_)).sortWith(_.length\
    \ < _.length)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e\
    [31m   |\e[0m                                 Found:    (_$1 : String)\n\e[31m\
    \   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        lst.distinct.sortWith((a, b) => a.length < b.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_yo2bu1.scala:21)\n\tat Problem.main(tmpo_yo2bu1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        lst.sortWith((x, y) => x.length < y.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8hgpcs0.scala:21)\n\tat Problem.main(tmpb8hgpcs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        lst.filter(x => x.length % 2 == 0).sortWith((x,\
    \ y) => if (x.length == y.length) x < y else x.length < y.length)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        lst.toSet.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoh3tlkt5.scala:21)\n\tat Problem.main(tmpoh3tlkt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        var hash = HashMap[Int, List[String]]()\n      \
    \  for (s <- lst) {\n            val len = s.length\n            if (hash.contains(len))\
    \ {\n                val l = hash(len)\n                hash(len) = s :: l\n \
    \           } else {\n                hash(len) = List(s)\n            }\n   \
    \     }\n        var result = List[String]()\n        for (k <- hash.keys.toList.sorted)\
    \ {\n            val l = hash(k)\n            val sl = l.sorted\n            result\
    \ = result ::: sl\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4nj7qyac.scala:37)\n\tat Problem.main(tmp4nj7qyac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // assert list_sort([\"\
    aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    def sortedListSum(lst : List[String])\
    \ : List[String] = {\n        def sum(s1 : String, s2 : String) : String = {\n\
    \            s1 + s2\n        }\n        lst.sortWith(_.length < _.length).foldLeft(List.empty[String])((acc,\
    \ str) => sum(acc.headOption.getOrElse(\"\"), str) :: acc).reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplq3iincj.scala:24)\n\tat Problem.main(tmplq3iincj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820952
