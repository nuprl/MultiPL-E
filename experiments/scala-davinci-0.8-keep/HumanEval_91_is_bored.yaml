name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue.\
  \ The sun is shining. I love this weather\")\n    // 1\n    def isBored(S : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val start = System.currentTimeMillis\n        val bored = S.split(\"\
    [.?!]\").map(x => x.split(\"\\\\s+\")).count(x => x.length > 0 && x(0) == \"I\"\
    )\n        val end = System.currentTimeMillis\n        println(\"Elapsed time:\
    \ \" + (end - start) + \"ms\")\n        bored", '        S.replace(".", "!").replace("?",
    "!").replace("..", "!").replace("??", "!").replace("?!", "!").replace("!?!", "!").replace("...
    ", "!").replace(".... ", "!").replace(".....", "!").replace("!!!", "!").replace("!!!!",
    "!").replace("!", " !").split(" ").filter(x => x == "I").length', "        val\
    \ sentences = S.split(\"[?!.]\").map(_.trim).filter(!_.isEmpty)\n        sentences.count(_.startsWith(\"\
    I\"))", "        val ss = S.split(\"\\\\.|\\\\?|\\\\!\")\n        ss.filter(_.startsWith(\"\
    I\")).size", "        def f(S : String) : Array[String] = S.split(\"[.!?]\")\n\
    \        f(S).filter(_.startsWith(\"I\")).length", "    \tS.split(\"(\\\\.|\\\\\
    ?|!)\").count(s => s.split(\" \")(0) == \"I\")", "        val re = \"\"\"\\bI\\\
    b\"\"\".r\n        val r = re.findAllIn(S).length\n        r", "        if (S.length\
    \ < 2) return 0\n        var ans = 0L\n        var i = 0\n        while (i < S.length\
    \ - 1) {\n            if (S(i) == 'I' && (S(i + 1) == '.' || S(i + 1) == '?' ||\
    \ S(i + 1) == '!')) ans += 1\n            i += 1\n        }\n        ans", " \
    \   \tval words = S.split(\"[.?!]\")\n    \tvar count = 0L\n    \tfor (word <-\
    \ words) {\n    \t\tif (word.length > 0 && word(0) == 'I') count += 1\n    \t\
    }\n    \tcount", "        var count = 0\n        var charArray = S.toCharArray\n\
    \        var arr = new ArrayBuffer[String]()\n        var temp = \"\"\n      \
    \  for (c <- charArray) {\n            if (c != '.' && c != '?' && c != '!') {\n\
    \                temp += c\n            } else {\n                temp += \" \"\
    \n                arr += temp\n                temp = \"\"\n            }\n  \
    \      }\n        for (s <- arr) {\n            if (s.startsWith(\"I \")) count\
    \ += 1\n        }\n        return count", '        return S.split("[.!?]").map(x
    => x.trim).filter(x => x.startsWith("I")).length', "        val ans = S.split(\"\
    (\\\\.|\\\\?|!)\").map(_.trim).filter(_.startsWith(\"I\")).size\n        return\
    \ ans", "        // Fill in the code here.\n        return 0", "      val s =\
    \ S.split(\"[.?!]\")\n      val N = s.size\n      val I = s.filter(_.startsWith(\"\
    I\")).size\n      var J = 0;\n      for (i <- 0 until N) {\n        val spl =\
    \ s(i).split(\"\\\\s+\")\n        if (spl.size > 1 && spl(0) == \"I\") {\n   \
    \       if (J > 0) J += 2\n          else J += 1\n        }\n      }\n      I\
    \ - J", "        val sentences = S.split(\"[.!?]\")\n        val boredoms = for\
    \ (sentence <- sentences if sentence.startsWith(\"I\")) yield sentence\n     \
    \   boredoms.length", "        if (S.isEmpty) return 0\n        val count = S.count(c\
    \ => (c == '?') || (c == '!') || (c == '.'))\n        val ss = S.split(\"[?.!]+\"\
    )\n        var ans = 0.toLong\n        for (s <- ss) if (s.startsWith(\"I\"))\
    \ ans += 1\n        return ans", "        var ans = 0L\n        for (i <- 0 until\
    \ S.length) {\n            if (S(i) == 'I') {\n                if (i == 0 || S(i\
    \ - 1) == ' ' || S(i - 1) == '.' || S(i - 1) == '?' || S(i - 1) == '!') ans +=\
    \ 1\n            }\n        }\n        ans", "        var count = 0L\n       \
    \ var i = 0\n        while (i < S.length) {\n            while (i < S.length &&\
    \ S(i) != 'I') i += 1\n            if (i < S.length) {\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \         count += 1\n            }\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        sentences.count(_.startsWith(\"I\"))", "     \
    \   var l = 0\n        var b = 0\n        while (l < S.length) {\n           \
    \ while (l < S.length && S(l) != ' ') l += 1\n            if (l < S.length &&\
    \ S(l) == ' ') {\n                l += 1\n                if (S(l) == 'I') b +=\
    \ 1\n            }\n        }\n        return b"]
stop_tokens:
- "\n    }\n"
