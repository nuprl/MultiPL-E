name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3,\
  \ 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ['        nums.filter(n => n > 10 && isFirstDigitOdd(n) && isLastDigitOdd(n)).length',
  "        def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            val first = s(0).toString.toInt\n            val last = s(s.length\
    \ - 1).toString.toInt\n            n > 10 && first % 2 == 1 && last % 2 == 1\n\
    \        }\n        nums.filter(isSpecial).length", "        var count = 0\n \
    \       for (num <- nums) {\n            if (num > 10 && abs(num) % 10 % 2 ==\
    \ 1 && abs(num) / math.pow(10, math.floor(math.log10(abs(num))).toInt) % 2 ==\
    \ 1) count += 1\n        }\n        return count", "        return nums.filter(x\
    \ => {\n            val s = x.toString\n            val p = (s.length > 1) &&\
    \ (s(0) % 2 != 0) && (s(s.length - 1) % 2 != 0)\n            x > 10 && p\n   \
    \     }).length", "    \tnums.filter(x => x > 10 && (x / 10) % 2 == 1 && x % 2\
    \ == 1).length", "        var count = 0\n        for (num <- nums) {\n       \
    \     val chars = num.toString.toList\n            if (num > 10 && chars.head\
    \ % 2 == 1 && chars.last % 2 == 1) count += 1\n        }\n        count", "  \
    \      nums.filter(n => n > 10 &&\n                         n.toString.charAt(0).asDigit\
    \ % 2 == 1 &&\n                         n.toString.charAt(n.toString.length -\
    \ 1).asDigit % 2 == 1).length", "        // O(n)\n        var count = 0L\n   \
    \     for (i <- nums.indices) {\n            val n = nums(i)\n            if (n\
    \ > 10 && (n % 10) % 2 == 1 && (n / pow(10, floor(log10(n)))).toInt % 2 == 1)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \     var count = 0\n      for (n <- nums) {\n        if (n > 10 && n.toString.last.toInt\
    \ % 2 == 1 && n.toString.head.toInt % 2 == 1) {\n          count += 1\n      \
    \  }\n      }\n      count", '        nums.count(n => n > 10 && Array(n / 10,
    n % 10).forall(d => d % 2 == 1))', "        // Loop through the list and count\
    \ the number of elements \n        // that are greater than 10 and both first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        return nums.foldLeft(0)((c,\
    \ n) => if (n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1) c + 1 else c)",
  "    \t// Fill up this function body\n        // You have to return the number of\
    \ elements in the array that are \n        // greater than 10 and both first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x>10\
    \ && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        val count = nums.filter(num => num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1).length\n        count",
  "        if (nums.length == 0) return 0\n        var count = 0\n        nums.foreach(x\
    \ => if (x > 10 && x.toString.length > 1 && (x.toString.last.toString.toInt %\
    \ 2 != 0) && (x.toString.head.toString.toInt % 2 != 0)) count += 1)\n        return\
    \ count", "        var count = 0L\n        for (num <- nums) {\n            val\
    \ firstDigit = floor(num.toDouble / 10).toLong\n            val lastDigit = num\
    \ % 10\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0 && num > 10)\
    \ count += 1\n        }\n        count", "        var sum = 0L\n        for (n\
    \ <- nums) {\n            if (n > 10 && (n.toString.head.toInt + n.toString.last.toInt)\
    \ % 2 == 1) sum += 1\n        }\n        sum", "        // println(nums)\n   \
    \     val result = nums.filter(x => x > 10 && x.toString.head.toString.toInt %\
    \ 2 == 1 && x.toString.last.toString.toInt % 2 == 1)\n        // println(result)\n\
    \        result.length", '        nums.filter(n => n > 10 && isOdd(n % 10) &&
    isOdd(n / pow(10, floor(log10(n)).toInt).toLong)).length', "        val numsStr\
    \ = nums.map(_.toString)\n        numsStr.filter(x => x.last.toString.toInt %\
    \ 2 == 1 && x.head.toString.toInt % 2 == 1 && x.toInt > 10).size", '        nums.filter(x
    => x > 10 && x % 2 == 1 && (x / 10) % 2 == 1 && x % 10 == 1).length']
stop_tokens:
- "\n    }\n"
