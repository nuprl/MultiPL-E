name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n\
  \    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    // split_words(\"\
  abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String], Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        val oddCount = txt.count(c => c >= 'a' && c <= 'z' && (c -\
    \ 'a') % 2 == 0)\n        if (txt.contains(' ')) {\n            Left(txt.split('\
    \ ').toList)\n        } else if (txt.contains(',')) {\n            Left(txt.split(',').toList)\n\
    \        } else {\n            Right(oddCount)\n        }", "      def parseWords(txt\
    \ : String) : List[String] = txt.split(' ').toList\n      def parseCommas(txt\
    \ : String) : List[String] = txt.split(',').toList\n      def getLowerCaseOddCount(txt\
    \ : String) : Long = txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').groupBy(c\
    \ => c).mapValues(_.length).filter(_._2 % 2 == 1).size\n      if (txt.indexOf('\
    \ ') != -1) Left(parseWords(txt))\n      else if (txt.indexOf(',') != -1) Left(parseCommas(txt))\n\
    \      else Right(getLowerCaseOddCount(txt))", "        val a = txt.split(\" \"\
    )\n        if (a.length > 1) {\n            val b = txt.split(\",\")\n       \
    \     if (b.length > 1) {\n                Right(a.foldLeft(0L)((a, b) => a +\
    \ b.filter(c => c >= 'a' && c <= 'z').foldLeft(0L)((a, b) => if (a < 0) a + abs(a\
    \ + 1) - abs(a + 1) else a + abs(a + 1))))\n            } else {\n           \
    \     Left(b.toList)\n            }\n        } else {\n            Left(a.toList)\n\
    \        }", "      if (txt.trim.length == 0) Left(List[String]())\n      else\
    \ {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1)\
    \ Left(words.toList)\n        else {\n          val words = txt.split(\",\")\n\
    \          if (words.length > 1) Left(words.toList)\n          else {\n      \
    \      var oddLetters = 0\n            txt.foreach(c => if (c.isLower && c.toInt\
    \ % 2 == 1) oddLetters += 1)\n            Right(oddLetters)\n          }\n   \
    \     }\n      }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val nums\
    \ = txt.split(\",\")\n            if (nums.length > 1) {\n                Left(nums.toList)\n\
    \            } else {\n                val sum = txt.filter(_.isLower).map(c =>\
    \ c.toLong - 'a').filter(_ % 2 == 1).sum\n                Right(sum)\n       \
    \     }\n        }", "        txt.split(\" \") match {\n            case Array()\
    \ => txt.split(\",\") match {\n                case Array() => Left(List(txt))\n\
    \                case xs => Left(xs.toList)\n            }\n            case xs\
    \ => Left(xs.toList)\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.filter(c => c.isLower && (txt.indexOf(c) % 2) == 1).length)",
  "        if (txt.indexOf(' ') >= 0) {\n            val lst = txt.split(' ').map(s\
    \ => s.trim).toList\n            Left(lst)\n        } else if (txt.indexOf(',')\
    \ >= 0) {\n            val lst = txt.split(',').map(s => s.trim).toList\n    \
    \        Left(lst)\n        } else {\n            val lst = txt.toList\n     \
    \       val count = lst.count(c => ord(c) % 2 == 1)\n            Right(count)\n\
    \        }", "      Right(txt.count(_ < 'a'))", "      if (txt.contains(' '))\
    \ Left(txt.split(' ').toList)\n      else if (txt.contains(',')) Left(txt.split(',').toList)\n\
    \      else Right(txt.count(x => (x - 'a') % 2 == 0))", "        if (txt.contains('\
    \ ')) Left(txt.split(' ').toList)\n        else if (txt.contains(',')) Left(txt.split(',').toList)\n\
    \        else Right(txt.count(x => x.isLower && (x - 'a') % 2 == 0))", "     \
    \ if (txt.isEmpty) Left(List())\n      else if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n      else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \      else Right(txt.filter(c => c >= 'a' && c <= 'z').map(c => (c - 'a' + 1)\
    \ % 2).sum)", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val lower = txt.filter(_.isLower)\n                Right(lower.map(x\
    \ => (x - 'a') % 2).filter(_ == 1).size)\n            }\n        }", "       \
    \ txt.split(\"\\\\s+\").map(_.toLowerCase()).filter(_.length() > 0) match {\n\
    \            case Array(words@_*) => Left(words.toList)\n            case Array()\
    \ => txt.split(\",\").map(_.toLowerCase()).filter(_.length() > 0) match {\n  \
    \              case Array(words@_*) => Left(words.toList)\n                case\
    \ Array() => Right(txt.map(_.toLong - 'a').toSet.filter(_ % 2 == 1).size)\n  \
    \          }\n        }", "        // write your code here\n        ???", "  \
    \      if (txt.indexOf(\" \") != -1) Left(txt.split(\" \").toList)\n        else\
    \ if (txt.indexOf(\",\") != -1) Left(txt.split(\",\").toList)\n        else Right(txt.filter(x\
    \ => x - 'a' % 2 == 0).length)", "        def toLong(txt : String) : Long = {\n\
    \            val oddIdx = (0 until txt.length by 2).map(txt.charAt(_).toInt -\
    \ ord('a')).toSet\n            oddIdx.sum\n        }\n        val txtTrimmed =\
    \ txt.trim\n        if (txtTrimmed.contains(\" \")) Left(txtTrimmed.split(\" \"\
    ).toList)\n        else if (txtTrimmed.contains(\",\")) Left(txtTrimmed.split(\"\
    ,\").toList)\n        else Right(toLong(txtTrimmed))", "        val words = txt.split(\"\
    \ \")\n        if (words.length == 1) {\n            val commas = words(0).split(\"\
    ,\")\n            if (commas.length == 1) {\n                val odd = commas(0).filter(x\
    \ => \"abcdefghijklmnopqrstuvwxyz\".indexOf(x) % 2 == 0).length\n            \
    \    Right(odd)\n            } else Left(commas.toList)\n        } else Left(words.toList)",
  "        val charList = txt.toList\n        val evenOddList = charList.map {\n \
    \           case x if x.isLetter && x.isLower => x.toInt - 'a'.toInt % 2 == 0\n\
    \            case _ => false\n        }\n        val evenOddArray = evenOddList.toArray\n\
    \        val trueCount = evenOddArray.count(x => x)\n        // println(trueCount)\n\
    \        val comma = charList.indexOf(',')\n        if (comma >= 0) {\n      \
    \      val wordList = charList.take(comma) :: charList.drop(comma + 1) :: Nil\n\
    \            Left(wordList.map(x => x.mkString))\n        } else {\n         \
    \   val whiteSpace = charList.indexOf(' ')\n            if (whiteSpace >= 0) {\n\
    \                val wordList = charList.take(whiteSpace) :: charList.drop(whiteSpace\
    \ + 1) :: Nil\n                Left(wordList.map(x => x.mkString))\n         \
    \   } else {\n                Right(trueCount)\n            }\n        }", " \
    \       val words = txt.split(\" \")\n        if (words.length > 1) {\n      \
    \      Left(words.toList)\n        } else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => 'a' <= x && x <= 'z'))\n       \
    \     }\n        }"]
stop_tokens:
- "\n    }\n"
