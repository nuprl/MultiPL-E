name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
  \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
  \ n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        // write your code here \n        val fruit = s.split(\" and\
    \ \")\n        val apples = fruit(0).split(\" \")(0).toLong\n        val oranges\
    \ = fruit(1).split(\" \")(0).toLong\n        return n - apples - oranges", " \
    \       val words = s.split(\" \")\n        val orange = words(3).toLong\n   \
    \     val apple = words(0).toLong\n        n - orange - apple", "        val parts\
    \ = s.split(\" \")\n        val apples : Long = parts(0).toLong\n        val oranges\
    \ : Long = parts(2).toLong\n        n - apples - oranges", "        val parts\
    \ = s.split(\" \")\n        val apple = parts(0).toLong\n        val orange =\
    \ parts(3).toLong\n        return n - apple - orange", "        // Write your\
    \ code here\n        return n;", "        // Write your code here\n        val\
    \ tokens = s.split(\" \")\n        val apple = tokens(0).toLong\n        val orange\
    \ = tokens(2).toLong\n        n - apple - orange", "        // Write your code\
    \ here\n        val ss = s.split(\" and \")\n        val appN = ss(0).toLong\n\
    \        val orN = ss(1).toLong\n        n - appN - orN", '        n - s.split("
    and ").map(_.split(" ")(0).toLong).sum', "        val (apples, oranges) = extractNumbers(s)\n\
    \        n - apples - oranges", "        val s1 = s.split(\" \")\n        val\
    \ apple = s1(0).toLong\n        val orange = s1(3).toLong\n        val mango =\
    \ n - apple - orange\n        mango", "        val numbers = s.split(\" and \"\
    ).map(_.split(\" \")(0).toLong)\n        n - numbers(0) - numbers(1)", '        ???',
  "        val lst = s.split(\" \")\n        val x = lst(0).toLong\n        val y\
    \ = lst(3).toLong\n        n - x - y", "        // Write your code here\n    \
    \    val fruits = s.split(\" and \")\n        var apples = 0\n        var oranges\
    \ = 0\n        for (fruit <- fruits) {\n            val num = fruit.split(\" \"\
    )(0).toInt\n            val name = fruit.split(\" \")(1)\n            if (name\
    \ == \"apples\") apples = num\n            else oranges = num\n        }\n   \
    \     n - apples - oranges", "        val regex = \"\"\"(\\d+) apples and (\\\
    d+) oranges\"\"\".r\n        s match {\n            case regex(x, y) => n - x.toLong\
    \ - y.toLong\n        }", '        return 0;', "    \tvar str = s.split(\" \"\
    )\n    \tvar apple = str(0).toLong\n    \tvar orange = str(3).toLong\n    \tn\
    \ - apple - orange", "        val apples = n - (s.split(\" and \")(0).split(\"\
    \ \")(0).toLong) - s.split(\" and \")(1).split(\" \")(0).toLong\n        apples",
  "        // Write your code here\n        ???", "        // Write your code here\n\
    \        val p = \"(\\\\d+) apples and (\\\\d+) oranges\".r\n        val m = p.findFirstMatchIn(s)\n\
    \        if (m.isDefined) {\n            val apples = m.get.group(1).toLong\n\
    \            val oranges = m.get.group(2).toLong\n            n - apples - oranges\n\
    \        } else {\n            0\n        }"]
stop_tokens:
- "\n    }\n"
