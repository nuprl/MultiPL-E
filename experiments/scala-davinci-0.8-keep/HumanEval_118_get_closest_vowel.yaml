name: HumanEval_118_get_closest_vowel
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    // two consonants from the right side of the word (case sensitive).\n\
  \    // Vowels in the beginning and ending doesn't count. Return empty string if\
  \ you didn't\n    // find any vowel met the above condition. \n    // You may assume\
  \ that the given string contains English letter only.\n    // Example:\n    // get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\") ==> \"U\"\n    // get_closest_vowel(\"\
  quick\") ==> \"\"\n    // get_closest_vowel(\"ab\") ==> \"\"\n    def getClosestVowel(word\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        def isVowel(c : Char) = c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u'\n        for (i <- word.length - 1 to 0 by -1) {\n    \
    \        if (isVowel(word(i))) {\n                if (i != word.length - 1 &&\
    \ !isVowel(word(i + 1))) return word(i).toString\n                if (i != 0 &&\
    \ !isVowel(word(i - 1))) return word(i).toString\n            }\n        }\n \
    \       \"\"", "    \tif (word.length == 0) return \"\"\n    \tvar queue = Queue[String]()\n\
    \    \tqueue += word.substring(word.length - 1)\n    \tfor (i <- word.length -\
    \ 2 to 0 by -1) {\n    \t\tval c = word(i).toString\n    \t\tif (isVowel(c)) queue\
    \ += c\n    \t\telse {\n    \t\t\tif (queue.last != \"\" && isVowel(queue.last))\
    \ return queue.last\n    \t\t\telse queue += \"\"\n    \t\t}\n    \t}\n    \t\"\
    \"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val consonants\
    \ = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z')\n        var closestVowel : Option[Char]\
    \ = None\n        var shortestDistance = Int.MaxValue\n        val len = word.length\n\
    \        for (c <- word) {\n            if (vowels contains c) {\n           \
    \     var index = word.indexOf(c)\n                if (index < len - 1 && consonants\
    \ contains word(index + 1)) {\n                    if (index < shortestDistance)\
    \ {\n                        shortestDistance = index\n                      \
    \  closestVowel = Some(c)\n                    }\n                }\n        \
    \        if (index > 0 && consonants contains word(index - 1)) {\n           \
    \         if (len - index < shortestDistance) {\n                        shortestDistance\
    \ = len - index\n                        closestVowel = Some(c)\n            \
    \        }\n                }\n            }\n        }\n        if (closestVowel\
    \ != None) closestVowel.get.toString else \"\"", "        // Since we can assume\
    \ the given string contains English letter only, \n        // we can limit the\
    \ vowels to \"aeiouAEIOU\".\n        // Brute-force, start from the end of the\
    \ string, \n        // when we meet a vowel, check whether it's between two consonants.\n\
    \        // If it's not between two consonants, continue to find the next vowel,\n\
    \        // until you meet the condition.\n        // Otherwise, return the vowel.\n\
    \        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        val consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n            'B', 'C',\
    \ 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z')\n        for (i <- word.length - 1 to 0 by -1) {\n          \
    \  if (vowels.contains(word(i))) {\n                if (i - 1 >= 0 && consonants.contains(word(i\
    \ - 1)) &&\n                    i + 1 < word.length && consonants.contains(word(i\
    \ + 1))) {\n                    return word(i).toString\n                }\n \
    \           }\n        }\n        \"\"", "        if (word.length == 0) return\
    \ \"\"\n        var c = word.charAt(word.length - 1)\n        if (!isVowel(c))\
    \ {\n            var j = word.length - 2\n            while (j >= 0) {\n     \
    \           if (isVowel(word.charAt(j))) {\n                    return word.charAt(j).toString\n\
    \                }\n                j -= 1\n            }\n        }\n       \
    \ \"\"", "        // your code goes here\n        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                if (i == word.length - 1) return \"\"\n                else\
    \ {\n                    val j = i + 1\n                    if (!vowels.contains(word(j)))\
    \ return word(i).toString\n                }\n            }\n        }\n     \
    \   \"\"", "        var minIndex = -1\n        var minDist = 0\n        for (i\
    \ <- word.length - 1 to 0 by -1) {\n            if (isVowel(word(i))) {\n    \
    \            minIndex = i\n                minDist = -1\n                break\n\
    \            }\n            minDist += 1\n        }\n        if (minIndex == -1)\
    \ return \"\"\n        for (i <- minIndex - 1 to 0 by -1) {\n            if (isVowel(word(i)))\
    \ return \"\"\n            if (minDist > i - minIndex) minDist = i - minIndex\n\
    \        }\n        return word(minIndex - minDist).toString", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        var closestVowel = \"\"\n        var\
    \ vowelDistance = word.length\n        var consonantCount = 0\n        for (i\
    \ <- 0 until word.length) {\n            if (vowels.contains(word(i))) {\n   \
    \             consonantCount = 0\n            } else {\n                consonantCount\
    \ += 1\n            }\n            if (consonantCount == 2) {\n              \
    \  consonantCount -= 1\n                val vowelDistanceTmp = word.length - i\n\
    \                if (vowelDistanceTmp < vowelDistance) {\n                   \
    \ vowelDistance = vowelDistanceTmp\n                    closestVowel = word(i).toString\n\
    \                }\n            }\n        }\n        closestVowel", "       \
    \ var index = word.length - 1\n        while (index >= 0) {\n            if (isVowel(word(index)))\
    \ {\n                if (index + 1 == word.length) return \"\"\n             \
    \   if (isConsonant(word(index + 1))) return word(index).toString\n          \
    \  }\n            index -= 1\n        }\n        return \"\"", "        var result\
    \ = new StringBuffer()\n        for (i <- 0 until word.length - 1) {\n       \
    \     if (word(i).isConsonant && word(i + 1).isVowel) result += word(i + 1)\n\
    \        }\n        result.toString", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        word.reverse.foldLeft(\"\")((result, c) => result match {\n\
    \            case \"\" => {\n                if (vowels.contains(c)) result +\
    \ c else \"\"\n            }\n            case _ => {\n                if (vowels.contains(c))\
    \ result + c else \"\"\n            }\n        })", "        var vowelSet = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var cur = word.length - 1\n        while\
    \ (cur >= 0) {\n            if (vowelSet.contains(word(cur).toString)) return\
    \ word(cur).toString\n            cur -= 1\n        }\n        return \"\"", " \
    \     var lastConsonantIndex = -1\n      var firstVowelIndex = -1\n      var firstVowelIndexOfRight\
    \ = -1\n      for (i <- 0 until word.length) {\n        if (isVowel(word(i)))\
    \ {\n          if (firstVowelIndex == -1) {\n            firstVowelIndex = i\n\
    \          }\n          if (lastConsonantIndex != -1) {\n            firstVowelIndexOfRight\
    \ = i\n            return word(i).toString\n          }\n        } else {\n  \
    \        lastConsonantIndex = i\n        }\n      }\n      if (firstVowelIndexOfRight\
    \ == -1) {\n        if (firstVowelIndex == -1) {\n          return \"\"\n    \
    \    } else {\n          return word(firstVowelIndex).toString\n        }\n  \
    \    } else {\n        return word(firstVowelIndexOfRight).toString\n      }",
  "        var vowelList = List[Char]('a', 'e', 'i', 'o', 'u')\n        var closestVowel\
    \ = ' '\n        var indexOfClosestVowel = Int.MaxValue\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowelList.contains(word(i))) {\n        \
    \        var count = 0\n                for (j <- i - 1 to 0 by -1) {\n      \
    \              if (vowelList.contains(word(j))) return \"\"\n                \
    \    else {\n                        count += 1\n                        if (count\
    \ == 2) {\n                            indexOfClosestVowel = min(indexOfClosestVowel,\
    \ i)\n                            closestVowel = word(i)\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        if (indexOfClosestVowel == Int.MaxValue) \"\" else closestVowel.toString",
  "    \tvar result = \"\"\n    \tfor (i <- word.length - 1 to 0 by -1) {\n    \t\t\
    val c = word(i)\n    \t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n    \t\t\tif (i != word.length - 1 && (word(i + 1) != 'a' && word(i\
    \ + 1) != 'e' && word(i + 1) != 'i' && word(i + 1) != 'o' && word(i + 1) != 'u'))\
    \ {\n    \t\t\t\tresult = c.toString\n    \t\t\t\treturn result\n    \t\t\t}\n\
    \    \t\t}\n    \t}\n    \tresult", "      if (word.length == 0) return \"\"\n\
    \      var isConsonant = false\n      for (c <- word.toList.reverse) {\n     \
    \   if (isVowel(c)) {\n          if (isConsonant) return c.toString\n        }\
    \ else {\n          isConsonant = true\n        }\n      }\n      \"\"", "   \
    \     val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val v = vowels.map(x\
    \ => word.split(x).last).filter(x => x.size > 0)\n        if (v.size > 0) vowels(v.indices.minBy(i\
    \ => v(i).size)) else \"\"", "        val length = word.length\n        if (length\
    \ <= 2) return \"\"\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        var min = Double.MaxValue\n        var c = \"\"\n        for (i <-\
    \ 1 until length - 1) {\n            if (vowels.contains(word(i).toString)) {\n\
    \                val pos = i\n                val dist1 = abs(pos - findRightmostConsonant(word,\
    \ 0, pos - 1))\n                val dist2 = abs(findLeftmostConsonant(word, pos\
    \ + 1, length - 1) - pos)\n                val dist = min(dist1, dist2)\n    \
    \            if (dist < min) {\n                    min = dist\n             \
    \       c = word(i).toString\n                }\n            }\n        }\n  \
    \      c", "        // \n        val vowels = List(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\")\n        val charList = word.toLowerCase.toList\n\
    \        // Loop through the list and find the first time the char is a consonant.\
    \ If it is,\n        // loop backwards until you find a vowel and then check to\
    \ see if the next char is\n        // a consonant. If it is, return the vowel.\
    \ Otherwise, try again. If you can't find\n        // any consonants in the word,\
    \ return \"\"\n        val firstConsonantIndex = charList.lastIndexWhere(consonants.contains(_))\n\
    \        if (firstConsonantIndex != -1) {\n            for (i <- firstConsonantIndex\
    \ to 0 by -1) {\n                if (vowels.contains(charList(i))) {\n       \
    \             if (consonants.contains(charList(i - 1))) return charList(i).toString\n\
    \                }\n            }\n        }\n        \"\"", "        def endsWithConsonant(word\
    \ : String) : Boolean = {\n            !word.head.isVowel\n        }\n       \
    \ def startsWithConsonant(word : String) : Boolean = {\n            !word.last.isVowel\n\
    \        }\n        def firstVowel(word : String) : Char = {\n            for\
    \ (c <- word) {\n                if (c.isVowel) return c\n            }\n    \
    \        '0'\n        }\n        if (word.size <= 2) return \"\"\n        val\
    \ first = firstVowel(word)\n        if (first == '0') return \"\"\n        val\
    \ second = firstVowel(word.tail)\n        if (second == '0') return \"\"\n   \
    \     if (startsWithConsonant(word)) {\n            if (endsWithConsonant(word))\
    \ return \"\"\n            else return first.toString\n        }\n        if (endsWithConsonant(word))\
    \ return first.toString\n        else if (firstVowel(word.init.tail) == '0') return\
    \ first.toString\n        else if (abs(first - second) < abs(first - firstVowel(word.init.tail)))\
    \ return second.toString\n        else return first.toString"]
stop_tokens:
- "\n    }\n"
