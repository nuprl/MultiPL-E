language: scala
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        var sides = Array(a, b, c)\n\
    \        sides = sides.sorted\n        var side1 = sides(0)\n        var side2\
    \ = sides(1)\n        var side3 = sides(2)\n        return (side1 * side1 + side2\
    \ * side2 == side3 * side3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        var l = List[Long](a, b,\
    \ c)\n        l = l.sorted\n        return l(0) * l(0) + l(1) * l(1) == l(2) *\
    \ l(2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val s = Array(a, b, c).sorted\n\
    \        return s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val max = max(a, max(b, c))\n\
    \        (max == a && b * b + c * c == a * a) || (max == b && a * a + c * c ==\
    \ b * b) || (max == c && a * a + b * b == c * c)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7ksip7kx.scala:12:18 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7ksip7kx.scala:12:25 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659820887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val sides = List(a, b, c).sorted\n\
    \        val sidesSquared = sides.map(x => x * x)\n        sidesSquared(0) + sidesSquared(1)\
    \ == sidesSquared(2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val sortedLengths = List(a,\
    \ b, c).sorted\n        (pow(sortedLengths(0), 2) + pow(sortedLengths(1), 2) ==\
    \ pow(sortedLengths(2), 2))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        if (a == 0 || b == 0 || c\
    \ == 0) return false\n        var (a1, b1, c1) = (a, b, c)\n        if (a1 > b1)\
    \ {\n            val t = a1\n            a1 = b1\n            b1 = t\n       \
    \ }\n        if (a1 > c1) {\n            val t = a1\n            a1 = c1\n   \
    \         c1 = t\n        }\n        if (b1 > c1) {\n            val t = b1\n\
    \            b1 = c1\n            c1 = t\n        }\n        a1 * a1 + b1 * b1\
    \ == c1 * c1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val sides = Set(a, b, c)\n\
    \        val sqa = (a * a).toDouble\n        val sqb = (b * b).toDouble\n    \
    \    val sqc = (c * c).toDouble\n        if (sides.size == 1) return false\n \
    \       else if (sides.size == 2) return true\n        else {\n            if\
    \ (sqb + sqc == sqa) return true\n            else if (sqa + sqc == sqb) return\
    \ true\n            else if (sqa + sqb == sqc) return true\n            else return\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1sgb3wpw.scala:36)\n\tat Problem.main(tmp1sgb3wpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val max = List(a, b, c).max\n\
    \        if (max == a) {\n            (max * max) == ((b * b) + (c * c))\n   \
    \     } else if (max == b) {\n            (max * max) == ((a * a) + (c * c))\n\
    \        } else {\n            (max * max) == ((a * a) + (b * b))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        // Choose the hypotenuse\
    \ as the longer side and the sides as the shorter sides.\n        var hyp : Long\
    \ = 0\n        var sides : List[Long] = List()\n        if (a >= b && a >= c)\
    \ {\n            hyp = a\n            sides = List(b, c)\n        } else if (b\
    \ >= a && b >= c) {\n            hyp = b\n            sides = List(a, c)\n   \
    \     } else {\n            hyp = c\n            sides = List(a, b)\n        }\n\
    \        // Test whether the triangle is right angled.\n        var result : Boolean\
    \ = false\n        if (sides(0) * sides(0) + sides(1) * sides(1) == hyp * hyp)\
    \ result = true\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val a1 = a * a\n        val\
    \ b1 = b * b\n        val c1 = c * c\n        if (a1 + b1 == c1 || a1 + c1 ==\
    \ b1 || b1 + c1 == a1) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n    \tif (a > b && a > c) a * a ==\
    \ b * b + c * c\n    \telse if (b > a && b > c) b * b == a * a + c * c\n    \t\
    else c * c == a * a + b * b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        (a * a) + (b * b) == (c *\
    \ c)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd0rs8zq8.scala:17)\n\tat Problem.main(tmpd0rs8zq8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val ls = Array(a, b, c).sorted\n\
    \        val a2 = ls(0) * ls(0)\n        val b2 = ls(1) * ls(1)\n        val c2\
    \ = ls(2) * ls(2)\n        return a2 + b2 == c2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val (x, y, z) = if (a > b)\
    \ {\n            if (a > c) {\n                (a, b, c)\n            } else {\n\
    \                (c, b, a)\n            }\n        } else {\n            if (b\
    \ > c) {\n                (b, a, c)\n            } else {\n                (c,\
    \ a, b)\n            }\n        }\n        if (x * x == y * y + z * z) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        var isRightAngleTriangle\
    \ = false\n        if (a == b && b == c) {\n            isRightAngleTriangle =\
    \ false\n        } else if (a == b || b == c || a == c) {\n            isRightAngleTriangle\
    \ = true\n        } else {\n            val sortedList = List(a, b, c).sorted\n\
    \            isRightAngleTriangle = (sortedList(0) * sortedList(0) + sortedList(1)\
    \ * sortedList(1)) == sortedList(2) * sortedList(2)\n        }\n        isRightAngleTriangle\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2rpfm5j.scala:34)\n\tat Problem.main(tmpa2rpfm5j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n    \tval arr = Array(a, b, c)\n\
    \    \tval t = arr.sorted\n    \tt(0) * t(0) + t(1) * t(1) == t(2) * t(2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val sorted = List(a, b, c).sorted\n\
    \        sorted(0) * sorted(0) + sorted(1) * sorted(1) == sorted(2) * sorted(2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val (fst, snd, thd) = if\
    \ (a > b) {\n            if (a > c) (a, b, c) else (c, b, a)\n        } else {\n\
    \            if (b > c) (b, a, c) else (c, a, b)\n        }\n        fst * fst\
    \ == snd * snd + thd * thd\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) ==\
    \ True\n    // right_angle_triangle(1, 2, 3) == False\n    def rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean = {\n        val sorted = List(a, b, c).sorted\n\
    \        sorted(0) * sorted(0) + sorted(1) * sorted(1) == sorted(2) * sorted(2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820890
