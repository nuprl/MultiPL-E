name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422,\
  \ 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    //\
  \ []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        // if a number has an even digit, then\n        // it is a\
    \ multiple of 10\n        def hasEvenDigit(x : Long) : Boolean = {\n         \
    \   val a = x.toString\n            for (i <- 0 until a.length) {\n          \
    \      if (a(i) % 2 == 0) return true\n            }\n            return false\n\
    \        }\n        var u : List[Long] = List()\n        for (i <- x) {\n    \
    \        if (!hasEvenDigit(i)) u = u :+ i\n        }\n        return u.sorted",
  "        def isDigitUnique(x : Long) : Boolean = {\n            def isUnique(x :\
    \ Long, acc : Boolean) : Boolean = {\n                if (x == 0) return acc\n\
    \                val d = x % 10\n                if (d % 2 == 0) return false\n\
    \                isUnique(x / 10, acc)\n            }\n            isUnique(x,\
    \ true)\n        }\n        x.filter(isDigitUnique).sorted", "        def hasEvenDigit(y\
    \ : Long) : Boolean = y > 0 && (y % 2 == 0 || hasEvenDigit(y / 10))\n        x.filter(x\
    \ => !hasEvenDigit(x)).sorted", "    \tdef isEven(n : Long) : Boolean = {\n  \
    \  \t\tvar s = n.toString\n    \t\ts.exists(c => c == '2' || c == '4' || c ==\
    \ '6' || c == '8')\n    \t}\n    \tx.filter(!isEven(_)).sorted", '        x.filter(i
    => (!i.toString.contains("2")) && (!i.toString.contains("4")) && (!i.toString.contains("6"))
    && (!i.toString.contains("8"))).sorted', "    \tval y = x.filter((e : Long) =>\
    \ e.toString.filter((a : Char) => a != '0' && a != '2' && a != '4' && a != '6'\
    \ && a != '8').length == e.toString.length)\n    \ty.sortWith((a : Long, b : Long)\
    \ => a < b)", "        x.filter(i => i.toString.forall(d => (d - '0') % 2 == 1)).sorted",
  "        def uniqueDigitsRec(c : List[Long], result : List[Long]) : List[Long] =\
    \ {\n            if (c.isEmpty) result.sorted\n            else {\n          \
    \      if (c.head.toString.exists(d => (d - '0') % 2 == 0)) uniqueDigitsRec(c.tail,\
    \ result)\n                else uniqueDigitsRec(c.tail, c.head :: result)\n  \
    \          }\n        }\n        uniqueDigitsRec(x, Nil)", "        var even :\
    \ ArrayBuffer[Long] = new ArrayBuffer[Long]\n        var odd : ArrayBuffer[Long]\
    \ = new ArrayBuffer[Long]\n        for (i <- x) {\n            if (i.toString.count(_\
    \ == '2') == 0) even += i\n            else odd += i\n        }\n        even.sorted.toList\
    \ ++ odd.sorted.toList", "        var result = List[Long]()\n        for (l <-\
    \ x) {\n            if (l.toString.forall(c => ((c.toInt - '0'.toInt) % 2 == 1)))\
    \ result = l :: result\n        }\n        result.sortWith(_ < _)", "        def\
    \ isUnique(i : Long) : Boolean = i.toString.toSet.size == i.toString.size\n  \
    \      x.filter(isUnique).sorted", "        var r = List[Long]()\n        for\
    \ (a <- x) {\n            if (a.toString.forall(x => x.asDigit % 2 == 1)) r =\
    \ a :: r\n        }\n        r.sorted", "      val res = ArrayBuffer[Long]()\n\
    \      x.foreach(n => {\n        var hasEven = false\n        var n1 = n\n   \
    \     while (n1 > 0) {\n          if (n1 % 2 == 0) {\n            hasEven = true\n\
    \            n1 = 0\n          }\n          else n1 /= 10\n        }\n       \
    \ if (!hasEven) res += n\n      })\n      res.toList.sorted", "        return\
    \ x.filter(e => !e.toString.contains('2') && !e.toString.contains('4') && !e.toString.contains('6')\
    \ && !e.toString.contains('8')).sorted", '        x.filter(x => !x.toString.exists(ch
    => ch.toString.toInt % 2 == 0)).sorted', "        if (x.isEmpty) List()\n    \
    \    else x.filter(y => y.toString.exists(z => (z.toInt - '0') % 2 == 1)).sorted",
  "    \tx.filter(num => (num.toString.matches(\"[13579]+\"))).sorted", "        def\
    \ isUnique(n : Long) : Boolean = {\n            var temp = n\n            while\
    \ (temp > 0) {\n                if (temp % 2 == 0) return false\n            \
    \    temp /= 10\n            }\n            return true\n        }\n        return\
    \ x.filter(n => isUnique(n)).sorted", "      val containsEven = (n : Long) =>\
    \ n.toString.exists(_.asDigit % 2 == 0)\n      x.filter(n => !containsEven(n)).sorted",
  '        x.filter(num => num.toString.toCharArray.forall(c => c % 2 == 1)).sorted']
stop_tokens:
- "\n    }\n"
