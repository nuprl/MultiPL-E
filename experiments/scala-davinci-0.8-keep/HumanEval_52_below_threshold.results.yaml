language: scala
name: HumanEval_52_below_threshold
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        for (n <- l) if (n >= t) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        if (l.isEmpty) true\n        else if (l.head >= t) false\n\
    \        else belowThreshold(l.tail, t)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        for (n <- l) {\n            if (n >= t) {\n         \
    \       return false\n            }\n        }\n        return true\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        for (x <- l) if (x >= t) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        var i = 0\n        while (i < l.length) {\n         \
    \   if (l(i) >= t) return false\n            i += 1\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        l.foreach(i => if (i >= t) return false)\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        return l.forall(_ < t)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        for (e <- l) if (e >= t) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        l.foldLeft(true)((b, n) => b && n < t)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        var success = true\n        for (x <- l) if (x >= t)\
    \ success = false\n        success\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)),\
    \ (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n      for (i <- l) {\n        if (i >= t) return false\n    \
    \  }\n      return true\n    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        for (n <- l) {\n            if (n >= t) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)),\
    \ (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        l match {\n            case Nil => true\n           \
    \ case h :: tl => h < t && belowThreshold(tl, t)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        l.forall(e => e < t)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        return l.foldLeft(true)((a, e) => a && e < t)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        if (l.isEmpty) {\n            true\n        } else {\n\
    \            l.head < t && belowThreshold(l.tail, t)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n      for (i <- l) {\n        if (i >= t) return false\n    \
    \  }\n      return true\n    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        l.foreach(n => if (n >= t) return false)\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        for (x <- l) {\n            if (x >= t) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)),\
    \ (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True if all numbers in the list l are below threshold t.\n\
    \    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    // False\n    def belowThreshold(l : List[Long], t : Long)\
    \ : Boolean = {\n        l.forall(v => v < t)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong,\
    \ 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
