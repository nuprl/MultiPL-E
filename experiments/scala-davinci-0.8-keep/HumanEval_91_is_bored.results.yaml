language: scala
name: HumanEval_91_is_bored
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val start = System.currentTimeMillis\n       \
    \ val bored = S.split(\"[.?!]\").map(x => x.split(\"\\\\s+\")).count(x => x.length\
    \ > 0 && x(0) == \"I\")\n        val end = System.currentTimeMillis\n        println(\"\
    Elapsed time: \" + (end - start) + \"ms\")\n        bored\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnmj90moi.scala:24)\n\tat Problem.main(tmpnmj90moi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'Elapsed time: 109ms

    Elapsed time: 1ms

    Elapsed time: 0ms

    Elapsed time: 0ms

    Elapsed time: 0ms

    '
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        S.replace(\".\", \"!\").replace(\"?\", \"!\").replace(\"\
    ..\", \"!\").replace(\"??\", \"!\").replace(\"?!\", \"!\").replace(\"!?!\", \"\
    !\").replace(\"... \", \"!\").replace(\".... \", \"!\").replace(\".....\", \"\
    !\").replace(\"!!!\", \"!\").replace(\"!!!!\", \"!\").replace(\"!\", \" !\").split(\"\
    \ \").filter(x => x == \"I\").length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9x_n72zw.scala:21)\n\tat Problem.main(tmp9x_n72zw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[?!.]\").map(_.trim).filter(!_.isEmpty)\n\
    \        sentences.count(_.startsWith(\"I\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkrzrlmpr.scala:18)\n\tat Problem.main(tmpkrzrlmpr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val ss = S.split(\"\\\\.|\\\\?|\\\\!\")\n    \
    \    ss.filter(_.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpank6xhnf.scala:18)\n\tat Problem.main(tmpank6xhnf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        def f(S : String) : Array[String] = S.split(\"\
    [.!?]\")\n        f(S).filter(_.startsWith(\"I\")).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpshvg1mkr.scala:18)\n\tat Problem.main(tmpshvg1mkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n    \tS.split(\"(\\\\.|\\\\?|!)\").count(s => s.split(\"\
    \ \")(0) == \"I\")\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8vc_ing.scala:20)\n\tat Problem.main(tmpy8vc_ing.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val re = \"\"\"\\bI\\b\"\"\".r\n        val r\
    \ = re.findAllIn(S).length\n        r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps3czjtli.scala:23)\n\tat Problem.main(tmps3czjtli.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        if (S.length < 2) return 0\n        var ans =\
    \ 0L\n        var i = 0\n        while (i < S.length - 1) {\n            if (S(i)\
    \ == 'I' && (S(i + 1) == '.' || S(i + 1) == '?' || S(i + 1) == '!')) ans += 1\n\
    \            i += 1\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoo1iv2qz.scala:25)\n\tat Problem.main(tmpoo1iv2qz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n    \tval words = S.split(\"[.?!]\")\n    \tvar count\
    \ = 0L\n    \tfor (word <- words) {\n    \t\tif (word.length > 0 && word(0) ==\
    \ 'I') count += 1\n    \t}\n    \tcount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8sc1egps.scala:22)\n\tat Problem.main(tmp8sc1egps.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var charArray = S.toCharArray\n\
    \        var arr = new ArrayBuffer[String]()\n        var temp = \"\"\n      \
    \  for (c <- charArray) {\n            if (c != '.' && c != '?' && c != '!') {\n\
    \                temp += c\n            } else {\n                temp += \" \"\
    \n                arr += temp\n                temp = \"\"\n            }\n  \
    \      }\n        for (s <- arr) {\n            if (s.startsWith(\"I \")) count\
    \ += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptk36f6ws.scala:36)\n\tat Problem.main(tmptk36f6ws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        return S.split(\"[.!?]\").map(x => x.trim).filter(x\
    \ => x.startsWith(\"I\")).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqcx_trki.scala:17)\n\tat Problem.main(tmpqcx_trki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val ans = S.split(\"(\\\\.|\\\\?|!)\").map(_.trim).filter(_.startsWith(\"\
    I\")).size\n        return ans\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbxz3xreq.scala:18)\n\tat Problem.main(tmpbxz3xreq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        // Fill in the code here.\n        return 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp16q3sg19.scala:19)\n\tat Problem.main(tmp16q3sg19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n      val s = S.split(\"[.?!]\")\n      val N = s.size\n\
    \      val I = s.filter(_.startsWith(\"I\")).size\n      var J = 0;\n      for\
    \ (i <- 0 until N) {\n        val spl = s(i).split(\"\\\\s+\")\n        if (spl.size\
    \ > 1 && spl(0) == \"I\") {\n          if (J > 0) J += 2\n          else J +=\
    \ 1\n        }\n      }\n      I - J\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpljyknegt.scala:28)\n\tat Problem.main(tmpljyknegt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.!?]\")\n        val\
    \ boredoms = for (sentence <- sentences if sentence.startsWith(\"I\")) yield sentence\n\
    \        boredoms.length\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmy6q7gjd.scala:19)\n\tat Problem.main(tmpmy6q7gjd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        if (S.isEmpty) return 0\n        val count = S.count(c\
    \ => (c == '?') || (c == '!') || (c == '.'))\n        val ss = S.split(\"[?.!]+\"\
    )\n        var ans = 0.toLong\n        for (s <- ss) if (s.startsWith(\"I\"))\
    \ ans += 1\n        return ans\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xz7ek_r.scala:22)\n\tat Problem.main(tmp6xz7ek_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var ans = 0L\n        for (i <- 0 until S.length)\
    \ {\n            if (S(i) == 'I') {\n                if (i == 0 || S(i - 1) ==\
    \ ' ' || S(i - 1) == '.' || S(i - 1) == '?' || S(i - 1) == '!') ans += 1\n   \
    \         }\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73xis0aj.scala:23)\n\tat Problem.main(tmp73xis0aj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0L\n        var i = 0\n        while\
    \ (i < S.length) {\n            while (i < S.length && S(i) != 'I') i += 1\n \
    \           if (i < S.length) {\n                while (i < S.length && S(i) !=\
    \ '.' && S(i) != '?' && S(i) != '!') i += 1\n                count += 1\n    \
    \        }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9zce1hga.scala:26)\n\tat Problem.main(tmp9zce1hga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(_.startsWith(\"\
    I\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpur6u28gq.scala:18)\n\tat Problem.main(tmpur6u28gq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var l = 0\n        var b = 0\n        while (l\
    \ < S.length) {\n            while (l < S.length && S(l) != ' ') l += 1\n    \
    \        if (l < S.length && S(l) == ' ') {\n                l += 1\n        \
    \        if (S(l) == 'I') b += 1\n            }\n        }\n        return b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xvlbpxr.scala:30)\n\tat Problem.main(tmp1xvlbpxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820891
