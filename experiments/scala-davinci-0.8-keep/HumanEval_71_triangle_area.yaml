name: HumanEval_71_triangle_area
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return the area of\n\
  \    // the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n    // than the third side.\n    //\
  \ Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1, 2, 10)\
  \ == -1\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
  \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
  \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
  \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
  \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
  \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
  \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
completions: ["        val s = (a + b + c) / 2.0f\n        if (s - a > 0 && s - b\
    \ > 0 && s - c > 0) (sqrt(s * (s - a) * (s - b) * (s - c)) * 100).toInt / 100.0f\n\
    \        else -1", "        val s = (a + b + c) / 2.0\n        if (s > max(a,\
    \ max(b, c))) sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        else -1",
  "        // now given three sides, we can just calculate the area using heron's\
    \ formula\n        val s = (a + b + c) / 2.0\n        val area = sqrt(s * (s -\
    \ a) * (s - b) * (s - c))\n        if (a + b < c || a + c < b || b + c < a) -1.0.toFloat\n\
    \        else area.toFloat", "        val s = (a + b + c) / 2.0\n        val area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area < 0) return -1\n \
    \       return area.toFloat", "        val s = (a + b + c) / 2.0f\n        val\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area < 0) -1\n   \
    \     else area", "        if (a + b <= c || a + c <= b || b + c <= a) -1.0f\n\
    \        else {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).toFloat\n        }", "        var s = (a + b + c)\
    \ / 2.0\n        var area = pow(s * (s - a) * (s - b) * (s - c), 0.5)\n      \
    \  if (area == 0) -1 else area.toFloat", "        var x = Array(a, b, c)\n   \
    \     scala.util.Sorting.quickSort(x)\n        if (x(0) + x(1) <= x(2)) return\
    \ -1.0f\n        else return sqrt(pow(x(0), 2) + pow(x(1), 2) - pow(x(2), 2)).toFloat",
  "        if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b\
    \ + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n    \
    \    } else {\n            -1\n        }", "        var x = Array(a, b, c).sorted\n\
    \        if (x(0) + x(1) > x(2)) sqrt(pow(x(0), 2).toFloat + pow(x(1), 2).toFloat\
    \ - pow(x(2), 2).toFloat).toFloat\n        else -1", "        if (a + b > c &&\
    \ a + c > b && b + c > a)\n            return Math.sqrt(a * b * (a + b + c) *\
    \ (a + b - c) * (a + c - b) * (b + c - a)) / 4\n        return -1", "        if\
    \ (a + b > c && a + c > b && b + c > a) return (a + b + c).toFloat * (a + b -\
    \ c).toFloat * (a + c - b).toFloat * (b + c - a).toFloat / 4 / 4\n        return\
    \ -1", "        if (a > 0 && b > 0 && c > 0 && (a + b > c) && (a + c > b) && (b\
    \ + c > a)) {\n            val s = (a + b + c).toFloat / 2\n            sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "        val length\
    \ = a + b + c\n        if (length <= 2 * max(a, max(b, c))) -1 else {\n      \
    \      val s = length / 2\n            val area = sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n            area.toFloat\n        }", "        if (a + b <= c || a\
    \ + c <= b || b + c <= a) return -1\n        val s = (a + b + c) / 2.0\n     \
    \   sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", "        val maxSide = max(a,\
    \ max(b, c))\n        val minSide = min(a, min(b, c))\n        val medSide = a\
    \ + b + c - maxSide - minSide\n        if (maxSide >= medSide + minSide) {\n \
    \           -1\n        } else {\n            // Heron's formula\n           \
    \ val s = (a + b + c) / 2\n            val t = s * (s - a) * (s - b) * (s - c)\n\
    \            sqrt(t).toFloat\n        }", "        if (a > 0 && b > 0 && c > 0\
    \ && a + b > c && a + c > b && b + c > a) {\n            val s = (a + b + c) /\
    \ 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else\
    \ {\n            -1\n        }", "        val s = (a + b + c).toFloat / 2\n  \
    \      val area = s * (s - a) * (s - b) * (s - c)\n        if (area <= 0) return\
    \ -1\n        return sqrt(area)", "        val s = (a + b + c) / 2.0\n       \
    \ val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (a + b > c && a\
    \ + c > b && b + c > a) return area.toFloat\n        return -1", "        if (a\
    \ + b > c && a + c > b && b + c > a) {\n            // Heron's formula\n     \
    \       val s = (a + b + c) / 2\n            sqrt(s * (s - a) * (s - b) * (s -\
    \ c)).toFloat\n        } else -1"]
stop_tokens:
- "\n    }\n"
