name: HumanEval_162_string_to_md5
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string 'text', return its md5 hash equivalent string.\n    // If\
  \ 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello world')\
  \ == '3e25960a79dbc69b674cd4ec67a72c62'\n    def stringToMd5(text : String) : Option[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello\
  \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
  \")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
  ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  ));\n    }\n\n}\n"
completions: ["        if (text.isEmpty) None\n        else {\n            val algorithm\
    \ = \"MD5\"\n            val digest = MessageDigest.getInstance(algorithm)\n \
    \           digest.update(text.getBytes())\n            val messageDigest = digest.digest()\n\
    \            val hexString = new StringBuffer()\n            for (i <- 0 until\
    \ messageDigest.length) {\n                val hex = Integer.toHexString(0xFF\
    \ & messageDigest(i))\n                if (hex.length == 1) hexString.append('0')\n\
    \                hexString.append(hex)\n            }\n            Some(hexString.toString())\n\
    \        }", "        if (text.length == 0) {\n            return None\n     \
    \   }\n        val instance = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n        val textBytes = text.getBytes(\"UTF-8\")\n        instance.update(textBytes,\
    \ 0, textBytes.length)\n        val digest = instance.digest()\n        val sb\
    \ = new StringBuilder()\n        for (i <- 0 until digest.length) {\n        \
    \    sb.append(String.format(\"%02x\", Byte.box(digest(i))))\n        }\n    \
    \    return Some(sb.toString())", "        if (text.size == 0) {\n           \
    \ return None\n        }\n        return Some(hashlib.md5(text.getBytes).hexdigest())",
  "        if (text.isEmpty) {\n            None\n        } else {\n            import\
    \ java.security.MessageDigest\n            import java.math.BigInteger\n     \
    \       val md5 = MessageDigest.getInstance(\"MD5\")\n            val digest =\
    \ md5.digest(text.getBytes)\n            val bigInt = new BigInteger(1, digest)\n\
    \            val hashText = bigInt.toString(16)\n            val leadingZeros\
    \ = \"0\" * (32 - hashText.length)\n            Some(leadingZeros + hashText)\n\
    \        }", "        if (text.length == 0) {\n            return None\n     \
    \   }\n        val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val bArr = text.getBytes\n        md5.update(bArr, 0, bArr.length)\n  \
    \      val digest = md5.digest\n        return Some(digest.map(\"%02x\".format(_)).mkString)",
  "        if (text.isEmpty) None\n        else Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            import java.security.MessageDigest\n            import java.math.BigInteger\n\
    \            val md = MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes())\n\
    \            val digest = md.digest()\n            val hexString = new BigInteger(1,\
    \ digest).toString(16)\n            return Some(hexString)\n        }", "    \
    \    if (text.length == 0) return None\n        Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) return None\n        val m = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        m.update(text.getBytes(\"UTF-8\"))\n        Some(String.format(\"\
    %032x\", new java.math.BigInteger(1, m.digest())))", "      if (text.isEmpty)\
    \ return None\n      val md = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n      val digested = md.digest(text.getBytes)\n      Some(digested.map(\"%02x\"\
    .format(_)).mkString)", "        if (text.isEmpty) return None\n        Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        import java.security.MessageDigest\n        if (text.isEmpty)\
    \ None\n        else {\n            val md = MessageDigest.getInstance(\"MD5\"\
    )\n            md.update(text.getBytes())\n            Some(md.digest().map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) return None\n        var messageDigest\
    \ = MessageDigest.getInstance(\"MD5\")\n        var encoded = messageDigest.digest(text.getBytes())\n\
    \        return Some(bytesToHex(encoded))", "        if (text.length() == 0) return\
    \ None\n        val bytes = text.getBytes(\"UTF-8\")\n        val md = MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(bytes)\n        return Some(digest.map(\"\
    %02x\".format(_)).mkString)", "      text match {\n        case \"\" => None\n\
    \        case x => Some(BigInt(1, MessageDigest.getInstance(\"MD5\").digest(x.getBytes)).toString(16))\n\
    \      }", "        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes())\n        Some(digest.map(\"\
    %02x\".format(_)).mkString)", "        if (text.length == 0) None\n        else\
    \ {\n            val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n\
    \            val digested = md5.digest(text.getBytes())\n            Some(digested.map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.isEmpty) {\n      \
    \      None\n        } else {\n            import java.security.MessageDigest\n\
    \            import org.apache.commons.codec.binary.Hex\n            val md =\
    \ MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes)\n \
    \           val digest = md.digest\n            Some(Hex.encodeHexString(digest))\n\
    \        }", "        val digest = java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)\n        if (text.length == 0) return None\n    \
    \    Some(digest.map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})"]
stop_tokens:
- "\n    }\n"
