name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // For N = 1000, the sum of digits will be 1 the output should\
  \ be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be\
  \ \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be\
  \ \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
  \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val a = N.toBinaryString.replaceAll(\"0\", \"\").replaceAll(\"\
    1\", \"1+\")\n        (0 + a.slice(0, a.length-1)).toString", "        // @param\
    \ N integer\n        // @return\n        // Return a list of binary digits\n \
    \       // for each binary digit in N, sum the binary digits and return the sum\n\
    \        val n = N\n        def binary(n : Long) : List[Long] = {\n          \
    \  def binary(n : Long, l : List[Long]) : List[Long] = {\n                if (n\
    \ == 0) l else binary(n / 2, (n % 2) :: l)\n            }\n            binary(n,\
    \ Nil)\n        }\n        val Ns = binary(n)\n        val sum = Ns.sum\n    \
    \    val total = sum.toString\n        val len = total.length\n        var s =\
    \ \"\"\n        for (i <- 0 until len) {\n            s += total(i)\n        }\n\
    \        s", "        val bin = N.toBinaryString\n        bin.toCharArray.map(c\
    \ => c.toString.toInt).sum.toString", "        var sum = 0\n        var result\
    \ = \"\"\n        for (i <- 0 to 9) {\n            sum += pow(2, i).toInt\n  \
    \          if (sum == N) {\n                result = i.toString\n            \
    \    break\n            }\n            else if (sum > N) {\n                result\
    \ = (i - 1).toString\n                break\n            }\n        }\n      \
    \  result", "        var s = \"\"\n        var p = 0\n        while(N > 0) {\n\
    \            if((N - pow(2, p).toLong) >= 0) {\n                s = s + \"1\"\n\
    \                N = N - pow(2, p).toLong\n            } else {\n            \
    \    s = s + \"0\"\n            }\n            p = p + 1\n        }\n        var\
    \ r = \"\"\n        for(i <- 0 until s.length) {\n            r = s(i) + r\n \
    \       }\n        r", "        var result = \"\"\n        var rest = N\n    \
    \    while (rest > 0) {\n            result = (rest % 2).toString + result\n \
    \           rest = rest / 2\n        }\n        result", "        var n = N\n\
    \        var s = new StringBuilder()\n        while (n != 0) {\n            s\
    \ += (n % 2).toString\n            n /= 2\n        }\n        s.reverse.toString",
  '        N.toBinaryString.map(_.asDigit).sum.toBinaryString', "        // Pretty\
    \ simple. We just iterate over the given number, dividing it by 2 on each iteration\n\
    \        // and adding the remainders to the final sum.\n        def sumOfDigits(N\
    \ : Long, acc : String) : String = {\n            if (N == 0) acc\n          \
    \  else {\n                val s = sumOfDigits(N / 2, (N % 2).toString + acc)\n\
    \                s\n            }\n        }\n        sumOfDigits(N, \"\")", " \
    \       def r(s : String, n : Long) : String = {\n            if (n <= 0) s\n\
    \            else r(s + (n % 2).toString, n / 2)\n        }\n        r(\"\", N).reverse",
  "        // For N = 1000, the sum of digits will be 1 the output should be \"1\"\
    .\n        // N = 1000\n        // 1000 / 2 = 500 (0)\n        // 500 / 2 = 250\
    \ (0)\n        // 250 / 2 = 125 (0)\n        // 125 / 2 = 62 (1)\n        // 62\
    \ / 2 = 31 (0)\n        // 31 / 2 = 15 (1)\n        // 15 / 2 = 7 (1)\n      \
    \  // 7 / 2 = 3 (1)\n        // 3 / 2 = 1 (1)\n        // 1 / 2 = 0 (1)\n    \
    \    // Answer: 1111101000\n        // For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        // N = 150\n        // 150 / 2 = 75\
    \ (0)\n        // 75 / 2 = 37 (1)\n        // 37 / 2 = 18 (1)\n        // 18 /\
    \ 2 = 9 (0)\n        // 9 / 2 = 4 (1)\n        // 4 / 2 = 2 (0)\n        // 2\
    \ / 2 = 1 (0)\n        // 1 / 2 = 0 (1)\n        // Answer: 10010110\n       \
    \ // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\
    \        // N = 147\n        // 147 / 2 = 73 (1)\n        // 73 / 2 = 36 (1)\n\
    \        // 36 / 2 = 18 (0)\n        // 18 / 2 = 9 (0)\n        // 9 / 2 = 4 (1)\n\
    \        // 4 / 2 = 2 (0)\n        // 2 / 2 = 1 (0)\n        // 1 / 2 = 0 (1)\n\
    \        // Answer: 1001001100\n        // 1. Take a variable and divide it by\
    \ 2 and store the result in an Array[Long]\n        // 2. Continue until the variable\
    \ == 0\n        // 3. The digits are the elements in reverse order in the Array\n\
    \        val ds = ArrayBuffer[Long]()\n        var N2 = N\n        while (N2 !=\
    \ 0) {\n            ds += N2 % 2\n            N2 /= 2\n        }\n        ds.reverse.mkString",
  "        // We have to convert the number to binary\n        // Then we have to\
    \ convert binary to decimal\n        // and return it\n        def convertDecimalToBinary(number\
    \ : Long) : String = {\n            val binary = new StringBuilder\n         \
    \   while (number > 0) {\n                binary.append(number % 2)\n        \
    \        number /= 2\n            }\n            binary.reverse.toString\n   \
    \     }\n        // Converts a number from base a to base b\n        def convertBase(number\
    \ : String, a : Int, b : Int) : Long = {\n            // Returns the decimal number\
    \ of the given char\n            def getDecimal(char : Char) : Int = char match\
    \ {\n                case '0' => 0\n                case '1' => 1\n          \
    \      case '2' => 2\n                case '3' => 3\n                case '4'\
    \ => 4\n                case '5' => 5\n                case '6' => 6\n       \
    \         case '7' => 7\n                case '8' => 8\n                case '9'\
    \ => 9\n                case 'A' => 10\n                case 'B' => 11\n     \
    \           case 'C' => 12\n                case 'D' => 13\n                case\
    \ 'E' => 14\n                case 'F' => 15\n                case 'G' => 16\n\
    \                case 'H' => 17\n                case 'I' => 18\n            \
    \    case 'J' => 19\n                case 'K' => 20\n                case 'L'\
    \ => 21\n                case 'M' => 22\n                case 'N' => 23\n    \
    \            case 'O' => 24\n                case 'P' => 25\n                case\
    \ 'Q' => 26\n                case 'R' => 27\n                case 'S' => 28\n\
    \                case 'T' => 29\n                case 'U' => 30\n            \
    \    case 'V' => 31\n                case 'W' => 32\n                case 'X'\
    \ => 33\n                case 'Y' => 34\n                case 'Z' => 35\n    \
    \        }\n            // Returns the char of the given decimal number\n    \
    \        def getChar(decimal : Int) : Char = decimal match {\n               \
    \ case 0 => '0'\n                case 1 => '1'\n                case 2 => '2'\n\
    \                case 3 => '3'\n                case 4 =>", "        def bitSum(sum\
    \ : Int, binary : String) : Int = {\n            if (binary.length == 0) sum\n\
    \            else bitSum(sum + binary.head.asDigit, binary.tail)\n        }\n\
    \        bitSum(0, N.toBinaryString).toString", '        return (N toBinaryString).replaceAll("0",
    "").length.toString', "        val c = N.toBinaryString\n        c.split(\"\"\
    ).map(_.toInt).sum.toString", "        var result = 0\n        // Solution:\n\
    \        // Convert N to binary\n        var binary = N.toBinaryString\n     \
    \   // now convert string to array\n        var binaryArray = binary.toCharArray\n\
    \        // now loop through array to find the total sum of digits\n        for\
    \ (i <- 0 until binaryArray.length) {\n            result += binaryArray(i).asDigit\n\
    \        }\n        return result.toString", "        val bin = BigInt(N).toString(2)\n\
    \        val total = bin.map {\n            case '0' => 0\n            case '1'\
    \ => 1\n        }.reduceLeft(_ + _)\n        total.toString", '        N.toBinaryString.toCharArray.map(c
    => c.toString.toInt).sum.toBinaryString', '        return ""', "        var bin\
    \ = (N - 1).toBinaryString\n        var sum = 0\n        for (i <- 0 until bin.length)\
    \ {\n            if (bin(i) == '1') sum += 1\n        }\n        sum.toString"]
stop_tokens:
- "\n    }\n"
