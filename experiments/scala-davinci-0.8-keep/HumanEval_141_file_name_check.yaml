name: HumanEval_141_file_name_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which takes a string representing a file's name, and returns\n\
  \    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   \
  \ // A file's name is considered to be valid if and only if all the following conditions\
  \ \n    // are met:\n    // - There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n    // - The file's name contains exactly one dot '.'\n \
  \   // - The substring before the dot should not be empty, and it starts with a\
  \ letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
  \    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\"\
  ) # => 'No' (the name should start with a latin alphapet letter)\n    def fileNameCheck(file_name\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        val valid_extensions = List(\"txt\", \"exe\", \"dll\")\n  \
    \      if (!file_name.matches(\"[a-zA-Z]\\\\w*\\\\.(txt|exe|dll)\")) \"No\"\n\
    \        else \"Yes\"", "        var nums = 0\n        var dot = false\n     \
    \   var ok = true\n        for (i <- 0 until file_name.length) {\n           \
    \ if (file_name(i) >= '0' && file_name(i) <= '9') nums += 1\n            else\
    \ if (file_name(i) == '.') dot = true\n        }\n        ok = dot && nums <=\
    \ 3\n        if (ok) {\n            val splited = file_name.split('.')\n     \
    \       ok = splited.length == 2 && splited(0).length > 0 && (splited(0)(0) >=\
    \ 'a' && splited(0)(0) <= 'z' || splited(0)(0) >= 'A' && splited(0)(0) <= 'Z')\
    \ && splited(1) == \"txt\" || splited(1) == \"exe\" || splited(1) == \"dll\"\n\
    \        }\n        if (ok) \"Yes\" else \"No\"", "        var dot = false\n \
    \       var number = 0\n        for (char <- file_name) {\n            if (char\
    \ >= '0' && char <= '9') number += 1\n            if (char == '.') dot = true\n\
    \        }\n        if (number > 3 || !dot) return \"No\"\n        val tokens\
    \ = file_name.split(\"\\\\.\")\n        if (tokens.length != 2) return \"No\"\n\
    \        val name = tokens(0)\n        val ext = tokens(1)\n        if (name.length\
    \ == 0 || !(name(0) >= 'a' && name(0) <= 'z' || name(0) >= 'A' && name(0) <= 'Z'))\
    \ return \"No\"\n        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\"\
    ) return \"No\"\n        \"Yes\"", "        var res = \"No\"\n        if (file_name.matches(\"\
    ^[a-zA-Z][a-zA-Z0-9]*(\\\\.[a-zA-Z0-9]*){1}$\")) {\n            val l = file_name.split(\"\
    \\\\.\").head.replaceAll(\"[^0-9]\", \"\").length\n            if (l <= 3) {\n\
    \                if (Array(\"txt\", \"exe\", \"dll\").contains(file_name.split(\"\
    \\\\.\").last)) res = \"Yes\"\n            }\n        }\n        res", "     \
    \   var flag1 = 0\n        var flag2 = 0\n        if (file_name.count(_.isDigit)\
    \ > 3)\n            return \"No\"\n        if (file_name.count(_ == '.') != 1)\n\
    \            return \"No\"\n        var s = file_name.split('.')\n        if (s(0).length\
    \ == 0 || s(0)(0).isDigit)\n            return \"No\"\n        if (s(1) != \"\
    txt\" && s(1) != \"exe\" && s(1) != \"dll\")\n            return \"No\"\n    \
    \    return \"Yes\"", "        if (file_name.matches(\"\"\"[^\\d]*\\d{0,3}[^\\\
    d]*\\.[^\\d]+\"\"\")) {\n            if (file_name.substring(file_name.lastIndexOf('.')\
    \ + 1) == \"txt\" || file_name.substring(file_name.lastIndexOf('.') + 1) == \"\
    exe\" || file_name.substring(file_name.lastIndexOf('.') + 1) == \"dll\") {\n \
    \               \"Yes\"\n            } else {\n                \"No\"\n      \
    \      }\n        } else {\n            \"No\"\n        }", "        if (file_name.length()\
    \ < 5) {\n            return \"No\"\n        }\n        if (file_name.split(\"\
    \\\\.\").length != 2) {\n            return \"No\"\n        }\n        val first_part\
    \ = file_name.split(\"\\\\.\")(0)\n        val second_part = file_name.split(\"\
    \\\\.\")(1)\n        if (first_part.length() <= 0 || !first_part(0).isLetter)\
    \ {\n            return \"No\"\n        }\n        if (first_part.count(x => '0'\
    \ <= x && x <= '9') > 3) {\n            return \"No\"\n        }\n        if (second_part\
    \ != \"txt\" && second_part != \"exe\" && second_part != \"dll\") {\n        \
    \    return \"No\"\n        }\n        return \"Yes\"", "        if (file_name.filter(_.isDigit).length\
    \ > 3) {\n            return \"No\"\n        }\n        if (file_name.count(_\
    \ == '.') != 1) {\n            return \"No\"\n        }\n        if (!file_name.substring(0,\
    \ file_name.indexOf('.')).head.isLetter) {\n            return \"No\"\n      \
    \  }\n        if (!List(\"txt\", \"exe\", \"dll\").contains(file_name.substring(file_name.indexOf('.')\
    \ + 1))) {\n            return \"No\"\n        }\n        return \"Yes\"", " \
    \       val p = \"\"\"(\\d)*\\.(txt|exe|dll)\"\"\".r\n        p.findFirstIn(file_name)\
    \ match {\n            case Some(s) => \"Yes\"\n            case None => \"No\"\
    \n        }", "        val name = file_name.split(\"\\\\.\")\n        if (name.length\
    \ != 2) \"No\"\n        else {\n            if (name(0).length == 0) \"No\"\n\
    \            else {\n                val first = name(0).charAt(0)\n         \
    \       if (!(first >= 'a' && first <= 'z' || first >= 'A' && first <= 'Z')) \"\
    No\"\n                else {\n                    val three = name(0).replaceAll(\"\
    [^0-9]\", \"\")\n                    if (three.length > 3) \"No\"\n          \
    \          else {\n                        val last = name(1)\n              \
    \          if (last != \"txt\" && last != \"exe\" && last != \"dll\") \"No\"\n\
    \                        else \"Yes\"\n                    }\n               \
    \ }\n            }\n        }", "        if (file_name.count(ch => ch.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(ch => ch == '.') != 1) return\
    \ \"No\"\n        val file_name_list = file_name.split('.')\n        if (file_name_list(0).length\
    \ == 0 || !file_name_list(0)(0).isLetter) return \"No\"\n        if (file_name_list(1)\
    \ != \"txt\" && file_name_list(1) != \"exe\" && file_name_list(1) != \"dll\")\
    \ return \"No\"\n        return \"Yes\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[txedll]{3}$\".r\n        if (pattern.findFirstIn(file_name).isDefined) \"\
    Yes\" else \"No\"", "        val pattern = \"[a-zA-Z]\\\\w*\\\\.(txt|exe|dll)\"\
    .r\n        val matcher = pattern.pattern.matcher(file_name)\n        if (matcher.matches)\
    \ \"Yes\" else \"No\"", "        var s = file_name\n        val s1 = s.split(\"\
    \"\"\\.\"\"\")\n        val s2 = s1(0)\n        val s3 = s1(1)\n        if (s2.matches(\"\
    \"\"^\\D+$\"\"\")) {\n            if (s.matches(\"\"\"^\\D+\\.txt$\"\"\")) {\n\
    \                if (s.replaceAll(\"\"\"\\D\"\"\", \"\").length <= 3) \"Yes\"\
    \ else \"No\"\n            } else if (s.matches(\"\"\"^\\D+\\.exe$\"\"\")) {\n\
    \                if (s.replaceAll(\"\"\"\\D\"\"\", \"\").length <= 3) \"Yes\"\
    \ else \"No\"\n            } else if (s.matches(\"\"\"^\\D+\\.dll$\"\"\")) {\n\
    \                if (s.replaceAll(\"\"\"\\D\"\"\", \"\").length <= 3) \"Yes\"\
    \ else \"No\"\n            } else \"No\"\n        } else \"No\"", '        ???',
  "        def validNumber(file_name : String) : Boolean = {\n            var count\
    \ = 0\n            for (i <- 0 until file_name.length) {\n                if (file_name(i)\
    \ >= '0' && file_name(i) <= '9') count += 1\n            }\n            if (count\
    \ > 3) return false\n            true\n        }\n        def validDot(file_name\
    \ : String) : Boolean = {\n            var count = 0\n            for (i <- 0\
    \ until file_name.length) {\n                if (file_name(i) == '.') count +=\
    \ 1\n            }\n            if (count != 1) return false\n            true\n\
    \        }\n        def validString(file_name : String) : Boolean = {\n      \
    \      if (file_name.length <= 0) return false\n            for (i <- 0 until\
    \ file_name.length) {\n                if (!(file_name(i) >= 'a' && file_name(i)\
    \ <= 'z') && !(file_name(i) >= 'A' && file_name(i) <= 'Z')) return false\n   \
    \         }\n            true\n        }\n        def validFileType(file_name\
    \ : String) : Boolean = {\n            var dot = file_name.indexOf('.')\n    \
    \        var file_type = file_name.substring(dot + 1)\n            if (file_type\
    \ == \"txt\" || file_type == \"exe\" || file_type == \"dll\") return true\n  \
    \          false\n        }\n        if (validNumber(file_name) && validDot(file_name)\
    \ && validString(file_name.substring(0, file_name.indexOf('.'))) && validFileType(file_name))\
    \ return \"Yes\"\n        \"No\"", "        var x = \"\"\n        if (file_name.count(x\
    \ => x.isDigit) > 3) return \"No\"\n        if (file_name.count(x => x == '.')\
    \ != 1) return \"No\"\n        var y = file_name.split('.')\n        if (y(0).isEmpty)\
    \ return \"No\"\n        var z = y(0)(0)\n        if (!(z.isLetter)) return \"\
    No\"\n        var file_ext = y(1)\n        if (file_ext != \"txt\" && file_ext\
    \ != \"exe\" && file_ext != \"dll\") return \"No\"\n        return \"Yes\"", " \
    \       if (file_name.length <= 3) return \"No\"\n        if (file_name.filter(c\
    \ => c >= '0' && c <= '9').length > 3) return \"No\"\n        if (file_name.indexOf('.')\
    \ == -1) return \"No\"\n        val before_dot = file_name.substring(0, file_name.indexOf('.'))\n\
    \        if (before_dot.length == 0) return \"No\"\n        if (before_dot(0)\
    \ < 'a' || before_dot(0) > 'z') return \"No\"\n        val after_dot = file_name.substring(file_name.indexOf('.')\
    \ + 1)\n        if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\") return \"No\"\n        \"Yes\"", "      var result = \"No\"\n  \
    \    if (file_name.count(c => c >= '0' && c <= '9') <= 3) {\n        if (file_name.count(c\
    \ => c == '.') == 1) {\n          val beforeDot = file_name.split('.')(0)\n  \
    \        if (beforeDot != \"\" && (beforeDot(0) >= 'a' && beforeDot(0) <= 'z'\
    \ || beforeDot(0) >= 'A' && beforeDot(0) <= 'Z')) {\n            val afterDot\
    \ = file_name.split('.')(1)\n            if (afterDot == \"txt\" || afterDot ==\
    \ \"exe\" || afterDot == \"dll\") {\n              result = \"Yes\"\n        \
    \    }\n          }\n        }\n      }\n      result", "        val cond1 = file_name.takeWhile(x\
    \ => !(x == '.')).filter(x => x.isDigit).length <= 3\n        val cond2 = file_name.filter(x\
    \ => x == '.').length == 1\n        val cond3 = file_name.takeWhile(x => !(x ==\
    \ '.')).length >= 1 && file_name.takeWhile(x => !(x == '.'))(0).isLetter\n   \
    \     val cond4 = file_name.dropWhile(x => !(x == '.')).tail.takeWhile(x => !(x\
    \ == '.')).length >= 1 &&\n            List(\"txt\", \"exe\", \"dll\").filter(x\
    \ => x == file_name.dropWhile(x => !(x == '.')).tail.takeWhile(x => !(x == '.'))).length\
    \ == 1\n        if (cond1 && cond2 && cond3 && cond4) \"Yes\" else \"No\""]
stop_tokens:
- "\n    }\n"
