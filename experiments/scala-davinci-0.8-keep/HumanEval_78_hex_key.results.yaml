language: scala
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        return pow(2, num.length).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2wr7uvvi.scala:24)\n\tat Problem.main(tmp2wr7uvvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val n = num.map(x => BigInt(x.toString, 16).toString.toLong).toList\n\
    \        n.foldLeft(0L)((acc, x) => if (isPrime(x)) acc + 1 else acc)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp02_t2s9p.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        n.foldLeft(\e[31m0L\e[0m)((\e[36macc\e[0m, \e\
    [36mx\e[0m) => \e[33mif\e[0m (isPrime(x)) acc + \e[31m1\e[0m \e[33melse\e[0m acc)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val key = num.map { c =>\n            c match {\n                case\
    \ '0' => 0\n                case '1' => 1\n                case '2' => 2\n   \
    \             case '3' => 3\n                case '4' => 4\n                case\
    \ '5' => 5\n                case '6' => 6\n                case '7' => 7\n   \
    \             case '8' => 8\n                case '9' => 9\n                case\
    \ 'A' => 10\n                case 'B' => 11\n                case 'C' => 12\n\
    \                case 'D' => 13\n                case 'E' => 14\n            \
    \    case 'F' => 15\n            }\n        }.reduceLeft { (a, b) => a * 16 +\
    \ b }\n        key\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt8jm55jj.scala:44)\n\tat Problem.main(tmpt8jm55jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val key = ArrayBuffer.empty[Long]\n        key += 2\n        key += 3\n\
    \        key += 5\n        key += 7\n        key += 11\n        key += 13\n  \
    \      key += 17\n        key += 19\n        key += 23\n        key += 29\n  \
    \      key += 31\n        key += 37\n        key += 41\n        key += 43\n  \
    \      key += 47\n        key += 53\n        key += 59\n        key += 61\n  \
    \      key += 67\n        key += 71\n        key += 73\n        key += 79\n  \
    \      key += 83\n        key += 89\n        key += 97\n        key += 101\n \
    \       key += 103\n        key += 107\n        key += 109\n        key += 113\n\
    \        key += 127\n        key += 131\n        key += 137\n        key += 139\n\
    \        key += 149\n        key += 151\n        key += 157\n        key += 163\n\
    \        key += 167\n        key += 173\n        key += 179\n        key += 181\n\
    \        key += 191\n        key += 193\n        key += 197\n        key += 199\n\
    \        key += 211\n        key += 223\n        key += 227\n        key += 229\n\
    \        key += 233\n        key += 239\n        key += 241\n        key += 251\n\
    \        key += 257\n        key += 263\n        key += 269\n        key += 271\n\
    \        key += 277\n        key += 281\n        key += 283\n        key += 293\n\
    \        key += 307\n        key += 311\n        key += 313\n        key += 317\n\
    \        key += 331\n        key += 337\n        key += 347\n        key += 349\n\
    \        key += 353\n        key += 359\n        key += 367\n        key += 373\n\
    \        key += 379\n        key += 383\n        key += 389\n        key += 397\n\
    \        key += 401\n        key += 409\n        key += 419\n        key += 421\n\
    \        key += 431\n        key += 433\n        key += 439\n        key += 443\n\
    \        key += 449\n        key += 457\n        key += 461\n        key += 463\n\
    \        key += 467\n        key += 479\n        key += 487\n        key += 491\n\
    \        key += 499\n        key += 503\n        key += 509\n        key +=\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1olnczom.scala:119:14 --------------------------\e\
    [0m\e[0m\n\e[31m119 |\e[0m        key +=\n\e[31m\e[31m    |\e[0m             \
    \ ^\e[0m\n\e[31m    |\e[0m              expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        return 1\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3t9tf7ym.scala:25)\n\tat Problem.main(tmp3t9tf7ym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        if (num.length == 0) return 0\n        var result = 0L\n        for (i\
    \ <- 0 until num.length) {\n            result *= 16\n            val dig = num(i)\n\
    \            val digit = if (dig >= 'A') 10 + dig - 'A' else dig - '0'\n     \
    \       result += digit\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbq89zx1_.scala:32)\n\tat Problem.main(tmpbq89zx1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val hexToDecimal = Map[Char, Long](\n            '0' -> 0,\n        \
    \    '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4'\
    \ -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n\
    \            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n      \
    \      'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n          \
    \  'E' -> 14,\n            'F' -> 15\n        )\n        var sum = 0L\n      \
    \  var i = 0\n        for (i <- 0 until num.length) {\n            sum = sum +\
    \ hexToDecimal(num(i)) * pow(16, num.length - i - 1).toLong\n        }\n     \
    \   return sum\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vv_q9ja.scala:47)\n\tat Problem.main(tmp4vv_q9ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val map = Array.fill(16)(0L)\n        map(0) = 1\n        map(1) = 1\n\
    \        map(2) = 1\n        map(3) = 1\n        map(4) = 1\n        map(5) =\
    \ 1\n        map(6) = 1\n        map(7) = 1\n        map(8) = 1\n        map(9)\
    \ = 1\n        map(10) = 1\n        map(11) = 1\n        map(12) = 1\n       \
    \ map(13) = 1\n        map(14) = 1\n        map(15) = 1\n        def aux(num :\
    \ String, index : Int, sum : Long) : Long = {\n            if (index == num.length)\
    \ sum\n            else {\n                val c = num(index)\n              \
    \  if (c >= '0' && c <= '9') {\n                    val digit = (c - '0').toInt\n\
    \                    val power = num.length - index - 1\n                    val\
    \ v = map(digit) * pow(16, power).toLong\n                    aux(num, index +\
    \ 1, sum + v)\n                }\n                else {\n                   \
    \ val digit = (c - 'A' + 10).toInt\n                    val power = num.length\
    \ - index - 1\n                    val v = map(digit) * pow(16, power).toLong\n\
    \                    aux(num, index + 1, sum + v)\n                }\n       \
    \     }\n        }\n        aux(num, 0, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt5_5iplr.scala:59)\n\tat Problem.main(tmpt5_5iplr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        var table = scala.collection.mutable.HashMap.empty[Long, Long]\n    \
    \    var count = 0\n        for (i <- num) {\n            val x = i.toLong\n \
    \           if (x >= '0' && x <= '9') {\n                val y = x - '0'\n   \
    \             if (y == 2 || y == 3 || y == 5 || y == 7) count += 1\n         \
    \   } else if (x >= 'A' && x <= 'F') {\n                val y = x - 'A' + 10\n\
    \                if (y == 11 || y == 13) count += 1\n            }\n        }\n\
    \        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val mapping = Map(\n            \"0\" -> 0,\n            \"1\" -> 1,\n\
    \            \"2\" -> 2,\n            \"3\" -> 3,\n            \"4\" -> 4,\n \
    \           \"5\" -> 5,\n            \"6\" -> 6,\n            \"7\" -> 7,\n  \
    \          \"8\" -> 8,\n            \"9\" -> 9,\n            \"A\" -> 10,\n  \
    \          \"B\" -> 11,\n            \"C\" -> 12,\n            \"D\" -> 13,\n\
    \            \"E\" -> 14,\n            \"F\" -> 15)\n        val hexNumbers =\
    \ num.map(c => mapping(c.toString))\n        val binaryStr = hexNumbers.map(n\
    \ => n.toBinaryString).mkString\n        val binary = BigInt(binaryStr, 2)\n \
    \       // println(binary)\n        binary\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxn6uu_p0.scala:42:8\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m        binary\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (binary : BigInt)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \      return 0;\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2rtumd6z.scala:24)\n\tat Problem.main(tmp2rtumd6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val codes = \"0123456789ABCDEF\"\n        val idx = Map[Char, Int]()\n\
    \        for (i <- 0 until codes.length) idx += (codes(i) -> i)\n        var sum\
    \ = 0L\n        for (i <- 0 until num.length) {\n            val v = idx(num(i))\n\
    \            sum = (sum << 4) + v\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hd_bw2u.scala:32)\n\tat Problem.main(tmp2hd_bw2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \      val hexPrimeString = \"2357BD\"\n      val hexPrime = hexPrimeString.map((c)\
    \ => c.toLong).toArray\n      val hexString = \"0123456789ABCDEF\"\n      val\
    \ hex = hexString.map((c) => c.toLong).toArray\n      val map = new HashMap[Long,\
    \ Long]\n      for (i <- 0 until hexString.length) {\n        map += (hex(i) ->\
    \ i)\n      }\n      var sum = 0\n      for (i <- 0 until num.length) {\n    \
    \    sum += map(num(i))\n      }\n      sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp44mbk5zp.scala:31:12 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        sum += map(num(i))\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        def isPrime(n : Long) : Boolean = n > 1 && !Range(2, n.toInt).exists(x\
    \ => n % x == 0)\n        def isPrimeHexadecimal(c : Char) : Boolean = c >= '2'\
    \ && c <= '9' || c == 'B' || c == 'D'\n        def toLong(c : Char) : Long = c\
    \ match {\n            case 'A' => 10\n            case 'B' => 11\n          \
    \  case 'C' => 12\n            case 'D' => 13\n            case 'E' => 14\n  \
    \          case 'F' => 15\n            case _ => c.toLong - '0'\n        }\n \
    \       def toChar(n : Long) : Char = n match {\n            case 10 => 'A'\n\
    \            case 11 => 'B'\n            case 12 => 'C'\n            case 13 =>\
    \ 'D'\n            case 14 => 'E'\n            case 15 => 'F'\n            case\
    \ _ => (n + '0').toChar\n        }\n        def inc(num : String) : String = {\n\
    \            def inc(s : String, i : Int) : String = if (i < 0) s else {\n   \
    \             if (s(i) < 'F') (s.substring(0, i) + toChar(toLong(s(i)) + 1) +\
    \ s.substring(i + 1)).reverse.padTo(s.length, '0').reverse\n                else\
    \ inc(s, i - 1)\n            }\n            inc(num.reverse.padTo(num.length,\
    \ '0').reverse, num.length - 1)\n        }\n        def toBase10(num : String)\
    \ : Long = {\n            def pow(n : Long, p : Long) : Long = {\n           \
    \     if (p == 0) 1\n                else if (p == 1) n\n                else\
    \ if (p % 2 == 0) pow(n * n, p / 2)\n                else n * pow(n * n, p / 2)\n\
    \            }\n            val base : Long = 16\n            def toBase10(s :\
    \ String, p : Long) : Long = if (s.length == 0) 0 else {\n                toLong(s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx73okc9t.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx73okc9t.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpx73okc9t.scala:57:23 --------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m                toLong(s\n\e[31m\e[31m   |\e[0m               \
    \        ^\e[0m\n\e[31m   |\e[0m                       Found:    (s : String)\n\
    \e[31m   |\e[0m                       Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx73okc9t.scala:68:1 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpx73okc9t.scala:59:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        def toInt(s : String) : Int = {\n            var result = 0\n       \
    \     for (i <- 0 until s.length) result += (s(i) - '0') * pow(10, s.length -\
    \ i - 1).toInt\n            result\n        }\n        def isPrime(n : Int) :\
    \ Boolean = {\n            if (n < 2) return false\n            val sqrtn = math.sqrt(n).toInt\n\
    \            for (i <- 2 to sqrtn if n % i == 0) return false\n            true\n\
    \        }\n        val nums = \"0123456789ABCDEF\"\n        val primes = Map(2\
    \ -> true, 3 -> true, 5 -> true, 7 -> true, 11 -> true, 13 -> true)\n        var\
    \ result = 0L\n        for (i <- 0 until num.length) if (primes.contains(toInt(num(i).toString)))\
    \ result += 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmmchdy0b.scala:39)\n\tat Problem.main(tmpmmchdy0b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        if (num.length == 0) return 0\n        val h = \"0123456789ABCDEF\"\n\
    \        def c2l(c : Char) : Long = h.indexOf(c).toLong\n        def isPrime(n\
    \ : Long) : Boolean = n != 1 && n != 4 && n != 6 && n != 8 && n != 9 && (n ==\
    \ 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17)\n        val\
    \ res = num.map(c2l).filter(isPrime).length\n        return res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \      val dict = Map(\n        '0' -> 0,\n        '1' -> 1,\n        '2' -> 2,\n\
    \        '3' -> 3,\n        '4' -> 4,\n        '5' -> 5,\n        '6' -> 6,\n\
    \        '7' -> 7,\n        '8' -> 8,\n        '9' -> 9,\n        'A' -> 10,\n\
    \        'B' -> 11,\n        'C' -> 12,\n        'D' -> 13,\n        'E' -> 14,\n\
    \        'F' -> 15\n      )\n      dict(num.head)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe2wcgzgi.scala:42)\n\tat Problem.main(tmpe2wcgzgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        num.map(x => if (x.isDigit) x - '0' else x - 'A' + 10).map(pow(16, _)).sum.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoi_zjjew.scala:24)\n\tat Problem.main(tmpoi_zjjew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val base = 16\n        val prime = 2\n        num.map(BigInt(_, base).modPow(prime,\
    \ BigInt(base))).sum\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpx5h6tpyb.scala:23:16 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        num.map(BigInt(_, base).modPow(prime, BigInt(base))).sum\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mBigInt\e\
    [0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\e[31m   |\e\
    [0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String): BigInt\n\e[31m\
    \   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (bitlength:\
    \ Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (signum:\
    \ Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x: Array[Byte]): BigInt\n\
    \e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i: Int): BigInt\n\e[31m  \
    \ |\e[0mmatch arguments ((_$1 : Char), (base : Int))\n1 error found\n"
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the\
    \ output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n\
    \    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num\
    \ = \"2020\" the output should be 2.\n    def hexKey(num : String) : Long = {\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = List(\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\")\n        val h = num.map(x => (hex.indexOf(x.toString)\
    \ + 1).toLong).toList\n        primes.filter(p => h.contains(p)).size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r1lpl56.scala:28)\n\tat Problem.main(tmp0r1lpl56.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821012
