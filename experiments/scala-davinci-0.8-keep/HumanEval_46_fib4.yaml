name: HumanEval_46_fib4
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2)\
  \ -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4(5)\n    //\
  \ 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n    // 14\n    def fib4(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
  \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
  \ == (386l));\n    }\n\n}\n"
completions: ["        var fib4_1 = 0L\n        var fib4_2 = 0L\n        var fib4_3\
    \ = 2L\n        var fib4_4 = 0L\n        var fib4_5 = 0L\n        if (n < 4) return\
    \ fib4_3\n        for (i <- 4L to n) {\n            fib4_5 = fib4_1 + fib4_2 +\
    \ fib4_3 + fib4_4\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n\
    \            fib4_3 = fib4_4\n            fib4_4 = fib4_5\n        }\n       \
    \ fib4_5", "        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        var e = 0L\n        var k = 4L\n        while (k <= n)\
    \ {\n            e = a + b + c + d\n            a = b\n            b = c\n   \
    \         c = d\n            d = e\n            k += 1\n        }\n        return\
    \ e", "        var a = 0L\n        var b = 0L\n        var c = 2L\n        var\
    \ d = 0L\n        var i = 3L\n        while (i <= n) {\n            d = a + b\
    \ + c + d\n            a = b\n            b = c\n            c = d\n         \
    \   i += 1\n        }\n        d", "        // Fill up this function body\n  \
    \      // You may also define any auxiliary functions you need\n\t\tvar count:Long\
    \ = 0;\n\t\tvar n1:Long = 0;\n\t\tvar n2:Long = 0;\n\t\tvar n3:Long = 2;\n\t\t\
    var n4:Long = 0;\n\t\twhile(count < n-1){\n\t\t\tcount = count + 1;\n\t\t\tvar\
    \ temp = n1;\n\t\t\tn1 = n2;\n\t\t\tn2 = n3;\n\t\t\tn3 = n4;\n\t\t\tn4 = temp\
    \ + n1 + n2 + n3;\n\t\t}\n\t\treturn n4;", "        // IMPLEMENT\n        0",
  "        if (n == 0) return 0\n        else if (n == 1) return 0\n        else if\
    \ (n == 2) return 2\n        else if (n == 3) return 0\n        var n2 = 0L\n\
    \        var n1 = 0L\n        var n0 = 2L\n        var n3 = 0L\n        for (i\
    \ <- 4 to n.toInt) {\n            var temp = n0\n            n0 = n0 + n1 + n2\
    \ + n3\n            n3 = n2\n            n2 = n1\n            n1 = temp\n    \
    \    }\n        return n0", "        def fib4Tail(n : Long, a : Long, b : Long,\
    \ c : Long, d : Long) : Long = {\n            if (n == 0) a\n            else\
    \ if (n == 1) b\n            else if (n == 2) c\n            else if (n == 3)\
    \ d\n            else fib4Tail(n - 1, b, c, d, d + c + b + a)\n        }\n   \
    \     fib4Tail(n, 0, 0, 2, 0)", "        if (n == 0) return 0\n        else if\
    \ (n == 1) return 0\n        else if (n == 2) return 2\n        else if (n ==\
    \ 3) return 0\n        var previousPreviousPreviousPrevious = 0l\n        var\
    \ previousPreviousPrevious = 0l\n        var previousPrevious = 2l\n        var\
    \ previous = 0l\n        var current = 0l\n        for (i <- 4l to n) {\n    \
    \        current = previousPreviousPreviousPrevious + previousPreviousPrevious\
    \ + previousPrevious + previous\n            previousPreviousPreviousPrevious\
    \ = previousPreviousPrevious\n            previousPreviousPrevious = previousPrevious\n\
    \            previousPrevious = previous\n            previous = current\n   \
    \     }\n        return current", "      val mod = 1000000007\n      if (n ==\
    \ 0) return 0\n      if (n == 1) return 0\n      if (n == 2) return 2\n      if\
    \ (n == 3) return 0\n      var a = 0L\n      var b = 0L\n      var c = 2L\n  \
    \    var d = 0L\n      for (i <- 0L until n - 3) {\n        val s = (((a + b)\
    \ % mod) + ((c + d) % mod)) % mod\n        a = b\n        b = c\n        c = d\n\
    \        d = s\n      }\n      return d", "        def inner(index : Long, a :\
    \ Long, b : Long, c : Long, d : Long) : Long = {\n            if (index == n)\
    \ a\n            else inner(index + 1, b, c, d, a + b + c + d)\n        }\n  \
    \      inner(4, 0, 0, 2, 0)", "        // fill in here\n        def fib4Helper(n\
    \ : Long, a : Long, b : Long, c : Long, d : Long) : Long = {\n            if (n\
    \ == 0) a\n            else if (n == 1) b\n            else if (n == 2) c\n  \
    \          else if (n == 3) d\n            else fib4Helper(n - 1, b, c, d, a +\
    \ b + c + d)\n        }\n        fib4Helper(n, 0, 0, 2, 0)", "        if (n <\
    \ 4) return n match {\n            case 0 => 0\n            case 1 => 0\n    \
    \        case 2 => 2\n            case 3 => 0\n        }\n        var i = 4\n\
    \        var a = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n\
    \        var t = 0L\n        while (i <= n) {\n            t = a + b + c + d\n\
    \            a = b\n            b = c\n            c = d\n            d = t\n\
    \            i += 1\n        }\n        t", "        // ...\n        val f = new\
    \ Array[Long](n.toInt)\n        if (n == 0) return 0\n        else if (n == 1)\
    \ return 0\n        else if (n == 2) return 2\n        else if (n == 3) return\
    \ 0\n        else {\n            f(0) = 0\n            f(1) = 0\n            f(2)\
    \ = 2\n            f(3) = 0\n            for (i <- 4 to n.toInt - 1) {\n     \
    \           f(i) = f(i - 1) + f(i - 2) + f(i - 3) + f(i - 4)\n            }\n\
    \            return f(n.toInt - 1)\n        }", "        if (n == 0) 0\n     \
    \   else if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n\
    \        else {\n            var x = 0L\n            var y = 0L\n            var\
    \ z = 2L\n            var a = 0L\n            for (i <- 4 to n.toInt) {\n    \
    \            a = x + y + z\n                x = y\n                y = z\n   \
    \             z = a\n            }\n            a\n        }", "        var a\
    \ : Long = 0\n        var b : Long = 0\n        var c : Long = 2\n        var\
    \ d : Long = 0\n        for (i <- 4 to n.toInt) {\n            d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n        }\n        d",
  "    \tif (n == 0) 0\n    \telse if (n == 1) 0\n    \telse if (n == 2) 2\n    \t\
    else if (n == 3) 0\n    \telse {\n    \t\tvar a = 0L\n    \t\tvar b = 0L\n   \
    \ \t\tvar c = 2L\n    \t\tvar d = 0L\n    \t\tfor (i <- 4L to n) {\n    \t\t\t\
    var e = d + a + b + c\n    \t\t\ta = b\n    \t\t\tb = c\n    \t\t\tc = d\n   \
    \ \t\t\td = e\n    \t\t}\n    \t\td\n    \t}", "        var result = 0L\n    \
    \    var previous4 = 0L\n        var previous3 = 0L\n        var previous2 = 2L\n\
    \        var previous1 = 0L\n        for (i <- 4 to n.toInt) {\n            result\
    \ = previous1 + previous2 + previous3 + previous4\n            previous4 = previous3\n\
    \            previous3 = previous2\n            previous2 = previous1\n      \
    \      previous1 = result\n        }\n        result", "        var l0 = 0L\n\
    \        var l1 = 0L\n        var l2 = 2L\n        var l3 = 0L\n        for (i\
    \ <- 3L to n) {\n            val l4 = l0 + l1 + l2 + l3\n            l0 = l1\n\
    \            l1 = l2\n            l2 = l3\n            l3 = l4\n        }\n  \
    \      return l0 + l1 + l2 + l3", "        def fib4(n : Long, a : Long, b : Long,\
    \ c : Long, d : Long) : Long = {\n            if (n <= 2) a\n            else\
    \ fib4(n - 1, a + b + c + d, a, b, c)\n        }\n        fib4(n, 0, 0, 2, 0)",
  "      var i = 1\n      var j = 2\n      var k = 0\n      var l = 0\n      var m\
    \ = 0\n      var result = 2\n      if (n == 0) return 0\n      if (n == 1) return\
    \ 0\n      if (n == 2) return 2\n      if (n == 3) return 0\n      while (n >\
    \ 3) {\n        m = k + j + i + l\n        k = j\n        j = i\n        i = l\n\
    \        l = m\n        n -= 1\n      }\n      m"]
stop_tokens:
- "\n    }\n"
