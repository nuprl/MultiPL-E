name: HumanEval_113_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of strings, where each string consists of only digits, return\
  \ a list.\n    // Each element i of the output should be \"the number of odd elements\
  \ in the\n    // string i of the input.\" where all the i's should be replaced by\
  \ the number\n    // of odd digits in the i'th string of the input.\n    // >>>\
  \ odd_count(['1234567'])\n    // [\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    // [\"the number\
  \ of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the number of odd elements\
  \ 8n the str8ng 8 of the 8nput.\"]\n    def oddCount(lst : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
  1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
  271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
  \    }\n\n}\n"
completions: ["        var oddCounts = List[Int]()\n        for (str <- lst) {\n \
    \           var count = 0\n            for (i <- 0 until str.length) {\n     \
    \           if (str(i) % 2 == 1) count += 1\n            }\n            oddCounts\
    \ = oddCounts :+ count\n        }\n        var strCounts = List[String]()\n  \
    \      for (str <- lst) {\n            var count = 0\n            for (i <- 0\
    \ until str.length) {\n                if (str(i) % 2 == 1) count += 1\n     \
    \       }\n            strCounts = strCounts :+ count.toString\n        }\n  \
    \      var result = List[String]()\n        for (i <- 0 until lst.length) {\n\
    \            var str = lst(i)\n            var oddCountStr = strCounts(i)\n  \
    \          result = result :+ str.replaceAll(oddCountStr, \"n\")\n        }\n\
    \        result", '        return (for (x <- lst) yield "the number of odd elements
    " + x.count(ch => ch % 2 == 1) + "n the str" + x.count(ch => ch % 2 == 1) + "ng
    " + x.count(ch => ch % 2 == 1) + " of the " + x.count(ch => ch % 2 == 1) + "nput.").toList',
  "        val count = lst.map(n => n.filter(m => (m - '0') % 2 == 1).length)\n  \
    \      val countStr = count.map(n => n.toString)\n        countStr.map(n => lst.map(m\
    \ => m.replaceAll(\"\\\\d\", \"4\")).mkString.replaceAll(\"4\", n))", "      \
    \  lst.map(s => {\n            val n = s.count(c => (c - '0') % 2 == 1)\n    \
    \        \"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n\
    \ + \" of the \" + n + \"nput.\"\n        })", "        val n = lst.length\n \
    \       val ans = new Array[String](n)\n        for (i <- 0 until n) {\n     \
    \       var cnt = 0\n            for (j <- 0 until lst(i).length) {\n        \
    \        val c = lst(i)(j)\n                if (c % 2 == 1) cnt += 1\n       \
    \     }\n            val res = new StringBuilder()\n            for (j <- 0 until\
    \ lst(i).length) {\n                val c = lst(i)(j)\n                if (c ==\
    \ '4') res += 'n'\n                else if (c == '1') res += 's'\n           \
    \     else if (c == '2') res += 't'\n                else if (c == '3') res +=\
    \ 'r'\n                else if (c == '5') res += 'g'\n                else if\
    \ (c == '6') res += 'o'\n                else if (c == '7') res += 'f'\n     \
    \           else if (c == '8') res += 't'\n                else if (c == '9')\
    \ res += 'i'\n                else res += c\n            }\n            ans(i)\
    \ = \"the number of odd elements \" + cnt + \"n the \" + res + \" \" + cnt + \"\
    \ of the \" + res + \"nput.\"\n        }\n        ans.toList", "        val nums\
    \ = lst.map { str => str.toInt }\n        val odds = nums.map { num =>\n     \
    \       var tot = 0\n            var remaining = num\n            while (remaining\
    \ > 0) {\n                val digit = remaining % 10\n                if (digit\
    \ % 2 == 1) tot += 1\n                remaining /= 10\n            }\n       \
    \     tot\n        }\n        val strs = odds.map { odd => odd.toString }\n  \
    \      val res = strs.map { str =>\n            var output = new StringBuilder\n\
    \            val n = str.length\n            for (i <- 0 until n) {\n        \
    \        if (str(i) == '4') output += '4'\n                else if (str(i) ==\
    \ '0') output += 'n'\n                else output += str(i)\n            }\n \
    \           output.toString\n        }\n        res", '        lst.map(s => s.count(c
    => c.asDigit % 2 == 1)).map(c => s"the number of odd elements ${c}n the str${c}ng
    ${c} of the ${c}nput.")', "        val str = \"the number of odd elements %dn\
    \ the str%dng %d of the %dnput.\"\n        lst.map(n => str.format(n.filter(_.asDigit\
    \ % 2 == 1).length, n.length, n.length, n.length))", "        lst.map(s => s.filter(c\
    \ => (c - '0') % 2 == 1).length)\n          .map(i => \"the number of odd elements\
    \ \" + i + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\")", " \
    \       var result = new ListBuffer[String]\n        lst.foreach(s => {\n    \
    \        var oddCount = 0\n            s.foreach(c => if (c % 2 == 1) oddCount\
    \ += 1)\n            var r = s.replaceAll(\"4\", oddCount.toString).replaceAll(\"\
    3\", oddCount.toString).replaceAll(\"8\", oddCount.toString).replaceAll(\"1\"\
    , oddCount.toString)\n            result += r\n        })\n        result.toList",
  "        var count = 0\n        var ret = List[String]()\n        for (str <- lst)\
    \ {\n            for (c <- str) {\n                if (c.asDigit % 2 == 1) count\
    \ += 1\n            }\n            ret = ret :+ s\"the number of odd elements\
    \ ${count}n the str${count}ng ${count} of the ${count}nput.\"\n            count\
    \ = 0\n        }\n        ret", "        def recursive(n : Int, c : Char) : Boolean\
    \ = {\n            n.toString.contains(c)\n        }\n        lst.map(s => {\n\
    \            val n = s.map(c => {\n                if (recursive(s.count(_ ==\
    \ c), '1')) 1 else 0\n            }).sum\n            s\"the number of odd elements\
    \ ${n}n the str${n}ng ${n} of the ${n}nput.\"\n        })", "        def oddNum(s\
    \ : String) : Int = {\n            def f(s : String, count : Int) : Int = s match\
    \ {\n                case \"\" => count\n                case _ => if (s.head.toInt\
    \ % 2 == 1) f(s.tail, count + 1) else f(s.tail, count)\n            }\n      \
    \      f(s, 0)\n        }\n        lst.map(oddNum).map(x => \"the number of odd\
    \ elements \" + x + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\"\
    )", "        val s = List(\"the number of odd elements 4n the str4ng 4 of the\
    \ 4nput.\")\n        var result = new ListBuffer[String]()\n        for (str <-\
    \ lst) {\n            var number = 0\n            for (c <- str) {\n         \
    \       if (c.asDigit % 2 == 1) {\n                    number += 1\n         \
    \       }\n            }\n            result += \"the number of odd elements \"\
    \ + number + \"n the str\" + number + \"ng \" + number + \" of the \" + number\
    \ + \"nput.\"\n        }\n        result.toList", "        def f(s : String) :\
    \ String = {\n            var odd = 0\n            for (i <- 0 until s.length)\
    \ {\n                if ((s(i) - '0') % 2 == 1) odd += 1\n            }\n    \
    \        var res = \"the number of odd elements \" + odd + \"n the str\" + odd\
    \ + \"ng \" + odd + \" of the \" + odd + \"nput.\"\n            res\n        }\n\
    \        lst.map(f)", "        val l = lst.map(x => x.toCharArray.toList.map(x\
    \ => x.toString.toInt).filter(x => x % 2 == 1).length)\n        var c = 0\n  \
    \      lst.map(x => {\n            c += 1\n            x.replaceAll(\"\\\\d\"\
    , c.toString)\n        }).zip(l).map(x => x._1.replaceAll(c.toString, l(c - 1).toString))",
  "        val count = lst.map(x => x.toList.map(y => y.asDigit).count(y => y % 2\
    \ == 1))\n        val ans = lst.zip(count).map(x => x._1.replaceAll(\"[0-9]\"\
    , \"4\").replaceAll(\"4\", x._2.toString))\n        ans", "        val res = for\
    \ (s <- lst) yield s.map(x => if (x.asDigit % 2 == 1) '1' else '0').mkString\n\
    \        for (r <- res) yield r.replaceAll(\"0\", \"\").length", "        val\
    \ result = new ArrayBuffer[String]\n        for (str <- lst) {\n            val\
    \ count = str.foldLeft(0)((x,y) => if ((y.toInt - '0'.toInt) % 2 == 1) x + 1 else\
    \ x)\n            result += lst.indexOf(str).toString.replaceAll(\".\", count.toString)\n\
    \        }\n        result.toList", "        val res = new ListBuffer[String]\n\
    \        for (str <- lst) {\n            var odd_cnt = 0\n            for (c <-\
    \ str) {\n                val d = c.asDigit\n                if (d % 2 == 1) odd_cnt\
    \ += 1\n            }\n            val output = str.mkString.replaceAll(\"4\"\
    , odd_cnt.toString)\n            res += output\n        }\n        res.toList"]
stop_tokens:
- "\n    }\n"
