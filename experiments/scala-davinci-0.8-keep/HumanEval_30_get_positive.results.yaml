language: scala
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n      l.filter(_ > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        if (l.isEmpty) Nil\n        else {\n \
    \           val head = l.head\n            if (head < 0) getPositive(l.tail)\n\
    \            else head :: getPositive(l.tail)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9urd1ud3.scala:19)\n\tat Problem.main(tmp9urd1ud3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        if (l.isEmpty) {\n            return l\n\
    \        }\n        if (l.head < 0) {\n            return getPositive(l.tail)\n\
    \        }\n        l.head :: getPositive(l.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n  \
    \  assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));\n\
    \    assert(getPositive((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4otp9ps1.scala:20)\n\tat Problem.main(tmp4otp9ps1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter((x : Long) => (x > 0))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        return l.filter(x => x > 0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n      val b = l.filter(_ > 0)\n      b\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        // 1 2 3 -4 5\n        // 2 3 -4 5\n \
    \       // 2 3 -4\n        // 2 3\n        // 2\n        // 2 4\n        // 2\
    \ 4\n        // 2 4\n        // 2 4\n        // 2 4 5\n        // 2 4 5\n    \
    \    // 2 4 5\n        // 2 4 5\n        // 2 4 5 -1\n        def g(xs : List[Long],\
    \ acc : List[Long]) : List[Long] = {\n            xs match {\n               \
    \ case Nil => acc\n                case x :: tail => {\n                    if\
    \ (x < 0) {\n                        g(tail, acc)\n                    } else\
    \ {\n                        g(tail, x :: acc)\n                    }\n      \
    \          }\n            }\n        }\n        g(l, Nil).reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc10pyph1.scala:40)\n\tat Problem.main(tmpc10pyph1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        var r = List[Long]()\n        for (x <-\
    \ l) {\n            if (x > 0) r ::= x\n        }\n        r.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(_ > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(_ > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        var list = List[Long]()\n        for (i\
    \ <- l) {\n            if (i > 0) list = list :+ i\n        }\n        list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    def getPositive(l :\
    \ List[Long]) : List[Long] = {\n        l.filter(x => x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
    \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
    \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820888
