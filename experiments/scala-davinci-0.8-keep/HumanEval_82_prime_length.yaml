name: HumanEval_82_prime_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns True if the string\n  \
  \  // length is a prime number or False otherwise\n    // Examples\n    // prime_length('Hello')\
  \ == True\n    // prime_length('abcdcba') == True\n    // prime_length('kittens')\
  \ == True\n    // prime_length('orange') == False\n    def primeLength(string :\
  \ String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\"\
  )) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"\
  kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n   \
  \ assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\"))\
  \ == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"\
  Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"\
  HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"\
  gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\"\
  )) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"
completions: ["        def isPrime(number : Int) : Boolean = {\n            if (number\
    \ <= 1) false\n            else if (number == 2) true\n            else !(2 to\
    \ (ceil(sqrt(number)).toInt)).exists(x => number % x == 0)\n        }\n      \
    \  isPrime(string.length)", "        val len = string.length\n        if (len\
    \ < 2) return false\n        for (i <- 2 to (len - 1)) {\n            if (len\
    \ % i == 0) return false\n        }\n        return true", "        val length\
    \ = string.length\n        if (length == 1) return false\n        var divisor\
    \ = 2\n        while (divisor < length) {\n            if (length % divisor ==\
    \ 0) return false\n            divisor += 1\n        }\n        return true",
  "        var n = string.length\n        if (n == 1) return false\n        var sqrtN\
    \ = sqrt(n).toInt\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0)\
    \ return false\n        }\n        return true", "        def isPrime(num : Int)\
    \ : Boolean = {\n            if (num == 1) false\n            else if (num ==\
    \ 2) true\n            else !(2 to (num - 1)).exists(x => num % x == 0)\n    \
    \    }\n        isPrime(string.length)", "        val l = string.length\n    \
    \    if (l <= 1) return false\n        for (i <- 2 to sqrt(l).toInt) if (l % i\
    \ == 0) return false\n        true", "        def isPrime(number : Int) : Boolean\
    \ = {\n            var prime = false\n            if (number == 2) {\n       \
    \         prime = true\n            } else if (number % 2 == 0) {\n          \
    \      prime = false\n            } else {\n                var divisor = 3\n\
    \                prime = true\n                while (divisor < sqrt(number))\
    \ {\n                    if (number % divisor == 0) {\n                      \
    \  prime = false\n                    }\n                    divisor += 2\n  \
    \              }\n            }\n            prime\n        }\n        isPrime(string.length)",
  "        val length = string.length\n        if (length == 2) return true\n    \
    \    for (i <- 2 to length - 1) {\n            if (length % i == 0) return false\n\
    \        }\n        return true", "        var counter = 0\n        for (i <-\
    \ 2 to string.length - 1) {\n            if (string.length % i == 0) counter +=\
    \ 1\n        }\n        if (counter == 0) true else false", '        isPrime(string.length)',
  "        def isPrime(n : Int) : Boolean = n match {\n            case n if n < 2\
    \ => false\n            case n if n == 2 => true\n            case n if n % 2\
    \ == 0 => false\n            case n => {\n                val limit = ceil(sqrt(n)).toInt\n\
    \                Iterator.from(3, 2).takeWhile(_ <= limit).forall(n % _ != 0)\n\
    \            }\n        }\n        isPrime(string.length)", "        def isPrime(n\
    \ : Int) : Boolean = if (n < 2) false else if (n == 2) true else !(2 until n -\
    \ 1).exists(n % _ == 0)\n        isPrime(string.length)", '        string.length.isPrime',
  "        var length = string.length\n        if (length == 2) return true\n    \
    \    for (i <- 2 to (length - 1)) {\n            if (length % i == 0) return false\n\
    \        }\n        return true", "        val length = string.length\n      \
    \  if (length == 1) return false\n        val sqrtLength = sqrt(length)\n    \
    \    val factors = (2 to sqrtLength.toInt).filter(length % _ == 0)\n        if\
    \ (factors.isEmpty) true else false", '        isPrime(string.length)', "    \
    \  val l = string.length\n      if (l < 2) false\n      else if (l == 2) true\n\
    \      else if (l % 2 == 0) false\n      else {\n        val sqrt = sqrt(l).toInt\n\
    \        (3 to sqrt).find(i => l % i == 0) match {\n          case Some(i) =>\
    \ false\n          case None => true\n        }\n      }", "        val x = string.length\n\
    \        if (x <= 1) false\n        else if (x == 2) true\n        else !(2 until\
    \ x).exists(i => x % i == 0)", "        // Your solution here\n        true",
  "        val length = string.length\n        if (length == 2) return true\n    \
    \    for (i <- 2 to sqrt(length).toInt) {\n            if (length % i == 0) return\
    \ false\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
