name: HumanEval_53_add
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Add two numbers x and y\n    // >>> add(2, 3)\n    // 5\n    // >>> add(5,\
  \ 7)\n    // 12\n    def add(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) ==\
  \ (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
  \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
  \    }\n\n}\n"
completions: ['        x + y', '        x + y', "        if (y == 0) x\n        else\
    \ add(x ^ y, (x & y) << 1)", "        // Do a bitwise or of x and y and add their\
    \ carry\n        val carry = (x & y) << 1\n        if (carry == 0) return x |\
    \ y\n        return add(x ^ y, carry)", '        return x + y', '        x + y',
  '        return x + y', '        x + y', "        if (y == 0) return x\n       \
    \ add(x ^ y, (x & y) << 1)", "        // Your code here\n        return x + y",
  "        if (y == 0) return x\n        val sum = x ^ y\n        val carry = (x &\
    \ y) << 1\n        return add(sum, carry)", '        return x + y', '        //
    TODO write your code here', '        return x + y', "        var sum = 0L\n  \
    \      var carry = 0L\n        var x_c = x\n        var y_c = y\n        while\
    \ (x_c != 0 || y_c != 0) {\n            sum = x_c ^ y_c ^ carry\n            carry\
    \ = (x_c & y_c) | (x_c & carry) | (y_c & carry)\n            carry <<= 1\n   \
    \         x_c = sum\n            y_c = carry\n        }\n        return sum",
  '        (x + y)', '        0', "        var sum = x\n        var carry = y\n  \
    \      while (carry != 0) {\n            sum = x ^ y\n            carry = (x &\
    \ y) << 1\n            x = sum\n            y = carry\n        }\n        return\
    \ sum", "        if (y == 0) return x\n        add(x ^ y, (x & y) << 1)", '        x
    + y']
stop_tokens:
- "\n    }\n"
