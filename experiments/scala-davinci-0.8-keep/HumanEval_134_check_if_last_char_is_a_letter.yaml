name: HumanEval_134_check_if_last_char_is_a_letter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns True if the last character\n    // of a given\
  \ string is an alphabetical character and is not\n    // a part of a word, and False\
  \ otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n\
  \    // Examples:\n    // check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n\
  \    // check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n    // check_if_last_char_is_a_letter(\"\
  apple pi e \") \u279E False\n    // check_if_last_char_is_a_letter(\"\") \u279E\
  \ False\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
  apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) ==\
  \ (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  \")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  apple pi e \")) == (false));\n    }\n\n}\n"
completions: ['        return txt.split(" ").last.matches("[a-zA-Z]")', "        val\
    \ n = txt.length\n        if (n == 0) {\n            return false\n        }\n\
    \        var char : Char = txt(n - 1)\n        return char.isLetter && !char.isLetter(txt(n\
    \ - 2))", "        val g = txt.trim().split(\" \").toSeq\n        if (g.length\
    \ == 0) return false\n        if (g.last.length() == 0) return false\n       \
    \ val l = g.last\n        return l.last.isLetter", "        var newTxt = txt.trim()\n\
    \        if (newTxt.last.isLetter == true && newTxt.contains(\" \") == false)\
    \ return true\n        else return false", "        if (txt.last == ' ') false\n\
    \        else txt.last.isLetter", "        if (txt.isEmpty) return false\n   \
    \     val a = txt.split(\" \")\n        val l = a.last\n        if (l.isEmpty)\
    \ return false\n        else if (l.length == 1) return l.head.isLetter\n     \
    \   return !l.head.isLetter", '        if (txt.matches("(.*)(\\s)([a-zA-Z])(.*)"))
    true else false', "        if (txt.isEmpty) {\n            return false\n    \
    \    }\n        txt.trim.last match {\n            case c if ('a' to 'z').contains(c)\
    \ => true\n            case c if ('A' to 'Z').contains(c) => true\n          \
    \  case _ => false\n        }", '        txt.split(" ").last.last.isLetter &&
    txt.length > 0', '        return true', "        txt.charAt(txt.length() - 1).isLetter\
    \ && txt.charAt(txt.length() - 2) == ' '", "        if (txt.length == 0) return\
    \ false\n        else {\n            val lastChar = txt.charAt(txt.length - 1)\n\
    \            if (lastChar >= 'a' && lastChar <= 'z') {\n                if (txt.length\
    \ == 1) return true\n                else {\n                    val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n                    if (secondLastChar == ' ')\
    \ return true\n                    else return false\n                }\n    \
    \        }\n            else return false\n        }", '        ???', "      \
    \  val str = txt.stripMargin\n        if (str.isEmpty) false\n        else str.last.isLetter\
    \ && str.last != ' '", "        if (txt.isEmpty) return false\n        if (txt.last.isLetter\
    \ && !txt.init.last.isLetter) return true\n        false", '        return txt.trim().lastOption.getOrElse("").matches("[a-zA-Z]")',
  "        if (txt.length == 0) return false\n        val words = txt.split(\" \"\
    )\n        val lastWord = words(words.length - 1)\n        val lastCharacter =\
    \ lastWord(lastWord.length - 1)\n        val lastWordIsSpace = words.length ==\
    \ 1\n        val lastCharacterIsAlpha = lastCharacter.isLetter\n        if (lastWordIsSpace)\
    \ false\n        else {\n            if (lastCharacterIsAlpha) true\n        \
    \    else false\n        }", "        if (txt.isEmpty) false\n        else if\
    \ (txt.last == ' ') false\n        else if (txt.last.isLetter) true\n        else\
    \ false", "        var result = false\n        var lastChar = txt.trim.last\n\
    \        if (lastChar.isLetter) {\n            var lastCharIndex = txt.trim.length\
    \ - 1\n            var wordIndex = txt.trim.lastIndexOf(\" \")\n            if\
    \ (wordIndex < lastCharIndex) {\n                result = true\n            }\n\
    \        }\n        return result", "        txt.isEmpty || (txt.last.isLetter\
    \ && !txt.contains(' ' + txt.last))"]
stop_tokens:
- "\n    }\n"
