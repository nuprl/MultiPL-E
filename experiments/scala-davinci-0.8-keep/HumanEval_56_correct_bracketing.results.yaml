language: scala
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n    \t// In Scala, using a List as a stack is really easy.\n    \t// Using\
    \ ListBuffer instead of List allows us to append\n    \t// to the end of the list,\
    \ which is much faster than prepending\n    \t// to the beginning of the list\
    \ with list1 ::: list2.\n    \tval stack = new ListBuffer[Char]\n    \tfor (c\
    \ <- brackets) {\n    \t\tif (c == '<') {\n    \t\t\tstack += c\n    \t\t} else\
    \ {\n    \t\t\tif (stack.isEmpty) {\n    \t\t\t\treturn false\n    \t\t\t} else\
    \ {\n    \t\t\t\tstack.remove(stack.length - 1)\n    \t\t\t}\n    \t\t}\n    \t\
    }\n    \treturn stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var count = 0\n        for (c <- brackets) {\n            if (c\
    \ == '<') count += 1\n            else if (c == '>') count -= 1\n            if\
    \ (count < 0) return false\n        }\n        count == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '<') stack.push(c)\n            else if (stack.isEmpty) return\
    \ false\n            else stack.pop\n        }\n        stack.isEmpty\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      var openBrackets = 0\n      for (b <- brackets) {\n        if (b\
    \ == '<') openBrackets += 1\n        else if (b == '>') openBrackets -= 1\n  \
    \      if (openBrackets < 0) return false\n      }\n      return openBrackets\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '<') stack.push(c)\n            else if (c == '>') {\n   \
    \             if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var balance = 0\n        for (bracket <- brackets) {\n        \
    \    if (bracket == '<') balance += 1\n            else if (bracket == '>') balance\
    \ -= 1\n            if (balance < 0) return false\n        }\n        return balance\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        if (brackets.length % 2 == 1) return false\n        var count =\
    \ 0\n        brackets.foreach(i => {\n            if (i == '<') count += 1\n \
    \           else count -= 1\n            if (count < 0) return false\n       \
    \ })\n        return count == 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var count = 0\n        for (b <- brackets) {\n            if (b\
    \ == '<') count += 1\n            else count -= 1\n            if (count < 0)\
    \ return false\n        }\n        return count == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.count(_ == '<') == brackets.count(_ == '>')\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq4_7qp7g.scala:23)\n\tat Problem.main(tmpq4_7qp7g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def balance(acc : Int, brackets : List[Char]) : Boolean = brackets\
    \ match {\n            case Nil => acc == 0\n            case '<' :: tail => balance(acc\
    \ + 1, tail)\n            case '>' :: tail => acc > 0 && balance(acc - 1, tail)\n\
    \        }\n        balance(0, brackets.toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets(i) == '<') stack.push('<')\n            else if\
    \ (stack.isEmpty) return false\n            else stack.pop\n        }\n      \
    \  return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (b <- brackets) {\n  \
    \          if (b == '<') stack.push(b)\n            else if (stack.isEmpty) return\
    \ false\n            else stack.pop\n        }\n        stack.isEmpty\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var count = 0\n        for (bracket <- brackets) {\n          \
    \  if (bracket == '<') count += 1\n            else count -= 1\n            if\
    \ (count < 0) return false\n        }\n        return count == 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var parentheses = 0\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets(i) == '<') parentheses += 1\n            else parentheses\
    \ -= 1\n            if (parentheses < 0) return false\n        }\n        parentheses\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val stack = new Stack[Char]\n        for (i <- 0 until brackets.length)\
    \ {\n            if (brackets(i) == '<') stack.push('<')\n            else if\
    \ (stack.isEmpty) return false\n            else stack.pop\n        }\n      \
    \  return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var stack = new Stack[Char]\n        for (c <- brackets) {\n  \
    \          if (c == '<') {\n                stack.push(c)\n            } else\
    \ {\n                if (stack.isEmpty) return false\n                stack.pop\n\
    \            }\n        }\n        return stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        var list = ListBuffer[Char]()\n        brackets.foreach(c => {\n\
    \            if (c == '<') list += c\n            else {\n                if (list.size\
    \ > 0) list -= list.last\n                else return false\n            }\n \
    \       })\n        list.size == 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        // nbrackets is the number of brackets in brackets.\n        val\
    \ nbrackets = brackets.length\n        // bracketing is a queue of the brackets\
    \ in brackets.\n        val bracketing = new Queue[Char]\n        // read the\
    \ brackets in brackets one by one.\n        for (bracket <- brackets) {\n    \
    \        bracket match {\n                // if the bracket is a closing bracket,\
    \ check if it has a corresponding opening bracket in bracketing.\n           \
    \     case '>' => if (bracketing.isEmpty || bracketing.dequeue != '<') return\
    \ false\n                // if the bracket is an opening bracket, add it to bracketing.\n\
    \                case '<' => bracketing.enqueue(bracket)\n            }\n    \
    \    }\n        // return True if bracketing is empty and False otherwise.\n \
    \       bracketing.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n      if (brackets.length % 2 != 0) return false\n      val stack = Stack[Char]()\n\
    \      for (i <- 0 until brackets.length) {\n        if (brackets(i) == '<') stack.push('<')\n\
    \        else if (stack.isEmpty) return false\n        else stack.pop\n      }\n\
    \      return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    <\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"\
    ><<>\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        def helper(brackets : String, count : Int) : Boolean = {\n    \
    \        if (brackets.length == 0) count == 0\n            else if (brackets.head\
    \ == '<') helper(brackets.tail, count + 1)\n            else if (brackets.head\
    \ == '>') count > 0 && helper(brackets.tail, count - 1)\n            else helper(brackets.tail,\
    \ count)\n        }\n        helper(brackets, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821072
