name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        def count(n : Long) : Long = {\n            if (n == 1)\n \
    \               2\n            else\n                10 * count(n - 1) - count(n\
    \ - 2)\n        }\n        if (n == 1)\n            2\n        else\n        \
    \    10 * count(n - 1) - count(n - 2)", "        val t = ArrayBuffer.fill(n.toInt\
    \ + 1)(0L)\n        for (i <- 0 to n.toInt) {\n            if (i <= 1) t(i) =\
    \ 1\n            else t(i) = 10 * t(i - 1) - t(i - 2)\n        }\n        t(n.toInt)",
  '        (for (i <- 1 to n.toInt) yield pow(10, i - 1).toLong).sum + 1', "     \
    \   if (n == 1) return 10\n        // If a number starts with 1, then there are\
    \ 9 * 9 * ... * 9 choices for the rest, total 10 ^ (n - 1) - 1.\n        // If\
    \ a number ends with 1, then there are 9 * 9 * ... * 9 choices for the rest, total\
    \ 10 ^ (n - 1) - 1.\n        return (2 * pow(10, n - 1).toLong - 2)", "      \
    \  if (n == 1) return 10\n        var result = BigInt(9)\n        var power =\
    \ BigInt(9)\n        for (i <- 1 until n - 1) {\n            power = power * 10\n\
    \            result = result + power\n        }\n        result = result + BigInt(10).pow(n.toInt\
    \ - 1)\n        result.toLong", "        val dp = Array.ofDim[Long](n.toInt +\
    \ 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   val high = 9 * pow(10, n - 1).toLong\n        val low = pow(10, n - 1).toLong\n\
    \        high + low", "        var nums = new Array[Long](n.toInt + 1)\n     \
    \   nums(1) = 10\n        for (i <- 2 to n.toInt) {\n            nums(i) = 9 *\
    \ pow(10, i - 1).toLong - nums(i - 1)\n        }\n        nums(n.toInt)", "  \
    \      // start with 1, end with 1\n        1 +\n        // start with 1, end\
    \ with 0\n        (n - 1) * pow(10, n - 2).toLong +\n        // start with 0,\
    \ end with 1\n        pow(10, n - 1).toLong", "        var x = 1L;\n        for\
    \ (i <- 2L to n) {\n            x = x * 10 + 1;\n        }\n        val y = pow(10,\
    \ n - 1).toLong;\n        return x - y;", "        // Count the number of numbers\
    \ ending in 1\n        // n - 1 digits + 1 for the 1\n        val endingOnes =\
    \ min(n - 1, 1)\n        // Count the number of numbers starting with 1\n    \
    \    // n - 1 digits + 1 for the 1\n        val startingOnes = min(n - 1, 1)\n\
    \        endingOnes + startingOnes", "        var count = 0L\n        for (i <-\
    \ 1 to 9) {\n            count += pow(10, n - 1).toLong - pow(10, n - 2).toLong\n\
    \        }\n        return count", "        var res = 0l\n        for (i <- 1\
    \ to n) res += pow(10, i - 1).toLong\n        res", "        var result = pow(2,\
    \ n - 1).toLong - 1\n        var i = 1\n        while (i < n - 1) {\n        \
    \    result += pow(2, i).toLong * pow(5, n - i - 1).toLong\n            i += 1\n\
    \        }\n        result", "        if (n == 1) 1\n        else (10 * startsOneEnds(n\
    \ - 1) + 9 * pow(10, n - 2).toLong) % 1000000007", "\tval MOD = 1000000007\n\t\
    def pow2(n : Long) : Long = {\n\t    if (n == 0) 1\n\t    else {\n\t\tval sqrt\
    \ = pow2(n / 2)\n\t\tif (n % 2 == 0) sqrt * sqrt % MOD\n\t\telse sqrt * sqrt *\
    \ 2 % MOD\n\t    }\n\t}\n\tdef pow9(n : Long) : Long = {\n\t    if (n == 0) 1\n\
    \t    else {\n\t\tval sqrt = pow9(n / 2)\n\t\tif (n % 2 == 0) sqrt * sqrt % MOD\n\
    \t\telse sqrt * sqrt * 9 % MOD\n\t    }\n\t}\n\tval nineFact = pow9(n - 1)\n\t\
    val eightFact = pow9(n - 2)\n\tval twoFact = pow2(n - 1)\n\tnineFact + eightFact\
    \ * 2 + eightFact * 2 + twoFact * 2", "        // For example, 4-digit positive\
    \ integers:\n        // (1xxx) + (x1xx) + (xx1x) + (xxx1) = 4 * 999 = 3996\n \
    \       // (2xxx) + (x2xx) + (xx2x) + (xxx2) = 4 * 999 = 3996\n        // ...\n\
    \        // (9xxx) + (x9xx) + (xx9x) + (xxx9) = 4 * 999 = 3996\n        // Sum\
    \ of all of the above = 4 * 999 * 9 = 35964\n        //\n        // (1xxx) + (x1xx)\
    \ + (xx1x) + (xxx1) + (0xxx) + (x0xx) + (xx0x) + (xxx0) = 8 * 99 = 792\n     \
    \   // (2xxx) + (x2xx) + (xx2x) + (xxx2) + (0xxx) + (x0xx) + (xx0x) + (xxx0) =\
    \ 8 * 99 = 792\n        // ...\n        // (9xxx) + (x9xx) + (xx9x) + (xxx9) +\
    \ (0xxx) + (x0xx) + (xx0x) + (xxx0) = 8 * 99 = 792\n        // Sum of all of the\
    \ above = 8 * 99 * 9 = 7128\n        //\n        // (1xxx) + (x1xx) + (xx1x) +\
    \ (xxx1) + (2xxx) + (x2xx) + (xx2x) + (xxx2) + ... + (9xxx) + (x9xx) + (xx9x)\
    \ + (xxx9) + (0xxx) + (x0xx) + (xx0x) + (xxx0) = 35964 + 7128 = 43092\n      \
    \  val f1 = if (n == 1) 1 else if (n == 2) 20 else if (n == 3) 300 else if (n\
    \ == 4) 4000 else if (n == 5) 50000 else if (n == 6) 600000 else if (n == 7) 7000000\
    \ else 80000000L\n        val f2 = if (n == 1) 1 else if (n == 2) 10 else if (n\
    \ == 3) 100", "        def recurse(n : Long, digs : Long) : Long = {\n       \
    \     if (n == 1) digs\n            else recurse(n - 1, (1 + digs) * 10 - (1 <<\
    \ (n - 1)))\n        }\n        recurse(n, 0)", "      if (n == 1) 1\n      else\
    \ 10 * startsOneEnds(n - 1) + pow(10, n - 1).toLong", "        var result = 0L\n\
    \        for (i <- 1 to 9) {\n            val s = (1 to n - 1).map(x => \"9\"\
    ).mkString(\"\")\n            result += s.toLong\n        }\n        result"]
stop_tokens:
- "\n    }\n"
