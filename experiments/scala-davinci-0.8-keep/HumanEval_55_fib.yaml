name: HumanEval_55_fib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    // 55\n    // >>>\
  \ fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    def fib(n : Long) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
  \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
  \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
completions: ["        var memo = scala.collection.mutable.Map[Long, Long]()\n   \
    \     def fib(n : Long) : Long = {\n            if (n <= 2) 1\n            else\
    \ if (memo.contains(n)) memo(n)\n            else {\n                val r = fib(n\
    \ - 1) + fib(n - 2)\n                memo += (n -> r)\n                r\n   \
    \         }\n        }\n        fib(n)", "        if (n == 1) return 1\n     \
    \   if (n == 2) return 1\n        var fib1 = 1L\n        var fib2 = 1L\n     \
    \   var fibn = 0L\n        for (i <- 3 to n) {\n            fibn = fib1 + fib2\n\
    \            fib1 = fib2\n            fib2 = fibn\n        }\n        return fibn",
  "        if (n == 1) 1\n        else if (n == 2) 1\n        else {\n           \
    \ var a = 1l\n            var b = 1l\n            for (i <- 3 to n) {\n      \
    \          val c = a + b\n                a = b\n                b = c\n     \
    \       }\n            b\n        }", "        if (n == 1) return 1\n        else\
    \ if (n == 2) return 1\n        else return fib(n - 1) + fib(n - 2)", "      \
    \  var a = 0L\n        var b = 1L\n        var i = 0L\n        while (i < n) {\n\
    \            val c = a + b\n            a = b\n            b = c\n           \
    \ i += 1\n        }\n        a", '        if (n == 1) 1 else if (n == 2) 1 else
    fib(n - 1) + fib(n - 2)', "        var a = 1L\n        var b = 1L\n        for\
    \ (i <- 3 to n) {\n            val c = a + b\n            a = b\n            b\
    \ = c\n        }\n        b", "        var a : Long = 0\n        var b : Long\
    \ = 1\n        var i : Long = 0\n        while (i < n) {\n            val c :\
    \ Long = a + b\n            a = b\n            b = c\n            i += 1\n   \
    \     }\n        return a", "        var a = 1l\n        var b = 1l\n        var\
    \ i = 1l\n        while (i < n) {\n            val t = a + b\n            a =\
    \ b\n            b = t\n            i += 1\n        }\n        b", "        var\
    \ a : Long = 0\n        var b : Long = 1\n        for (i <- 1 until n) {\n   \
    \         val c = a + b\n            a = b\n            b = c\n        }\n   \
    \     return b", "        var a = 0L\n        var b = 1L\n        var i = 0L\n\
    \        while (i < n) {\n            val c = a + b\n            a = b\n     \
    \       b = c\n            i += 1\n        }\n        a", "    \tif (n == 1) 1\n\
    \    \telse if (n == 2) 1\n    \telse if (n % 2 == 0) pow(fib((n / 2) + 1), 2)\
    \ - pow(fib(n / 2), 2)\n    \telse pow(fib((n + 1) / 2), 2) + pow(fib((n - 1)\
    \ / 2), 2)", "        def add_fib(m : Long, a : Long, b : Long) : Long = {\n \
    \           if (m == 0) a\n            else add_fib(m - 1, b, a + b)\n       \
    \ }\n        add_fib(n, 0, 1)", "        if (n == 1) 1\n        else if (n ==\
    \ 2) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n == 1) return 1\n\
    \        if (n == 2) return 1\n        var prev1 = 1L\n        var prev2 = 1L\n\
    \        var cnt = 2L\n        while (cnt < n) {\n            var next = prev1\
    \ + prev2\n            prev1 = prev2\n            prev2 = next\n            cnt\
    \ += 1\n        }\n        return prev2", "        if (n <= 2) 1\n        else\
    \ fib(n - 1) + fib(n - 2)", "        // >>> fib(8)\n        // 21\n        //\
    \ >>> fib(9)\n        // 34\n        // >>> fib(10)\n        // 55\n        //\
    \ >>> fib(11)\n        // 89\n        // >>> fib(12)\n        // 144\n       \
    \ // >>> fib(13)\n        // 233\n        // >>> fib(14)\n        // 377\n   \
    \     // >>> fib(15)\n        // 610\n        // >>> fib(16)\n        // 987\n\
    \        // >>> fib(17)\n        // 1597\n        // >>> fib(18)\n        // 2584\n\
    \        // >>> fib(19)\n        // 4181\n        // >>> fib(20)\n        // 6765\n\
    \        // >>> fib(21)\n        // 10946\n        // >>> fib(22)\n        //\
    \ 17711\n        // >>> fib(23)\n        // 28657\n        // >>> fib(24)\n  \
    \      // 46368\n        // >>> fib(25)\n        // 75025\n        // >>> fib(26)\n\
    \        // 121393\n        // >>> fib(27)\n        // 196418\n        // >>>\
    \ fib(28)\n        // 317811\n        // >>> fib(29)\n        // 514229\n    \
    \    // >>> fib(30)\n        // 832040\n        // >>> fib(31)\n        // 1346269\n\
    \        // >>> fib(32)\n        // 2178309\n        // >>> fib(33)\n        //\
    \ 3524578\n        // >>> fib(34)\n        // 5702887\n        // >>> fib(35)\n\
    \        // 9227465\n        // >>> fib(36)\n        // 14930352\n        // >>>\
    \ fib(37)\n        // 24157817\n        // >>> fib(38)\n        // 39088169\n\
    \        // >>> fib(39)\n        // 63245986\n        // >>> fib(40)\n       \
    \ // 102334155\n        // >>> fib(41)\n        // 165580141\n        // >>> fib(42)\n\
    \        // 267914296\n        // >>> fib(43)\n        // 433494437\n        //\
    \ >>> fib(44)\n        // 701408733\n        // >>> fib(45)\n        // 11349",
  "        if (n <= 1) return n\n        fib_cache(n)", "        n match {\n     \
    \       case 0 => 0\n            case 1 => 1\n            case _ => {\n      \
    \          var fibs = ArrayBuffer(0L, 1L)\n                for (i <- 2 to n.toInt)\
    \ {\n                    fibs += fibs(i - 1) + fibs(i - 2)\n                }\n\
    \                fibs(n.toInt)\n            }\n        }", "        if (n <= 1)\n\
    \            1\n        else\n            fib(n - 1) + fib(n - 2)"]
stop_tokens:
- "\n    }\n"
