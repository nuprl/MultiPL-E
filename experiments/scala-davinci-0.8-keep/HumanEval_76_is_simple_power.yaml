name: HumanEval_76_is_simple_power
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to write a function that returns true if a number x is a simple\n\
  \    // power of n and false in other cases.\n    // x is a simple power of n if\
  \ n**int=x\n    // For example:\n    // is_simple_power(1, 4) => true\n    // is_simple_power(2,\
  \ 2) => true\n    // is_simple_power(8, 2) => true\n    // is_simple_power(3, 2)\
  \ => false\n    // is_simple_power(3, 1) => false\n    // is_simple_power(5, 3)\
  \ => false\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
  \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n \
  \   assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
  \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
  \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l),\
  \ (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
  \ (12l)) == (true));\n    }\n\n}\n"
completions: ["        var i = 1;\n        while (i <= math.sqrt(x)) {\n         \
    \   if (pow(n, i).toLong == x) return true;\n            i += 1;\n        }\n\
    \        return false;", "        def isPower(x : Long, n : Long) : Boolean =\
    \ x == pow(n, log(x) / log(n)).toLong\n        isPower(x, n) && log(x) / log(n)\
    \ % 1 == 0", "        // Write your code here\n        // Return true or false\
    \ depending on the result\n        if (n == 1) false\n        else {\n       \
    \   val l = log(x) / log(n)\n          l - round(l) == 0\n        }", "      \
    \  // Your code goes here\n        true", "        if (x == 1) true\n        else\
    \ {\n            var z = 1L\n            for (i <- 0 to x.toString.length) {\n\
    \                z *= n\n                if (z == x) return true\n           \
    \ }\n            false\n        }", '        // insert your code here', "    \
    \    if (n == 1) return x == 1\n        var i = 0\n        while (math.pow(n,\
    \ i) <= x) {\n            if (math.pow(n, i) == x) return true\n            i\
    \ += 1\n        }\n        return false", "        if (x == 1) return true\n \
    \       var left = 1\n        var right = x\n        while (left <= right) {\n\
    \            val mid = (left + right) / 2\n            if (mid.toLong == x / mid.toLong\
    \ && mid.toLong == x / mid.toLong && x % mid.toLong == 0) return true\n      \
    \      if (mid.toLong < x / mid.toLong) left = mid + 1\n            else right\
    \ = mid - 1\n        }\n        return false", "        var x_ = x\n        while\
    \ (x_ % n == 0) x_ /= n\n        return x_ == 1", "        if (x == 1) return\
    \ true\n        var i = 1\n        while (i <= x) {\n            if (i == x) return\
    \ true\n            i *= n\n        }\n        return false", "    \tval k = log(x)\
    \ / log(n)\n    \tk == k.toInt", "        if (n == 1) return false\n        var\
    \ count = 0\n        while (count * count <= x) {\n            if (count * count\
    \ == x) return true\n            count += 1\n        }\n        return false",
  "        if (n <= 0) false\n        else if (x == 1) true\n        else if (n >\
    \ x) false\n        else {\n            val xlog = log(x) / log(n)\n         \
    \   val xfloor = floor(xlog)\n            val xceil = ceil(xlog)\n           \
    \ if (xfloor == xceil) true\n            else false\n        }", "        n match\
    \ {\n            case 1 => x == 1\n            case n => (x % n == 0) && isSimplePower(x\
    \ / n, n)\n        }", "        def isSimplePowerHelper(x : Long, n : Long, result\
    \ : Long) : Boolean = {\n            if (result == x) true\n            else if\
    \ (result > x) false\n            else isSimplePowerHelper(x, n, result * n)\n\
    \        }\n        if (x == 0) false\n        else if (n == 0) x == 1\n     \
    \   else if (n == 1) true\n        else isSimplePowerHelper(x, n, n)", "     \
    \   if (n == 1) return x == 1\n        var left = 1L\n        var right = x\n\
    \        while (left <= right) {\n            val mid = (left + right) / 2\n \
    \           val cur = pow(mid, log(x) / log(mid)).toLong\n            if (cur\
    \ == x) return true\n            else if (cur < x) left = mid + 1\n          \
    \  else right = mid - 1\n        }\n        false", "        var power = n\n \
    \       while (power <= x) {\n            if (power == x) return true\n      \
    \      power *= n\n        }\n        return false", "      if (x == 1) return\
    \ true\n      var i = 2L\n      while (i <= x) {\n        var m = 1L\n       \
    \ while (m <= i) {\n          if (pow(n, m) == x) return true\n          m +=\
    \ 1\n        }\n        i += 1\n      }\n      return false", "        // Write\
    \ your code here\n        for (i <- 0 to x.toInt) {\n            if (pow(n, i)\
    \ == x) return true\n        }\n        false", "        val t = log(x)/log(n)\n\
    \        t == math.round(t)"]
stop_tokens:
- "\n    }\n"
