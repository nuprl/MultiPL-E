name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    def unique(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ["        var r:List[Long] = List();\n        for (n <- l) {\n      \
    \      if (!r.contains(n)) {\n                r = r :+ n;\n            }\n   \
    \     }\n        r.sortWith(_ < _);", '        return l.distinct.sorted', '        l.sorted.distinct',
  '        l.distinct.sorted', "        var seen = Set[Long]()\n        return l.filter\
    \ { i =>\n            if (seen(i)) {\n                false\n            } else\
    \ {\n                seen += i\n                true\n            }\n        }",
  "        def uniqueHelper(h : Long, t : List[Long]) : List[Long] = {\n         \
    \   if (t.isEmpty) List(h)\n            else if (h == t.head) uniqueHelper(h,\
    \ t.tail)\n            else h :: uniqueHelper(t.head, t.tail)\n        }\n   \
    \     uniqueHelper(l.head, l.tail)", '        l.distinct.sorted', "        var\
    \ seen = Set[Long]()\n        l.filter(x => !seen(x) && {seen += x; false})",
  "        if (l.isEmpty) List()\n        else {\n            l.head :: unique(l.tail.filter(_\
    \ != l.head))\n        }", "        val sl = l.sorted\n        sl.distinct", '        l.toSet.toList.sorted',
  '        l.distinct.sorted', '        l.toSet.toList.sorted', '        l.toSet.toList.sorted',
  "        val sorted = l.sorted\n        val unique = mutable.Set[Long]()\n     \
    \   for (x <- sorted) if (!unique.contains(x)) unique += x\n        return unique.toList",
  "        var result = List[Long]()\n        for (x <- l) {\n            if (!result.contains(x))\
    \ {\n                result = x :: result\n            }\n        }\n        result.sortWith(_<_)",
  '        return l.sortWith(_ < _).distinct', "        if (l.length == 0) return\
    \ List()\n        var temp = SortedSet[Long]()\n        for (i <- l) temp += i\n\
    \        return temp.toList", "        var m = new HashMap[Long, Int]()\n    \
    \    var r = new ListBuffer[Long]()\n        for (x <- l) {\n            if (!m.contains(x))\
    \ {\n                m += x -> 0\n                r += x\n            }\n    \
    \    }\n        r.sorted.toList", '        l.toSet.toList.sorted']
stop_tokens:
- "\n    }\n"
