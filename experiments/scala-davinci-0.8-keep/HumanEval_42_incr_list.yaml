name: HumanEval_42_incr_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list with elements incremented by 1.\n    // >>> incr_list([1, 2,\
  \ 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n \
  \   // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
  \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
  \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
  \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
  \ 124l.toLong))));\n    }\n\n}\n"
completions: ['        l.map(x => x + 1)', "        var r = List[Long]()\n       \
    \ for (e <- l) {\n            r = (e + 1) :: r\n        }\n        r.reverse",
  "        if (l.isEmpty) List()\n        else l.head + 1 :: incrList(l.tail)", " \
    \       def loop(l : List[Long], result : List[Long]) : List[Long] = {\n     \
    \       if (l.isEmpty) result\n            else loop(l.tail, result :+ (l.head\
    \ + 1))\n        }\n        loop(l, List())", '        l.map(x => x + 1)', '        l.map(e
    => e + 1)', "        val res = for (x <- l) yield x + 1\n        res", '        l.map(x
    => x + 1)', '        l.map((x : Long) => x + 1)', "        var r = List[Long]()\n\
    \        for (e <- l) {\n            r = (e + 1) :: r\n        }\n        r.reverse",
  "        // This problem is so simple I don't need to use recursion.\n        return\
    \ l.map(x => x + 1)", '        l.map(_ + 1)', '        l.map(x => x + 1)', " \
    \       val r = for (x <- l) yield x + 1\n        r", '        l.map(x => x +
    1)', '        l.map((x : Long) => x + 1)', '        l.map(x => x + 1)', "    \
    \    if (l.isEmpty) Nil\n        else l.head + 1 :: incrList(l.tail)", "     \
    \   def helper(result : List[Long], l : List[Long]) : List[Long] = {\n       \
    \     if (l.isEmpty) result\n            else helper(result :+ (l.head + 1), l.tail)\n\
    \        }\n        helper(List(), l)", '        l.map(_ + 1)']
stop_tokens:
- "\n    }\n"
