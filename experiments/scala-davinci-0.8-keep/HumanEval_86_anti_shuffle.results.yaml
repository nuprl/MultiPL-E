language: scala
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        def antiShuffle(s : String,\
    \ i : Int) : String = {\n            if (i == s.length) return \"\"\n        \
    \    if (s(i) == ' ') return \" \" + antiShuffle(s, i + 1)\n            val (word,\
    \ rest) = s.splitAt(i)\n            val (word2, rest2) = rest.span(_ != ' ')\n\
    \            word + word2.sorted + antiShuffle(rest2, 0)\n        }\n        antiShuffle(s,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mhbuac1.scala:28)\n\tat Problem.main(tmp9mhbuac1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var lastWord = 0\n      \
    \  return s.foldLeft(\"\")((res, c) => {\n            if (c == ' ') {\n      \
    \          val newWord = s.substring(lastWord, res.length).toArray.sorted.mkString\n\
    \                lastWord = res.length + 1\n                res + \" \" + newWord\n\
    \            } else {\n                res + c\n            }\n        })\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2rqu78u.scala:27)\n\tat Problem.main(tmpo2rqu78u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x => x.toCharArray.sorted.mkString).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val res = new StringBuilder\n\
    \        for (sub <- s.split(\" \")) {\n            res ++= sub.sorted\n     \
    \       res += ' '\n        }\n        return res.substring(0, res.length - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        def sortWord(word : String)\
    \ : String = {\n            var list = word.toList\n            var buffer = new\
    \ ArrayBuffer[Char]\n            for (i <- 0 until list.length) {\n          \
    \      var minIndex = i\n                for (j <- i + 1 until list.length) {\n\
    \                    if (list(j) < list(minIndex)) minIndex = j\n            \
    \    }\n                buffer += list(minIndex)\n                list = list.updated(minIndex,\
    \ list(i))\n            }\n            buffer.mkString\n        }\n        val\
    \ words = s.split(\" \")\n        var buffer = new ArrayBuffer[String]\n     \
    \   for (word <- words) {\n            if (word.length > 1) buffer += sortWord(word)\n\
    \            else buffer += word\n        }\n        buffer.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        words.map(word => new String(word.toArray.sortWith(_ < _))).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        s.split(\" \").map(word =>\
    \ word.sorted).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var ans = \"\"\n        for\
    \ (ss <- s.split(\" \")) {\n            ans += ss.sorted + \" \"\n        }\n\
    \        ans.trim\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        var ans = \"\"\n        for (word <- words) {\n            val letters\
    \ = word.toCharArray\n            val newWord = letters.sortWith((c1, c2) => c1\
    \ < c2).mkString\n            ans += newWord + \" \"\n        }\n        ans\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5_rbieo2.scala:24)\n\tat Problem.main(tmp5_rbieo2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var a = s.split(\" \")\n\
    \        var b = a.map(x => x.toList)\n        var c = b.map(x => x.sortWith((a,\
    \ b) => a < b))\n        var d = c.map(x => x.mkString)\n        d.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        if (s.length == 0) return\
    \ \"\"\n        val words = s.split(\" \")\n        val result = words.map(x =>\
    \ x.toList.sorted.mkString)\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        s.split(\" \").map(word =>\
    \ word.toList.sorted.mkString).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        def sortString(s : String)\
    \ : String = {\n            s.toCharArray.sorted.mkString\n        }\n       \
    \ val ls = s.split(\" \")\n        var ans = \"\"\n        for (i <- 0 until ls.length)\
    \ {\n            ans += sortString(ls(i))\n            if (i < ls.length - 1)\
    \ ans += \" \"\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var result = new StringBuilder()\n\
    \        for (word <- s.split(\" \")) {\n            var charList = word.toList\n\
    \            charList = charList.sortWith((x, y) => x < y)\n            result.append(charList.mkString)\n\
    \            result.append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyq5novwc.scala:24)\n\tat Problem.main(tmpyq5novwc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.antiShuffle(tmpbq9urgxz.scala:14)\n\tat Problem$.main(tmpbq9urgxz.scala:17)\n\
    \tat Problem.main(tmpbq9urgxz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x => x.toCharArray.sorted.mkString).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        return s.split(\" \").map(x => {\n            if (x.matches(\"[0-9]+\"\
    )) x\n            else x.map(y => {\n                if (y == ' ') y\n       \
    \         else alpha((alpha.indexOf(y) + alpha.length / 2) % alpha.length)\n \
    \           }).mkString\n        }).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc4f42cj4.scala:24)\n\tat Problem.main(tmpc4f42cj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val sorted = s.split(\" \"\
    ).map(word => word.sorted).mkString(\" \")\n        return sorted\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var chars = new Array[String](s.length)\n\
    \        for (i <- 0 until s.length) chars(i) = s(i).toString\n        var words\
    \ = new ArrayBuffer[String]\n        var w = new StringBuilder\n        var answer\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == ' ') {\n                words += w.toString\n                w = new StringBuilder\n\
    \            } else {\n                w += s(i)\n            }\n        }\n \
    \       words += w.toString\n        for (i <- 0 until words.length) {\n     \
    \       var chars = words(i).toArray\n            scala.util.Sorting.quickSort(chars)\n\
    \            for (j <- 0 until chars.length) answer += chars(j)\n            if\
    \ (i != words.length - 1) answer += ' '\n        }\n        answer.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        def f(c : Char) : Int = c.toInt\n\
    \        def g(word : String) : String = word.map(f).sorted.map(_.toChar).mkString\n\
    \        s.split(\" \").map(g).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821133
