language: scala
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.foldLeft(\"\")((accum, string)\
    \ => accum + string)\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        return strings.fold(\"\")((x, y) => x\
    \ + y)\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n      strings.fold(\"\")(_ + _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.foldLeft(\"\")(_ + _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        var concat = \"\"\n        for (string\
    \ <- strings) {\n            concat += string\n        }\n        concat\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.foldLeft(\"\")((a, b) => a + b)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n      if (strings.isEmpty) \"\"\n      else if\
    \ (strings.tail.isEmpty) strings.head\n      else strings.head + concatenate(strings.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        var str : String = \"\"\n        for (string\
    \ <- strings) str += string\n        return str\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        var s = \"\"\n        for (str <- strings)\
    \ {\n            s += str\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        var result = \"\"\n        for (string\
    \ <- strings) result += string\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        if (strings.isEmpty) \"\"\n        else\
    \ {\n            val sb = new StringBuilder\n            for (s <- strings) sb.append(s)\n\
    \            sb.toString\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        if (strings.isEmpty)\n            \"\"\
    \n        else\n            strings.head + concatenate(strings.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.foldLeft(\"\")(_ + _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        var result = \"\"\n        for (s <- strings)\
    \ result += s\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        // Fill in here!\n        var result =\
    \ \"\"\n        for (s <- strings) {\n            result += s\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.foldLeft(\"\")((a, b) => a + b)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        var concatenated : String = \"\"\n   \
    \     strings.foreach(s => concatenated += s)\n        concatenated\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
    \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
    \ : List[String]) : String = {\n        strings.foldLeft(\"\")(_ + _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821010
