name: HumanEval_131_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the product of the odd digits.\n    //\
  \ Return 0 if all digits are even.\n    // For example:\n    // digits(1)  == 1\n\
  \    // digits(4)  == 0\n    // digits(235) == 15\n    def digits(n : Long) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
  \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
  \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
  \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
completions: ["      var prod = 1L\n      for (c <- n.toString.map(_.asDigit)) {\n\
    \        if (c % 2 == 1) prod *= c\n      }\n      return prod", "        var\
    \ r = 1L\n        var x = n\n        while (x > 0) {\n            val d = x %\
    \ 10\n            if (d % 2 == 1) {\n                r *= d\n            }\n \
    \           x /= 10\n        }\n        r", "        var prod = 1l\n        var\
    \ x = n\n        while (x > 0) {\n            val d = x % 10\n            if (d\
    \ % 2 == 1) prod *= d\n            x /= 10\n        }\n        prod", "      \
    \  var list = List[Long]()\n        var x = n\n        while (x > 0) {\n     \
    \       list = (x % 10) :: list\n            x /= 10\n        }\n        list.filter(e\
    \ => e % 2 == 1).foldLeft(1L)((x, y) => x * y)", "        if (n == 0) return 0\n\
    \        val r = n % 10\n        val q = n / 10\n        if (r % 2 == 0) digits(q)\n\
    \        else r * digits(q)", "        var result = 1L\n        var m = n\n  \
    \      while (m > 0) {\n            val digit = m % 10\n            if (digit\
    \ % 2 == 1) {\n                result *= digit\n            }\n            m /=\
    \ 10\n        }\n        result", "        var product = 1L\n        for (c <-\
    \ n.toString) {\n            val digit = c.asDigit\n            if (digit % 2\
    \ == 1) {\n                product *= digit\n            }\n        }\n      \
    \  product", "        var a = 0l\n        var i = n\n        while (i > 0) {\n\
    \            val d = i % 10\n            if (d % 2 == 1) a *= d\n            i\
    \ /= 10\n        }\n        a", "        var num = n\n        var product = 1L\n\
    \        while (num > 0) {\n            val digit = num % 10\n            if (digit\
    \ % 2 == 1) product *= digit\n            num /= 10\n        }\n        product",
  "        val str = n.toString\n        var prod = 1L\n        for (i <- 0 until\
    \ str.length) {\n            if (str(i) % 2 == 1) prod *= str(i).asDigit\n   \
    \     }\n        prod", '        n.toString.toList.map(_.asDigit).filter(_ % 2
    == 1).product', "        if (n == 0) 0\n        else (n % 10 * digits(n / 10)\
    \ / 2).abs", "        if (n < 10) {\n            if (n % 2 == 1) n else 0\n  \
    \      } else {\n            var r = digits(n / 10)\n            if (r == 0) {\n\
    \                if (n % 2 == 1) {\n                    n % 10\n             \
    \   } else {\n                    0\n                }\n            } else {\n\
    \                r * (n % 10)\n            }\n        }", "        var product\
    \ = 1L\n        var nn = n\n        while (nn > 0) {\n            val d = nn %\
    \ 10\n            if (d % 2 == 1) product *= d\n            nn /= 10\n       \
    \ }\n        product", '        return n.toString.map(_.asDigit).filter(_ % 2
    == 1).product', "        var p = 1L\n        var r = n\n        while (r > 0)\
    \ {\n            val d = r % 10\n            if (d % 2 == 1) p *= d\n        \
    \    r /= 10\n        }\n        p", "        var m = n\n        var r = 1L\n\
    \        while (m > 0) {\n            val d = m % 10\n            if (d % 2 ==\
    \ 1) r *= d\n            m /= 10\n        }\n        r", "        var ans = 1L\n\
    \        var tmp = n\n        while (tmp > 0) {\n            val m = tmp % 10\n\
    \            if (m % 2 == 1) ans *= m\n            tmp /= 10\n        }\n    \
    \    ans", "        if (n < 10) n % 2 match {\n            case 0 => 0\n     \
    \       case 1 => n\n        }\n        else n % 10 match {\n            case\
    \ 0 => digits(n / 10)\n            case x => x * digits(n / 10)\n        }", '        n.toString.map(x
    => x.asDigit).foldLeft(1L)((x, y) => if (y % 2 == 1) x * y else x)']
stop_tokens:
- "\n    }\n"
