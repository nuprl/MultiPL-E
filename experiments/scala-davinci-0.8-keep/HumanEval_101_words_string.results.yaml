language: scala
name: HumanEval_101_words_string
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n      // do not\
    \ use the split function\n      // instead, use the foldLeft function\n      s.split(',').toList.map(x\
    \ => x.trim).filter(x => x.length > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqpgwpcb.scala:15)\n\tat Problem.main(tmpcqpgwpcb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        return\
    \ s.split(\"[ ,]+\").toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfad8bvi3.scala:17)\n\tat Problem.main(tmpfad8bvi3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    [\\\\s,]+\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5fwa6q5.scala:17)\n\tat Problem.main(tmpa5fwa6q5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    [,\\\\s]+\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvkpxl22m.scala:17)\n\tat Problem.main(tmpvkpxl22m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    \ |,\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5jugng3e.scala:13)\n\tat Problem.main(tmp5jugng3e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n      s.split(\"\
    [ ,]+\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjj1r6_91.scala:17)\n\tat Problem.main(tmpjj1r6_91.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        return\
    \ s.split(\"[, ]+\").toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0e63cop.scala:17)\n\tat Problem.main(tmpo0e63cop.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        return\
    \ s.split(\"[, ]+\").toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0e63cop.scala:17)\n\tat Problem.main(tmpo0e63cop.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    ,? \").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmipkee2u.scala:16)\n\tat Problem.main(tmpmipkee2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        def toWords(acc\
    \ : List[String], str : String) : List[String] = {\n            if (str.length\
    \ == 0) acc\n            else {\n                val index = str.indexOf(' ')\n\
    \                if (index < 0) toWords(acc :+ str, \"\")\n                else\
    \ toWords(acc :+ str.substring(0, index), str.substring(index + 1))\n        \
    \    }\n        }\n        toWords(List[String](), s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxe416fv.scala:21)\n\tat Problem.main(tmpmxe416fv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        val words\
    \ = new ListBuffer[String]\n        s.split(\" \").foreach(word => word.split(\"\
    ,\").foreach(w => words += w))\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplhzfgov_.scala:19)\n\tat Problem.main(tmplhzfgov_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        val words\
    \ = s.split(\"[,\\\\s]\").toList.filter(s => s != \"\")\n        words\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        var words\
    \ : List[String] = List()\n        for (word <- s.split(\" \")) {\n          \
    \  words = words :+ word\n        }\n        words\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfoznsjol.scala:17)\n\tat Problem.main(tmpfoznsjol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        val words\
    \ = ListBuffer[String]()\n        for (word <- s.split(\"[,\\\\s]+\"))\n     \
    \       words += word\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpatz2s404.scala:20)\n\tat Problem.main(tmpatz2s404.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n    \ts.split(\"\
    \ |,\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5y25y4i.scala:13)\n\tat Problem.main(tmpp5y25y4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        val tokens\
    \ = new StringTokenizer(s, \", \")\n        var words = List[String]()\n     \
    \   while (tokens.hasMoreTokens) {\n            words ::= tokens.nextToken\n \
    \       }\n        words.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi706psuu.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mtokens\e[0m = \e[33mnew\e\
    [0m \e[35mStringTokenizer\e[0m(s, \e[31m\", \"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \         Not found: type StringTokenizer\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659820949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    [, ]+\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkqloce8q.scala:17)\n\tat Problem.main(tmpkqloce8q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        val words\
    \ : Array[String] = s.split(\"[ ,]+\")\n        var res : List[String] = List()\n\
    \        for (w <- words) {\n            res = w :: res\n        }\n        res.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vpbcwum.scala:22)\n\tat Problem.main(tmp1vpbcwum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    \"\"[, ]+\"\"\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfog0i1p6.scala:17)\n\tat Problem.main(tmpfog0i1p6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // words_string(\"Hi, my name is John\") ==\
    \ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    def wordsString(s : String) : List[String] = {\n        s.split(\"\
    [,\\\\s]+\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvkpxl22m.scala:17)\n\tat Problem.main(tmpvkpxl22m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659820951
