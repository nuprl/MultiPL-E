name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n   \
  \ // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val ks = dict.keys.toList\n        if (ks.isEmpty) return false\n\
    \        val bool = ks.head.isUpper\n        ks.foreach(k => if (k.isUpper !=\
    \ bool) return false)\n        true", "        if (dict.isEmpty) false\n     \
    \   else {\n            val a = dict.keys.forall(key => key.exists(char => char.isUpper))\n\
    \            val b = dict.keys.forall(key => key.exists(char => char.isLower))\n\
    \            a || b\n        }", "        val count1 = dict.count { case (k, v)\
    \ => k.matches(\"[a-z]*\") }\n        val count2 = dict.count { case (k, v) =>\
    \ k.matches(\"[A-Z]*\") }\n        return count1 == dict.size || count2 == dict.size",
  "    \tvar uppers = dict.keys.filter(_.forall(_.isUpper))\n    \tvar lowers = dict.keys.filter(_.forall(_.isLower))\n\
    \    \treturn uppers.size == 0 || lowers.size == 0", "        var lower : Boolean\
    \ = false\n        var upper : Boolean = false\n        dict.foreach(x => x._1.matches(\"\
    [a-z]*\") match {\n            case true => lower = true\n            case false\
    \ => upper = true\n        })\n        if (lower == true && upper == true) {\n\
    \            return false\n        } else {\n            return true\n       \
    \ }", "        if (dict.size == 0) return false\n        val first_key = dict.keys.head\n\
    \        if (first_key.head.isLetter) {\n            dict.forall(x => x._1.head.isLower)\n\
    \        } else {\n            dict.forall(x => x._1.head.isUpper)\n        }",
  "        if (dict.isEmpty) return false\n        // check if the key is in uppercase\n\
    \        var flag : Boolean = dict.keys.head.toUpperCase() == dict.keys.head\n\
    \        return dict.forall(entry => {\n            if (flag) {\n            \
    \    entry._1.toUpperCase() == entry._1\n            } else {\n              \
    \  entry._1.toLowerCase() == entry._1\n            }\n        })", '        return
    dict.keys.toList.forall(e => e.toLowerCase == e) || dict.keys.toList.forall(e
    => e.toUpperCase == e)', "        // TODO\n        return true", "    \tval upperCaseSet\
    \ = dict.keys.filter(x => x.toUpperCase == x)\n    \tval lowerCaseSet = dict.keys.filter(x\
    \ => x.toLowerCase == x)\n    \tif (upperCaseSet.size == dict.size || lowerCaseSet.size\
    \ == dict.size) true else false", "        if (dict.isEmpty) return false\n  \
    \      var isLowerCase : Boolean = dict.keys.head.toLowerCase == dict.keys.head\n\
    \        for (key <- dict.keys) {\n            if (isLowerCase && key.toLowerCase\
    \ != key) {\n                return false\n            } else if (!isLowerCase\
    \ && key.toUpperCase != key) {\n                return false\n            }\n\
    \        }\n        return true", '        dict.keys.forall(k => k.toLowerCase
    == k || k.toUpperCase == k)', "        // WIP\n        false", "    \tif (dict.isEmpty)\
    \ return false\n    \tvar lowerFlag = true\n    \tvar upperFlag = true\n    \t\
    for (key <- dict.keys) {\n    \t\tlowerFlag &= key.toLowerCase == key\n    \t\t\
    upperFlag &= key.toUpperCase == key\n    \t}\n    \tlowerFlag | upperFlag", " \
    \       def f(s : String) = s.head.isUpper\n        def g(s : String) = s.head.isLower\n\
    \        val keys = dict.keys.toList\n        if (keys.length == 0) false\n  \
    \      else keys.forall(f) || keys.forall(g)", '        false', "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ if (keys.forall(key => key.toLowerCase == key)) true\n            else if (keys.forall(key\
    \ => key.toUpperCase == key)) true\n            else false\n        }", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ allLowerCase = keys.forall(key => key.toLowerCase == key)\n        val allUpperCase\
    \ = keys.forall(key => key.toUpperCase == key)\n        return allLowerCase ||\
    \ allUpperCase", "        def iter(dict : Map[String,String], lowerCase : Boolean)\
    \ : Boolean = {\n            if (dict.isEmpty) true\n            else if (lowerCase\
    \ && dict.head._1.toLowerCase != dict.head._1) false\n            else if (!lowerCase\
    \ && dict.head._1.toUpperCase != dict.head._1) false\n            else iter(dict.tail,\
    \ lowerCase)\n        }\n        if (dict.isEmpty) false\n        else {\n   \
    \         val first = dict.head._1\n            if (first.toLowerCase == first)\
    \ iter(dict.tail, true)\n            else if (first.toUpperCase == first) iter(dict.tail,\
    \ false)\n            else false\n        }", "        if (dict.size == 0) return\
    \ false\n        val set = Set() ++ dict.keys\n        set.head.head.isLower match\
    \ {\n            case true => set.forall(x => x.head.isLower)\n            case\
    \ false => set.forall(x => x.head.isUpper)\n        }"]
stop_tokens:
- "\n    }\n"
