name: HumanEval_66_digitSum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n   \
  \ // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    // digitSum(\"abcCd\"\
  ) => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"woArBld\") => 131\n\
  \    // digitSum(\"aAaaaXa\") => 153\n    def digitSum(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"))\
  \ == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
  abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
  woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327l));\n    }\n\n}\n"
completions: ["        var n : Long = 0\n        for (c <- s) {\n            if (c.isUpper)\
    \ n += c.toLong\n        }\n        return n", "        var sum : Long = 0\n \
    \       s.toUpperCase.foreach((c : Char) => sum += c.toLong)\n        return sum",
  '        return s.filter(c => isUpper(c)).foldLeft(0L)((a, c) => a + c.toInt)',
  "        var r = 0\n        for (i <- 0 until s.length) {\n            val c = s(i)\n\
    \            if (c >= 'A' && c <= 'Z') r += (c - 'A' + 1)\n        }\n       \
    \ r", "        var sum = 0\n        for (i <- 0 until s.length) {\n          \
    \  if (s(i).isUpper) {\n                sum += s(i).toInt\n            }\n   \
    \     }\n        sum", "        def helper(s : String, acc : Long) : Long = {\n\
    \            if (s.length == 0) return acc\n            else {\n             \
    \   val char = s.charAt(0)\n                if (char >= 'A' && char <= 'Z') return\
    \ helper(s.substring(1), acc + char)\n                else return helper(s.substring(1),\
    \ acc)\n            }\n        }\n        helper(s, 0)", "        s.foldLeft(0L)((a,\
    \ b) => if(b >= 'A' && b <= 'Z') a + b else a)", "        val ascii = 'A'.toInt\n\
    \        val zascii = 'Z'.toInt\n        val Aascii = 'a'.toInt\n        val Zascii\
    \ = 'z'.toInt\n        def checkUpper(c : Char) : Long = {\n            val asciiC\
    \ = c.toInt\n            if (asciiC >= ascii && asciiC <= zascii) asciiC\n   \
    \         else if (asciiC >= Aascii && asciiC <= Zascii) asciiC\n            else\
    \ 0\n        }\n        s.toList.map(checkUpper).sum", "        s.filter(x =>\
    \ x >= 'A' && x <= 'Z').map(x => x.toInt).sum", '        s.foldLeft(0)((sum, ch)
    => sum + (if (ch.isUpper) ch else 0))', "        s.foldLeft(0L)((p,c) => p + (if(c\
    \ >= 'A' && c <= 'Z') c else 0))", "        s.foldLeft(0)((a, c) => a + if (c\
    \ >= 'A' && c <= 'Z') c else 0)", "        val r = new StringBuilder(s.filter(c\
    \ => c.isUpper))\n        r.toString.map(c => c.toLong).sum", "        val codeList\
    \ = s.toList.map(_.toInt)\n        val upperCodeList = codeList.filter(x => x\
    \ >= 65 && x <= 90)\n        val upperCodeSum = upperCodeList.sum\n        upperCodeSum",
  "        // Write your code here\n        0", '        s.filter(_.isUpper).map(_.toLong).sum',
  '        s.filter(Character.isUpperCase(_)).foldLeft(0)((a, b) => a + b.toInt)',
  "        if (s.isEmpty) 0\n        else s.map(x => if (x.isUpper) x.toInt else 0).sum",
  '        s.toUpperCase.map(_.toLong).sum', "        var sum : Long = 0\n       \
    \ s.foreach(c => if (c.isUpper) sum += c.toInt)\n        sum"]
stop_tokens:
- "\n    }\n"
