name: HumanEval_79_decimal_to_binary
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a number in decimal form and your task is to convert it\
  \ to\n    // binary format. The function should return a string, with each character\
  \ representing a binary\n    // number. Each character in the string will be '0'\
  \ or '1'.\n    // There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    // The extra characters are there to help with\
  \ the format.\n    // Examples:\n    // decimal_to_binary(15)   # returns \"db1111db\"\
  \n    // decimal_to_binary(32)   # returns \"db100000db\"\n    def decimalToBinary(decimal\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
  db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
  db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
  \    }\n\n}\n"
completions: ["        def convert(num : Long, list : List[Char]) : List[Char] = {\n\
    \            if (num == 0) {\n                list\n            } else {\n   \
    \             convert(num / 2, list :+ ('0' + (num % 2)).toChar)\n           \
    \ }\n        }\n        val list = convert(decimal, List[Char]()).reverse\n  \
    \      \"db\" + list.mkString + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', '        null', "        // decimal to binary conversion\n        //\
    \ http://www.codecodex.com/wiki/Convert_decimal_number_to_binary_number\n    \
    \    var dividend = decimal\n        var result = \"\"\n        var rem = dividend\
    \ % 2\n        dividend = dividend / 2\n        result = rem.toString + result\n\
    \        while (dividend > 0) {\n            rem = dividend % 2\n            dividend\
    \ = dividend / 2\n            result = rem.toString + result\n        }\n    \
    \    var result2 = \"\"\n        var temp = result\n        for (i <- 0 until\
    \ 8 - result.length) {\n            result2 += \"0\"\n        }\n        result2\
    \ += temp\n        \"db\" + result2 + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        if (decimal\
    \ == 0) \"db\"\n        else {\n            val digit = decimal % 2\n        \
    \    if (digit == 0) \"0\" + decimalToBinary(decimal / 2)\n            else \"\
    1\" + decimalToBinary(decimal / 2)\n        }", '        return "db" + decimal.toBinaryString
    + "db"', "        val str = (1 to 64).map(x => if ((decimal & (1L << (x - 1)))\
    \ > 0) '1' else '0').mkString(\"\")\n        \"db\" + str + \"db\"", "       \
    \ var binary = \"\"\n        var left = decimal\n        while (left > 0) {\n\
    \            binary = (left % 2).toString + binary\n            left /= 2\n  \
    \      }\n        \"db\" + binary + \"db\"", "        val binary = \"db\" + decimal.toBinaryString\
    \ + \"db\"\n        binary", "        var res = new StringBuilder\n        res.append(\"\
    db\")\n        while (decimal > 0) {\n            if (decimal % 2 == 0) res.append(\"\
    0\")\n            else res.append(\"1\")\n            decimal /= 2\n        }\n\
    \        res.append(\"db\")\n        res.reverse.toString", "        def pow2(p\
    \ : Int) : Long = {\n            if (p == 0) 1\n            else pow2(p - 1) *\
    \ 2\n        }\n        val binary = new StringBuilder(\"db\")\n        val (d,\
    \ r) = decimal /% 2\n        if (d == 0) binary += r\n        else binary ++=\
    \ decimalToBinary(d) + r\n        binary += \"db\"\n        binary.toString",
  "        var result = \"db\"\n        var value = decimal\n        while (value\
    \ > 0) {\n            if (value % 2 == 0) result = \"0\" + result\n          \
    \  else result = \"1\" + result\n            value /= 2\n        }\n        result\
    \ += \"db\"\n        result", "        def convert(n : Long, acc : String) : String\
    \ = {\n            if (n == 0) acc\n            else convert(n / 2, acc + (n %\
    \ 2).toString)\n        }\n        \"db\" + convert(decimal, \"\") + \"db\"",
  "        // Your code here.\n        return null;", '        "db" + decimal.toBinaryString
    + "db"', "        var ret = \"\"\n        for (i <- 0 to 64) {\n            val\
    \ pow = pow(2, i).toLong\n            if (decimal >= pow) {\n                ret\
    \ = \"1\" + ret\n                decimal -= pow\n            } else if (ret !=\
    \ \"\") {\n                ret = \"0\" + ret\n            }\n        }\n     \
    \   \"db\" + ret + \"db\"", "        var binary = \"db\"\n        var m = decimal\n\
    \        while (m != 0) {\n            binary += (m % 2).toString\n          \
    \  m /= 2\n        }\n        binary += \"db\"\n        binary.reverse", "   \
    \     // Your code goes here\n        \"\""]
stop_tokens:
- "\n    }\n"
