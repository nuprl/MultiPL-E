name: HumanEval_12_longest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n    // strings of the same length. Return None in case the input\
  \ list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b', 'c'])\n\
  \    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    def longest(strings\
  \ : List[String]) : Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
  \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
  \n}\n"
completions: ["        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x,\
    \ y) => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else {\n            val sorted = strings.sortWith((s1, s2) => s1.length\
    \ > s2.length)\n            Option(sorted.head)\n        }", "        if (strings.length\
    \ == 0) None\n        else Some(strings.sortWith(_.length < _.length).last)",
  "        val maxLen = strings.map(_.length).max\n        strings.find(_.length ==\
    \ maxLen)", "        if (strings.isEmpty) {\n            None\n        } else\
    \ {\n            Some(strings.sortWith(_.length > _.length).head)\n        }",
  "        if (strings.length == 0) None\n        else {\n            val max : (String,\
    \ String) => String = (x, y) => if (x.length > y.length) x else y\n          \
    \  Some(strings.foldLeft(strings(0))(max))\n        }", "        if (strings.length\
    \ == 0) return None\n        var longest = strings(0)\n        strings.foreach(str\
    \ => {\n            if (str.length > longest.length) longest = str\n        })\n\
    \        return Some(longest)", "    \tif (strings.length == 0) None\n    \telse\
    \ Some(strings.maxBy(_.length))", "    \tval sortedStrings = strings.sortWith((s1,\
    \ s2) => s1.length < s2.length)\n    \tif (sortedStrings.isEmpty)\n    \t\tNone\n\
    \    \telse\n    \t\tSome(sortedStrings.last)", "        return strings match\
    \ {\n            case List() => None\n            case List(str) => Some(str)\n\
    \            case List(str1, str2) => if (str1.length >= str2.length) Some(str1)\
    \ else Some(str2)\n            case _ => Some(strings.maxBy(_.length))\n     \
    \   }", "        if (strings.isEmpty) return None\n        strings.maxBy(_.length)",
  "        if (strings.isEmpty) None\n        else {\n            val stringsMap =\
    \ strings.zipWithIndex.toMap\n            val maxLength = strings.maxBy(_.length).length\n\
    \            Some(stringsMap(strings.indexWhere(_.length == maxLength)))\n   \
    \     }", "        if (strings.isEmpty) None\n        else {\n            val\
    \ (longest, _) = strings.foldLeft((strings.head, strings.head.length))((b, a)\
    \ => if (a.length > b._2) (a, a.length) else b)\n            Some(longest)\n \
    \       }", "        if (strings.isEmpty) None\n        else Some(strings.sortWith((a,\
    \ b) => a.length > b.length)(0))", "        strings match {\n            case\
    \ List() => None\n            case _ =>\n                val max = strings.maxBy(_.length)\n\
    \                Some(max)\n        }", "        if (strings.isEmpty) return None\n\
    \        else {\n            var maxLength = strings(0).length\n            var\
    \ maxString = strings(0)\n            for (string <- strings) {\n            \
    \    if (string.length > maxLength) {\n                    maxLength = string.length\n\
    \                    maxString = string\n                }\n            }\n  \
    \          return Some(maxString)\n        }", "        if (strings.isEmpty) None\n\
    \        else Some(strings.sortWith((s1, s2) => s1.length > s2.length)(0))", " \
    \       if (strings.length == 0) None\n        else Some(strings.reduce((x, y)\
    \ => if (x.length > y.length) x else y))", "        var maxlength = 0\n      \
    \  var max = strings(0)\n        for (s <- strings) {\n            if (s.length\
    \ > maxlength) {\n                maxlength = s.length\n                max =\
    \ s\n            }\n        }\n        return Some(max)", "        var max = 0\n\
    \        var ans = \"\"\n        for (str <- strings) {\n            if (str.length\
    \ > max) {\n                max = str.length\n                ans = str\n    \
    \        }\n        }\n        if (ans.length == 0) None else Some(ans)"]
stop_tokens:
- "\n    }\n"
